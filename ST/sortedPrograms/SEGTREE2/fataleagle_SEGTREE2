#include <bits/stdc++.h>
using namespace std;

#define jjs(i, s, x) for (int i = (s); i < int(x); ++i)
#define jjl(i, x) jjs(i, 0, x)
#define ji(x) jjl(i, x)
#define jj(x) jjl(j, x)
#define jk(x) jjl(k, x)
#define jij(a, b) ji(a) jj(b)
#define jij2d(v) jij((v).size(), (v)[i].size())
#define jjdescent(i, s, e) for (int i = (s)-1; i >= int(e); --i)
#define jjrev(i, s) jjdescent(i, s, 0)
#define foreach(x, C) for (auto& x : (C))
#define INF ((int) 1e9+10)
#define LINF ((long long) 1e16)
#define pb push_back
#define mp make_pair

#define rint readInteger
template<typename T>
bool readInteger(T& x)
{
	char c, r = 0, n = 0;
	x = 0;
	while (true)
	{
		c = getchar();
		if (c < 0 && !r)
			return 0;
		else if (c == '-' && !r)
			n = 1;
		else if (c >= '0' && c <= '9')
			x = x * 10 + c - '0', r = 1;
		else if (r)
			break;
	}
	if (n)
		x = -x;
	return 1;
}

template<typename T>
vector<T> readIntegral(int n)
{
	vector<T> ret(n);
	for (int i = 0; i < n; i++)
		readInteger(ret[i]);
	return ret;
}

auto readInts = readIntegral<int>;
auto readLongs = readIntegral<long long>;

template<typename T>
vector<vector<T>> make2d(size_t r, size_t c)
{
	return vector<vector<T>>(r, vector<T>(c));
}

template<typename T>
vector<vector<T>> make2d(size_t r, size_t c, const T& def)
{
	return vector<vector<T>>(r, vector<T>(c, def));
}

template <typename T, T MOD>
struct ModInt
{
	T value;
	ModInt() : value(0)
	{}
	ModInt(T x)
	{
		x %= MOD;
		if (x < 0)
			x += MOD;
		value = x;
	}

public:
	ModInt& operator += (ModInt x)
	{
		value += x.value;
		if (value >= MOD)
			value -= MOD;
		return *this;
	}
	ModInt& operator -= (ModInt x)
	{
		value -= x.value;
		if (value < 0)
			value += MOD;
		return *this;
	}
	ModInt& operator *= (ModInt x)
	{
		value *= x.value;
		value %= MOD;
		return *this;
	}
	ModInt& operator /= (ModInt x)
	{
		x.invert();
		return *this *= x;
	}

	ModInt operator + (ModInt x) const
	{
		ModInt o = *this;
		o += x;
		return o;
	}
	ModInt operator - (ModInt x) const
	{
		ModInt o = *this;
		o -= x;
		return o;
	}
	ModInt operator * (ModInt x) const
	{
		ModInt o = *this;
		o *= x;
		return o;
	}
	ModInt operator / (ModInt x) const
	{
		ModInt o = *this;
		o /= x;
		return o;
	}
	bool operator == (ModInt x) const
	{
		return value == x.value;
	}
	bool operator != (ModInt x) const
	{
		return !(*this == x);
	}

	ModInt operator - () const
	{
		return ModInt(0) - *this;
	}

	ModInt operator ^ (long long x) const
	{
		ModInt ret = 1 % MOD;
		ModInt mul = *this;
		while (x)
		{
			if (x & 1)
				ret *= mul;
			mul *= mul;
			x >>= 1;
		}
		return ret;
	}
	ModInt& operator ^= (long long x)
	{
		return *this = *this ^ x;
	}

private:
	void invert()
	{
		*this ^= MOD-2;
	}
public:
	friend ostream& operator << (ostream& out, const ModInt& x)
	{
		return out << x.value;
	}
};

template<typename T>
using v2d = vector<vector<T>>;

typedef ModInt<long long, 1000000007> mint;
typedef long long ll;
typedef pair<int, int> PII;
typedef vector<PII> VPII;
typedef vector<int> VI;
typedef v2d<int> VVI;
typedef vector<ll> VLL;
typedef v2d<ll> VVLL;
typedef vector<char> VCH;
typedef v2d<char> VVCH;

struct Tree
{
	int left, right, want, can;
	Tree *leftSon, *rightSon;

	~Tree()
	{
		delete leftSon;
		delete rightSon;
	}
};

Tree *init(int left, int right) {
    Tree *currentNode = new Tree;
    currentNode->left = left;
    currentNode->right = right;
    currentNode->leftSon = currentNode->rightSon = nullptr;
    if (left < right) {
        int middle = (left + right) / 2;
        currentNode->leftSon = init(left, middle);
        currentNode->rightSon = init(middle + 1, right);
    }
    return currentNode;
}

int readWants(Tree *t)
{
	int ret = 1;
	if (t->leftSon)
		ret &= readWants(t->leftSon);
	rint(t->want);
	// t->want = rand() % 2;
	t->can = t->want;
	if (t->rightSon)
		ret &= readWants(t->rightSon);
	if (!t->want && t->leftSon && (t->leftSon->want || t->rightSon->want))
		ret = 0;

	// if (ret == 0) {
	// 	t->want = 1;
	// 	ret = 1;
	// }

	return ret;
}

int anyChild(Tree *t)
{
	int ret = 0;
	if (t->leftSon) ret |= t->leftSon->want;
	if (t->rightSon) ret |= t->rightSon->want;
	return ret;
}

void handleLikeRightNotAll(Tree *t);

bool handleFromLeft(Tree *t)
{
	assert(t->can);
	if (!anyChild(t)) {
		t->want = 0;
		return true;
	}
	if (t->leftSon->can) {
		if (handleFromLeft(t->leftSon)) {
			if (t->rightSon->want) {
				handleLikeRightNotAll(t->rightSon);
			}
		}
		t->want = anyChild(t);
	}
	return false;
}

void handleLikeRightNotAll(Tree *t)
{
	assert(t->want);
	if (!t->leftSon)
		return;
	if (!t->leftSon->can)
		return;
	if (handleFromLeft(t->leftSon)) {
		if (t->rightSon->want)
			handleLikeRightNotAll(t->rightSon);
	}
	t->want = anyChild(t);
}

pair<bool, bool> handleLikeRoot(Tree *t)
{
	assert(t->want);
	if (!anyChild(t)) {
		t->want = 0;
		return {true, true};
	}
	if (t->leftSon->want) {
		auto pr = handleLikeRoot(t->leftSon);
		int ret = 0;
		if (pr.second) {
			if (t->rightSon->want) {
				if (pr.first)
					handleLikeRightNotAll(t->rightSon);
				else
					ret = handleFromLeft(t->rightSon);
			}
		}
		t->want = anyChild(t);
		return {pr.first, ret};
	} else {
		bool ret = handleLikeRoot(t->rightSon).second;
		t->want = anyChild(t);
		return {false, ret};
	}
}

int main()
{
	int T;
	rint(T);
	while (T--) {
		int N;
		rint(N);
		Tree *root = init(1, N);
		int q = readWants(root);
		if (q == 0) {
			printf("%d\n", -1);
		} else {
			int ans = 0;
			while (root->want)
				handleLikeRoot(root), ++ans;
			printf("%d\n", ans);
		}
		delete root;
	}
}
