#include <bits/stdc++.h>

using namespace std;

const int MOD=1000000007;
int N, M, L, R;

int gcd(int a, int b)
{
    if(b==0)
        return a;
    return gcd(b, a%b);
}

int lcm(int a, int b)
{
    return a/gcd(a, b)*b;
}

int powmod(int b, int e)
{
    int ret=1;
    while(e)
    {
        if(e&1)
            ret=(1LL*ret*b)%MOD;
        b=(1LL*b*b)%MOD;
        e/=2;
    }
    return ret;
}

int div_by_x(int x)
{
    return M/x;
}

int not_div_by_x(int x)
{
    return M-div_by_x(x);
}

int not_div_by_any(vector<int> v)
{
    int n=v.size();
    int ret=0;
    for(int i=1; i<(1<<n); i++)
    {
        int l=0;
        for(int j=0; j<n; j++)
            if((i>>j)&1)
            {
                if(l==0)
                    l=v[j];
                else
                    l=lcm(l, v[j]);
            }
        ret+=(__builtin_popcount(i)&1?1:-1)*not_div_by_x(l);
    }
    return ret;
}

int work(int D)
{
    // how many arrays of length N do NOT have lcm divisible by D
    // -> at least one of prime powers of each is < something
    //+no2, +no5, -no2and5
    //M-M/2 M-M/5 M-M/10
    //5  1 3 5 7 9
    //8  1 2 3 4 6 7 8 9
    //9  1 2 3 4 5 6 7 8 9
    //neither divisible by 5 nor 2: 1 3 7 9
    //5^N + 8^N - 4^N
    vector<int> v;
    for(int i=2; i*i<=D; i++)
    {
        int cnt=1;
        while(D%i==0)
        {
            cnt*=i;
            D/=i;
        }
        if(cnt!=1)
            v.push_back(cnt);
    }
    if(D>1)
        v.push_back(D);
    int n=v.size();
    int ret=0;
    for(int i=1; i<(1<<n); i++)
    {
        vector<int> tmp;
        for(int j=0; j<n; j++)
            if((i>>j)&1)
                tmp.push_back(v[j]);
        if(__builtin_popcount(i)&1)
        {
            ret+=powmod(not_div_by_any(tmp), N);
            if(ret>=MOD)
                ret-=MOD;
        }
        else
        {
            ret-=powmod(not_div_by_any(tmp), N);
            if(ret<0)
                ret+=MOD;
        }
    }
    return (powmod(M, N)-ret+MOD)%MOD;
}

void solve()
{
    scanf("%d%d%d%d", &N, &M, &L, &R);
    int ans=0;
    for(int i=L; i<=R; i++)
        ans=(ans+work(i))%MOD;
    printf("%d\n", ans);
}

int main()
{
    int T;
    scanf("%d", &T);
    while(T--)
        solve();
    return 0;
}
