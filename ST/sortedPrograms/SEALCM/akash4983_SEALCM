#include <cstdio>
#include <cmath>
#include <iostream>
#include <set>
#include <algorithm>
#include <vector>
#include <map>
#include <cassert>
#include <string>
#include <cstring>
#include <queue>

using namespace std;

#define rep(i,a,b) for(int i = a; i < b; i++)
#define S(x) scanf("%d",&x)
#define S2(x,y) scanf("%d%d",&x,&y)
#define P(x) printf("%d\n",x)
#define all(v) v.begin(),v.end()

typedef long long int LL;
typedef pair<int, int > pii;
typedef vector<int > vi;

vector<int > factors;
const int mod = 1000000007;


LL _pow(LL a, LL b) {
	if(!b) return 1;
	if(b == 1) return a;
	if(b == 2) return a * a % mod;
	if(b & 1) {
		return a * _pow(a,b-1) % mod;
	}
	return _pow(_pow(a,b/2),2);
}

int lcm(int x, int y) {

	return x * y / __gcd(x,y);

}

int numbers(int m, int mask) {

	vector<int > v;
	rep(i,0,factors.size()) if((mask>>i)&1) {
		v.push_back(factors[i]);
	}

	int res = m;
	int sz = v.size();
	// P(sz);
	rep(i,1,1<<sz) {
		int sign = 1;
		int l = 1;
		rep(j,0,sz) if((i>>j)&1) {
			l = lcm(l, v[j]);
			sign *= -1;
		}
		res += sign * (m / l);
	}

	return res;

}

int main() {
	int t;
	S(t);
	while(t--) {
		int n,m,l,r;
		scanf("%d%d%d%d",&n,&m,&l,&r);
		
		LL ans = 0;
		rep(i,l,r+1) {

			LL tmp = _pow(m, n);
			factors.clear();
			int x = i;
			for(int j = 2; j * j <= x; j++) if(x % j == 0) {
				int y = 1;
				while(x % j == 0) {
					x /= j;
					y *= j;
				}
				factors.push_back(y);
			}
			if(x > 1) {
				factors.push_back(x);
			}

			int sz = factors.size();

			rep(j,1,1<<sz) {
				int sign = 1;
				if(__builtin_popcount(j) & 1) {
					sign = -1;
				}
				// P(j);
				// P(numbers(m,j));
				tmp += sign * _pow(numbers(m,j),n);
			}
			ans += tmp;
		}
		ans %= mod;
		ans += mod;
		ans %= mod;
		printf("%lld\n",ans);
	}
	return 0;
}
