#include <iostream>
#include <vector>
#include <math.h>
#include <algorithm>
#include <set>
#include <queue>
#include <memory.h>

using namespace std;

const long long mod = 1e9 + 7;

bool isPrime(int x) {
    if (x < 2) return 0;
    if (x < 4) return 1;
    if (x % 2 == 0) return 0;
    int d = 3;
    while (d * d <= x) {
        if (x % d == 0) return 0;
        d += 2;
    }
    return 1;
}
long long bin_pow(int o, int step) {
    if (step == 0) return 1 % mod;
    if (step == 1) return o % mod;
    long long d = bin_pow(o, step / 2);
    d = (d * d) % mod;
    if (step % 2 == 1)
        d = (d * o) % mod;
    return d;
}
long long HOW_MANY(int n, int m, int d) {
    int a = 0;
    for(int i = 1; i <= m; ++i)
    if (i % d != 0)
        a++;
    return (bin_pow(m, n) - bin_pow(a, n) + mod) % mod;
}
long long HOW_MANY(int n, int m, int d1, int d2) {
    int a = 0;
    for(int i = 1; i <= m; ++i)
        if (i % d1 != 0 && i % d2 != 0)
            a++;
    return (bin_pow(m, n) - bin_pow(a, n) + mod) % mod;
}
long long HOW_MANY(int n, int m, int d1, int d2, int d3) {
    int a = 0;
    for(int i = 1; i <= m; ++i)
        if (i % d1 != 0 && i % d2 != 0 && i % d3 != 0)
            a++;
    return (bin_pow(m, n) - bin_pow(a, n) + mod) % mod;
}
long long HOW_MANY(int n, int m, int d1, int d2, int d3, int d4) {
    int a = 0;
    for(int i = 1; i <= m; ++i)
        if (i % d1 != 0 && i % d2 != 0 && i % d3 != 0 && i % d4 != 0)
            a++;
    return (bin_pow(m, n) - bin_pow(a, n) + mod) % mod;
}

long long f(int n, int m, int l) {
    vector<int> v;
    
    for(int d = 2; d <= l; ++d)
    if (isPrime(d) && l % d == 0) {
        int cnt = 1;
        while (l % d == 0) {
            l /= d;
            cnt *= d;
        }
        
        v.push_back(cnt);
    }
    
    if (v.size() == 0)
        v.push_back(1);
    
    long long res = 0;
    
    if (v.size() == 1) {
        res = HOW_MANY(n, m, v[0]);
    }
    else if (v.size() == 2) {
        res = HOW_MANY(n, m, v[0]);
        res += HOW_MANY(n, m, v[1]); res %= mod;
        res -= HOW_MANY(n, m, v[0], v[1]); res %= mod; res += mod; res %= mod;
    }
    else if (v.size() == 3) {
        res = HOW_MANY(n, m, v[0]);
        res += HOW_MANY(n, m, v[1]); res %= mod;
        res += HOW_MANY(n, m, v[2]); res %= mod;
        
        res -= HOW_MANY(n, m, v[0], v[1]); res %= mod; res += mod; res %= mod;
        res -= HOW_MANY(n, m, v[0], v[2]); res %= mod; res += mod; res %= mod;
        res -= HOW_MANY(n, m, v[1], v[2]); res %= mod; res += mod; res %= mod;
        
        res += HOW_MANY(n, m, v[0], v[1], v[2]); res %= mod;
    }
    else if (v.size() == 4) {
        res = HOW_MANY(n, m, v[0]);
        res += HOW_MANY(n, m, v[1]); res %= mod;
        res += HOW_MANY(n, m, v[2]); res %= mod;
        res += HOW_MANY(n, m, v[3]); res %= mod;
        
        res -= HOW_MANY(n, m, v[0], v[1]); res %= mod; res += mod; res %= mod;
        res -= HOW_MANY(n, m, v[0], v[2]); res %= mod; res += mod; res %= mod;
        res -= HOW_MANY(n, m, v[0], v[3]); res %= mod; res += mod; res %= mod;
        res -= HOW_MANY(n, m, v[1], v[2]); res %= mod; res += mod; res %= mod;
        res -= HOW_MANY(n, m, v[1], v[3]); res %= mod; res += mod; res %= mod;
        res -= HOW_MANY(n, m, v[2], v[3]); res %= mod; res += mod; res %= mod;
        
        res += HOW_MANY(n, m, v[0], v[1], v[2]); res %= mod;
        res += HOW_MANY(n, m, v[0], v[1], v[3]); res %= mod;
        res += HOW_MANY(n, m, v[0], v[2], v[3]); res %= mod;
        res += HOW_MANY(n, m, v[1], v[2], v[3]); res %= mod;
        
        res -= HOW_MANY(n, m, v[0], v[1], v[2], v[3]); res %= mod; res += mod; res %= mod;
    }
    else
        exit(-1);
    return res;
}

int main() {
    ios::sync_with_stdio(0);
    int t;
    cin >> t;
    int n, m, l, r;
    while(t --> 0) {
        cin >> n >> m >> l >> r;
        int ans = 0;
        for(int i = l; i <= r; ++i) {
            ans += f(n, m, i); ans %= mod;
        }
        
        cout << ans << "\n";
    }
    return 0;
}
