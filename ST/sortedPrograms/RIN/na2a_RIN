#include <bits/stdc++.h>

#define llong long long

#define pb push_back
#define mp make_pair

#define sqr(x) ((x) * (x))

using namespace std;

const int MXN = (int) 123 + 7;
const int INF = (int) 1e9 + 7;

int n, m, k;
int dp[MXN][MXN], mx[MXN][MXN], cost[MXN][MXN];

vector<int> g[MXN];

bool u[MXN];

void dfs(int v) {
    u[v] = true;
    for (int i = 0; i < g[v].size(); i++) dfs(g[v][i]);
    for (int cur = 1; cur <= m; cur++) {
        dp[v][cur] = cost[v][cur];
        bool fail = false;
        for (int i = 0; i < g[v].size(); i++) {
            dp[v][cur] += mx[g[v][i]][cur + 1];
            if (mx[g[v][i]][cur + 1] == -INF) fail = true;
        }
        if (fail || cost[v][cur] == -INF) dp[v][cur] = -INF;
    }
    mx[v][m + 1] = -INF;
    for (int i = m; i >= 1; i--)
        mx[v][i] = max(mx[v][i + 1], dp[v][i]);
}

int main() {
    //freopen("out.txt", "r", stdin);
    scanf("%d%d%d", &n, &m, &k);
    for (int i = 1; i <= n; i++) {
        for (int j = 1; j <= m; j++) {
            scanf("%d", &cost[i][j]);
            if (cost[i][j] < 0) cost[i][j] = -INF;
        }
    }
    for (int i = 1; i <= k; i++) {
        int a, b;
        scanf("%d%d", &a, &b);
        g[a].pb(b);
    }
    int sum = 0;
    for (int i = 1; i <= n; i++) {
        if (!u[i]) {
            dfs(i);
            assert(mx[i][1] >= 0);
            sum += mx[i][1];
        }
    }
    printf("%.2f", (double)sum / n);
    return 0;
}
