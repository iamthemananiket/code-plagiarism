#include <bits/stdc++.h>
// iostream is too mainstream
#include <cstdio>
// bitch please
#include <iostream>
#include <algorithm>
#include <cstdlib>
#include <vector>
#include <set>
#include <map>
#include <queue>
#include <stack>
#include <list>
#include <cmath>
#include <iomanip>
#include <time.h>
#define dibs reserve
#define OVER9000 1234567890
#define ALL_THE(CAKE,LIE) for(auto LIE =CAKE.begin(); LIE != CAKE.end(); LIE++)
#define tisic 47
#define soclose 1e-8
#define chocolate win
// so much chocolate
#define patkan 9
#define ff first
#define ss second
#define abs(x) ((x < 0)?-(x):x)
#define uint unsigned int
#define dbl long double
#define pi 3.14159265358979323846
using namespace std;
// mylittledoge

#ifdef DONLINE_JUDGE
	// palindromic tree is better than splay tree!
	#define lld I64d
#endif

int main() {
	cin.sync_with_stdio(0);
	cin.tie(0);
	cout << fixed << setprecision(10);
	int N,M;
	cin >> N >> M;
	vector<string> V(N);
	int sx =0, sy =0;
	for(int i =0; i < N; i++) {
		cin >> V[i];
		for(int j =0; j < M; j++) if(V[i][j] == 'C') sx =j, sy =i;
		}
	
	int dx[] ={0,0,1,-1};
	int dy[] ={-1,1,0,0};
	string dir ="UDRL";
	vector<string> optc(N);
	for(int i =0; i < N; i++) for(int j =0; j < M; j++) optc[i] +='.';
	for(int k =0; k < N*M; k++) for(int i =0; i < N; i++) for(int j =0; j < M; j++)
		if(optc[i][j] == '.' && V[i][j] != '*') for(int a =0; a < 4; a++) {
			int x2 =j+dx[a], y2 =i+dy[a];
			if(x2 < 0 || y2 < 0 || x2 >= M || y2 >= N) continue;
			if(optc[y2][x2] != '.' || (y2 == sy && x2 == sx)) {optc[i][j] =dir[a]; break;}
			}

	string ans;
	vector< pair<int,int> > pos;
	for(int i =0; i < N; i++) for(int j =0; j < M; j++) 
		if(V[i][j] == '.') pos.push_back(make_pair(i,j));
	while(!pos.empty()) {
		vector<int> com;
		int x =pos.back().ss, y =pos.back().ff;
		while(x != sx || y != sy) {
			for(int k =0; k < 4; k++) if(dir[k] == optc[y][x]) {
				com.push_back(k);
				x +=dx[k];
				y +=dy[k];
				ans +=dir[k];
				break;}
			}
		vector< pair<int,int> > pos_nw;
		ALL_THE(pos,it) {
			x =it->ss, y =it->ff;
			for(int i =0; i < (int)com.size(); i++) {
				x +=dx[com[i]];
				y +=dy[com[i]];
				if(x < 0 || y < 0 || x >= M || y >= N || V[y][x] == '*') {
					x -=dx[com[i]];
					y -=dy[com[i]];}
				if(x == sx && y == sy) break;}
			if(x != sx || y != sy) pos_nw.push_back(make_pair(y,x));}
		pos =pos_nw;
		}
	cout << ans << "\n";
	return 0;}

// look at my code
// my code is amazing
