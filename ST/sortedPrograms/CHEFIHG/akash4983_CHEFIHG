#include <cstdio>
#include <cmath>
#include <iostream>
#include <set>
#include <algorithm>
#include <vector>
#include <map>
#include <cassert>
#include <string>
#include <cstring>
#include <queue>

using namespace std;

#define rep(i,a,b) for(int i = a; i < b; i++)
#define S(x) scanf("%d",&x)
#define S2(x,y) scanf("%d%d",&x,&y)
#define P(x) printf("%d\n",x)
#define all(v) v.begin(),v.end()
#define FF first
#define SS second

typedef long long int LL;
typedef pair<int, int > pii;
typedef vector<int > vi;

char dir[4] = {'U', 'L', 'R', 'D'};
char revDir[4] = {'D', 'R', 'L', 'U'};
int dx[4] = {-1, 0, 0, +1};
int dy[4] = {0, -1, +1, 0};
int idx[255];

queue<pii > q;
char vis[22][22];
string path[22][22];
string s[22];

string findPath(int x, int y) {
  string res = "";
  while(vis[x][y] != '#') {
    res += vis[x][y];
    int xx = dx[idx[vis[x][y]]];
    int yy = dy[idx[vis[x][y]]];
    x += xx;
    y += yy;
  }
  return res;
}

pii findCur(int x, int y, string &t) {
  rep(i,0,t.size()) {
    int xx = dx[idx[t[i]]];
    int yy = dy[idx[t[i]]];
    if(s[x + xx][y + yy] == '*') continue;
    x += xx;
    y += yy;
  }
  return make_pair(x,y);
}

int main() {

  idx['U'] = 0;
  idx['L'] = 1;
  idx['R'] = 2;
  idx['D'] = 3;

  int n,m;
  S2(n,m);
  rep(i,0,n) {
    cin >> s[i];
  }

  rep(i,0,n) rep(j,0,m) vis[i][j] = '#';

  rep(i,0,n) rep(j,0,m) if(s[i][j] == 'C') {
    q.push(make_pair(i,j));
    while(q.size()) {
      pii p = q.front();
      q.pop();
      int x = p.FF;
      int y = p.SS;

      rep(k,0,4) {
        int a = x + dx[k];
        int b = y + dy[k];
        if(vis[a][b] != '#' || s[a][b] != '.') continue;
        vis[a][b] = revDir[k];
        q.push(make_pair(a,b));
      }
    }
  }

  string ans;
  rep(i,0,n) rep(j,0,m) if(s[i][j] == '.') {
    path[i][j] = findPath(i,j);
    // cout << path[i][j] << "\n";
  }

  rep(i,0,n) rep(j,0,m) if(s[i][j] == '.') {
    pii p = findCur(i,j,ans);
    ans += path[p.FF][p.SS];
  }
  cout << ans << "\n";

  return 0;
}