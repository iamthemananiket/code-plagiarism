#include <iostream>
#include <queue>

using namespace std;

const char ir[4] = {'R','D','L','U'};
const int dx[4] = {0,1,0,-1};
const int dy[4] = {1,0,-1,0};

int n,m;
bool t[22][22];
int cx,cy;

int d[22][22];
bool el[22][22];
int a[22][22];
queue<pair<int,int> > sor;

int l[100000], lv;

int main()
{
    ios::sync_with_stdio(0);
    cin >> n >> m;
    for(int i=1; i<=n; i++) {
        for(int j=1; j<=m; j++) {
            char c; cin >> c;
            if(c=='*') {
                t[i][j] = 1;
            } else {
                t[i][j] = 0;
                if(c=='C') {
                    cx = i; cy = j;
                }
            }
        }
    }

    for(int i=0; i<=n+1; i++) t[i][0] = t[i][m+1] = 1;
    for(int i=0; i<=m+1; i++) t[0][i] = t[n+1][i] = 1;

    el[cx][cy] = 1;
    sor.push({cx,cy});
    while(!sor.empty()) {
        int x = sor.front().first,
            y = sor.front().second;
        sor.pop();

        for(int i=0; i<4; i++) {
            if(t[x-dx[i]][y-dy[i]]) continue;
            if(el[x-dx[i]][y-dy[i]]) continue;
            el[x-dx[i]][y-dy[i]] = 1;
            d[x-dx[i]][y-dy[i]] = d[x][y]+1;
            a[x-dx[i]][y-dy[i]] = i;

            sor.push({x-dx[i],y-dy[i]});
        }
    }

    for(int i=1; i<=n; i++) {
        for(int j=1; j<=m; j++) {
            if(t[i][j]) continue;
            if((cx==i) && (cy==j)) continue;

            bool eler(0);
            int x = i, y = j;
            for(int k=0; k<lv; k++) {
                if(t[x+dx[l[k]]][y+dy[l[k]]]) continue;
                x += dx[l[k]];
                y += dy[l[k]];
                if((x==cx) && (y==cy)) eler = 1;
            }

            if(!eler) {
                while((x!=cx) || (y!=cy)) {
                    l[lv++] = a[x][y];
                    int xx = x;
                    x += dx[a[x][y]];
                    y += dy[a[xx][y]];
                }
            }
        }
    }

    for(int i=0; i<lv; i++) cout << ir[l[i]];
    cout << endl;

    return 0;
}
