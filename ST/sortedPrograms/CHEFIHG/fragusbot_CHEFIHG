#include <bits/stdc++.h>

using namespace std;

const int dx[] = {-1, 1, 0, 0};
const int dy[] = {0, 0, -1, 1};
const string w[] = {"U", "D", "L", "R"};

int n;
int m;
char a[25][25];
bool was[25][25];

string dfs(int x, int y, string cur = "") {
  if (a[x][y] == 'C') {
    return cur;
  }
  was[x][y] = true;
  for (int i = 0; i < 4; ++i) {
    int nx = x + dx[i];
    int ny = y + dy[i];
    if (nx < 0 || nx >= n || ny < 0 || ny >= m) {
      continue;
    }
    if (a[nx][ny] == '*') {
      continue;
    }
    if (was[nx][ny]) {
      continue;
    }
    string res = dfs(nx, ny, cur + w[i]);
    if (res != "") {
      return res;
    }
  }
  return "";
}

int main() {
  // freopen("in", "r", stdin); freopen("out", "w", stdout);
  scanf("%d %d", &n, &m);
  for (int i = 0; i < n; ++i) {
    scanf("%s", a[i]);
  }
  string ans = "";
  for (int i = 0; i < n; ++i) {
    for (int j = 0; j < m; ++j) {
      if (a[i][j] != '.') {
        continue;
      }
      int x = i, y = j;
      for (char e : ans) {
        if (e == 'U') {
          if (x - 1 >= 0 && a[x - 1][y] != '*') --x;
        } else
        if (e == 'D') {
          if (x + 1 < n && a[x + 1][y] != '*') ++x;
        } else
        if (e == 'L') {
          if (y - 1 >= 0 && a[x][y - 1] != '*') --y;
        } else
        if (e == 'R') {
          if (y + 1 < m && a[x][y + 1] != '*') ++y;
        }
      }
      memset(was, false, sizeof was);
      ans += dfs(x, y);
    }
  }
  printf("%s\n", ans.c_str());
  return 0;
}