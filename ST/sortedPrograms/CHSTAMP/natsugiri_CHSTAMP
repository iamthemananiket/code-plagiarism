#include<cstdio>
#include<iostream>
#include<vector>
#include<algorithm>
#include<string>
#include<cstring>
using namespace std;

typedef long long LL;
typedef vector<int> VI;

#define REP(i,n) for(int i=0, i##_len=(n); i<i##_len; ++i)
#define EACH(i,c) for(__typeof((c).begin()) i=(c).begin(),i##_end=(c).end();i!=i##_end;++i)
#define eprintf(s...) fprintf(stderr, s)

template<class T> inline void amin(T &a, const T &b) { if (b<a) a=b; }
template<class T> inline void amax(T &a, const T &b) { if (a<b) a=b; }

struct Tri {
    int t, a, b;
    bool operator<(const Tri &y) const {
	return t < y.t;
    }
} E[50011];
int N, M;
int A[200011];
int B[50011];

void MAIN() {
    scanf("%d%d", &N, &M);
    REP (i, N) scanf("%d", A+i);
    REP (i, M) scanf("%d%d%d", &E[i].t, &E[i].a, &E[i].b);

    sort(E, E+M);
    REP (i, 50011) B[i] = i;
    int i = M-1;
    for (int t=50011; t--;) {
	int j = i;

	bool update;
	do {
	    update = false;
	    j = i;
	    while (j>=0 && E[j].t == t) {
		int g = max(B[E[j].a], B[E[j].b]);
		if (B[E[j].a] < g) update = true;
		if (B[E[j].b] < g) update = true;
		B[E[j].a] = B[E[j].b] = g;
		j--;
	    }
	} while (update);
	i = j;
    }
    
    LL ans = 0;
    REP (i, N) ans += B[A[i]];
    printf("%lld\n", ans);
}

int main() {
    int T;
    scanf("%d", &T);
    REP (i, T) MAIN();
    return 0;
}
