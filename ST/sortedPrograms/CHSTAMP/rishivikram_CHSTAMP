#include<bits/stdc++.h>
using namespace std;
const int MAXN = 5e4+2;
int parent[MAXN];
int maximum[MAXN];
vector< pair<int,int> > v[MAXN];
int freq[MAXN];
int findRoot(int x) {
	if(parent[x]==x)
		return x;
	else
		return parent[x]=findRoot(parent[x]);
}
int main() {
	int t;
	cin>>t;
	int i;
	for(i=0;i<MAXN;i++) {
		freq[i]=0;
		parent[i]=i;
		maximum[i]=i;
		v[i].clear();
	}
	while(t--) {
		int n,m;
		cin>>n>>m;
		for(i=0;i<n;i++) {
			int x;
			cin>>x;
			freq[x]++;
		}
		int maxi=-1;
		for(i=0;i<m;i++) {
			int T,a,b;
			cin>>T>>a>>b;
			v[T].push_back(make_pair(a,b));
			maxi=max(maxi,T);
		}
		for(i=maxi;i>=1;i--) {
			int j,maxim=-1;
			for(j=0;j<v[i].size();j++) {
				int fir=v[i][j].first;
				int sec=v[i][j].second;
				int fRoot=findRoot(fir);
				int sRoot=findRoot(sec);
				if(maximum[fRoot]>maximum[sRoot])
					parent[sRoot]=fRoot;
				else if(maximum[sRoot]>maximum[fRoot])
					parent[fRoot]=sRoot;
			}
			for(j=0;j<v[i].size();j++) {
				int fir=v[i][j].first;
				int sec=v[i][j].second;
				int fRoot=findRoot(fir);
				int sRoot=findRoot(sec);
				maximum[fir]=maximum[fRoot];
				maximum[sec]=maximum[sRoot];
			}
			for(j=0;j<v[i].size();j++) {
				int fir=v[i][j].first;
				int sec=v[i][j].second;
				parent[fir]=fir;
				parent[sec]=sec;
			}
		}
		long long ans=0;
		for(i=0;i<MAXN;i++) {
			ans+=freq[i]*maximum[i];
			freq[i]=0;
			maximum[i]=i;
			parent[i]=i;
			v[i].clear();
		}
		cout<<ans<<"\n";
	}
	return 0;
}