#include <string>
#include <vector>
#include <algorithm>
#include <numeric>
#include <set>
#include <map>
#include <queue>
#include <iostream>
#include <sstream>
#include <cstdio>
#include <cmath>
#include <ctime>
#include <cstring>
#include <cctype>
#include <cassert>
#include <limits>
#include <functional>
#define rep(i,n) for(int (i)=0;(i)<(int)(n);++(i))
#define rer(i,l,u) for(int (i)=(int)(l);(i)<=(int)(u);++(i))
#define reu(i,l,u) for(int (i)=(int)(l);(i)<(int)(u);++(i))
#if defined(_MSC_VER) || __cplusplus > 199711L
#define aut(r,v) auto r = (v)
#else
#define aut(r,v) __typeof(v) r = (v)
#endif
#define each(it,o) for(aut(it, (o).begin()); it != (o).end(); ++ it)
#define all(o) (o).begin(), (o).end()
#define pb(x) push_back(x)
#define mp(x,y) make_pair((x),(y))
#define mset(m,v) memset(m,v,sizeof(m))
#define INF 0x3f3f3f3f
#define INFL 0x3f3f3f3f3f3f3f3fLL
using namespace std;
typedef vector<int> vi; typedef pair<int,int> pii; typedef vector<pair<int,int> > vpii; typedef long long ll;
template<typename T, typename U> inline void amin(T &x, U y) { if(y < x) x = y; }
template<typename T, typename U> inline void amax(T &x, U y) { if(x < y) x = y; }

struct UnionFindUndo {
	vector<int> data;
	vector<pair<int, int> > history;
	void init(int n) {
		data.assign(n, -1);
		history.clear();
	}
	int root(int x) const {
		int s;
		while((s = data[x]) >= 0) x = s;
		return x;
	}
	bool unionSet(int x, int y) {
		x = root(x);
		y = root(y);
		if(x == y) {
			history.emplace_back(-1, -1);
			return false;
		}
		if(data[x] > data[y]) swap(x, y);
		history.emplace_back(y, data[y]);
		data[x] += data[y];
		data[y] = x;
		return true;
	}
	bool undo() {
		int y, sy;
		tie(y, sy) = history.back();
		history.pop_back();
		if(y == -1)
			return false;
		int x = data[y];
		data[y] = sy;
		data[x] -= sy;
		return true;
	}
};

int main() {
	int T;
	scanf("%d", &T);
	for(int ii = 0; ii < T; ++ ii) {
		int N; int M;
		scanf("%d%d", &N, &M);
		vector<int> collections(N);
		for(int i = 0; i < N; ++ i)
			scanf("%d", &collections[i]);
		const int D = 50000;
		vector<vpii> days(D + 1);
		rep(i, M) {
			int day, A, B;
			scanf("%d%d%d", &day, &A, &B), -- day;
			days[day].push_back(mp(A, B));
		}
		const int X = 50000;
		vector<int> maxi(X+1);
		rer(x, 1, X)
			maxi[x] = x;
		UnionFindUndo uf;
		uf.init(X+1);
		vi items;
		vector<bool> vis(X+1);
		for(int d = D; d >= 0; -- d) {
			each(i, days[d]) {
				if(!vis[i->first]) vis[i->first] = true, items.push_back(i->first);
				if(!vis[i->second]) vis[i->second] = true, items.push_back(i->second);
				uf.unionSet(i->first, i->second);
			}
			each(i, items)
				amax(maxi[uf.root(*i)], maxi[*i]);
			each(i, items)
				maxi[*i] = maxi[uf.root(*i)];
			each(i, items)
				vis[*i] = false;
			items.clear();
			each(i, days[d])
				uf.undo();
		}
		ll ans = 0;
		each(i, collections)
			ans += maxi[*i];
		printf("%lld\n", ans);
	}
	return 0;
}
