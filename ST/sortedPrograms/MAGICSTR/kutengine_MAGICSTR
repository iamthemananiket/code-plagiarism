#include <algorithm>
#include <bitset>
#include <cassert>
#include <cctype>
#include <cmath>
#include <complex>
#include <cstdio>
#include <cstdlib>
#include <cstring>
#include <ctime>
#include <iostream>
#include <map>
#include <queue>
#include <set>
#include <string>
#include <utility>
#include <vector>
using namespace std;

#define fi first
#define se second
#define pb push_back
#define all(x) (x).begin(), (x).end()
#define sz(x) (int((x).size()))
#define bit(x) (1 << (x))
#define cnt1(x) (__builtin_popcount(x))

template<class T>
inline void chkmax(T& x, T y) {
	if (x < y) x = y;
}

template<class T>
inline void chkmin(T& x, T y) {
	if (y < x) x = y;
}

typedef long long LL;
typedef double DB;
typedef pair<int, int> PII;
typedef vector<int> VI;

const int MX = 2005;
const int MOD = 1000000007;
bool con[MX][MX];
int d1[MX], d2[MX];
int vis[MX], N, M;

void dfs(int u) {
	vis[u] = true;
	for (int i = 0; i < N; i++) if (con[u][i] && !vis[i]) dfs(i);
}
int main() {
//	freopen("in.txt", "r", stdin);
//	freopen("out.txt", "w", stdout);
	
	int T;
	int l, r;
	int i, j, k, u, v;
	for (scanf("%d", &T); T--; ) {
		memset(con, 0, sizeof con);
		scanf("%d%d", &N, &M);
		for (i = 0; i < N; i++) d1[i] = d2[i] = 0;
		for (i = 0; i < M; i++) {
			scanf("%d%d", &l, &r);
			l--, r--;
			if ((l + r) & 1) {
				chkmax(d2[(l + r) / 2], (r - l + 1) / 2);
			} else {
				chkmax(d1[(l + r) / 2], (r - l) / 2 + 1);
			}
		}
		for (i = 0; i < N; i++) {
			for (k = 0; k < d1[i]; k++) {
				u = i - k, v = i + k;
				con[u][v] = con[v][u] = true;
			}
			for (k = 0; k < d2[i]; k++) {
				u = i - k, v = i + k + 1;
				con[u][v] = con[v][u] = true;
			}
		}
		memset(vis, 0, sizeof vis);
		LL ans = 1;
		for (i = 0; i < N; i++) if (!vis[i]) {
			dfs(i);
			ans = ans * 26 % MOD;
		}
		printf("%lld\n", ans);
	}
	return 0;
}
