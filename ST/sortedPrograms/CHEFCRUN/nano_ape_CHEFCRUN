#include <cstdio>
#include <algorithm>
#include <cstring>
#include <set>
#include <map>
#include <cmath>
#include <vector>

#define rep(i, l, r) for(int i=l; i<=r; i++)
#define dow(i, l, r) for(int i=l; i>=r; i--)
#define clr(x, c) memset(x, c, sizeof(x))
#define travel(x) for(edge *p=fir[x]; p; p=p->n)
#define all(x) (x).begin,(x).end
#define pb push_back
#define fi first
#define se second
#define l(x) Left[x]
#define r(x) Right[x]
#define lowbit(x) (x&-x)

using namespace std;

typedef long long ll;
typedef pair<int,int> Pii;
typedef long double ld;
typedef unsigned long long ull;

inline int read()
{
    int x=0; bool f=0; char ch=getchar();
    while (ch<'0' || '9'<ch) f|=ch=='-', ch=getchar();
    while ('0'<=ch && ch<='9') x=x*10+ch-'0', ch=getchar();
    return f?-x:x;
}

#define maxn 1000009

int n, k[maxn], S, T; ll now, A[maxn], B[maxn], an, bn, am, bm;

inline int nx(int x){return x==n?1:x+1;}
inline int pr(int x){return x==1?n:x-1;}

int main()
{
	int t=read(); while (t--)
	{
		n=read(); rep(i, 1, n) k[i]=read();
		S=read(), T=read();
		
		now=0; A[pr(S)]=0; for(int x=S; x!=T; x=nx(x)) now+=k[x], A[x]=min(A[pr(x)],now);
		now=0; B[T]=0; for(int x=pr(T); x!=pr(S); x=pr(x)) now+=k[x], B[x]=min(B[nx(x)],now);
		an=now; am=0; for(int x=S; x!=T; x=nx(x)) am=min(am,A[x]+B[nx(x)]);
		
		swap(S,T);
		now=0; A[pr(S)]=0; for(int x=S; x!=T; x=nx(x)) now+=k[x], A[x]=min(A[pr(x)],now);
		now=0; B[T]=0; for(int x=pr(T); x!=pr(S); x=pr(x)) now+=k[x], B[x]=min(B[nx(x)],now);
		bn=now; bm=0; for(int x=S; x!=T; x=nx(x)) bm=min(bm,A[x]+B[nx(x)]);
		
		printf("%lld\n", min(an+bm*2, bn+am*2));
	}
    return 0;
}