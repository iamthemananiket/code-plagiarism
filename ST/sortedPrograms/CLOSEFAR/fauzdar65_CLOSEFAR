#include <bits/stdc++.h>
#include<ext/pb_ds/assoc_container.hpp>
#include<ext/pb_ds/tree_policy.hpp>
// #include <boost/multiprecision/cpp_int.hpp> 

#define gc getchar//_unlocked
#define pc putchar//_unlocked
#define ll long long
#define ld long double
#define pb push_back
#define mp make_pair
#define pp pair<int,int>
#define bigint boost::multiprecision::cpp_int
#define finp ios_base::sync_with_stdio(0);cin.tie(0);
#define bc __builtin_popcountll
#define afor(i,a,b) for(int i=a;i<=b;++i)
#define bfor(i,a,b) for(int i=a;i>=b;--i)
#define vi vector<int>
#define vpp vector<pp>
#define vll vector<ll>

using namespace std;
using namespace __gnu_pbds;

char putnb[20];
void putn(ll n) {if(!n)pc('0');if(n<0)pc('-'),n=0-n;int pi=0;while(n)putnb[pi++]=(n%10)+'0',n/=10;while(pi)pc(putnb[--pi]);}
void sci(int *x) {register char c = gc();*x = 0;for(; (c<48)||(c>57);c = gc());for(; (c>47)&&(c<58);c = gc())*x = (int)((((*x)<<1) + ((*x)<<3)) + c - 48);}
void scll(ll *x)  {register char c = gc();*x = 0;for(; (c<48)||(c>57);c = gc());for(; (c>47)&&(c<58);c = gc())*x =  (ll)((((*x)<<1) + ((*x)<<3)) + c - 48);}
ll fp(ll a,ll b,ll c) {if(b==0)return 1%c; if(b==1)return a%c; ll ret=fp(a,b/2,c); ret=(ret*ret)%c; if(b&1)ret=(ret*a)%c; return ret;}

const ll mod=1e9 +7;
const ll mod2=1999999973;
const ll inf=1e18;
const int infs=1e9 + 1000;
const int N=100000;
const long double PI = acos(-1);

template <typename T>
using ordered_set = tree<T, null_type, less<T>, rb_tree_tag, tree_order_statistics_node_update>;

int t,n;
vi adj[N+5];
int par[N+5];
int A[N+5];
int L[N+5];

void dfs(int pos,int pr,int lev)
{
  par[pos]=pr;
  L[pos]=lev;

  for(auto i:adj[pos])
  {
    if(i == pr)continue;
    dfs(i,pos,lev+1);
  }
}

int P[N+5][40];
int dpmin[N+5][40];
int dpmax[N+5][40];
int aux[N+5];

map<pair<int,int>,int> dp[50][50];

int solve(int x,int y,int l1,int l2)
{
  if(l1<1 || l2<1 || x<1 || y<1)return infs;
  if(l1==1 && l2==1)
  {
  	if(A[x]!=A[y])return abs(A[x] - A[y]);
  	return infs;
  }

  int v1 = aux[l1];
  int v2 = aux[l2];
  
  int ret = infs;

  if((l1 == (1 << v1)) && (l2 == (1 << v2)))
  {
    if(dp[v1][v2].count({x,y}))return dp[v1][v2][{x,y}];
  }
  
  
  
  //dp[v1][v2][{x,y}]=ret;
  
  int V1=v1;
  int V2=v2;
  
  if(V1 && (1 << v1)==l1)V1--;
  if(V2 && (1 << v2)==l2)V2--;
  
  ret = min(ret, solve(x,y,1 << V1,1 << V2));
  ret = min(ret, solve(P[x][V1],P[y][V2],l1- (1 << V1),l2 - (1 << V2)));
  ret = min(ret, solve(P[x][V1],y,l1- (1 << V1),(1 << V2)));

  ret = min(ret, solve(x,P[y][V2],(1 << V1),l2 - (1 << V2)));
 
 if((l1 == (1 << v1)) && (l2 == (1 << v2)))
  {
    dp[v1][v2][{x,y}]=ret;
  }
 
 return ret;

}


void pro()
  {
      int i, j;
      for (i = 1; i <= n; i++)
          for (j = 0; 1 << j < n; j++)
             {

              P[i][j] = -1;
              dpmin[i][j]=dpmax[i][j]=A[i];
            }

      for (i = 1; i <=n; i++)
          P[i][0] = par[i];
   
      for (j = 1; 1 << j < n; j++)
         for (i = 1; i <=n; i++)
         {
             if (P[i][j - 1] != -1)
             {
                 P[i][j] = P[P[i][j - 1]][j - 1];
                 dpmin[i][j] = min(dpmin[i][j-1],dpmin[P[i][j-1]][j-1]);
                 dpmax[i][j] = max(dpmax[i][j-1],dpmax[P[i][j-1]][j-1]);
               }
          }
  }
  
  int lcquery(int p, int q)
  {
      int tmp, log, i;
      if (L[p] < L[q])
          tmp = p, p = q, q = tmp;
  
      for (log = 1; 1 << log <= L[p]; log++);
      log--;
 
      for (i = log; i >= 0; i--)
          if (L[p] - (1 << i) >= L[q])
              p = P[p][i];
   
      if (p == q)
          return p;

      for (i = log; i >= 0; i--)
          if (P[p][i] != -1 && P[p][i] != P[q][i])
              p = P[p][i], q = P[q][i];
   
      return par[p];
  }



int minq(int pos,int num)
{
  int ret = A[pos];

  while(num>0)
  {
   //cout<<pos<<" "<<dpmin[pos][aux[num]]<<endl;
    ret = min(ret,dpmin[pos][aux[num]]);
    pos = P[pos][aux[num]];
    num-= 1 << aux[num];
  }

  return ret;
}

int maxq(int pos,int num)
{
 int ret = A[pos];

  while(num>0)
  {
    ret = max(ret,dpmax[pos][aux[num]]);
    pos = P[pos][aux[num]];
    num-= 1 << aux[num];
  }

  return ret;
}
int main()
{
  aux[1]=0;
  afor(i,2,N)
  {
    aux[i] = aux[i-1];
    if((1 << (aux[i]+1))<=i)aux[i]++;
  }
  finp;
 // cin>>t;
  t=1;

  while(t--)
  {
    cin>>n;

    afor(i,1,n)
    {
      cin>>A[i];
      //adj[i].clear();
    }
    afor(i,1,n-1)
    {
      int u,v;
      cin>>u>>v;
      adj[u].pb(v);
      adj[v].pb(u);
    }

    dfs(1,-1,1);
    pro();

   // cout<<minq(1,0)<<endl;
    //cout<<minq(5,2);
    //cout<<aux[2]<<endl;
    //cout<<dpmin[5][0]<<" "<<dpmin[5][1]<<endl;
    
    //cout<<solve(1,5,1,2);
    //return 0;
    int q;
    cin>>q;

    while(q--)
    {
      char c;
      int x,y;

      cin>>c>>x>>y;

      int lcc = lcquery(x,y);

      if(c == 'F')
      {
      int minv = infs;
      int maxv = 0 - infs;

      minv = min(minv,minq(x,L[x]-L[lcc] + 1));
      maxv = max(maxv,maxq(x,L[x]-L[lcc] + 1));

      minv = min(minv,minq(y,L[y]-L[lcc] + 1));
      maxv = max(maxv,maxq(y,L[y]-L[lcc] + 1));

      //cout<<minv<<" "<<maxv<<"\n";
      cout<<(maxv - minv)<<"\n";

        continue;
      }

      int ans =solve(x,y,L[x]-L[lcc]+1,L[y]-L[lcc]+1);

        ans=min(ans,solve(x,x,L[x]-L[lcc]+1,L[x]-L[lcc]+1));
        ans=min(ans,solve(y,y,L[y]-L[lcc]+1,L[y]-L[lcc]+1));

      cout<<ans<<"\n";

      continue;
      set<int> s;

      s.insert(A[lcc]);
      while(x!=lcc)
      {
        s.insert(A[x]);
        x=par[x];
      }

      while(y!=lcc)
      {
        s.insert(A[y]);
        y=par[y];
      }
     
     
      
      //int ans=infs;

      for(auto i:s)
      {      
        auto x = s.upper_bound(i);
        if(x!=s.end())ans = min(ans, *x - i);
      }

//return 0;
   
      cout<<ans<<"\n";

    }
  }
  
return 0;
}