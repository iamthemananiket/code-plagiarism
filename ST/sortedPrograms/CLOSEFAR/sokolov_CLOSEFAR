#pragma comment(linker, "/STACK:500000000")
#define _CRT_SECURE_NO_WARNINGS
#include <algorithm>
#include <assert.h>
#include <bitset>
#include <functional>
#include <iostream>
#include <list>
#include <map>
#include <math.h>
#include <set>
#include <stack>
#include <stdio.h>
#include <stdlib.h>
#include <string>
#include <string.h>
#include <time.h>
#include <queue>
//#include <unordered_map>
//#include <unordered_set>
#include <utility>
#include <vector>
using namespace std;

#define y0 y0ChloeGraceMoretz
#define y1 y1ChloeGraceMoretz
#define ll long long
int nextInt() { int n; scanf("%d", &n); return n; }
ll nextLong() { ll n; scanf("%lld", &n); return n; }
const double PI = acos(-1.0);
const double EPS = 1e-9;
const int INF = (int)2e9;

char s[9];
int value[35009];
vector<int> a[35009];
vector<int> values;
bool stop;

void dfs(int node, int prev, int target) {
	values.push_back(value[node]);
	//printf("push_back %d\n", value[node]);
	if (node == target) {
		stop = true;
		//printf("STOP!\n");
		return;
	}
	for (int i = 0; i < a[node].size(); ++i) {
		int nextNode = a[node][i];
		if (nextNode != prev) {
			dfs(nextNode, node, target);
			if (stop) {
				return;
			}
		}
	}
	//printf("pop_back %d\n", values.back());
	values.pop_back();	
}

int main() {
	//freopen("in.txt", "rt", stdin);
	//freopen("out.txt", "wt", stdout);
	int n;
	scanf("%d", &n);
	for (int i = 1; i <= n; ++i) {
		scanf("%d", &value[i]);
	}
	for (int i = 1; i <= n - 1; ++i) {
		int u, v;
		scanf("%d %d", &u, &v);
		a[u].push_back(v);
		a[v].push_back(u);
	}
	int q;
	scanf("%d", &q);
	while (q--) {
		int x, y;
		scanf("%s %d %d", s, &x, &y);
		values.clear();
		stop = false;
		dfs(x, -1, y);
		//printf("x: ");
		//for (int i = 0; i < values.size(); ++i) {
			//printf("%d ", values[i]);
		//}
		//printf("\n");
		sort(values.begin(), values.end());
		if (s[0] == 'C') {
			int res = INF;
			for (int i = 1; i < values.size(); ++i) {
				res = min(values[i] - values[i - 1], res);
			}
			printf("%d\n", res);
		} else {
			printf("%d\n", values.back() - values[0]);
		}
	}
	return 0;
}