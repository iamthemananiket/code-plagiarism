#include<bits/stdc++.h>
using namespace std;
#define pc putchar_unlocked
#define gc getchar_unlocked
typedef long long ll;
typedef unsigned long long llu;
#define mp make_pair
#define pb push_back
#define sc(x) scanf("%d",&x)
#define sc2(x,y) scanf("%d%d",&x,&y)
#define sc3(x,y,z) scanf("%d%d%d",&x,&y,&z)
#define scl(x) scanf("%lld",&x)
#define scl2(x,y) scanf("%lld%lld",&x,&y)
#define scl3(x,y,z) scanf("%lld%lld%lld",&x,&y,&z)
#define scstr(x) scanf("%s",x)
#define pd(x) printf("%d",x)
#define pstr(x) printf("%s",x)
#define newl() printf("\n")
#define fl(i,n) for (i=0;i<n;i++)
#define fle(i,n) for (i=1;i<=n;i++)
#define fla(i,a,n) for (i=a;i<n;i++)
#define mem(a,i) memset(a,i,sizeof(a))
#define fi first
#define se second
typedef pair<int,int> pii;
typedef pair<int,pair<int,int> > piii ;
typedef pair<ll,ll> pll;
typedef pair<ll,int> pli;
#define gcd __gcd
#define wl(n) while (n--)
#define debug(x) cout<<"debug->"<<#x<<"::"<<x<<endl
#define debug2(x,y) cout<<#x<<" :: "<<x<<"\t"<<#y<<" :: "<<y<<"\n"
#define debug3(x,y,z) cout<<#x<<" :: "<<x<<"\t"<<#y<<" :: "<<y<<"\t"<<#z<<" :: "<<z<<"\n"
#define tr(container, it)  for(typeof(container.begin()) it = container.begin(); it != container.end(); it++) 
#define all(v) v.begin(),v.end()
const double eps=0.000000000000001 ;
#define MOD 1000000007
typedef long double LF;
typedef double lF;
//-------------

struct node
{
	int r[2],p;
}L[200000+10];
int P[32][200000+10],sttp;
bool cmp(node,node);
void maksort(node *,int);
int rnk[200000+10]; // Note always needed
int lcp(int x,int y,int stp,int l)
{
	int k,ret=0;
	if (x==y)
		return l-x;
	for (k=stp-1;k>=0&&x<l&&y<l;k--)
	{
		if (P[k][x]==P[k][y])
		{
			x+=1<<k;y+=1<<k;ret+=1<<k;
		}
	}
	return ret;
	
}
void buildit(char *s,int l)
{
	if (l==-1)
	{
		l=strlen(s);
	}
	int i,j;
	for (i=0;i<l;i++)
	{
		P[0][i]=s[i];
	}
	int stp=1,cnt=1;
	for (;(cnt>>1)<l;cnt<<=1,stp++)
	{
		for (i=0;i<l;i++)
		{
			L[i].r[0]=P[stp-1][i];
			L[i].r[1]=(i+cnt<l?P[stp-1][(i+cnt)]:-1);
			L[i].p=i;
		}
		maksort(L,l); // O(n) sorting
		//sort(L,L+l,cmp); // n logn sorting 
		for (i=0;i<l;i++)
		{
			P[stp][L[i].p]=((i>0&&L[i-1].r[0]==L[i].r[0]&&L[i-1].r[1]==L[i].r[1])?P[stp][L[i-1].p]:i);
		}
		
	}

	sttp=stp;
	//printf("husad ");fflush(stdout);
	for (i=0;i<l;i++)
	{
		rnk[P[stp-1][i]]=i;
	}

}
char sa[100010],sb[100010];
char ss[200010];

ll  disc(char *s,int l)
{
	ll ans=0;
	int i;
	ans+=(l-rnk[0]);
	for (i=1;i<l;i++)
	{
		int lc=lcp(rnk[i],rnk[i-1],sttp,l);
		ans+=(ll)(l-rnk[i])-(ll)(lc+1)+1;
	}
	return ans;
}
int main()
{
	//printf("%d\n",(int)'z'+1);
	scstr(sa);
	scstr(sb);
	int la=strlen(sa);
	int lb=strlen(sb);
	buildit(sa,la);
	ll stra=disc(sa,la);
	buildit(sb,lb);
	ll strb=disc(sb,lb);
	strcpy(ss,sa);
	char lol[10];
	lol[0]=123;lol[1]='\0';
	//printf("|%d| ",lol[0]-'a');
	strcat(ss,lol);
	strcat(ss,sb);
	//debug(sb);
	int ls=strlen(ss);
	//printf("yo %s %d! ",ss,ls);fflush(stdout);
	buildit(ss,ls);
	//printf("yo !");fflush(stdout);
	ll strs=0;
	if (rnk[0]!=la)
	{
		if (rnk[0]<la)
		{
			strs+=la-rnk[0];
		}
		else strs+=ls-rnk[0];
	}
	int i;
	for (i=1;i<ls;i++)
	{
		int lc=lcp(rnk[i],rnk[i-1],sttp,ls);
		if (rnk[i]<la)
		{
			strs+=(la-rnk[i]-lc);
		}
		else if (rnk[i]>la)
		{
			strs+=(ls-rnk[i]-lc);
		}
	}
	ll ans;
	ans=2*strs-(stra+strb);
	//printf("%lld %lld %lld\n",stra,strb,strs);
	printf("%lld\n",ans);
	return 0;
}
bool cmp(node a,node b)
{
	if (a.r[0]==b.r[0])
		return a.r[1]<b.r[1];
	return a.r[0]<b.r[0];
}
int rad_[200000+10]={0};
node L_[200000+10];

void maksort(node *L,int l)
{
	int i,j;
	int *rad=((int *)rad_)+1;
	
	for (j=1;j>=0;j--)
	{
		memset(rad_,0,sizeof(int)*max(l+1,28));
		int maxi=0;
		for (i=0;i<l;i++)
		{
			rad[L[i].r[j]]++;
			if (L[i].r[j]>maxi)
				maxi=L[i].r[j];
		}
		for (i=0;i<=maxi;i++)
			rad[i]=rad[i-1]+rad[i];
		for (i=l-1;i>=0;i--)
		{
			L_[--rad[L[i].r[j]]]=L[i];
		}
		for (i=0;i<l;i++)
			L[i]=L_[i];
	}
}
	
