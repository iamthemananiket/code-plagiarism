#include <algorithm>
#include <bitset>
#include <cassert>
#include <cctype>
#include <cmath>
#include <complex>
#include <cstdio>
#include <cstdlib>
#include <cstring>
#include <ctime>
#include <iostream>
#include <map>
#include <queue>
#include <set>
#include <string>
#include <utility>
#include <vector>
using namespace std;

#ifdef _WIN32
#define LLD "%I64d"
#else
#define LLD "%lld"
#endif

#define pb push_back
#define fi first
#define se second
#define all(x) (x).begin(), (x).end()
#define sz(x) (int((x).size()))
#define bit(x) (1 << (x))
#define cnt1(x) (__builtin_popcount(x))

template<class T>
inline void chkmax(T& x, T y) {
	if (x < y) x = y;
}

template<class T>
inline void chkmin(T& x, T y) {
	if (y < x) x = y;
}

typedef long long LL;
typedef double DB;
typedef pair<int, int> PII;
typedef vector<int> VI;
const int MN = 65;
const int MV = 1000005;
const int LIM = 6;
int CNT, SC, SC1;
LL S1, T1, C1;
LL S2, T2;
LL S3, T3;
int FLG, VSC;
DB RAT, GR;
int BF;

int N, M, E;
int V[MN];
int mon[LIM + 1][MV], monsz[LIM + 1];
int val[MV];
int cnt[MN], id[MN];
LL A[MN], _A[MN];
int bid[MV];
LL sum, scr;
LL LONE;

struct ATM {
	int N, V[MN];
	
	void input() {
		scanf("%d", &N);
		for (int i = 0; i < N; i++) scanf("%d", V + i);	
		sort(V, V + N);
	}
} AT[MN];

bool cmp(int i, int j) {
	return V[i] < V[j];	
}

void calcBankNote() {
	int i, j, t, _V[MN];
	LL _A[MN];
	
	for (i = 0; i < N; i++) id[i] = i;
	sort(id, id + N, cmp);
	for (i = 0; i < N; i++) _V[i] = V[id[i]], _A[i] = A[id[i]];
	for (i = 0; i < N; i++) A[i] = _A[i], V[i] = _V[i], bid[V[i]] = i;
	
	memset(monsz, 0, sizeof monsz);
	val[0] = 0;
	mon[0][monsz[0]++] = 0;
	for (i = 1; i <= V[N - 1]; i++) {
		for (j = N - 1; j >= 0; j--) {
			if (V[j] <= i) break;
		}
		t = val[i] = val[i - V[j]] + 1;
		if (t <= LIM) mon[t][monsz[t]++] = i;
	}
}

void init() {
	int i;
	char s[10];
	
	memset(A, 0, sizeof A);
	scanf("%d%d", &N, &M);
	for (i = 0; i < N; i++) scanf("%d", V + i), bid[V[i]] = i;
	for (i = 0; i < N; i++) scanf("%d", A + i);
	for (i = 0; i < M; i++) AT[i].input();
	calcBankNote();
}

bool can(LL x, int &cnt, int st) {
	if (x > sum) return 0;
	LL y = x;
	int i, flg;
	
	cnt = 0;
	for (i = 0; i < N; i++) _A[i] = A[i];
	i = st;
	while (i >= 0 && x) {
		if (x >= V[i]) {
			if (V[i] == 1) cnt = x;
			int t = min(_A[i], (1LL * x / V[i]));
			x -= 1LL * t * V[i];
			_A[i] -= t;
		}
		i--;
	}
	return x == 0;
}

void receive(LL x, int id) {
	if (id >= 0) {
		int i = AT[id].N - 1;
		while (x) {
			if (x >= AT[id].V[i]) {
				A[bid[AT[id].V[i]]] += x / AT[id].V[i];
				x %= AT[id].V[i];	
			}
			i--;
		}
	}
	else {
		int i = N - 1;
		while (x) {
			if (x >= V[i]) {
				A[i] += x / V[i];
				scr += x / V[i];
				x %= V[i];
			}
			i--;
		}
	}
}

bool verySmallPay(int x) {
	int i, j, k, cc = 0, flag = 0, mt, mtt = int(2e9);
	
	sum = 0;
	memset(cnt, 0, sizeof cnt);
	for (i = 0; i < N; i++) sum += 1LL * A[i] * V[i];
	for (i = 0; i <= LIM && cc < VSC; i++) {
		for (j = 0; j <= i && cc < VSC; j++) {
			for (k = 0; k < monsz[i - j] && cc < VSC; k++) {
				LL t = mon[i - j][k] + 1LL * V[N - 1] * j;
				cc++;
				if (t + 1LL * x > sum) break;
				if (flag == 1) break;
				int tt;
				if (can(1LL * t + x, tt, N - 1)) {
					if (tt > LONE) continue;
					if (mtt > tt) {
						flag = 1;
						break;
					}
				}
			}
			if (flag == 1) break;
		}
		if (flag == 1) break;
	}
	if (!flag) return 0;
	
	for (j = 0; j <= i; j++) {
		for (k = 0; k < monsz[i - j]; k++) {
			LL t = mon[i - j][k] + 1LL * V[N - 1] * j;
			cc++;
			if (t + 1LL * x > sum) break;
			int tt;
			if (can(1LL * t + x, tt, N - 1)) {
				if (mtt > tt) {
					mtt = tt;
					mt = t;
					for (int p = 0; p < N; p++) cnt[p] = A[p] - _A[p];
				}
			}
		}
	}
	for (i = 0; i < N; i++) A[i] -= cnt[i];
	receive(1LL * mt, -1);
	
	for (i = 0; i < N; i++) {
		if (i) putchar(' ');
		printf("%d", cnt[i]);
	}
	puts("");
	
	return 1;
}

bool smallPay(int x) {
	int i, j, k, cc = 0, flag = 0, mt, mtt = int(2e9);
	
	sum = 0;
	memset(cnt, 0, sizeof cnt);
	for (i = 0; i < N; i++) sum += 1LL * A[i] * V[i];
	for (i = 0; i <= LIM && cc < CNT; i++) {
		if (A[0] > 100000 && mtt < 50000 && flag == 1) break;
		for (j = 0; j <= i && cc < CNT; j++) {
			if (A[0] > 100000 && mtt < 50000 && flag == 1) break;
			for (k = 0; k < monsz[i - j] && cc < CNT; k++) {
				LL t = mon[i - j][k] + 1LL * V[N - 1] * j;
				cc++;
				if (t + 1LL * x > sum) break;
				if (A[0] > 100000 && mtt < 50000 && flag == 1) break;
				int tt;
				
				if (BF) {
					for (int st = N - 1; st >= 0; st--) {
						if (can(1LL * t + x, tt, st)) {
							if (tt > LONE) continue;
							if (mtt > tt) {
								flag = 1;
								mtt = tt;
								mt = t;
								for (int p = 0; p < N; p++) cnt[p] = A[p] - _A[p];
							}
						}
					}
				}
				else {
					if (can(1LL * t + x, tt, N - 1)) {
						if (tt > LONE) continue;
						if (mtt > tt) {
							flag = 1;
							mtt = tt;
							mt = t;
							for (int p = 0; p < N; p++) cnt[p] = A[p] - _A[p];
						}
					}
				}
			}
		}
	}
	if (!flag) return 0;
	
	for (i = 0; i < N; i++) A[i] -= cnt[i];
	receive(1LL * mt, -1);
	
	for (i = 0; i < N; i++) {
		if (i) putchar(' ');
		printf("%d", cnt[i]);
	}
	puts("");
	
	return 1;
}

int cnt1[MN];
LL psum[MN], opt;

LL score(LL x) {
	return x / V[N - 1] + val[x % V[N - 1]];
}

void go1(int k, LL val) {
	if (psum[k] < val) return;
	if (k > C1) {
		int i;
		LL cc = (val > 0) ? (val - 1) / V[N - 1] + 1 : 0;
		LL tmp = score(V[N - 1] * cc - val);
		
		if (opt > tmp) {
			opt = tmp;
			cnt[0] = 0;
			for (i = 1; i <= C1; i++) cnt[i] = cnt1[i];
			for (; i < N - 1; i++) cnt[i] = 0;
			cnt[N - 1] = cc;
		}
		return;
	}
	
	for (LL a = min(A[k], T1); a >= 0; a--) {
		cnt1[k] = a;
		go1(k + 1, val - V[k] * a);
	}
}

void brute1(LL pay) {
	psum[C1 + 1] = V[N - 1] * A[N - 1];
	for (int i = C1; i > 0; i--) psum[i] = psum[i + 1] + V[i] * min(A[i], T1);
	go1(1, pay);
}

void go2(int k, LL val) {
	if (val <= 0) {
		int i;
		LL tmp = score(-val);
		
		if (opt + cnt[0] * GR > tmp + cnt1[0] * GR) {
			opt = tmp;
			for (i = 0; i <= k; i++) cnt[i] = 0;
			for (; i < N; i++) cnt[i] = cnt1[i];
		}
		return;
	}
	if (psum[k] < val) return;
	if (k == 0) {
		if (val > LONE) return;
		cnt1[0] = val;
		go2(-1, 0);
		return;
	}
	
	for (LL a = min(A[k], T2); a >= 0; a--) {
		cnt1[k] = a;
		go2(k - 1, val - V[k] * a);
	}
}

void brute2(LL pay) {
	psum[0] = A[0];
	for (int i = 1; i < N; i++) psum[i] = psum[i - 1] + V[i] * min(A[i], T2);
	go2(N - 1, pay);
}

void go3(int k, LL val) {
	if (val <= 0) {
		int i;
		LL tmp = score(-val);
		
		if (opt + cnt[0] * GR > tmp + cnt1[0] * GR) {
			opt = tmp;
			for (i = 0; i < k; i++) cnt[i] = cnt1[i];
			for (; i < N; i++) cnt[i] = 0;
		}
		return;
	}
	if (psum[k] < val) return;
	if (k == N - 1) {
		cnt1[k] = (val - 1) / V[N - 1] + 1;
		go3(k + 1, val);
	}
	
	for (LL a = min(A[k], T3); a >= 0; a--) {
		cnt1[k] = a;
		go3(k + 1, val - V[k] * a);
	}
}

void brute3(LL pay) {
	psum[N - 1] = V[N - 1] * A[N - 1];
	for (int i = N - 2; i >= 0; i--) psum[i] = psum[i + 1] + V[i] * min(A[i], T3);
	go3(0, pay);
}

void simplePay(LL x) {
	int i, j, k;
	
	LL pay = x, rem;
	
	memset(cnt, 0, sizeof cnt);
	LL sum = 0;
	for (i = 0; i < N; i++) sum += 1LL * A[i] * V[i];
	
	i = N - 1;
	while (i >= 1) {
		if (x >= V[i]) {
			int t = min(A[i], 1LL * x / V[i]);
			A[i] -= t;
			cnt[i] += t;
			x -= t * V[i];
		}
		i--;
	}
	if (x) {
		LL mt;
		int mtt = int(1e9), flag = 0, lim = A[N - 1];
		
		for (i = 0; i < N; i++) sum += 1LL * A[i] * V[i];
		for (i = 0; i < SC; i++) {
			int tt;
			if (x + 1LL * V[N - 1] * i > sum) break;
			if (A[0] > 100000 && mtt < 50000 && flag == 1) break;
			for (j = N - 1; j >= 0; j--) {
				if (can(x + 1LL * V[N - 1] * i, tt, j)) {
					if (mtt > tt) {
						mtt = tt;
						mt = 1LL * V[N - 1] * i;
						flag = 1;
						for (k = 0; k < N; k++) cnt1[k] = A[k] - _A[k];
					}
				}
			}
		}
		if (flag) {
			for (i = 0; i < N; i++) cnt[i] += cnt1[i], A[i] -= cnt1[i];
			rem = mt;
		}
		else {
			flag = 0, lim = A[N - 1], mtt = int(1e9);
			for (i = 0; i < N; i++) sum += 1LL * A[i] * V[i];
			for (i = lim; i < lim + SC1; i++) {
				int tt;
				if (x + 1LL * V[N - 1] * i > sum) break;
				if (A[0] > 100000 && mtt < 50000 && flag == 1) break;
				if (can(x + 1LL * V[N - 1] * i, tt, N - 1)) {
					if (mtt > tt) {
						mtt = tt;
						mt = 1LL * V[N - 1] * i;
						flag = 1;
						for (j = 0; j < N; j++) cnt1[j] = A[j] - _A[j];
					}
				}
			}
			if (flag) {
				for (i = 0; i < N; i++) cnt[i] += cnt1[i], A[i] -= cnt1[i];
				rem = mt;
			}
			else {
				for (i = N - 1; i >= 0; i--) if (x <= 1LL * V[i] * A[i] + A[0]) break;
				int t;
				if (x % V[i] == 0) t = min(A[i], x / V[i]);
				else t = min(A[i], x / V[i] + 1);
				x -= t * V[i];
				cnt[i] += t;
				A[i] -= t;
				if (x > 0) {
					A[0] -= x;	
					cnt[0] += x;
					x = 0;
				}
				rem = -x;
			}
		}
	}
	else rem = 0;
	
	opt = score(rem);
	for (i = 0; i < N; i++) A[i] += cnt[i];
	if (opt > S1) brute1(pay);
	if (opt > S2 || cnt[0] > LONE) brute2(pay);
	if (opt > S3 || cnt[0] > LONE) brute3(pay);
	
	rem = 0;
	for (i = 0; i < N; i++) {
		A[i] -= cnt[i];
		rem += LL(V[i]) * cnt[i];
	}
	rem -= pay;
	receive(rem, -1);
	for (i = 0; i < N; i++) {
		if (i) putchar(' ');
		printf("%d", cnt[i]);
	}
	puts("");
}

void pay(int x) {
	LONE = max(A[0] * RAT, 10.0);
	if (FLG) {
		if (!verySmallPay(x)) simplePay(x);
	}
	else {
		if (!smallPay(x)) simplePay(x);
	}
	
	fflush(stdout);
}

int calcCnt(int x, int id) {
	int i = AT[id].N - 1, rt = 0;
	
	while (x) {
		if (x >= AT[id].V[i]) {
			if (AT[id].V[i] == 1) return x;
			x %= AT[id].V[i];
		}
		i--;
	}
	return 0;
}

void receive(int x) {
	int rlt = -1, id = -1, i;
	
	for (i = 0; i < M; i++) {
		int t = calcCnt(x, i);
		if (t > rlt) {
			rlt = t;
			id = i;	
		}
	}
	printf("%d\n", id + 1);
	receive(x, id);
	
	fflush(stdout);
}

int rem[21] = {0, 145, 304, 463, 525, 577, 592, 674, 678, 703, 755, 766, 772, 772, 782, 812, 824, 842, 877, 887, 891};
int FID, GID;

void getIDs() {
	int r, m, i;
	
	r = 0;
	for (i = 0; i < N; i++) r = (r + V[i]) % 1000;
	FID = lower_bound(rem, rem + 21, r) - rem;
	if (FID == 12) {
		r = 0;
		for (i = 0; i < N; i++) r = (r + A[i]) % 1000;
		if (r == 413) FID++;
	}
	
	m = *max_element(V, V + N);
	if (E <= 100) GID = (m <= 1000) ? 1 : 3;
	else if (E <= 1000) GID = (m <= 1000) ? 2 : 4;
	else GID = 5;
}

void setParam() {
	getIDs();
	
	CNT = 100, SC = 60, SC1 = 100;
	S1 = 0, T1 = 20, C1 = 3;
	S2 = 1000, T2 = 5;
	S3 = 1000000, T3 = 5;
	FLG = 0, VSC = 100;
	RAT = 2, GR = 0;
	BF = 0;
	
	if (FID ==  1) {  // Group 1
		CNT = 5;
		FLG = 1;
	}
	if (FID ==  2) {  // Group 1
		
	}
	if (FID ==  3) {  // Group 4
		SC = 80, SC1 = 1000;
	}
	if (FID ==  4) {  // Group 2
		FLG = 1;
	}
	if (FID ==  5) {  // Group 1
		
	}
	if (FID ==  6) {  // Group 2
		CNT = 30;
		FLG = 1;
	}
	if (FID ==  7) {  // Group 1
		
	}
	if (FID ==  8) {  // Group 2
		CNT = 30;
	}
	if (FID ==  9) {  // Group 3
		
	}
	if (FID == 10) {  // Group 3
		CNT = 20;
		S1 = 1000000;
		S2 = 1000000;
		S3 = 100;
		BF = 1;
	}
	if (FID == 11) {  // Group 3
		CNT = 100;
		S1 = 0, T1 = 30;
		S2 = 1000000;
		S3 = 10;
		RAT = 0.4, GR = 0.4;
		BF = 1;
	}
	if (FID == 12) {  // Group 5
		
	}
	if (FID == 13) {  // Group 5
		CNT = 80, SC1 = 1000;
		S1 = 1000000;
		S2 = 1000000;
		S3 = 100;
		RAT = 0.55, GR = 0.4;
	}
	if (FID == 14) {  // Group 5
		CNT = 30;
	}
	if (FID == 15) {  // Group 4
		SC = 50, SC1 = 1000;
		S1 = 1000000;
		S2 = 1000000;
		S3 = 100, T3 = 10;
		RAT = 0.55, GR = 0.4;
	}
	if (FID == 16) {  // Group 4
		CNT = 40;
		S2 = 10;
	}
	if (FID == 17) {  // Group 4
		T1 = 10, C1 = 5;
		FLG = 1;
	}
	if (FID == 18) {  // Group 2
		CNT = 10;
		S2 = 10;
	}
	if (FID == 19) {  // Group 5
		CNT = 60, SC = 30;
	}
	if (FID == 20) {  // Group 3
		CNT = 40, SC = 500;
		S2 = 100;
	}
}

void solve() {
	int x, k;
	char s[10];
	
	scanf("%d", &E);
	setParam();
	for (k = 0; k < E; k++) {
		scanf("%s", s);
		if (s[0] == 'P') {
			scanf("%d", &x);
			pay(x);
		}
		else if (s[0] == 'R') {
			scanf("%d", &x);
			receive(x);
		}
		else if (s[0] == 'B') {
			scanf("%d", &V[N++]);
			calcBankNote();
		}
		else {
			AT[M++].input();
		}
	}
}

int main() {
	init();
	solve();
	return 0;
}