// Program and program template by vvneagleone

#include<cstdio>
#include<cstdlib>
#include<iostream>
#include<iomanip>
#include<algorithm>
#include<cmath>
#include<string>
#include<cstring>
#include<climits>
#include<vector>
#include<utility>
#include<queue>
#include<set>
#include<map>
using namespace std;
typedef long long LL;
#define MOD 1000000007LL

#ifdef __GNUC__
    #if ( __GNUC__ >= 4 && __GNUC_MINOR__ >= 7 && __cplusplus > 201100L )
        #include<unordered_set>
        #include<unordered_map>
    #endif
#endif // __GNUC__

#ifdef __WIN32
    #define gx getchar
    #define px putchar
    #define ps putchar(' ')
    #define pn putchar('\n')
#else
    #define gx getchar_unlocked
    #define px putchar_unlocked
    #define ps putchar_unlocked(' ')
    #define pn putchar_unlocked('\n')
#endif // __WIN32

void scan(int &n){int sign=1;n=0;char c=gx();while(c<'0'||c>'9'){if(c=='-')sign=-1;c=gx();}while(c>='0'&&c<='9')n=(n<<3)+(n<<1)+c-'0',c=gx();n=n*sign;}
void lscan(LL &n){int sign=1;n=0;char c=gx();while(c<'0'||c>'9'){if(c=='-')sign=-1;c=gx();}while(c>='0'&&c<='9')n=(n<<3)+(n<<1)+c-'0',c=gx();n=n*(LL)(sign);}
int sscan(char a[]){char c=gx();while(c==' '||c=='\n')c=gx();int i=0;while(c!='\n')a[i++]=c,c=gx();a[i]=0;return i;}
int wscan(char a[]){char c=gx();while(c==' '||c=='\n')c=gx();int i=0;while(c!='\n'&&c!=' ')a[i++]=c,c=gx();a[i]=0;return i;}
void print(int n){if(n<0){n=-n;px('-');}int i=10;char o[10];do{o[--i]=(n%10)+'0';n/=10;}while(n);do{px(o[i]);}while(++i<10);}
void lprint(LL n){if(n<0LL){n=-n;px('-');}int i=21;char o[21];do{o[--i]=(n%10LL)+'0';n/=10LL;}while(n);do{px(o[i]);}while(++i<21);}
void sprint(const char*a){const char*p=a;while(*p)px(*p++);}
LL power(LL b,LL e,LL m=MOD){LL r=1;while(e){if(e&1)r=(r*b)%m;b=(b*b)%m;e>>=1;}return r;}
LL minv(LL a,LL m=MOD){LL c,t,q,x,y;c=m;x=0;y=1;while(a>1){q=a/c;t=c;c=a%c;a=t;t=x;x=y-q*x;y=t;}if(y<0)y+=m;return y;}
LL mmul(LL a,LL b,LL m=MOD){LL x=0,y=a%m;while(b){if(b&1)x=(x+y)%m;y=(y<<1)%m;b>>=1;}return x%m;}
LL absll(LL x){if(x<0)return -x;return x;}

LL n, m, e;
LL i, j, k, l;
LL x, y, z, tot, rem, num, change;
set<LL> values;
map<LL,LL> wallet;
map<LL,LL> spend;

vector< vector<LL> > ATMs;
vector<LL> ATM;

int main() {
    lscan(n); lscan(m);
    LL vv[100], aa[100];
    for( i = 0; i < n; ++i ) {
        lscan( vv[i] );
        values.insert( vv[i] );
    }
    for( i = 0; i < n; ++i ) lscan( aa[i] );
    for( i = 0; i < n; ++i ) {
        wallet.insert( pair<LL,LL>(vv[i], aa[i]) );
        spend.insert( pair<LL,LL>(vv[i], 0) );
    }
    for( i = 0; i < m; ++i ) {
        ATM.clear();
        lscan(k);
        for( j = 0; j < k; ++j ) {
            lscan(l);
            ATM.push_back(l);
        }
        sort( ATM.begin(), ATM.end() );
        ATMs.push_back(ATM);
    }

    lscan(e);
    string etype;
    while(e--) {
        cin >> etype;
        switch(etype[0]) {

            case 'P' :
                lscan(x);
                tot = 0;
                for( auto it = spend.begin(); it != spend.end(); ++it ) it->second = 0;

                //Display part
                //cout << "BEFORE PAYING : " << endl;
                //for( auto it = wallet.begin(); it != wallet.end(); ++it ) cout << it->first << "-" << it->second << " | ";
                //cout << endl;
                //for( auto it = spend.begin(); it != spend.end(); ++it ) cout << it->first << "-" << it->second << " | ";
                //cout << endl;
                //End of display part

                // First, go from max to min value and greedy fill spend
                for( auto it = wallet.rbegin(), jt = spend.rbegin(); it != wallet.rend(); ++it, ++jt ) {
                    rem = x - tot;
                    if( rem >= it->first ) {
                        num = rem / it->first;
                        if( it->second < num ) num = it->second;
                        tot += num * (it->first);
                        it->second -= num;
                        jt->second += num;
                    }
                }
                rem = x - tot;
                //cout << "After R-L Greedy, total is " << tot << " rem is " << rem << endl;

                if( rem > 0 ) {
                    for( auto it = wallet.begin(), jt = spend.begin(); it != wallet.end(); ++it, ++jt ) {
                        rem = x - tot;
                        z = it->first * it->second;
                        if( z < rem ) {
                            tot += z;
                            jt->second += it->second;
                            it->second = 0;
                            continue;
                        }
                        if( z == rem ) {
                            tot += z;
                            jt->second += it->second;
                            it->second = 0;
                            break;
                        }
                        num = rem / it->first;
                        ++num;
                        tot += num * (it->first);
                        it->second -= num;
                        jt->second += num;
                        break;
                    }
                }

                change = tot - x;

                //Display part
                //cout << "BEFORE RECOVERY : " << endl;
                //for( auto it = wallet.begin(); it != wallet.end(); ++it ) cout << it->first << "-" << it->second << " | ";
                //cout << endl;
                //for( auto it = spend.begin(); it != spend.end(); ++it ) cout << it->first << "-" << it->second << " | ";
                //cout << endl;
                //End of display part

                // Recover some of the change by not spending small notes.
                //cout << "Change = " << change << endl;
                if( change > 0 ) {
                    for( auto it = wallet.begin(), jt = spend.begin(); it != wallet.end(); ++it, ++jt ) {
                        if( it->first > change ) break;
                        num = change / it->first;
                        if( num > jt->second ) num = jt->second;
                        change -= num * (it->first);
                        it->second += num;
                        jt->second -= num;
                    }
                }
                //cout << "Change = " << change << endl;

                // Display the spend
                for( auto it : spend ) cout << it.second << " ";
                cout << endl; fflush(stdout);

                // Greedy fill wallet with change
                tot = 0;
                for( auto it = wallet.rbegin(); it != wallet.rend(); ++it ) {
                    rem = change - tot;
                    if( rem >= it->first ) {
                        num = rem / it->first;
                        tot += num * (it->first);
                        it->second += num;
                    }
                }

                //Display part
                //cout << "AFTER PAYING : " << endl;
                //for( auto it = wallet.begin(); it != wallet.end(); ++it ) cout << it->first << "-" << it->second << " | ";
                //cout << endl;
                //for( auto it = spend.begin(); it != spend.end(); ++it ) cout << it->first << "-" << it->second << " | ";
                //cout << endl;
                //End of display part
            break;

            case 'R' :
            {
                lscan(x);

                // Decide between two heuristics
                // 1 - max number of 1s (ie only one note in atm, or largest 2nd note)
                // 2 - all small notes - largest note is smallest.

                z = 0; // ATM index :D
                for( i = 0; i < ATMs.size(); ++i ) {
                    if( ATMs[i].size() == 1 ) break;
                }
                if( i != ATMs.size() ) {
                    // Best case - ATM with only 1s
                    //cout << "DID A CASE 1 FILL !! " << endl;
                    auto it = wallet.begin();
                    it->second += x;
                    cout << i+1 << endl;
                    fflush(stdout);
                    break;
                }

                //cout << "Attempting case 2 or 3 " << endl;
                // Have to pick one now - first, if largest note is within the first sqrt(n) notes;
                //cout << "The notes : ";for( auto xt : values ) cout << xt << " "; cout << endl;
                //y = (LL)(sqrt(values.size()) + 1);
                //num = y-1;
                //set<LL>::iterator it = values.begin();
                //while(num--) ++it;
                //y = *it; // Max size of largest
                //cout << "Got y = " << y << endl;


                /*num = INT_MAX; // Min largest, z is index
                for( i = 0; i < ATMs.size(); ++i ) {
                    rem = ATMs[i][ATMs[i].size()-1];
                    //if( rem < y ) {
                        if( rem < num ) {
                            num = rem;
                            z = i;
                        }
                    //}
                }

                if( num != INT_MAX ) { // FOUND !!!
                    //cout << "DID A CASE 2 FILL !! " << endl;
                    cout << z+1 << endl; fflush(stdout);
                    tot = 0;
                    for( i = ATMs[z].size()-1; i >= 0; --i ) {
                        rem = x - tot;
                        if( rem >= ATMs[z][i] ) {
                            num = rem / ATMs[z][i];
                            tot += num * ATMs[z][i];
                            wallet[ATMs[z][i]] += num;
                        }
                    }
                    break;
                }

                //cout << "DID A CASE 3 FILL !! " << endl;
                z = 0;
                rem = 0;
                for( i = 0; i < ATMs.size(); ++i ) {
                    if( ATMs[i][1] > rem ) {
                        rem = ATMs[i][1];
                        z = i;
                    }
                }
                cout << z+1 << endl; fflush(stdout);
                tot = 0;
                for( i = ATMs[z].size()-1; i >= 0; --i ) {
                    rem = x - tot;
                    if( rem >= ATMs[z][i] ) {
                        num = rem / ATMs[z][i];
                        tot += num * ATMs[z][i];
                        wallet[ATMs[z][i]] += num;
                    }
                }*/


                z = 0;
                rem = 0;
                double mxx = 0;
                for( i = 0; i < ATMs.size(); ++i ) {
                    int masiz = (int)(ATMs[i].size());
                    long double xp = 1;
                    for( j = 1; j < min(2,masiz); ++j ) {
                        xp *= (long double)(ATMs[i][j]) / (long double)(ATMs[i][j-1]);
                    }
                    if( xp > mxx ) {
                        mxx = xp;
                        z = i;
                    }
                }
                cout << z+1 << endl; fflush(stdout);
                tot = 0;
                for( i = ATMs[z].size()-1; i >= 0; --i ) {
                    rem = x - tot;
                    if( rem >= ATMs[z][i] ) {
                        num = rem / ATMs[z][i];
                        tot += num * ATMs[z][i];
                        wallet[ATMs[z][i]] += num;
                    }
                }
            }
            break;

            case 'B' :
                lscan(x);
                values.insert(x);
                wallet.insert( pair<LL,LL>(x,0) );
                spend.insert( pair<LL,LL>(x,0) );
            break;

            case 'A' :
                ATM.clear();
                lscan(k);
                for( j = 0; j < k; ++j ) {
                    lscan(l);
                    ATM.push_back(l);
                }
                sort( ATM.begin(), ATM.end() );
                ATMs.push_back(ATM);
            break;

        }
    }
    return 0;
}
