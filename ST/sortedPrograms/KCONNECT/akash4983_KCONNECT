#include <cstdio>
#include <cmath>
#include <iostream>
#include <set>
#include <algorithm>
#include <vector>
#include <map>
#include <cassert>
#include <string>
#include <cstring>
#include <queue>

using namespace std;

#define rep(i,a,b) for(int i = a; i < b; i++)
#define S(x) scanf("%d",&x)
#define S2(x,y) scanf("%d%d",&x,&y)
#define P(x) printf("%d\n",x)
#define all(v) v.begin(),v.end()
#define FF first
#define SS second

typedef long long int LL;
typedef pair<int, int > pii;
typedef vector<int > vi;

int mod;

const int N = 101;
LL dp1[N];
LL C[N][N];
LL PW[N*N];
LL dp2[N][N];
LL dp3[N][N];

LL _pow(LL a, LL b) {
  if(!b) return 1;
  if(b == 1) return a;
  if(b == 2) return a * a % mod;
  if(b & 1) {
    return a * _pow(a,b-1) % mod;
  }
  return _pow(_pow(a,b/2),2);
}

int main() {
  int t;
  S(t);
  while(t--) {
    int n,k;
    scanf("%d%d%d",&n,&k,&mod);

    if(mod == 1) {
      P(0);
      continue;
    }

    C[0][0] = 1;
    rep(i,1,n+1) {
      C[i][0] = C[i][i] = 1;
      rep(j,1,i) {
        C[i][j] = (C[i-1][j-1] + C[i-1][j]) % mod;
      }
    }

    dp1[0] = 1;
    PW[0] = 1;
    rep(i,1,N*N) {
      PW[i] = (PW[i-1] * 2LL) % mod;
    }
    rep(i,1,n+1) {
      dp1[i] = PW[i * (i - 1) / 2];
      rep(j,1,i) {
        dp1[i] -= ((C[i-1][j-1] % mod) * dp1[j] % mod) * PW[(i - j) * (i - j - 1) / 2] % mod;
        if(dp1[i] < 0) dp1[i] += mod;
      }
    }

    dp2[0][0] = 1;
    // dp3[0][0][0] = 1;
    // rep(i,1,n+1) dp3[0][0][i] = 1;
    rep(nodes, 1, n+1) rep(comp, 1, k+1) {
      dp2[nodes][comp] = 0;
      rep(lar, 0, nodes) {
        dp2[nodes][comp] += (C[nodes-1][lar] * dp1[lar+1] % mod) * dp2[nodes-1-lar][comp-1] % mod;
        dp2[nodes][comp] %= mod;
      }
    }

    int ans = dp2[n][k];

    if(k == 1) {
      ans -= 1;
      if(ans < 0) ans += mod;
    }
    P(ans);

  }
  return 0;
}