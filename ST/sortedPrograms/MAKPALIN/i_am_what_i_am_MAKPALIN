#include<bits/stdc++.h>
using namespace std;

string s;
int n;



long long MOD=1e9+7;

vector<long long> forwardHash;
vector<long long> reverseHash;


void preprocess()
{
	forwardHash.clear();
	reverseHash.clear();

	forwardHash.resize(n);
	reverseHash.resize(n);
		
	long long prev=1;
	long long curr=0;
	
	for(int i=0;i<n;i++)
	 {
	 	int d=s[i]-'a'+1;
	 	curr+=d*prev;
	 	curr%=MOD;
	 	prev=(prev*29)%MOD;
	 //	cout<<"d "<<d<<" "<<curr<<" "<<prev<<endl;
	 	forwardHash[i]=curr;
	 }
	prev=1;
	curr=0;
	for(int i=n-1;i>=0;i--)
	 {
	 	int d=s[i]-'a'+1;
	 	curr+=d*prev;
	 	curr%=MOD;
	 	prev=(prev*29)%MOD;
	 	reverseHash[i]=curr;
	 }
	/*
	for(int i=0;i<n;i++)
	 cout<<forwardHash[i]<<" ";
	cout<<endl;
	for(int i=0;i<n;i++)
	 cout<<reverseHash[i]<<" ";
	cout<<endl;*/
	
}

long long mulmod(long long a,long long b)
{
	if(b==0)
	 return 1;
	if(b==1)
	 return a;
	long long c=mulmod(a,b/2);
	c=(c*c)%MOD;
	if(b%2)
	 c=(c*a)%MOD;
	return c;
}

long long getForwardHash(int st,int end)
{
	if(st==0)
	 return forwardHash[end];
	// cout<<"in hash frwd "<<st<<" "<<end<<endl;
	long long ans=(forwardHash[end]-forwardHash[st-1]+MOD)%MOD;
	//cout<<ans<<endl;
	long long div=mulmod(29,st);
	div=mulmod(div,MOD-2);
	ans=(ans*div)%MOD;
//	cout<<"Ans "<<ans<<endl;
	return ans;
}


long long getReverseHash(int st,int end)
{
	if(end==n-1)
	 return reverseHash[st];
	long long ans=(reverseHash[st]-reverseHash[end+1]+MOD)%MOD;
	
	long long div=mulmod(29,n-end-1);
	div=mulmod(div,MOD-2);
	ans=(ans*div)%MOD;
	return ans;
}


bool check(int firstSt,int firstEnd,int secondSt, int secondEnd)
{
	if(firstSt>=firstEnd)
	 {
	 	return true;
	 }
	  
	long long frontHash=getForwardHash(firstSt,firstEnd);
	long long backHash=getReverseHash(secondSt,secondEnd);	
	//cout<<"check on "<<firstSt<<" "<<firstEnd<<" "<<secondSt<<" "<<secondEnd<<endl;

	//cout<<frontHash<<" "<<backHash<<endl;
	
	return (frontHash==backHash);
	
}

bool test2(int pos)
{	int firstFew=pos;
//cout<<"At "<<pos<<endl;
	if(pos<=n/2)
	 {
	 	int firstStart=0;
	 	int firstEnd=pos-1;
	 	int lastStart=n-pos;
	 	int lastEnd=n-1;
	 	if(pos==0)
	 	 lastEnd=n-2;
	 	
	 	if(check(firstStart,firstEnd,lastStart,lastEnd) && check(pos,n-pos-2,pos,n-pos-2))
	 	 {
	 	 		return true;
		 }
		 return false;
	 }
	else
	 {
			int secondStart=pos;
			int secondEnd=n-1;
			int secondLen=secondEnd-secondStart;
			int firstStart=0;
			if(pos==n)
			 firstStart=1;
			int firstEnd=firstStart+secondLen;
			int reflectedPt=n-pos;
			if(check(firstStart,firstEnd,secondStart,secondEnd) && check(reflectedPt+1,secondStart-1,reflectedPt+1,secondStart-1))
	 		 {
	 	 		return true;
			 }
		 	return false;
			
	 }
	
}

void eval()
{
	cin>>s;
	
	n=s.size();
	int c=0;

	preprocess();

	for(int i=0;i<=n;i++)
	 {
	 	if(test2(i)) c++;
	// 	cout<<i<<" "<<c<<endl;
	 }
	 cout<<c<<endl;
}

int main()
{
	#ifndef ONLINE_JUDGE
	freopen("in.txt","r",stdin);
//	freopen("out.txt","w",stdout);
	#endif
	
	int t;
	cin>>t;
	for(int te=1;te<=t;te++)
	{
		eval();
	}
	
	
}