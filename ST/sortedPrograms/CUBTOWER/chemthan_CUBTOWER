#include <bits/stdc++.h>
using namespace std;

#define ms(s, n) memset(s, n, sizeof(s))
#define FOR(i, a, b) for (int i = (a); i < (b); i++)
#define FORd(i, a, b) for (int i = (a) - 1; i >= (b); i--)
#define FORall(it, a) for (__typeof((a).begin()) it = (a).begin(); it != (a).end(); it++)
#define sz(a) int((a).size())
#define present(t, x) (t.find(x) != t.end())
#define all(a) (a).begin(), (a).end()
#define uni(a) (a).erase(unique(all(a)), (a).end())
#define pb push_back
#define pf push_front
#define mp make_pair
#define fi first
#define se second
#define prec(n) fixed<<setprecision(n)
#define bit(n, i) (((n) >> (i)) & 1)
#define bitcount(n) __builtin_popcountll(n)
typedef long long ll;
typedef unsigned long long ull;
typedef long double ld;
typedef pair<int, int> pi;
typedef vector<int> vi;
typedef vector<pi> vii;
const int MOD = (int) 1e9 + 7;
const int INF = (int) 1e9;
const ll LINF = (ll) 1e18;
const ld PI = acos((ld) -1);
const ld EPS = 1e-9;
inline ll gcd(ll a, ll b) {ll r; while (b) {r = a % b; a = b; b = r;} return a;}
inline ll lcm(ll a, ll b) {return a / gcd(a, b) * b;}
inline ll fpow(ll n, ll k, int p = MOD) {ll r = 1; for (; k; k >>= 1) {if (k & 1) r = r * n % p; n = n * n % p;} return r;}
template<class T> inline int chkmin(T& a, const T& val) {return a > val ? a = val, 1 : 0;}
template<class T> inline int chkmax(T& a, const T& val) {return a < val ? a = val, 1 : 0;}
inline ll isqrt(ll k) {ll r = sqrt(k) + 1; while (r * r > k) r--; return r;}
inline ll icbrt(ll k) {ll r = cbrt(k) + 1; while (r * r * r > k) r--; return r;}
inline void addmod(int& a, int val, int p = MOD) {if ((a = (a + val)) >= p) a -= p;}
inline void submod(int& a, int val, int p = MOD) {if ((a = (a - val)) < 0) a += p;}
inline int mult(int a, int b, int p = MOD) {return (ll) a * b % p;}
inline int inv(int a, int p = MOD) {return fpow(a, p - 2, p);}

struct RangeQuery {
	static const int maxn = 100010;
	static const int magic = 320;
	int a[maxn];
	int block[magic];
	vector<int> his;
	
	void clear() {
		while (his.size()) {
			int k = his.back();
			a[k] = block[k / magic] = 0;
			his.pop_back();
		}
	}
	int upd(int val, int type) {
		if (!type) {
			if (!(a[val]++)) {
				his.push_back(val);
			}
			block[val / magic]++;
		}
		else {
			if (!a[val]) {
				a[val]++;
				block[val / magic]++;
				his.push_back(val);
			}
		}
	}
	int query(int l, int r) {
		int res = 0;
		int u = l / magic;
		int v = r / magic;
		for (int i = u + 1; i < v; i++) {
			res += block[i];
		}
		for (int i = l; i <= min(r, (u + 1) * magic - 1); i++) {
			res += a[i];
		}
		if (u < v) {
			for (int i = max(l, v * magic); i <= r; i++) {
				res += a[i];
			}
		}
		return res;
	}
} rq[2];

const int maxn = 200010;
int n, m, q;
string w[maxn];
int pr = 257;
int pw[maxn];
int rp[maxn];
int hs[maxn];
vi ths[maxn];
vii g[maxn];
unordered_map<int, int> tb;
vector<pair<pi, pi> > que[maxn];
int ans[maxn];

int calchash(int u, int l, int r) {
	int res = ths[u][r];
	if (l) {
		submod(res, ths[u][l - 1]);
		res = mult(res, rp[l]);
	}
	return res;
}

void solve() {
	pw[0] = 1; FOR(i, 1, maxn) pw[i] = mult(pw[i - 1], pr);
	FOR(i, 0, maxn) rp[i] = inv(pw[i]);
	cin>>n>>m>>q;
	vi vsz;
	FOR(i, 0, m) {
		cin>>w[i];
		FOR(j, 0, sz(w[i])) {
			hs[i] = mult(hs[i], pr);
			addmod(hs[i], w[i][j]);
		}
		tb[hs[i]] = i;
		vsz.pb(sz(w[i]));
	}
	sort(all(vsz)); uni(vsz);
	int nque = 0;
	FOR(i, 0, q) {
		int op; cin>>op;
		if (op == 0) {
			int x; string c; cin>>x>>c; x--;
			if (!sz(ths[x])) {
				ths[x].pb(c[0]);
			}
			else {
				int t = ths[x].back();
				int k = sz(ths[x]);
				addmod(t, mult(c[0], pw[k]));
				ths[x].pb(t);
			}
			FOR(j, 0, sz(vsz)) {
				int k = vsz[j];
				if (k <= sz(ths[x])) {
					int t = calchash(x, sz(ths[x]) - k, sz(ths[x]) - 1);
					if (tb.count(t)) {
						g[tb[t]].pb(mp(x, nque));
					}
				}
			}
		}
		else if (op == 1) {
			int l, r, p; cin>>l>>r>>p; l--; r--; p--;
			que[p].pb(mp(mp(l, r), mp(1, nque++)));
		}
		else if (op == 2) {
			int l, r, p; cin>>l>>r>>p; l--; r--; p--;
			que[p].pb(mp(mp(l, r), mp(2, nque++)));
		}
	}
	FOR(i, 0, m) {
		rq[0].clear(); rq[1].clear();
		int cur = 0;
		FOR(j, 0, sz(que[i])) {
			int l = que[i][j].fi.fi;
			int r = que[i][j].fi.se;
			int op = que[i][j].se.fi;
			int idx = que[i][j].se.se;
			while (cur < sz(g[i]) && g[i][cur].se <= idx) {
				rq[0].upd(g[i][cur].fi, 0);
				rq[1].upd(g[i][cur].fi, 1);
				cur++;
			}
			if (op == 1) {
				ans[idx] = rq[1].query(l, r);
			}
			else {
				ans[idx] = rq[0].query(l, r);
			}
		}
	}
	FOR(i, 0, nque) cout<<ans[i]<<"\n";
}

int main() {
	ios_base::sync_with_stdio(0); cin.tie(0);
#ifdef _LOCAL_
	freopen("in.txt", "r", stdin); //freopen("out.txt", "w", stdout);
#endif
	solve();
#ifdef _LOCAL_
	//printf("\nTime elapsed: %dms", 1000 * clock() / CLOCKS_PER_SEC);
#endif
	return 0;
}
