// Program and program template by vvneagleone

#include<cstdio>
#include<iostream>
#include<iomanip>
#include<algorithm>
#include<cmath>
#include<string>
#include<cstring>
#include<climits>
#include<vector>
#include<utility>
#include<queue>
#include<set>
#include<map>
using namespace std;
typedef long long LL;
typedef long double LD;
#define MOD 1000000007LL

#ifdef __GNUC__
    #if ( __GNUC__ >= 4 && __GNUC_MINOR__ >= 7 && __cplusplus > 201100L )
        #include<unordered_set>
        #include<unordered_map>
    #endif
#endif // __GNUC__

#ifdef __WIN32
    #define gx getchar
    #define px putchar
    #define ps putchar(' ')
    #define pn putchar('\n')
#else
    #define gx getchar_unlocked
    #define px putchar_unlocked
    #define ps putchar_unlocked(' ')
    #define pn putchar_unlocked('\n')
#endif // __WIN32

void scan(int &n){int sign=1;n=0;char c=gx();while(c<'0'||c>'9'){if(c=='-')sign=-1;c=gx();}while(c>='0'&&c<='9')n=(n<<3)+(n<<1)+c-'0',c=gx();n=n*sign;}
void lscan(LL &n){int sign=1;n=0;char c=gx();while(c<'0'||c>'9'){if(c=='-')sign=-1;c=gx();}while(c>='0'&&c<='9')n=(n<<3)+(n<<1)+c-'0',c=gx();n=n*(LL)(sign);}
int sscan(char a[]){char c=gx();while(c==' '||c=='\n')c=gx();int i=0;while(c!='\n')a[i++]=c,c=gx();a[i]=0;return i;}
int wscan(char a[]){char c=gx();while(c==' '||c=='\n')c=gx();int i=0;while(c!='\n'&&c!=' ')a[i++]=c,c=gx();a[i]=0;return i;}
void print(int n){if(n<0){n=-n;px('-');}int i=10;char o[10];do{o[--i]=(n%10)+'0';n/=10;}while(n);do{px(o[i]);}while(++i<10);}
void lprint(LL n){if(n<0LL){n=-n;px('-');}int i=21;char o[21];do{o[--i]=(n%10LL)+'0';n/=10LL;}while(n);do{px(o[i]);}while(++i<21);}
void sprint(const char*a){const char*p=a;while(*p)px(*p++);}
LL power(LL b,LL e,LL m=MOD){LL r=1;while(e){if(e&1)r=(r*b)%m;b=(b*b)%m;e>>=1;}return r;}
LL minv(LL a,LL m=MOD){LL c,t,q,x,y;c=m;x=0;y=1;while(a>1){q=a/c;t=c;c=a%c;a=t;t=x;x=y-q*x;y=t;}if(y<0)y+=m;return y;}
LL mmul(LL a,LL b,LL m=MOD){LL x=0,y=a%m;while(b){if(b&1)x=(x+y)%m;y=(y<<1)%m;b>>=1;}return x%m;}
LL absll(LL x){if(x<0)return -x;return x;}

int t, n, i, j, k;
int A[1003][1003];
int mark[1003];
vector<int> G[1003];

vector< vector<int> > large;
vector< vector<int> > small;
vector<int> comp, lar, sma, dif;

bool bip_flag;

void dfs( int i, int col ) {
    comp.push_back(i);
    mark[i] = col;
    for( auto j : G[i] ) {
        if( mark[j] == col ) {
            bip_flag = 1;
            return;
        }
        if( mark[j] == 0 ) {
            dfs( j, 3-col );
        }
    }
}

int main() {
    scan(t);
    while(t--) {
        scan(n);
        for( i = 0; i < 1003; ++i ) {
            // clear all the crap here
            G[i].clear();
            large.clear();
            small.clear();
            dif.clear();
            mark[i] = 0;
        }
        for( i = 0; i < n; ++i ) {
            for( j = 0; j < n; ++j ) {
                scan(A[i][j]);
                if( A[i][j] && i >= j ) {
                    G[i].push_back(j);
                    G[j].push_back(i);
                }
            }
        }

        // traverse G and make components
        for( i = 0; i < n; ++i ) {
            if( mark[i] == 0 ) {
                comp.clear();
                bip_flag = 0;
                dfs(i, 1);
                if( bip_flag ) break;
                // separate the component
                lar.clear(); sma.clear();
                for( auto it : comp ) {
                    if( mark[it] == 1 ) lar.push_back(it);
                    else sma.push_back(it);
                }
                if( lar.size() < sma.size() ) lar.swap(sma);
                large.push_back(lar);
                small.push_back(sma);

                dif.push_back(lar.size()-sma.size());

                //cout << "Larger : "; for ( auto it : lar ) cout << it << " ";
                //cout << endl; cout << "Smaller : "; for ( auto it : sma ) cout << it << " ";
                //cout << endl;

                // WORKS ^
            }
        }

        if( bip_flag ) {
            // print not possible and continue
            cout << "-1" << endl;
            continue;
        }

        LL sum = 0;
        for( auto it : dif ) sum += it;
        vector<int> V[1003];
        bool vb[1003];
        for( int i = 0; i < 1003; ++i ) vb[i] = 0;
        vb[0] = 1;
        for( int i = 0; i < dif.size(); ++i ) {
            for( int j = sum/2; j >= dif[i]; --j ) {
                if( vb[j-dif[i]] ) {
                    vb[j] = 1;
                    V[j] = V[j-dif[i]];
                    V[j].push_back(i);
                }
            }
        }

        int hsum = sum/2;
        while( vb[hsum] == 0 ) --hsum;

        // V[hsum] now contains everything you can make large 1;
        LL answer[1003];
        for( i = 0; i < 1003; ++i ) mark[i] = 0;
        for( i = 0; i < 1003; ++i ) answer[i] = 0;

        for( auto it : V[hsum] ) {
            // make large[it] contents 1 and small[it] contents 0;
            mark[it] = 1;
            for( auto jt : large[it] ) answer[jt] = 1;
        }
        for( int i = 0; i < small.size(); ++i ) {
            if( mark[i] == 0 ) {
                for( auto jt : small[i] ) answer[jt] = 1;
            }
        }

        for( i = 0; i < n; ++i ) cout << answer[i] << " ";
        cout << endl;

    }
    return 0;
}
