#include<iostream>
#include<cstdio>
#include<cstring>
#include<string>
#include<cctype>
#include<cstdlib>
#include<algorithm>
#include<bitset>
#include<vector>
#include<list>
#include<deque>
#include<queue>
#include<map>
#include<set>
#include<stack>
#include<cmath>
#include<sstream>
#include<fstream>
#include<iomanip>
#include<ctime>
#include<complex>
#include<functional>
#include<climits>
#include<cassert>
#include<iterator>
//#include<unordered_set>
//#include<unordered_map>
using namespace std;
void read(int *x){
	int k, m = 0; *x = 0;
	while (1){
		k = getchar();
		if (k == '-'){
			m = 1;
			break;
		}
		if ('0' <= k&&k <= '9'){
			*x = k - '0';
			break;
		}
	}
	while (1){
		k = getchar();
		if (k<'0' || k>'9')break;
		*x = (*x) * 10 + k - '0';
	}
	if (m)(*x) = -(*x);
}
unsigned int randxor()
{
	static unsigned int x = 123456789, y = 362436069, z = 521288629, w = 88675123;
	unsigned int t;
	t = (x ^ (x << 11)); x = y; y = z; z = w; return(w = (w ^ (w >> 19)) ^ (t ^ (t >> 8)));
}
#define MOD 1000000007
struct node{
	long long int val;
	int pri;
	node *l;
	node *r;
	int countt;
	node *p;  //parent
	node(int b = 0){
		p = NULL;
		countt = 1;
		val = b;
		pri = randxor() % 10000000 + 1;
		l = NULL;
		r = NULL;
	}
};
class treap{
public:
	node *root;
	treap(){
		root = NULL;
	}
	int get_countt(node *a){
		if (!a){
			return 0;
		}
		else{
			return a->countt;
		}
	}
	void update(node *a){
		if (!a){
			return;
		}
		a->countt = 0;
		if ((a->r)){
			a->r->p = a;
			a->countt += a->r->countt;
		}
		if ((a->l)){
			a->l->p = a;
			a->countt += a->l->countt;
		}
		a->countt++;
	}
	void merge(node *&c, node *a, node *b){
		if (!a || !b){
			c = a ? a : b;
			return;
		}
		if (a->pri > b->pri){
			merge(a->r, a->r, b);
			c = a;
		}
		else{
			merge(b->l, a, b->l);
			c = b;
		}
		update(c);
	}
	void split(node *a, node *&l, node *&r, int k, int add = 0){
		if (!a){
			l = r = NULL;
			return;
		}
		int countt = get_countt(a->l) + add;
		if (countt >= k){
			split(a->l, l, a->l, k, add);
			r = a;
		}
		else{
			split(a->r, a->r, r, k, add + get_countt(a->l) + 1);
			l = a;
		}
		update(l);
		update(r);
	}
	node* insert(int b, int val){
		node *a = new node(val);
		node *t = NULL;
		node *tt = NULL;
		split(root, t, tt, b);
		merge(root, t, a);
		merge(root, root, tt);
		return a;
	}
	void erase(int b){
		node *t;
		node *tt;
		node *ttt;
		split(root, t, tt, b);
		split(tt, tt, ttt, 1);
		merge(root, t, ttt);
	}
	int get_index(node *a){  //0-based
		int countt = 0;
		while (a){
			countt += get_countt(a->l);
			a = a->p;
			if (a){
				countt++;
			}
		}
		return countt;
	}
};

treap T;

#define MAX 200002

int n;
int a[MAX];
int b[MAX];

int q;
long long int ans[MAX];

vector<int> vv;
bool flag1;
bool flag2;
bool flag3;
bool flag4;
bool flag5;

bool only5 = true;
bool only25 = true;
bool only1 = true;
bool only125 = true;

struct st{
	int ty;
	int l;
	int r;
	int val;
	st(){
		scanf("%d", &ty);
		if (ty == 1){
			flag1 = true;
		}
		if (ty == 2){
			flag2 = true;
		}
		if (ty == 3){
			flag3 = true;
		}
		if (ty == 4){
			flag4 = true;
		}
		if (ty == 5){
			flag5 = true;
		}
		if (ty != 1 && ty != 2 && ty != 5){
			only125 = false;
		}
		if (ty != 5){
			only5 = false;
		}
		if (ty != 2 && ty != 5){
			only25 = false;
		}
		if (ty != 1){
			only1 = false;
		}
		if (ty == 3){
			scanf("%d", &l);
			l--;
		}
		else{
			scanf("%d%d", &l, &r);
			l--;
		}
		if (ty == 5 || ty == 1){
			r--;
		}
		if (ty == 2 || ty == 4){
			vv.push_back(r);
		}
		if (ty == 4){
			l++;
		}
	}
};

vector<st> v;

int A[MAX];  //treap's array
int N;

inline void dfs(node *b){
	if (b->l){
		dfs(b->l);
	}
	A[N] = b->val;
	N++;
	if (b->r){
		dfs(b->r);
	}
}
void init(){
	N = 0;
	dfs(T.root);
}

void ex2(int i){
	T.erase(v[i].l);
	T.insert(v[i].l, v[i].r);
}
void ex3(int i){
	T.erase(v[i].l);
}
void ex4(int i){
	T.insert(v[i].l, v[i].r);
}
int use[MAX];
int u_s = 0;
int get_ind(int &val){
	return lower_bound(vv.begin(), vv.end(), val) - vv.begin();
}
void brute_ex1(int l, int r){
	long long int ans = 0;
	long long int one = 0;
	long long int two = 0;
	long long int three = 0;
	u_s++;
	for (int i = l; i <= r; i++){
		if (use[get_ind(A[i])] == u_s){
			continue;
		}
		use[get_ind(A[i])] = u_s;
		three += (long long int)(A[i])*two;
		two += (long long int)(A[i])*one;
		one += (long long int)(A[i]);
		if (three >= MOD){
			three %= MOD;
		}
		if (two >= MOD){
			two %= MOD;
		}
		if (one >= MOD){
			one %= MOD;
		}
	}
	printf("%lld\n", three);
}
void brute_ex5(int l, int r){
	int countt = 0;
	u_s++;
	for (int i = l; i <= r; i++){
		if (use[get_ind(A[i])] == u_s){
			continue;
		}
		use[get_ind(A[i])] = u_s;
		countt++;
	}
	printf("%d\n", countt);
}
long long int ppow(long long int i, long long int j){
	long long int res = 1LL;
	while (j){
		if ((i & 1LL)){
			res *= i;
			if (res >= MOD){
				res %= MOD;
			}
		}
		i *= i;
		if (i >= MOD){
			i %= MOD;
		}
	}
	return res;
}
int unit = sqrt(MAX);
struct ss{
	int l;
	int r;
	int ind;
	int ll;
	int rr;
	ss(int l_, int r_, int ind_){
		l = l_;
		r = r_;
		ind = ind_;
		ll = l / unit;
		rr = r / unit;
	}
};
vector<ss> V;
bool cmp(ss a, ss b){
	if (a.ll == b.ll){
		return a.r < b.r;
	}
	return a.ll < b.ll;
}
int cnt[MAX];
long long int one = 0;
long long int two = 0;
long long int three = 0;
int USS = 0;
int USE[MAX];
void ins(long long int val, int v){
	if (USE[v] != USS){
		USE[v] = USS;
		cnt[v] = 0;
	}
	if (cnt[v]){
		cnt[v]++;
		return;
	}
	cnt[v]++;
	three += two*(long long int)(val);
	two += one*val;
	one += val;
	if (three >= MOD){
		three %= MOD;
	}
	if (two >= MOD){
		two %= MOD;
	}
	if (one >= MOD){
		one %= MOD;
	}
}
void er(long long int val, int v){
	cnt[v]--;
	if (cnt[v]){
		return;
	}
	long long int o = val;
	one -= val;
	while (one <0){
		one += MOD;
	}
	long long int TWO = o*one;
	if (TWO >= MOD){
		TWO %= MOD;
	}
	two += MOD - TWO;
	if (two >= MOD){
		two %= MOD;
	}
	long long int THREE = two*o;
	if (THREE >= MOD){
		THREE %= MOD;
	}
	three += MOD - THREE;
	if (three >= MOD){
		three %= MOD;
	}
}
void only_ex1(){
	for (int i = 0; i < v.size(); i++){
		V.push_back(ss(v[i].l, v[i].r, i));
	}
	sort(V.begin(), V.end(), cmp);
	int l = 0;
	int r = 1;
	ins(a[l], b[l]);
	ins(a[r], b[r]);
	for (int i = 0; i < V.size(); i++){
		int ll = V[i].l;
		int rr = V[i].r;
		while (l > ll){
			ins(a[l - 1], b[l - 1]);
			l--;
		}
		while (r < rr){
			ins(a[r + 1], b[r + 1]);
			r++;
		}
		while (r > rr){
			er(a[r], b[r]);
			r--;
		}
		while (l < ll){
			er(a[l], b[l]);
			l++;
		}
		ans[V[i].ind] = three;
	}
	for (int i = 0; i < v.size(); i++){
		printf("%lld\n", ans[i]);
	}
}
vector<pair<int, int> > Q[MAX];
int bit[MAX];
void add(int i, int x){
	i++;
	while (i <= n){
		bit[i] += x;
		i += i&-i;
	}
}
int sum(int i){
	i++;
	int r = 0;
	while (i){
		r += bit[i];
		i -= i&-i;
	}
	return r;
}
int lastpos[MAX];
void only_ex5(){
	for (int i = 0; i < v.size(); i++){
		Q[v[i].r].push_back(make_pair(v[i].l, i));
	}
	memset(lastpos, -1, sizeof(lastpos));
	for (int i = 0; i < n; i++){
		int val = get_ind(a[i]);
		if (lastpos[val] != -1){
			add(lastpos[val], -1);
		}
		lastpos[val] = i;
		add(i, 1);
		for (int j = 0; j < Q[i].size(); j++){
			int l = Q[i][j].first;
			ans[Q[i][j].second] = sum(i) - sum(l - 1);
		}
	}
	for (int i = 0; i < v.size(); i++){
		printf("%d\n", ans[i]);
	}
}
vector < pair<int, pair<int, int> >  > e;
int bit2[MAX];
int use_bit[MAX];
int u_bit;
void add2(int i, int x){
	i++;
	while (i <= n){
		if (use_bit[i] != u_bit){
			use_bit[i] = u_bit;
			bit2[i] = 0;
		}
		bit2[i] += x;
		i += i&-i;
	}
}
int sum2(int i){
	i++;
	int r = 0;
	while (i){
		if (use_bit[i] != u_bit){
			use_bit[i] = u_bit;
			bit2[i] = 0;
		}
		r += bit2[i];
		i -= i&-i;
	}
	return r;
}
int cnt2[MAX];
int usus[MAX];
int cop[MAX];
int USUS;
vector<int> pos[MAX];
int use_cnt[MAX];
int changed[MAX];
int hcnaged[MAX];
int changed_count[MAX];
int have_changed[MAX];
int have_changed_size;
void E(int l, int r){
	r = min(r, (int)(v.size() - 1));
	for (int i = 0; i < n; i++){
		Q[i].clear();
	}
	for (int i = l; i <= r; i++){
		if (v[i].ty == 5){
			Q[v[i].r].push_back(make_pair(v[i].l, i));
		}
	}
	u_bit++;
	for (int i = 0; i < vv.size(); i++){
		lastpos[i] = -1;
		pos[i].clear();
	}
	int sum = 0;
	for (int i = 0; i < n; i++){
		pos[b[i]].push_back(i);
		if (lastpos[b[i]] != -1){
			add2(lastpos[b[i]], -1);
			sum--;
		}
		lastpos[b[i]] = i;
		sum++;
		add2(i, 1);
		for (int j = 0; j < Q[i].size(); j++){
			int &l = Q[i][j].first;
			int an = sum - sum2(l - 1);
			USUS++;
			have_changed_size = 0;
			for (int k = 0; k < e.size(); k++){
				if (e[k].first > Q[i][j].second){
					break;
				}
				if (l <= e[k].second.first&&e[k].second.first <= i){

				}
				else{
					continue;
				}
				int index = e[k].second.first;
				if (usus[index] != USUS){
					usus[index] = USUS;
					cop[index] = b[index];
				}
				int before = cop[index];
				int after = e[k].second.second;
				if (use_cnt[before] != USUS){
					use_cnt[before] = USUS;
					cnt[before] = 0;
				}
				if (use_cnt[after] != USUS){
					use_cnt[after] = USUS;
					cnt[after] = 0;
				}
				if (changed[index] != USUS){
					if (hcnaged[before] != USUS){
						hcnaged[before] = USUS;
						changed_count[before] = 0;
						have_changed[have_changed_size] = before;
						have_changed_size++;
					}
					changed_count[before]++;
				}
				else{
					cnt[before]--;
					if (cnt[before] == 0){
						an--;
					}
				}
				cnt[after]++;
				if (cnt[after] == 1){
					an++;
					if (hcnaged[after] != USUS){
						hcnaged[after] = USUS;
						changed_count[after] = 0;
						have_changed[have_changed_size] = after;
						have_changed_size++;
					}
				}
				changed[index] = USUS;
				cop[index] = after;
			}
			int si = 0;
			for (int k = 0; k < have_changed_size; k++){
				int &val = have_changed[k];
				si = pos[val].size() - changed_count[val];
				bool flag = false;
				if (pos[val].size() == 0 || pos[val].back()<l){
					continue;
				}
				if (si&&pos[val][si - 1] >= l){
					flag = true;
				}
				if (cnt[val] == 0 && flag){
					continue;
				}
				an--;
			}
			ans[Q[i][j].second] = an;
		}
	}
}
void only_ex5_ex2(bool oo = false){
	int unitt = sqrt(MAX / 2);
	if (unitt == 0){
		unitt++;
	}
	int ind = 0;
	while (ind < v.size()){
		e.clear();
		if (v[ind].ty == 2){
			b[v[ind].l] = v[ind].val;
			ind++;
			continue;
		}
		int j = ind;
		int countt = 0;
		while (j < v.size()){
			if (v[j].ty == 2){
				countt++;
				e.push_back(make_pair(j, make_pair(v[j].l, v[j].val)));
			}
			if (countt > unitt){
				break;
			}
			j++;
		}
		E(ind, j);
		ind = j + 1;
		for (int k = 0; k < e.size(); k++){
			b[e[k].second.first] = e[k].second.second;
		}
	}
	if (!oo){
		for (int i = 0; i < v.size(); i++){
			if (v[i].ty == 5){
				printf("%d\n", ans[i]);
			}
		}
	}
	else{
		int j = 0;
		for (int i = 0; i < v.size(); i++){
			if (v[i].ty == 5){
				ans[j] = ans[i];
				j++;
			}
		}
	}
}
vector<st> v12;
vector<st> v25;
long long int ans12[MAX];
pair < int, pair<int, int> >  ee[MAX];  //query index,changed index,val
int ee_size = 0;
int ans12_size;
long long int ans112[MAX];
void calc(int ll, int rr){
	one = three = two = 0;
	USS++;
	V.clear();
	for (int i = ll; i <= rr; i++){
		if (v12[i].ty == 1){
			V.push_back(ss(v12[i].l, v12[i].r, i));
		}
	}
	sort(V.begin(), V.end(), cmp);
	int l = V[0].l;
	int r = V[0].l;
	ins(vv[b[l]], b[l]);
	for (int i = 0; i < V.size(); i++){
		int ll = V[i].l;
		int rr = V[i].r;
		if (abs(l - ll) > unit * 2){
			one = three = two = 0;
			USS++;
			l = ll;
			r = ll;
			ins(vv[b[l]], b[l]);
		}
		while (l > ll){
			ins(vv[b[l - 1]], b[l - 1]);
			l--;
		}
		while (r < rr){
			ins(vv[b[r + 1]], b[r + 1]);
			r++;
		}
		while (r > rr){
			er(vv[b[r]], b[r]);
			r--;
		}
		while (l < ll){
			er(vv[b[l]], b[l]);
			l++;
		}
		ans12[V[i].ind] = three;
	}
	for (int i = 0; i < V.size(); i++){
		ans112[ans12_size] = ans12[V[i].ind];
		ans12_size++;
	}
}
void only_ex1_ex2(){
	int unitt = sqrt(max(n, (int)v12.size()));
	int ind = 0;
	while (ind < v12.size()){
		if (v12[ind].ty == 2){
			b[v12[ind].l] = v12[ind].val;
			ind++;
			continue;
		}
		int j = ind;
		int countt = 0;
		ee_size = 0;
		while (j < v12.size()){
			if (v12[j].ty == 2){
				countt++;
				ee[ee_size].first = j;
				ee[ee_size].second.first = v12[j].l;
				ee[ee_size].second.second = v12[j].val;
				ee_size++;
			}
			if (countt > unitt){
				break;
			}
			j++;
		}
		if (j == v12.size()){
			j--;
		}
		calc(ind, j);
		ind = j + 1;
	}
}
vector<st> tmp_v;
int tmpb[MAX];
void only_ex1_ex2_ex5(){
	for (int i = 0; i < v.size(); i++){
		if (v[i].ty == 2 || v[i].ty == 1){
			v12.push_back(v[i]);
		}
		if (v[i].ty == 2 || v[i].ty == 5){
			v25.push_back(v[i]);
		}
	}
	tmp_v = v;
	v = v25;
	for (int i = 0; i < n; i++){
		tmpb[i] = b[i];
	}
	only_ex5_ex2(true);
	for (int i = 0; i < n; i++){
		b[i] = tmpb[i];
	}
	only_ex1_ex2();
	int ind = 0;
	int ind2 = 0;
	swap(v, tmp_v);
	for (int i = 0; i < v.size(); i++){
		if (v[i].ty == 2){
			continue;
		}
		if (v[i].ty == 5){
			printf("%d\n", ans[ind]);
			ind++;
		}
		else{
			printf("%lld\n", ans112[ind2]);
			ind2++;
		}
	}
}
int main(){
	read(&n);
	read(&q);
	int unit = sqrt(n + q);
	if (unit == 0){
		unit++;
	}
	for (int i = 0; i < n; i++){
		read(&a[i]);
		vv.push_back(a[i]);
		T.insert(i, a[i]);
	}
	for (int i = 0; i < q; i++){
		v.push_back(st());
	}
	sort(vv.begin(), vv.end());
	vv.erase(unique(vv.begin(), vv.end()), vv.end());
	for (int i = 0; i < n; i++){
		b[i] = lower_bound(vv.begin(), vv.end(), a[i]) - vv.begin();
	}
	for (int i = 0; i < v.size(); i++){
		if (v[i].ty == 2 || v[i].ty == 4){
			v[i].val = lower_bound(vv.begin(), vv.end(), v[i].r) - vv.begin();
		}
	}
	init();
	bool ok = false;
	if (only5){
		only_ex5();
		return 0;
	}
	if (only25){
		only_ex5_ex2();
		return 0;
	}
	if (only1){
		only_ex1();
		return 0;
	}
	if (only125&&n <= 50000 && q <= 50000){
		only_ex1_ex2_ex5();
		return 0;
	}
	for (int i = 0; i < v.size(); i++){
		if (v[i].ty == 2){
			ex2(i);
			ok = true;
			continue;
		}
		if (v[i].ty == 3){
			ex3(i);
			ok = true;
			continue;
		}
		if (v[i].ty == 4){
			ex4(i);
			ok = true;
			continue;
		}
		if (ok){
			init();
			ok = false;
		}
		if (v[i].ty == 1){
			brute_ex1(v[i].l, v[i].r);
		}
		if (v[i].ty == 5){
			brute_ex5(v[i].l, v[i].r);
		}
	}
	return 0;
}