#include<bits/stdc++.h>
#define N 200010
#define M 1000010
#define S 30000010
#define mod 1000000007
using namespace std;
set<int>st[N];
set<int>::iterator it;
int np,lc[S],rc[S],sum[S],rt[N],sum1[S],sum2[S],sum3[S];
int n,q,root,i,V[N],f[N],ln,A[N],X[N],Y[N],j,ux,col[N];
int uy,dfn[N],wz[N],tot,nn,s1,s2,s3,t1,t2,t3;
struct trn{int s,ls,rs,r,v,dad;}a[N];
char ch;
void read(int &x)
{
	for(ch=getchar();ch<'0';ch=getchar());
	for(x=0;ch>='0';ch=getchar())x=x*10+ch-'0';
}
int merge(int x,int y)
{
	if(!x)return y;
	if(!y)return x;
	if(a[x].r>=a[y].r)
	{
		a[x].rs=merge(a[x].rs,y);
		a[a[x].rs].dad=x;
		a[x].s=a[x].v+a[a[x].ls].s+a[a[x].rs].s;
		return x;
	}else
	{
		a[y].ls=merge(x,a[y].ls);
		a[a[y].ls].dad=y;
		a[y].s=a[y].v+a[a[y].ls].s+a[a[y].rs].s;
		return y;
	}
}
void split(int cur,int &x,int &y,int t)
{
	if(!cur){x=y=0;return;}
	if(a[a[cur].ls].s+a[cur].v>t)
	{
		y=cur;
		split(a[cur].ls,x,a[y].ls,t);
		a[a[y].ls].dad=y;
		a[y].s=a[y].v+a[a[y].ls].s+a[a[y].rs].s;
	}else 
	{
		x=cur;
		split(a[cur].rs,a[x].rs,y,t-a[a[cur].ls].s-a[cur].v);
		a[a[x].rs].dad=x;
		a[x].s=a[x].v+a[a[x].ls].s+a[a[x].rs].s;
	}
}
int find(int x,int cur)
{
	if(a[cur].v&&a[a[cur].ls].s==x-1)return cur;
	if(a[a[cur].ls].s>=x)return find(x,a[cur].ls);
	return find(x-a[a[cur].ls].s-a[cur].v,a[cur].rs);
}
int query1(int l,int r,int R,int cur)
{
	if(!cur)return 0;
	if(r<=R)return sum[cur];
	int mid=(l+r)>>1,ans=0;
	ans+=query1(l,mid,R,lc[cur]);
	if(R>mid)ans+=query1(mid+1,r,R,rc[cur]);
	return ans;
}
void add(int l,int r,int t,int x,int y,int &cur)
{
	if(!cur)cur=++np;
	sum[cur]+=x;
	if(t>=0)
	{
		sum1[cur]+=t;
		if(sum1[cur]>=mod)sum1[cur]-=mod;
		sum2[cur]=(sum2[cur]+1ll*t*t)%mod;
		sum3[cur]=(sum3[cur]+1ll*t*t%mod*t)%mod;
	}else
	{
		sum1[cur]+=t;
		if(sum1[cur]<0)sum1[cur]+=mod;
		sum2[cur]=(sum2[cur]-1ll*t*t)%mod;
		if(sum2[cur]<0)sum2[cur]+=mod;
		sum3[cur]=(sum3[cur]+1ll*t*t%mod*t)%mod;
		if(sum3[cur]<0)sum3[cur]+=mod;
	}
	if(l==r)return;
	int mid=(l+r)>>1;
	if(y<=mid)add(l,mid,t,x,y,lc[cur]);
	else add(mid+1,r,t,x,y,rc[cur]);
}
void dfs(int cur)
{
	if(!cur)return;
	dfs(a[cur].ls);
	dfn[++tot]=cur;
	wz[cur]=tot;
	dfs(a[cur].rs);
}
void query(int l,int r,int R,int cur)
{
	if(!cur)return;
	if(R>=r)
	{
		s1+=sum1[cur];
		if(s1>=mod)s1-=mod;
		s2+=sum2[cur];
		if(s2>=mod)s2-=mod;
		s3+=sum3[cur];
		if(s3>=mod)s3-=mod;
		return;
	}
	int mid=(l+r)>>1;
	query(l,mid,R,lc[cur]);
	if(R>mid)query(mid+1,r,R,rc[cur]);
}
void chcolor(int x,int y)
{
	if(col[x])
	{
		st[col[x]].erase(x);
		it=st[col[x]].lower_bound(x);
		if(it!=st[col[x]].end())uy=*it;else uy=0;
		if(it!=st[col[x]].begin())ux=*(--it);else ux=0;
		if(uy)
		{
			for(j=uy;j<=n;j+=j&-j)add(0,n,f[col[x]],1,ux,rt[j]);
			for(j=uy;j<=n;j+=j&-j)add(0,n,-f[col[x]],-1,x,rt[j]);
		}
		for(j=x;j<=n;j+=j&-j)add(0,n,-f[col[x]],-1,ux,rt[j]);
	}
	if(y)
	{
		it=st[y].lower_bound(x);
		if(it!=st[y].end())uy=*it;else uy=0;
		if(it!=st[y].begin())ux=*(--it);else ux=0;
		if(uy)
		{
			for(j=uy;j<=n;j+=j&-j)add(0,n,-f[y],-1,ux,rt[j]);
			for(j=uy;j<=n;j+=j&-j)add(0,n,f[y],1,x,rt[j]);
		}
		for(j=x;j<=n;j+=j&-j)add(0,n,f[y],1,ux,rt[j]);
		st[y].insert(x);
	}
	col[x]=y;
}
int main()
{
	read(n);read(q);nn=n;
	a[root=n+1].r=rand()<<15|rand();
	for(i=1;i<=n;i++)
	{
		read(V[i]);
		a[i].s=a[i].v=1;
		a[i].r=rand()<<15|rand();
		f[++ln]=V[i];
		root=merge(root,i);
	}
	n++;
	for(i=1;i<=q;i++)
	{
		read(A[i]);
		if(A[i]==1)
		{
			read(X[i]);read(Y[i]);
			X[i]=find(X[i],root);
			Y[i]=find(Y[i],root);
		}
		if(A[i]==2)
		{
			read(X[i]);read(Y[i]);
			f[++ln]=Y[i];
			X[i]=find(X[i],root);
		}
		if(A[i]==3)
		{
			read(X[i]);
			X[i]=find(X[i],root);
			a[X[i]].v=0;
			for(j=X[i];j!=root;j=a[j].dad)a[j].s--;
		}
		if(A[i]==4)
		{
			read(X[i]);read(Y[i]);
			f[++ln]=Y[i];
			split(root,ux,uy,X[i]);
			X[i]=++n;a[n].s=a[n].v=1;
			a[n].r=rand()<<15|rand();
			root=merge(ux,merge(n,uy));
		}
		if(A[i]==5)
		{
			read(X[i]);read(Y[i]);
			X[i]=find(X[i],root);
			Y[i]=find(Y[i],root);
		}
	}
	dfs(root);
	sort(f+1,f+ln+1);
	ln=unique(f+1,f+ln+1)-f-1;f[0]=0;
	for(i=1;i<=nn;i++)
	{
		V[i]=lower_bound(f+1,f+ln+1,V[i])-f;
		chcolor(wz[i],V[i]);
	}
	for(i=1;i<=q;i++)
	{
		if(A[i]==1)
		{
			t1=t2=t3=0;
			for(j=wz[Y[i]];j;j-=j&-j)
			{
				s1=s2=s3=0;
				query(0,n,wz[X[i]]-1,rt[j]);
				t1+=s1;if(t1>=mod)t1-=mod;
				t2+=s2;if(t2>=mod)t2-=mod;
				t3+=s3;if(t3>=mod)t3-=mod;
			}
			for(j=wz[X[i]]-1;j;j-=j&-j)
			{
				s1=s2=s3=0;
				query(0,n,wz[X[i]]-1,rt[j]);
				t1-=s1;if(t1<0)t1+=mod;
				t2-=s2;if(t2<0)t2+=mod;
				t3-=s3;if(t3<0)t3+=mod;
			}
			int ans=1ll*t1*t1%mod*t1%mod-3ll*t2*t1%mod;
			if(ans<0)ans+=mod;
			printf("%lld\n",(ans+2ll*t3)%mod*166666668ll%mod);
		}
		if(A[i]%2==0)
		{
			Y[i]=lower_bound(f+1,f+ln+1,Y[i])-f;
			chcolor(wz[X[i]],Y[i]);
		} 
		if(A[i]==3)chcolor(wz[X[i]],0);
		if(A[i]==5)
		{
			int ans=0;
			for(j=wz[Y[i]];j;j-=j&-j)
				ans+=query1(0,n,wz[X[i]]-1,rt[j]);
			for(j=wz[X[i]]-1;j;j-=j&-j)
				ans-=query1(0,n,wz[X[i]]-1,rt[j]);
			printf("%d\n",ans);
		}
	}
}