#include <cstdio>
#include <cstdio>
#include <cstring>
#include <cmath>
#include <cassert>
#include <iostream>
#include <vector>
#include <set>
#include <map>
#include <queue>
#include <stack>
#include <string>
#include <algorithm>
using namespace std;
#define SZ(x) ( (int) (x).size() )
#define CNT(s, x) ( (s).find(x) != (s).end() )
#define ALL(x) (x).begin(), (x).end()
#define dbg(x) cerr << #x << " = " << x << endl;
#define mp make_pair
#define pb push_back
#define fi first
#define se second
typedef long long ll;
typedef pair<int, int> pii;
// const int INF = 1e9;
const int MAXN = 1e5 + 10;

const int mod = 1e9 + 7;

void madd(int& a, int b){
  a += b;
  if(a >= mod) a -= mod;
}
int mul(int a, int b){
  return ((ll)a*b)%mod;
}

int mpow(int a, int n){
  int r = 1;
  while(n > 0){
    if(n & 1)
      r = mul(r, a);
    a = mul(a, a);
    n >>= 1;
  }
  return r;
}

int N, Q;
vector<int> a;

int squery(int l, int r)
{
    int res = 0;
    int m = r - l + 1;
    static int t[MAXN];
    for(int i = l; i <= r; i++)
        t[i-l] = a[i];
    sort(t, t + m);
    m = unique(t, t + m) - t;

    for(int i = 0; i < m; i++)
        for(int j = i + 1; j < m; j++)
            for(int k = j + 1; k < m; k++)
                madd(res, mul(mul(t[i], t[j]), t[k]));
    return res;
}

int cquery(int l, int r)
{
    static int t[MAXN];
    for(int i = l; i <= r; i++)
        t[i-l] = a[i];
    sort(t, t + r - l + 1);
    return unique(t, t + r - l + 1) - t;
}

void print()
{
    for(int v: a)
        printf("%d ", v);
    puts("");
}

int main()
{
    scanf("%d%d", &N, &Q);
    a.assign(N, 0);
    for(int i = 0; i < N; i++)
        scanf("%d", &a[i]);

    for(int i = 0; i < Q; i++)
    {
        int t, l, r;

        scanf("%d%d", &t, &l);
        if(t != 3)
            scanf("%d", &r);

        if(t == 1)
            printf("%d\n", squery(l - 1, r - 1));
        if(t == 2)
            a[l - 1] = r;
        if(t == 3)
            a.erase(a.begin() + l - 1);
        if(t == 4)
            a.insert(a.begin() + l, r);
        if(t == 5)
            printf("%d\n", cquery(l - 1, r - 1));
    }

    return 0;
}
