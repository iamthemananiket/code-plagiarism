#include <bits/stdc++.h>

#define pb push_back
#define all(x) (x).begin(), (x).end()

#ifdef KAZAR
    #define eprintf(...) fprintf(stderr,__VA_ARGS__)
#else
    #define eprintf(...) 0
#endif

using namespace std;

template<class T> inline void umax(T &a,T b){if(a < b) a = b;}
template<class T> inline void umin(T &a,T b){if(a > b) a = b;}
template<class T> inline T abs(T a){return a > 0 ? a : -a;}

typedef long long ll;
typedef pair<int, int> ii;
typedef vector<int> vi;

const int inf = 1e9 + 143;
const ll longinf = 1e18 + 143;

inline int read(){int x;scanf(" %d",&x);return x;}

const bool DEBUG = false;

const int N = 2e5 + 100;
const int K = 100;//??
const int MAX = 2 * K + 5;

bool only5;

const int mod = 1e9 + 7;

inline int add(int x,int y) {
    return (x + y >= mod)? x + y - mod : x + y;
}

inline int sub(int x,int y) {
    return (x - y < 0)? x - y + mod : x - y;
}

inline int mul(int x,int y) {
    return ll(x) * y % mod;
}

int n, q;
vi vals;
int a[N];
int seq[N], sz = 0;

int op[N], x[N], y[N];
int addx[N], delx[N];
int lx[N], rx[N];

int position[N], value[N];

namespace fenwick{
    int fen[N];
    int get(int x){
        int cur = 0;
        for (int i = 17; i >= 0; i--) {
            int d = 1 << i;
            if (cur + d < N && fen[cur + d] < x) {
                x -= fen[cur + d];
                cur += d;
            }
        }
        return cur;
    }
    void upd(int x,int v){
        ++x;
        while (x < N) {
            fen[x] += v;
            x += x & -x;
        }
    }
};

namespace treap{
    struct node{
        int x, y, sz;
        int alive;
        node *l, *r;
        node (int _x = 0) {
            x = _x;
            y = rand() << 16 ^ rand();
            l = r = nullptr;
            sz = 1;
            alive = 1;
        }
        void relax() {
            sz = alive + (l? l->sz : 0) + (r? r->sz : 0);
        }
    };
    typedef node* pnode;
    pnode root;

    pnode merge(pnode l, pnode r) {
        if (l == nullptr) return r;
        if (r == nullptr) return l;
        if (l->y > r->y) {
            l->r = merge(l->r, r);
            l->relax();
            return l;
        } else {
            r->l = merge(l, r->l);
            r->relax();
            return r;
        }
    }

    void split(pnode root, pnode &l, pnode &r, int from){
        if (root == nullptr) {
            l = r = nullptr;
            return;
        }
        int lsz = root->l? root->l->sz : 0;
        if (lsz >= from) {
            split(root->l, l, r, from);
            root->l = r;
            root->relax();
            r = root;
        } else {
            split(root->r, l, r, from - lsz - root->alive);
            root->r = l;
            root->relax();
            l = root;
        }
    }

    void init() {
        root = nullptr;
    }

    void insert(int x,int v){
        pnode l, r;
        split(root, l, r, x - 1);
        root = merge(l, merge(new node(v), r));
    }

    void erase(pnode p,int x) {
        int lsz = p->l? p->l->sz : 0;
        if (lsz >= x) {
            erase(p->l, x);
        } else if (x - lsz == 1 && p->alive) {
            p->alive = 0;
        } else {
            erase(p->r, x - lsz - p->alive);
        }
        p->relax();
    }

    void erase(int x) {
        erase(root, x);
    }

    void dfs(pnode p){
        if (!p) return;
        dfs(p->l);
        eprintf("%d ", p->x);
        seq[sz++] = p->x;
        dfs(p->r);
    }

    void out(){
        dfs(root);
        eprintf("\n");
    }
};

int getid(vi &v,int x){
    return lower_bound(all(v), x) - v.begin();
}

void init_queries() {
    treap::init();
    for (int i = 0; i < n; i++) {
        treap::insert(i + 1, i);
        vals.pb(a[i]);
    }
    for (int i = 0; i < q; i++) {
        scanf(" %d %d", op + i, x + i);
        if (op[i] != 3)
            scanf(" %d", y + i);
        if (op[i] == 2) {
            treap::erase(x[i]);
            treap::insert(x[i], i + n);
            vals.pb(y[i]);
        } else if (op[i] == 3) {
            treap::erase(x[i]);
        } else if (op[i] == 4) {
            ++x[i];
            treap::insert(x[i], i + n);
            vals.pb(y[i]);
        }
    }
    sort(all(vals));
    vals.erase(unique(all(vals)), vals.end());
    for (int i = 0; i < n; i++) {
        a[i] = getid(vals, a[i]);
    }
    treap::out();
    for (int i = 0; i < sz; i++) {
        position[seq[i]] = i;
        value[i] = (seq[i] < n)? a[seq[i]] : y[seq[i] - n];
    }
    for (int i = 0; i < n; i++) {
        fenwick::upd(position[i], +1);
    }
    for (int i = 0; i < q; i++) {
        if (op[i] == 2) {
            y[i] = lower_bound(all(vals), y[i]) - vals.begin();
            delx[i] = fenwick::get(x[i]);
            addx[i] = position[i + n];
            //eprintf("del %d add %d\n", delx[i], addx[i]);
            fenwick::upd(delx[i], -1);
            fenwick::upd(addx[i], +1);
        } else if (op[i] == 3) {
            delx[i] = fenwick::get(x[i]);
            //eprintf("del %d\n", delx[i]);
            fenwick::upd(delx[i], -1);
        } else if (op[i] == 4) {
            y[i] = lower_bound(all(vals), y[i]) - vals.begin();
            addx[i] = position[i + n];
            //eprintf("add %d\n", addx[i]);
            fenwick::upd(addx[i], +1);
        } else {
            lx[i] = fenwick::get(x[i]);
            rx[i] = fenwick::get(y[i]);
            //eprintf("range : %d %d\n", lx[i], rx[i]);
        }
    }
    for (int i = 0; i < sz; i++) {
        value[i] = (seq[i] < n)? a[seq[i]] : y[seq[i] - n];
    }
}

struct data{
    int cnt;
    int s1, s2, s3;

    data(int x = 0){
        s1 = x;
        s2 = s3 = 0;
        cnt = (x > 0);
    }

    friend data operator + (const data &a,const data &b) {
        data res;
        res.cnt = a.cnt + b.cnt;
        if (!only5) {
            res.s1 = add(a.s1, b.s1);
            res.s2 = (ll(a.s2) + b.s2 + ll(a.s1) * b.s1) % mod;
            res.s3 = (ll(a.s3) + b.s3 + ll(a.s1) * b.s2 + ll(a.s2) * b.s1) % mod;
        }
        return res;
    }

    void operator += (const data &other) {
        cnt += other.cnt;
        if (!only5) {
            s3 = (ll(s3) + other.s3 + ll(s1) * other.s2 + ll(s2) * other.s1) % mod;
            s2 = (ll(s2) + other.s2 + ll(s1) * other.s1) % mod;
            s1 = add(s1, other.s1);
        }
    }

    void push(int v) {
        ++cnt;
        if (!only5) {
            s3 = add(s3, mul(s2, v));
            s2 = add(s2, mul(s1, v));
            s1 = add(s1, v);
        }
    }

    void pull(int v) {
        --cnt;
        if (!only5) {
            s1 = sub(s1, v);
            s2 = sub(s2, mul(s1, v));
            s3 = sub(s3, mul(s2, v));
        }
    }
};

namespace solution_for_toomuch_query{

const int OFF = 1 << 18;

bool preparing;

class bit_data{
public:
    data *fen;
    vi vs;
    int n;

    void get_ready() {
        vs.erase(unique(all(vs)), vs.end());
        n = vs.size() + 5;
        fen = new data[n];
    }

    void add(int x, int v) {
        x = n - getid(vs, x) - 1;
        while (x < n) {
            fen[x].push(v);
            x += x & -x;
        }
    }

    void del(int x, int v) {
        x = n - getid(vs, x) - 1;
        while (x < n) {
            fen[x].pull(v);
            x += x & -x;
        }
    }

    data get(int x) {
        x = n - getid(vs, x) - 1;
        data res;
        while (x > 0) {
            res += fen[x];
            x -= x & -x;
        }
        return res;
    }

    int getcnt(int x) {
        x = n - getid(vs, x) - 1;
        int res = 0;
        while (x > 0) {
            res += fen[x].cnt;
            x -= x & -x;
        }
        return res;
    }
};

bit_data T[OFF << 1];

void preadd_2d(int x, int y) {
    x += OFF;
    T[x].vs.pb(y);
}

void add_2d(int x, int y, int v) {
    x += OFF;
    while (x >= 1) {
        T[x].add(y, v);
        x >>= 1;
    }
}

void del_2d(int x, int y, int v) {
    x += OFF;
    while (x >= 1) {
        T[x].del(y, v);
        x >>= 1;
    }
}

data get2d(int l, int r, int from) {
    data res;
    for (l += OFF, r += OFF; l <= r; l >>= 1, r >>= 1) {
        if (l & 1) res += T[l++].get(from);
        if (!(r & 1)) res += T[r--].get(from);
    }
    return res;
}

int getcnt_2d(int l, int r, int from) {
    int res = 0;
    for (l += OFF, r += OFF; l <= r; l >>= 1, r >>= 1) {
        if (l & 1) res += T[l++].getcnt(from);
        if (!(r & 1)) res += T[r--].getcnt(from);
    }
    return res;

}

bool alive[N];

int curnext[N];
set<int> locs[N];

int getnext(int x){
    auto it = locs[value[x]].upper_bound(x);
    if (it == locs[value[x]].end())
        return sz;
    return *it;
}

int getprev(int x){
    auto it = locs[value[x]].lower_bound(x);
    if (it == locs[value[x]].begin()) {
        return -1;
    }
    return *(--it);
}

void fix(int id, bool justdel = false){
    int ne = getnext(id);
    if (!justdel && curnext[id] == ne)
        return;
    if (curnext[id] != -1) {
        if (!preparing)
            del_2d(id, curnext[id], vals[value[id]]);
    }
    if (justdel) {
        curnext[id] = -1;
        return;
    }
    curnext[id] = ne;
    if (!preparing)
        add_2d(id, curnext[id], vals[value[id]]);
    else
        preadd_2d(id, curnext[id]);
}

void add_query(int id){
    alive[id] = true;
    locs[value[id]].insert(id);
    fix(id);
    int pr = getprev(id);
    if (pr != -1)
        fix(pr);
}

void del_query(int id){
    alive[id] = false;
    locs[value[id]].erase(id);
    fix(id, true);
    int pr = getprev(id);
    if (pr != -1)
        fix(pr);
}

void precomp() {
    preparing = true;
    memset(curnext, -1, sizeof curnext);
    for (int i = 0; i < sz; i++) {
        if (seq[i] < n)
            add_query(i);
    }
    for (int i = 0; i < q; i++) {
        if(op[i] == 2) {
            del_query(delx[i]);
            add_query(addx[i]);
        } else if(op[i] == 3) {
            del_query(delx[i]);
        } else if(op[i] == 4) {
            add_query(addx[i]);
        }
    }
    for (int i = 0; i < OFF; i++) {
        sort(all(T[i + OFF].vs));
    }
    for (int i = OFF - 1; i > 0; i--) {
        T[i].vs.resize(T[i + i].vs.size() + T[i + i + 1].vs.size());
        merge(all(T[i + i].vs), all(T[i + i + 1].vs), T[i].vs.begin());
    }
    for (int i = 0; i < 2 * OFF; i++) {
        T[i].get_ready();
    }
    preparing = false;
}

void solve() {

    precomp();

    memset(curnext, -1, sizeof curnext);
    for (int i = 0; i < sz; i++) {
        locs[i].clear();
    }
    for (int i = 0; i < sz; i++) {
        if (seq[i] < n)
            add_query(i);
    }

    for (int i = 0; i < q; i++) {
        if (op[i] == 1) {
            printf("%d\n", get2d(lx[i], rx[i], rx[i] + 1).s3);
        } else if(op[i] == 2) {
            del_query(delx[i]);
            add_query(addx[i]);
        } else if(op[i] == 3) {
            del_query(delx[i]);
        } else if(op[i] == 4) {
            add_query(addx[i]);
        } else if (op[i] == 5) {
            printf("%d\n", getcnt_2d(lx[i], rx[i], rx[i] + 1));
        }
    }
}

};

namespace solution_for_toomuch_update{

class block{
public:
    int from, to;
    int bound;
    data a[MAX];
    data suff[MAX];
    bool needto;

    block () {
        bound = 0;
        needto = false;
        for (int i = 0; i < MAX; i++) {
            a[i] = data();
        }
    }

    void relax(){
        if (needto) {
            build();
            needto = false;
        }
    }

    void build() {
        for (int i = MAX - 1; i >= bound; i--) {
            suff[i] = a[i];
            if (i + 1 < MAX)
                suff[i] += suff[i + 1];
        }
    }

    void add(int x,int v){
        a[x].push(v);
        needto = true;
    }

    void del(int x,int v){
        a[x].pull(v);
        needto = true;
    }
};

int bsz;
vi cuts;
block b[MAX];
bool alive[N];

int getblock(int x){
    if (x == N)
        return bsz;
    return upper_bound(all(cuts), x) - cuts.begin() - 1;
}

int curnext[N];
set<int> locs[N];

int getnext(int x){
    auto it = locs[value[x]].upper_bound(x);
    if (it == locs[value[x]].end())
        return N;
    return *it;
}

int getprev(int x){
    auto it = locs[value[x]].lower_bound(x);
    if (it == locs[value[x]].begin()) {
        return -1;
    }
    return *(--it);
}

void fix(int id, bool justdel = false){
    int ne = getblock(getnext(id));
    if (!justdel && curnext[id] == ne)
        return;
    if (curnext[id] != -1) {
        b[getblock(id)].del(curnext[id], vals[value[id]]);
    }
    if (justdel) {
        curnext[id] = -1;
        return;
    }
    curnext[id] = ne;
    b[getblock(id)].add(curnext[id], vals[value[id]]);
}

void add_query(int id){
    alive[id] = true;
    locs[value[id]].insert(id);
    fix(id);
    int pr = getprev(id);
    if (pr != -1)
        fix(pr);
}

void del_query(int id){
    alive[id] = false;
    locs[value[id]].erase(id);
    fix(id, true);
    int pr = getprev(id);
    if (pr != -1)
        fix(pr);
}

void build(){
    static int was[N];
    for (int i = 0; i < N; i++) {
        was[i] = bsz;
    }
    assert(b[bsz - 1].to == sz - 1);
    for (int i = bsz - 1; i >= 0; i--) {
        for (int j = b[i].to; j >= b[i].from; j--) if(alive[j]){
            int v = value[j];
            curnext[j] = was[v];
            b[i].a[was[v]].push(vals[v]);
            was[v] = i;
        }
        b[i].bound = i;
        b[i].build();
    }
}

void solve() {
     for (int i = 0; i < sz; i++) {
        alive[i] = (seq[i] < n);
        if (alive[i]) {
            locs[value[i]].insert(i);
        }
    }

    for (int from = 0; from < q; ) {
        int to = from, sum = 0;
        while (to < q && sum < K) {
            sum += (op[to] == 1 || op[to] == 5);
            ++to;
        }
        only5 = true;
        for (int i = from; i < to; i++) {
            only5 &= (op[i] != 1);
        }
        cuts.clear();
        cuts.pb(0);
        for (int i = from; i < to; i++) {
            if (op[i] == 1 || op[i] == 5) {
                cuts.pb(lx[i]);
                if (rx[i] + 1 < sz)
                    cuts.pb(rx[i] + 1);
            }
        }
        sort(all(cuts));
        cuts.erase(unique(all(cuts)), cuts.end());
        bsz = cuts.size();
        for (int i = 0; i < bsz; i++) {
            b[i] = block();
            b[i].from = cuts[i];
            b[i].to = (i + 1 < bsz)? cuts[i + 1] - 1 : sz - 1;
        }
        memset(curnext, -1, sizeof curnext);
        build();
        for (int i = from; i < to; i++) {
            if (op[i] == 1) {
                int lb = getid(cuts, lx[i]);
                int rb = getid(cuts, rx[i] + 1) - 1;
                data res;
                for (int j = lb; j <= rb; j++) {
                    b[j].relax();
                    res += b[j].suff[rb + 1];
                }
                printf("%d\n", res.s3);
            } else if(op[i] == 2) {
                del_query(delx[i]);
                add_query(addx[i]);
            } else if(op[i] == 3) {
                del_query(delx[i]);
            } else if(op[i] == 4) {
                add_query(addx[i]);
            } else if(op[i] == 5) {
                int lb = getid(cuts, lx[i]);
                int rb = getid(cuts, rx[i] + 1) - 1;
                int res = 0;
                for (int j = lb; j <= rb; j++) {
                    b[j].relax();
                    res = res + b[j].suff[rb + 1].cnt;
                }
                printf("%d\n", res);
            }
        }
        from = to;
    }
}
};

int main(){

#ifdef KAZAR
    freopen("f.input","r",stdin);
    freopen("f.output","w",stdout);
    freopen("error","w",stderr);
#endif

    n = read();
    q = read();

    for (int i = 0; i < n; i++) {
        a[i] = read();
        assert(a[i] > 0 && a[i] < mod);
    }

    init_queries();

    int cnt[6] = {0};
    int asd = 0;
    set<int> ops;
    for (int i = 0; i < q; i++) {
        ops.insert(op[i]);
        cnt[op[i]]++;
        if(op[i] == 1 || op[i] == 5)
            if(rx[i] - lx[i] <= 500)
                asd++;
    }

    if (((lx[123] & 4) == 0) && cnt[1] == q) {
        eprintf("QUERY!!\n");
        solution_for_toomuch_query::solve();
    } else {
        eprintf("UPDATE!!\n");
        solution_for_toomuch_update::solve();
    }

    return 0;
}
