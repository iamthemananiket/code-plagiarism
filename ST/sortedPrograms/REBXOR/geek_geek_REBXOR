#include<iostream>
#include<algorithm>
#include<cstdio>
#include<cmath>
#include<cstring>
#include<vector>
#include<set>
#include<iomanip>
#include<queue>
#include<map>
#define fl(i,s,n) for(i=s;i<n;i++)
#define flr(i,s,n) for(i=s;i>n;i--)
#define ls(i,s) for(i=0;s[i]!='\0';i++)
#define gi(x) x=scan_lld()
#define pi(x) printf("%d",x)
#define checkline(x) while(x!='\0' && x!='\n')
#define pn printf('\n')
#define ps printf(' ')
#define f_in freopen("input.txt","r",stdin)
#define f_out freopen("output.txt","w",stdout)
#define in(i,j,k) ((j<=i) && (i<k))
#define ull unsigned long long int
#define lli long int
#define lld long int
#define ceil(x,n) (x+n-1)/n
#define sd(x) scanf("%d",&x)
#define sd2(x,y) scanf("%d%d",&x,&y)
#define sd3(x,y,z) scanf("%d%d%d",&x,&y,&z)
#define fi first
#define se second
#define pb(x) push_back(x)
#define mp(x,y) make_pair(x,y)
using namespace std;
const lli zz = 1LL<<30;
lld scan_lld()    {int ip=getchar(),flag=1;lld ret=0;for(;ip<'0'||ip>'9';ip=getchar())if(ip=='-'){flag=-1;ip=getchar();break;}for(;ip>='0'&&ip<='9';ip=getchar())ret=ret*10+ip-'0';return flag*ret;}
struct trie_node
{
    short int mask;
    trie_node *next[2];
};
trie_node * form_node()
{
    trie_node *temp= new trie_node;
    temp->mask=0;
    return temp;
}
lli insert_word(trie_node *trie,lli no)
{
    trie_node *temp = trie;
    trie_node *temp1 = trie;
    lli i,j,k,x,y,iter,ans;
    lli current,xy;
    lli curr;
    ans = 0;
    xy = zz;
    while(xy!=0)
    {
            iter = i;
            current = no&xy;
            curr =1;
            if(current==0)
                curr = 0;
            if(((temp->mask)&(1+curr))==0)
            {
                (temp->mask)+=(1+curr);
                temp->next[curr]=form_node();
                temp = temp->next[curr];

            }
            else
            {
                temp = temp->next[curr];
            }
                            y = 1-curr;
                        if(((temp1->mask)&(1+y))==0)
                                temp1 = temp1->next[1-y];
                        else
                            {
                                ans += xy;
                                temp1 = temp1->next[y];
                            }
            xy>>=1;
    }
    return ans;
}
int main()
{
    //f_in;
    trie_node *trie=form_node();
    trie_node *trie1=form_node();
    lli i,j,k,x,y,z,t,n;
    gi(n);
    lli *ans = new lli [n];
    lli *ans1 = new lli[n];
    lli *num = new lli[n];
    x = 0;
    gi(num[0]);
    x^=num[0];
    insert_word(trie1,0);
    insert_word(trie,0);
    insert_word(trie,x);
    ans[0]=(x);
    fl(i,1,n)
    {
        gi(num[i]);
        x^=num[i];
        y=insert_word(trie,x);
        ans[i]=max(ans[i-1],y);
    }
    x=0;
    z=0;
    x^=num[n-1];
    insert_word(trie1,x);
    ans1[n-1]=(x);
    z=max(z,ans[n-2]+ans1[n-1]);
    for(i=n-2;i>=1;i--)
    {
        x^=num[i];
        y=insert_word(trie1,x);
        ans1[i]=max(ans1[i+1],y);
        z = max(z,ans1[i]+ans[i-1]);
    }
    cout<<z;
    return 0;
}
