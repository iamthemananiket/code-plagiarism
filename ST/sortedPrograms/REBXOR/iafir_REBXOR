#include <bits/stdc++.h>
 
using namespace std;
 
const int N = 4e5 + 5, stt = 1<<30;
 
struct node {
  node * l;
  node * r;
  int v;
  node() {
  }
  void insert(int x, int pos = stt) {
    if(pos == 0)
      return;
    if(x & pos) {
      if(r == NULL)
        r = new node();
      r->insert(x, pos>>1);
    }
    else {
      if(l == NULL)
        l = new node();
      l->insert(x, pos>>1);
    }
  }
  int get(int x, int pos = stt) {
    if(pos == 0)
      return 0;
    int ret = 0;
    if(((x & pos) && l != NULL) || (r == NULL))
      ret = l->get(x, pos>>1);
    else
      ret = pos | r->get(x, pos>>1);
    return ret;
  }
};
node* rootl;
node* rootr;
int xl[N], a[N];
 
int main() {
  int n;
  scanf("%d", &n);
  rootl = new node();
  rootl->insert(0);
  int val = 0;
  xl[0] = 0;
  for(int i = 0; i<n; i++) {
    scanf("%d", a+i);
    val ^= a[i];
    xl[i+1] = max(xl[i], val^(rootl->get(val)));
    rootl->insert(val);
  }
  val = 0;
  int ans = 0, last = 0;
  rootr = new node();
  rootr->insert(0);
  for(int j = n-1; j>= 1; j--) {
    val ^= a[j];
    last = max(last, val^(rootr->get(val)));
    ans = max(ans, last + xl[j]);
    rootr->insert(val);
  }
  printf("%d\n", ans);
  return 0;
} 