#include <string>
#include <vector>
#include <algorithm>
#include <numeric>
#include <set>
#include <map>
#include <queue>
#include <iostream>
#include <sstream>
#include <cstdio>
#include <cmath>
#include <ctime>
#include <cstring>
#include <cctype>
#include <cassert>
#include <limits>
#include <functional>
#define rep(i,n) for(int (i)=0;(i)<(int)(n);++(i))
#define rer(i,l,u) for(int (i)=(int)(l);(i)<=(int)(u);++(i))
#define reu(i,l,u) for(int (i)=(int)(l);(i)<(int)(u);++(i))
#if defined(_MSC_VER) || __cplusplus > 199711L
#define aut(r,v) auto r = (v)
#else
#define aut(r,v) __typeof(v) r = (v)
#endif
#define each(it,o) for(aut(it, (o).begin()); it != (o).end(); ++ it)
#define all(o) (o).begin(), (o).end()
#define pb(x) push_back(x)
#define mp(x,y) make_pair((x),(y))
#define mset(m,v) memset(m,v,sizeof(m))
#define INF 0x3f3f3f3f
#define INFL 0x3f3f3f3f3f3f3f3fLL
using namespace std;
typedef vector<int> vi; typedef pair<int,int> pii; typedef vector<pair<int,int> > vpii; typedef long long ll;
template<typename T, typename U> inline void amin(T &x, U y) { if(y < x) x = y; }
template<typename T, typename U> inline void amax(T &x, U y) { if(x < y) x = y; }

template<typename T, typename Func>
void countingSort(int n, const T v[], T dest[], int cnt[/*B*/], int B, Func f) {
	if(n <= (B >> 4) || n <= 16) {
		memcpy(dest, v, sizeof(T) * n);
		std::stable_sort(dest, dest + n, [f](const T &a, const T &b) -> bool { return f(a) < f(b); });
		return;
	}
	for(int j = 0; j < B; ++ j)
		cnt[j] = 0;
	for(int i = 0; i < n; ++ i)
		++ cnt[f(v[i])];
	for(int j = 1; j < B; ++ j)
		cnt[j] += cnt[j-1];
	for(int i = n-1; i >= 0; -- i)
		dest[-- cnt[f(v[i])]] = v[i];
}

int main() {
	int *a = new int[1000000], *b = new int[1000000], *orga = new int[1000002];
	int cnt[1 << 16];
	int T;
	scanf("%d", &T);
	for(int ii = 0; ii < T; ++ ii) {
		int n;
		scanf("%d", &n);
		rep(i, n) scanf("%d", &a[i]);
		memcpy(orga + 1, a, sizeof(int) * n);
		orga[0] = orga[n + 1] = -1;
		countingSort(n, a, b, cnt, 1 << 16, [](int x) { return x & 0xffffU; });
		swap(a, b);
		countingSort(n, a, b, cnt, 1 << 16, [](int x) { return x >> 16; });
		swap(a, b);
		bool ans = true;
		rep(i, n)
			ans &= a[i] == orga[i] || a[i] == orga[i + 1] || a[i] == orga[i + 2];
		puts(ans ? "YES" : "NO");
	}
	return 0;
}
