#include <algorithm>
#include <bitset>
#include <cassert>
#include <cctype>
#include <cmath>
#include <complex>
#include <cstdio>
#include <cstdlib>
#include <cstring>
#include <ctime>
#include <iostream>
#include <map>
#include <queue>
#include <set>
#include <string>
#include <utility>
#include <vector>
using namespace std;

#define fi first
#define se second
#define pb push_back
#define all(x) (x).begin(), (x).end()
#define sz(x) (int((x).size()))
#define bit(x) (1 << (x))
#define cnt1(x) (__builtin_popcount(x))

template<class T, class U>
inline void chkmax(T& x, U y) {
	if (x < y) x = y;
}

template<class T, class U>
inline void chkmin(T& x, U y) {
	if (y < x) x = y;
}

typedef long long LL;
typedef double DB;
typedef pair<int, int> PII;
typedef vector<int> VI;

const int MX = 100000;
int f[MX];
bool chk[MX];
LL L, R;

void init() {
	for (int i = 2; i < MX; i++) f[i] = i;
	for (int i = 2; i < MX; i++) if (f[i] == i) {
		if (i >= L && i <= R) chk[i] = true;
		for (int j = i + i; j < MX; j += i) f[j] = i;
	}
}

char s[100];
bool test(int x) {
	sprintf(s, "%d", x);
	int n = strlen(s);
	for (int i = 0; i < n; i++) if (s[i] != s[n - i - 1]) return 0;
	if (chk[x]) return 1;
	int a = 0, b;
	for (int i = 0; i < n - 1; i++) {
		a = a * 10 + s[i] - '0';
		b = 0;
		for (int j = i + 1; j < n; j++) {
			b = b * 10 + s[j] - '0';
		}
		if (chk[a] && chk[b]) return 1;
	}
	return 0;
}

int calc() {
	scanf("%lld", &L);
	int tr;
	while (scanf("%lld", &R) == 1) {
		if (L <= R && R - L < 500000) tr = R;
		else break;
	}
	R = tr;
	init();
	int ans = 0;
	for (int i = max(L, 10000LL); i < min(LL(MX), R + 1); i++) ans += test(i);
	return ans;
}

int main() {
	
	printf("%d\n", calc());
	return 0;
}
