#include<iostream>
#include<cstdio>
#include<cstring>
#include<string>
#include<cctype>
#include<cstdlib>
#include<algorithm>
#include<bitset>
#include<vector>
#include<list>
#include<deque>
#include<queue>
#include<map>
#include<set>
#include<stack>
#include<cmath>
#include<sstream>
#include<fstream>
#include<iomanip>
#include<ctime>
#include<complex>
#include<functional>
#include<climits>
#include<cassert>
#include<iterator>
#include<unordered_map>
#include<unordered_set>
using namespace std;
template<typename ty>
class Set {
public:
	struct st {
		unsigned int randxor()
		{
			static unsigned int x = 123456789, y = 362436069, z = 521288629, w = 88675123;
			unsigned int t;
			t = (x ^ (x << 11)); x = y; y = z; z = w; return(w = (w ^ (w >> 19)) ^ (t ^ (t >> 8)));
		}
		st *l;
		st *r;
		ty val;
		int pr;
		int countt = 0;
		ty maxt;
		st() {
			pr = randxor();
			l = r = NULL;
		}
		void update() {
			maxt = val;
			countt = 1;
			if (l) {
				countt += l->countt;
				maxt = max(maxt, l->maxt);
			}
			if (r) {
				countt += r->countt;
				maxt = max(maxt, r->maxt);
			}
		}
		void set_val(ty vall) {
			maxt = vall;
			countt = 1;
			val = vall;
			l = r = NULL;
		}
	};
	st *root;
	Set() {
		root = NULL;
	}
	st* find(ty val) {
		st *b = root;
		while (b) {
			if (b->val == val) {
				return b;
			}
			if (b->val > val) {
				b = b->l;
			}
			else {
				b = b->r;
			}
		}
		return NULL;
	}
	int get_countt(st *b) {
		if (b) {
			return b->countt;
		}
		else {
			return 0;
		}
	}
	int lower_bound_split(ty val) {
		if (root->maxt < val) {
			return root->countt + 1;
		}
		st *tt;
		st *t;
		split(root, val, t, tt);
		int ans = 0;
		if (t) {
			ans += t->countt;
		}
		root = merge(t, tt);
		if (find(val) == false) {
			ans++;
		}
		return ans;
	}
	int lower_bound(ty val) {
		if (root->maxt < val) {
			return root->countt + 1;
		}
		st *b = root;
		int ans = 0;
		while (b) {
			if (b->val == val) {
				ans += get_countt(b->l);
				ans++;
				break;
			}
			if (b->val > val) {
				b = b->l;
				continue;
			}
			ans += get_countt(b->l);
			ans++;
			b = b->r;
		}
		if (find(val) == false) {
			ans++;
		}
		return ans;
	}
	int upper_bound(ty val) {
		if (root->maxt < val) {
			return root->countt + 1;
		}
		int c = lower_bound(val);
		if (find(val)) {
			c++;
		}
		return c;
	}
	inline st* merge(st *b, st *l) {
		if (!b || !l) {
			if (b == NULL) {
				return l;
			}
			return b;
		}
		if (b->pr > l->pr) {
			b->r = merge(b->r, l);
			b->r->update();
			b->update();
			return b;
		}
		else {
			l->l = merge(b, l->l);
			l->l->update();
			l->update();
			return l;
		}
	}
	inline void split(st *b, ty countt, st *&l, st *&r) {  //countt=val
		l = NULL;
		r = NULL;
		if (!b) {
			return;
		}
		ty &val = b->val;
		if (val == countt) {
			l = b;
			r = b->r;
			b->r = NULL;
			if (l) {
				l->update();
			}
			if (r) {
				r->update();
			}
			return;
		}
		if (val > countt) {
			if (!b->l) {
				r = b;
				if (l) {
					l->update();
				}
				if (r) {
					r->update();
				}
				return;
			}
			split(b->l, countt, l, b->l);
			r = b;
			if (l) {
				l->update();
			}
			if (r) {
				r->update();
			}
			return;
		}
		if (!b->r) {
			l = b;
			if (l) {
				l->update();
			}
			if (r) {
				r->update();
			}
			return;
		}
		split(b->r, countt, b->r, r);
		l = b;
		if (l) {
			l->update();
		}
		if (r) {
			r->update();
		}
		return;
	}
	void insert(ty val) {
		if (find(val)) {
			return;
		}
		st *a = new st();
		a->set_value(val + 1);
		/*a->val = val;
		a->countt = 1;
		a->maxt = val;*/
		st *t;
		st *tt;
		split(root, val, t, tt);
		if (t) {
			t->update();
		}
		if (tt) {
			tt->update();
		}
		root = merge(t, a);
		if (root) {
			root->update();
		}
		root = merge(root, tt);
		if (root) {
			root->update();
		}
	}
	void erase(ty val) {
		st *t;
		st *tt;
		split(root, val, t, tt);
		if (t) {
			t->update();
		}
		if (tt) {
			tt->update();
		}
		st *er;
		st *ner;
		split(t, val - 1, ner, er);
		if (er) {
			er->update();
		}
		if (ner) {
			ner->update();
		}
		root = merge(ner, tt);
		if (root) {
			root->update();
		}
	}
	int count(ty val) {
		if (find(val)) {
			return 1;
		}
		else {
			return 0;
		}
	}
	int size() {
		if (root == NULL) {
			return 0;
		}
		return root->countt;
	}
	ty get_nth_val(int n) {  //begin 1st
		if (n <= 0) {
			return NULL;
		}
		if (size() < n) {
			return NULL;
		}
		st *b = root;
		int countt = 0;
		while (1) {
			if (countt + get_countt(b->l) + 1 == n) {
				return b->val;
			}
			if (countt + get_countt(b->l) + 1 > n) {
				b = b->l;
			}
			else {
				countt++;
				countt += get_countt(b->l);
				b = b->r;
			}
		}
	}
	void remove_nth_val(int n) {
		ty v = get_nth_val(n);
		st *l;
		st *r;
		l = r = NULL;
		ty vv = get_nth_val(n - 1);
		split(root, v, l, r);
		if (n == 1) {
			root = r;
			return;
		}
		st *del;
		st *ll;
		split(l, vv, ll, del);
		root = merge(ll, r);
	}
	/*
	ich  is index 1based.
	*/
	inline void ich_split(st *b, st *&l, st *&r, int countt) {   //st->countt==countt less than or equal to countt->l,other->r 
		if (!b) {
			l = r = NULL;
			return;
		}
		if (b->countt == countt) {
			l = b;
			r = NULL;
			l->update();
			return;
		}
		if (get_countt(b->l) + 1 == countt) {
			l = b;
			r = b->r;
			b->r = NULL;
			if (b) {
				b->update();
			}
			if (l) {
				l->update();
			}
			if (r) {
				r->update();
			}
			return;
		}
		if (get_countt(b->l) >= countt) {
			r = b;
			ich_split(b->l, l, b->l, countt);
			b->update();
			if (l) {
				l->update();
			}
			if (r) {
				r->update();
			}
			return;
		}
		l = b;
		ich_split(b->r, b->r, r, countt - get_countt(b->l) - 1);
		b->update();
		if (l) {
			l->update();
		}
		if (r) {
			r->update();
		}
	}
	void ich_remove_range(int a, int b) {  //remove from a to b both contain 1-based
		st *l;
		st *r;
		ich_split(root, l, r, a);
		st *rr;
		ich_split(r, r, rr, b - a + 1);
		root = merge(l, rr);
	}
	void ich_insert(int a, ty val) {  //1-based
		st *l;
		st *r;
		ich_split(root, l, r, a - 1);
		st *ll = new st();
		ll->set_val(val);
		root = merge(l, ll);
		root = merge(root, r);
	}
};
Set<int> s;
int t;
deque<int> v;
int main() {
	scanf("%d", &t);
	while (t--) {
		v.clear();
		int n;
		scanf("%d", &n);
		int ans = 0;
		for (int i = 0;i < n;i++) {
			int a;
			scanf("%d", &a);
			if (a == 0) {
				v.push_front(i);
			}
			else {
				a--;
				int index = 0;
				for (int j = 0;j < v.size();j++) {
					if (v[j] == a) {
						index = j;
					}
				}
				ans += min(index + 1, (int)v.size() - index-1);
				v.insert((index + 1)+v.begin(), i);
			}
		}
		printf("%d\n", ans);
	}
	return 0;
}