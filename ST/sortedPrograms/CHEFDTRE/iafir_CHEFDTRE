#include <bits/stdc++.h>

using namespace std;

typedef pair<int, int> ii;

const int N = 1e5 + 10;
const int mod = 1e9 + 7;

int p[N], ids[3*N];
int n, q, lgrup, ngrup, sq[400][N];

int findSet(int a) {
	if(p[a] == a)
		return a;
	return p[a] = findSet(p[a]);
}

int merge(int a, int b) {
	int fa = findSet(a), fb = findSet(b);
	if(fa > fb)
		swap(fa, fb);
	p[fb] = fa;
	for(int i = 0; i<ngrup; i++) {
		sq[i][fa] += sq[i][fb];
	}
	return fa;
}

int query(int a, int k) {
	a = findSet(a);
	int no = 0;
	for(no = 0; no<ngrup; no++)
		if(k <= sq[no][a])
			break;
		else
			k -= sq[no][a];
	int nloop = min((no+1)*lgrup, n);
	for(int i = no*lgrup; i<nloop; i++)
		if(findSet(i) == a) {
			k--;
			if(k == 0)
				return i+1;
		}
}


int main() {
	scanf("%d%d", &n, &q);
	lgrup = sqrt(n);
	ngrup = (n+lgrup-1)/lgrup;
	for(int i = 0; i<n; i++) {
		ids[i] = p[i] = i;
	}
	for(int i = 0; i<ngrup; i++) {
		int nloop = min((i+1)*lgrup, n);
		for(int j = i*lgrup; j < nloop; j++) {
			sq[i][j] = 1;
		}
	}
	int noSet = n, x, y;
	char s[10];
	while(q--) {
		scanf("%s%d%d", s, &x, &y);
		x--;
		if(s[0] == 'U') {
			y--;
			ids[noSet] = merge(ids[x], ids[y]);
			noSet++;
		}
		else {
			printf("%d\n", query(ids[x], y));
		}
	}
	return 0;
}