#include <algorithm>
#include <stdio.h>
#include <string.h>
using namespace std;

#define long long long
#define boolean bool
#define N 250005

long a[N], b[N], p[N], hashes[N];

int n, m, resL = -1, resR = -1;
char s1[N], s2[N];

boolean binsearch(int r, long v) {
	int l = 0;
	while (l <= r) {
		int mid = (l+r) / 2;
		if (hashes[mid] == v) {
			return true;
		} else if (hashes[mid] > v) {
			r = mid-1;
		} else {
			l = mid+1;
		}
	}
	return false;
}

boolean f(int len) {
	int cnt = 0;
	for (int i = 1; i+len-1 <= n; i++) {
		hashes[cnt++] = (a[i+len-1]-a[i-1]) * p[n-i];
	}
	sort(hashes, hashes + cnt);
	for (int i = 1; i+len-1 <= m; i++) {
		if (binsearch(cnt-1, (b[i+len-1]-b[i-1]) * p[n-i])) {
			resL = i;
			resR = i+len-1;
			return true;
		}
	}
	return false;
}

int binsearchRES() {
	int res = 0;
	int l = 1;
	int r = m;
	while (l <= r) {
		int mid = (l+r) / 2;
		if (f(mid)) {
			res = mid;
			l = mid+1;
		} else {
			r = mid-1;
		}
	}
	return res;
}

int main() {
	gets(s1+1);
	gets(s2+1);
	n = strlen(s1+1);
	m = strlen(s2+1);
	p[1] = 1;
	for (int i = 2; i <= n; i++) {
		p[i] = p[i-1] * 31;
	}
	a[0] = 0;
	for (int i = 1; i <= n; i++) {
		a[i] = a[i-1] + p[i] * (s1[i]-'a'+1);
	}
	b[0] = 0;
	for (int i = 1; i <= m; i++) {
		b[i] = b[i-1] + p[i] * (s2[i]-'a'+1);
	}
	int res = binsearchRES();
	if (res > 0) {
		for (int i = resL; i <= resR; i++) {
			printf("%c", s2[i]);
		}
		printf("\n");
	}
	printf("%d\n", res);
	return 0;
}