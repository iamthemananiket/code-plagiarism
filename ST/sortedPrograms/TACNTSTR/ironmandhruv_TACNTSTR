#include <bits/stdc++.h>
 
using namespace std;
 
#define ll long long int
#define pb push_back
#define mp make_pair
#define INF (ll)(1e18)
#define inf 0x7fffffff
#define inff 100000
#define ff first
#define ss second
#define sz(x) ((int) (x).size())
#define fast cin.sync_with_stdio(0);cin.tie(0)
#define rep(i,N) for(int i = 0;i < N;i++)
#define frep(i,a,b) for(int i = a;i <= b;i++)
#define pii pair<int , int>
#define pll pair<ll , ll>
#define vii vector<int>
#define vpii vector< pii >
#define fill(A,v) memset(A,v,sizeof(A))
#define setbits(x) __builtin_popcountll(x)
#define print(A,j,k) for(int ii=j;ii<k;ii++)cout<<A[ii]<<" ";cout<<"\n"
#define all(x) (x).begin(), (x).end()
#define gcd __gcd
#define SQRT 350
#define CASES int t;cin>>t;while(t--)
#define FILE freopen("inp.txt" , "r" , stdin);
#define ld long double

const int MOD = 1e9 + 7;
const int N = 1e5 + 500;

string s;
ll dp[N], revdp[N], special[N];

ll fpow(ll a, ll p) {
    ll ret = 1;
    a %= MOD;
    while (p > 0) {
        if (p & 1) {
            ret *= a;
            ret %= MOD;
        }
        a *= a;
        a %= MOD;
        p >>= 1LL;
    }
    return ret;
}

int main(int argc, char const *argv[])
{
	fast;

    cin >> s;
    int n = s.size();
    dp[0] = 1;
    revdp[0] = 1;
    
    ll inverse = fpow(26LL , MOD - 2);	//Fermat's theorem
    // cout << inverse << '\n';
    
    frep(i , 1 , 1e5 + 50) {
        dp[i] = (dp[i - 1] * 26LL) % MOD;
        revdp[i] = (revdp[i - 1] * inverse) % MOD;
    }
    
    rep(i , n) {
    	ll x = 'Z' - s[i];
        special[i] = ( x * dp[i]) % MOD;
    }
    
    for (int i = n - 1;i >= 0;i--) {
        special[i] += special[i + 1];
        special[i] %= MOD;
    }

    // for(int i = 0;i < s.size();i++)
    //     cout << special[i] << " ";
    // cout << '\n';

    ll ans = 0;
    rep(i , n) {
    	ans += (1LL * ((int)'Z' - (int)s[i])) * (((special[i + 1] * revdp[i + 1]) % MOD) + 1);
        ans %= MOD;
    }
    cout << ans << '\n';
    return 0;
}

