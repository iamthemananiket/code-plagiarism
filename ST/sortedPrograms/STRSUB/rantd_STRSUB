#include <bits/stdc++.h>
using namespace std;

#define repu(i, a, b) for (int i = (a); i < (b); ++i)
#define repd(i, a, b) for (int i = (a); i > (b); --i)
#define mem(a, x) memset(a, x, sizeof(a))
#define all(a) a.begin(), a.end()
#define uni(a) a.erase(unique(all(a)), a.end())
#define count_bits(x) __builtin_popcount(x)
#define count_bitsll(x) __builtin_popcountll(x)
#define least_bits(x) __builtin_ffs(x)
#define least_bitsll(x) __builtin_ffsll(x)
#define most_bits(x) 32 - __builtin_clz(x)
#define most_bitsll(x) 64 - __builtin_clz(x)

vector<string> split(const string &s, char c) {
	vector<string> v;
	stringstream ss(s);
	string x;
	while (getline(ss, x, c)) v.push_back(x);
	return v;
}

#define error(args...) { vector<string> _v = split(#args, ','); err(_v.begin(), args); }

void err(vector<string>::iterator it) {}

template<typename T, typename... Args>
void err(vector<string>::iterator it, T a, Args... args) {
	cerr << it -> substr((*it)[0] == ' ', it -> length()) << " = " << a << '\n';
	err(++it, args...);
}

typedef long long ll;
const int MOD = 1000000007;

template<class T> inline T tmin(T a, T b) {return (a < b) ? a : b;}
template<class T> inline T tmax(T a, T b) {return (a > b) ? a : b;}
template<class T> inline void amax(T &a, T b) {if (b > a) a = b;}
template<class T> inline void amin(T &a, T b) {if (b < a) a = b;}
template<class T> inline T tabs(T a) {return (a > 0) ? a : -a;}
template<class T> T gcd(T a, T b) {while (b != 0) {T c = a; a = b; b = c % b;} return a;}

const int N = 100005;
int n, k;
string s;
int dp[N][2], nxt[N], pos[N][2];
ll sum[N];

int main(int argc, char *argv[]) {
    ios_base::sync_with_stdio(false);
    int ntest, q, l, r;
    cin >> ntest;
    while (ntest--) {
    	cin >> n >> k >> q;
    	cin >> s;
    	dp[0][0] = dp[0][1] = 0;
    	mem(pos, -1);
    	repu(i, 0, n) {
    		dp[i + 1][0] = dp[i][0] + ((s[i] == '0') ? 1 : 0);
    		dp[i + 1][1] = dp[i][1] + ((s[i] == '1') ? 1 : 0);
    		pos[dp[i + 1][0]][0] = pos[dp[i + 1][1]][1] = i;
    	}
    	sum[0] = 0;
    	repu(i, 0, n) {
    		int x, y;
    		int lx = dp[i][0] + k, ly = dp[i][1] + k;
    		if (lx >= N) x = n - 1;
	    	else x = (pos[lx][0] != -1) ? pos[lx][0] : n - 1;
    		if (ly >= N) y = n - 1;
    		else y = (pos[ly][1] != -1) ? pos[ly][1] : n - 1;
    		nxt[i] = tmin(x, y);
    		//error(i, nxt[i]);
    		sum[i + 1] = sum[i] + nxt[i];
    	}
    	repu(i, 0, q) {
    		cin >> l >> r;
    		--l;
    		ll ans = ((r - l) * 1LL * (r - l + 1)) / 2;
    		int ind = upper_bound(nxt + l, nxt + n, r - 1) - (nxt + l);
    		//error(ind);
    		ans -= (r - 1) * 1LL * ind;
    		ans += (sum[ind + l] - sum[l]);
    		printf("%lld\n", ans);
    	}
    }
    return 0;
}
