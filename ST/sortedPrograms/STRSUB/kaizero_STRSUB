#include<stdio.h>
#include<algorithm>
#include<vector>
#define SZ 131072
using namespace std;
int TC, n, K, Q, R[101000], Qu[101000];
long long Res[101000];
vector<int>E[101000];
char p[101000];
struct Seg{
	long long Sum, K;
}IT[SZ+SZ+1];
void Add2(int nd, int b, int e, int x){
	IT[nd].Sum += (e - b + 1)*x;
	IT[nd].K += x;
}
void spread(int nd, int b, int e, int m){
	Add2(nd * 2, b, m, IT[nd].K);
	Add2(nd * 2 + 1, m + 1, e, IT[nd].K);
	IT[nd].K = 0;
}
void Add(int nd, int b, int e, int s, int l, int x){
	if (b == s&&e == l){
		Add2(nd, b, e, x);
		return;
	}
	int m = (b + e) >> 1;
	spread(nd, b, e, m);
	if (s <= m)Add(nd * 2, b, m, s, min(m, l), x);
	if (m < l)Add(nd * 2 + 1, m + 1, e, max(m + 1, s), l, x);
	IT[nd].Sum = IT[nd * 2].Sum + IT[nd * 2 + 1].Sum;
}
long long Gap(int nd, int b, int e, int s, int l){
	if (b == s&&e == l)return IT[nd].Sum;
	long long r = 0;
	int m = (b + e) >> 1;
	spread(nd, b, e, m);
	if (s <= m)r += Gap(nd * 2, b, m, s, min(m, l));
	if (m < l) r += Gap(nd * 2 + 1, m + 1, e, max(m + 1, s), l);
	return r;
}
int main(){
	int i, pv, S1, S2, a, j;
	scanf("%d", &TC);
	while (TC--){
		scanf("%d%d%d", &n, &K, &Q);
		scanf("%s", p+1);
		pv = 1, S1 = S2 = 0;
		for (i = 1; i <= n; i++){
			while (pv <= n){
				if ((S1 == K&&p[pv] == '0') || (S2 == K&&p[pv] == '1'))break;
				if (p[pv] == '0')S1++;
				else S2++;
				pv++;
			}
			R[i] = pv - 1;
			if (p[i] == '0')S1--;
			else S2--;
		}
		for (i = 1; i <= Q; i++){
			scanf("%d%d", &a, &Qu[i]);
			E[a].push_back(i);
		}
		for (i = n; i >= 1; i--){
			Add(1, 1, SZ, i, R[i], 1);
			for (j = 0; j < E[i].size(); j++){
				Res[E[i][j]] = Gap(1, 1, SZ, 1, Qu[E[i][j]]);
			}
		}
		for (i = n; i >= 1; i--){
			Add(1, 1, SZ, i, R[i], -1);
			E[i].clear();
		}
		for (i = 1; i <= Q; i++){
			printf("%lld\n", Res[i]);
		}
	}
}