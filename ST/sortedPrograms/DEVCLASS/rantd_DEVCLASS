#include <bits/stdc++.h>
using namespace std;

#define repu(i, a, b) for (int i = (a); i < (b); ++i)
#define repd(i, a, b) for (int i = (a); i > (b); --i)
#define mem(a, x) memset(a, x, sizeof(a))
#define all(a) a.begin(), a.end()
#define uni(a) a.erase(unique(all(a)), a.end())
#define count_bits(x) __builtin_popcount(x)
#define count_bitsll(x) __builtin_popcountll(x)
#define least_bits(x) __builtin_ffs(x)
#define least_bitsll(x) __builtin_ffsll(x)
#define most_bits(x) 32 - __builtin_clz(x)
#define most_bitsll(x) 64 - __builtin_clz(x)

vector<string> split(const string &s, char c) {
	vector<string> v;
	stringstream ss(s);
	string x;
	while (getline(ss, x, c)) v.push_back(x);
	return v;
}

#define error(args...) { vector<string> _v = split(#args, ','); err(_v.begin(), args); }

void err(vector<string>::iterator it) {}

template<typename T, typename... Args>
void err(vector<string>::iterator it, T a, Args... args) {
	cerr << it -> substr((*it)[0] == ' ', it -> length()) << " = " << a << '\n';
	err(++it, args...);
}

typedef long long ll;
const int MOD = 1000000007;

template<class T> inline T tmin(T a, T b) {return (a < b) ? a : b;}
template<class T> inline T tmax(T a, T b) {return (a > b) ? a : b;}
template<class T> inline void amax(T &a, T b) {if (b > a) a = b;}
template<class T> inline void amin(T &a, T b) {if (b < a) a = b;}
template<class T> inline T tabs(T a) {return (a > 0) ? a : -a;}
template<class T> T gcd(T a, T b) {while (b != 0) {T c = a; a = b; b = c % b;} return a;}

int n, tp, cnt[2];
string s;

ll solve0() {
	ll ans = 0;
	if (cnt[0] == cnt[1]) {
		ll ans1 = 0, ans2 = 0;
		repu(i, 0, n) {
			if (s[i] == 'B') {
				if (i & 1) ans1++;
				else ans2++;
			}
			else {
				if (i & 1) ans2++;
				else ans1++;
			}
		}
		ans = tmin(ans1, ans2);
	}
	else if (cnt[0] > cnt[1]) {
		repu(i, 0, n) {
			if ((i & 1) && s[i] == 'B') ans++;
			if (!(i & 1) && s[i] == 'G') ans++;
		}
	}
	else {
		repu(i, 0, n) {
			if ((i & 1) && s[i] == 'G') ans++;
			if (!(i & 1) && s[i] == 'B') ans++;
		}
	}
	return (ans >> 1);
}

ll solve12() {
	ll ans = 0;
	if (cnt[0] == cnt[1]) {
		vector<int> pos[2];
		ll ans1 = 0, ans2 = 0;
		repu(i, 0, n) {
			if ((i & 1) && s[i] == 'B') pos[0].push_back(i);
			if (!(i & 1) && s[i] == 'G') pos[1].push_back(i);
		}
		repu(i, 0, pos[0].size()) {
			ans1 += tabs(pos[0][i] - pos[1][i]);
		}
		pos[0].clear(); pos[1].clear();
		repu(i, 0, n) {
			if (!(i & 1) && s[i] == 'B') pos[0].push_back(i);
			if ((i & 1) && s[i] == 'G') pos[1].push_back(i);
		}
		repu(i, 0, pos[0].size()) {
			ans2 += tabs(pos[0][i] - pos[1][i]);
		}
		ans = tmin(ans1, ans2);
	}
	else if (cnt[0] > cnt[1]) {
		vector<int> pos[2];
		repu(i, 0, n) {
			if ((i & 1) && s[i] == 'B') pos[0].push_back(i);
			if (!(i & 1) && s[i] == 'G') pos[1].push_back(i);
		}
		repu(i, 0, pos[0].size()) {
			ans += tabs(pos[0][i] - pos[1][i]);
		}
	}
	else {
		vector<int> pos[2];
		repu(i, 0, n) {
			if (!(i & 1) && s[i] == 'B') pos[0].push_back(i);
			if ((i & 1) && s[i] == 'G') pos[1].push_back(i);
		}
		repu(i, 0, pos[0].size()) {
			ans += tabs(pos[0][i] - pos[1][i]);
		}
	}
	return ans;
}

ll solve() {
	if (tabs(cnt[0] - cnt[1]) > 1) return -1;
	if (tp == 0) return solve0();
	if (tp == 1 || tp == 2) return solve12();
}

int main(int argc, char *argv[]) {
    ios_base::sync_with_stdio(false);
    int ntest;
    cin >> ntest;
    while (ntest--) {
    	cin >> tp >> s;
    	n = s.size();
    	mem(cnt, 0);
    	repu(i, 0, n) {
    		cnt[0] += ((s[i] == 'B') ? 1 : 0);
    		cnt[1] += ((s[i] == 'G') ? 1 : 0);
    	}
    	printf("%lld\n", solve());
    }
    return 0;
}
