#include <cstdio>
#include <cmath>
#include <iostream>
#include <set>
#include <algorithm>
#include <vector>
#include <map>
#include <cassert>
#include <string>
#include <cstring>
#include <queue>

using namespace std;

#define rep(i,a,b) for(int i = a; i < b; i++)
#define S(x) scanf("%d",&x)
#define S2(x,y) scanf("%d%d",&x,&y)
#define P(x) printf("%d\n",x)
#define all(v) v.begin(),v.end()
#define sz size()
#define TIME 4.7

typedef long long int LL;
typedef pair<int, int > pii;
typedef vector<int > vi;

const int N = 101;
const int itr = 55; // INCREASE THIS TO INCREASE SCORE

int T[10000001];
int CNT[10000001];
int trn;

// fix sum(i+1) error later


clock_t startTime, endTime;

int vis[10000001];

int n,t;
int A[N], R[N], R2[N];
int midScore[N];
double checkSum;
int PR[N][1001], fact[11];
int CS[N];
int SUM[N];
string s,ans;
int score = 0;
LL total = 0;
LL P[20];
int D[7];
vector<int > v[8000];

string extra;
int E[N];

bool _cmp(int a, int b) {
	return a > b;
}

void pre() {
	P[0] = 1;
	rep(i,1,19) {
		P[i] = P[i-1] * 10;
	}

	fact[0] = 1;
	rep(i,1,10) {
		fact[i] = fact[i-1] * i;
	}

	int num = 0, num1 = 0;
	int cnt = 0;
	rep(i,1,10)
	rep(ii,1,10)
	rep(iii,1,10)
	rep(iiii,1,10)
	rep(iiiii,1,10)
	rep(iiiiii,1,10)
	rep(iiiiiii,1,10) {
		D[0] = i;
		D[1] = ii;
		D[2] = iii;
		D[3] = iiii;
		D[4] = iiiii;
		D[5] = iiiiii;
		D[6] = iiiiiii;
		num1 = D[6]+D[5]*10+D[4]*100+D[3]*1000+D[2]*10000+D[1]*100000+D[0]*1000000;
		sort(D,D+7);
		num = D[6]+D[5]*10+D[4]*100+D[3]*1000+D[2]*10000+D[1]*100000+D[0]*1000000;
		if(!vis[num]) {
			cnt++;
			vis[num] = cnt;
		}
		v[vis[num]].push_back(num1);
	}

	rep(i,1,10)
	rep(ii,1,10)
	rep(iii,1,10)
	rep(iiii,1,10)
	rep(iiiii,1,10) {
		D[0] = i;
		D[1] = ii;
		D[2] = iii;
		D[3] = iiii;
		D[4] = iiiii;
		num1 = D[4]+D[3]*10+D[2]*100+D[1]*1000+D[0]*10000;
		sort(D,D+5);
		num = D[4]+D[3]*10+D[2]*100+D[1]*1000+D[0]*10000;
		if(!vis[num]) {
			cnt++;
			vis[num] = cnt;
		}
		v[vis[num]].push_back(num1);
	}
}

string str(int x) {
	string res;
	while(x) {
		res += x % 10 + '0';
		x /= 10;
	}
	reverse(all(res));
	return res;
}

void printAns() {
	
	ans = extra + ans;
	rep(i,0,ans.sz) printf("%c",ans[i]);
	printf("\n");
}

int calcScore(string &s) {

	int res = 0;

	rep(i,0,n) {
		int x = 0;
		rep(j,0,s.sz) {
			x = x * 10 + s[j] - '0';
			x %= A[i];
		}
		res += x;
	}

	return res;
}

string tmp,tmp2,tmp3;

void strat2(string &s, int len) {

	tmp = s;
	tmp3.clear();
		
	int lim = min(len,(int)tmp.sz);
	rep(i,0,lim) {
		tmp3.push_back(tmp.back());
		tmp.pop_back();
	}

	LL num = 0;
	rep(j,0,tmp.sz) {
		num = num * 10 + tmp[j] - '0';
	}
	rep(i,0,n) {
		R[i] = num % A[i];
	}

	rep(i,0,n) {
		R[i] = (R[i] * 1LL * PR[i][tmp3.sz]) % A[i];
	}

	// printf("%d %d %d\n",)
	tmp2.clear();
	sort(all(tmp3));
	int x = 0;
	rep(j,0,tmp3.sz) {
		x = x * 10 + tmp3[j] - '0';
	}

	int _index = vis[x];
	int val = -1;

	rep(i,0,v[_index].sz) {
		int sc = 0;
		x = v[_index][i];
		bool flag = true;
		rep(i,0,n) {			
			sc += (E[i] + x + R[i]) % A[i];
			if(sc + SUM[i+1] > score) {
				flag = false;
				break;
			}
		}
		if(sc < score && flag) {
			score = sc;
			val = x;
		}
	}
	if(val != -1) {
		ans = tmp + str(val);
	}
}

void strat3(string &s) {
	rep(i,0,n) {
		R[i] = 0;
		rep(j,0,s.sz) {
			R[i] = (R[i] * 10 + s[j] - '0') % A[i];
		}
	}

	rep(i,0,n) R2[i] = 1;

	for(int i = s.sz - 1; i > 0; i--) {

		int x = 0;
		rep(j,0,n) {
			int nw = E[j] + R[j];
			if(nw >= A[j] ) nw -= A[j];
			nw -= (s[i] - '0') * R2[j];
			nw -= (s[i-1] - '0') * R2[j] * 10;

			nw += (s[i-1] - '0') * R2[j];
			nw += (s[i] - '0') * R2[j] * 10;

			nw %= A[j];
			nw += A[j];
			nw %= A[j];
			x += nw - (E[j] + R[j]) % A[j];
		}

		if(x < 0) {
			score += x;
			rep(j,0,n) {
				int nw = E[j] + R[j];
				if(nw >= A[j] ) nw -= A[j];
				nw -= (s[i] - '0') * R2[j];
				nw -= (s[i-1] - '0') * R2[j] * 10;

				nw += (s[i-1] - '0') * R2[j];
				nw += (s[i] - '0') * R2[j] * 10;

				nw %= A[j];
				nw += A[j];
				nw %= A[j];
				R[j] = (nw-E[j]+A[j]) % A[j];
			}
			swap(s[i], s[i-1]);
		}

		rep(j,0,n) {
			R2[j] *= 10;
			R2[j] %= A[j];
		}

	}
	ans = s;

}


void strat4(int mx, int len) {

	int cnt = 7;
	int xx = cnt;
	int mark = 0;
	tmp.clear();
	tmp2.clear();
	tmp3.clear();
	rep(i,0,s.sz) {
		int x = s[i] - '0';
		if(!((mark >> x)&1) && xx) {
			tmp2 += s[i];
			xx--;
			mark |= 1 << x;
		} else {
			tmp += s[i];
		}
	}

	int lim = min(len,(int)tmp.sz);

	mark = 0;
	int idx = tmp.sz-1;
	for(int i = tmp.sz-1; i >= 0; i--) {
		int x = tmp[i] - '0';
		if(!((mark >> x)&1)) {
			swap(tmp[i], tmp[idx]);
			idx--;
			mark |= 1 << x;
		}
	}

	rep(i,0,lim) {
		tmp3 += tmp.back();
		tmp.pop_back();
	}

	while(tmp2.sz < 7 && tmp.sz > 0) {
		tmp2 += tmp.back();
		tmp.pop_back();
	}

	rep(i,0,n) {
		R[i] = 0;
		rep(j,0,tmp.sz) {
			R[i] = (R[i] * 10 + tmp[j] - '0') % A[i];
		}
	}

	int num = 0;
	rep(i,0,tmp3.sz) {
		num = num * 10 + tmp3[i]-'0';
	}

	int bits = cnt - xx;
	rep(i,0,n) {
		R[i] = (R[i] * 1LL * PR[i][bits+tmp3.sz]) % A[i];
	}

	sort(all(tmp2));
	int x = 0;
	rep(j,0,tmp2.sz) {
		x = x * 10 + tmp2[j] - '0';
	}

	// printf("%d %d %d\n",)
	int _index = vis[x];
	// if(T[_index] == trn && CNT[_index] >= 2) return;
	// cerr << x << endl;
	// cerr << v[_index].sz << endl;
	int val = -1;
	for(int j = 0; j < v[_index].sz; j++) {
		int sc = 0;
		x = v[_index][j];
		// if(T[x] != trn) {
		// 	T[x] = trn;
		// } else {
		// 	continue;
		// }
		bool flag = true;
		rep(i,0,n) {
			sc += (E[i] + x * 1LL * PR[i][tmp3.sz] + (LL)R[i] + num) % A[i];
			if(sc + SUM[i-i/50] >= score) {
				flag = false;
				break;
			}
			// if(i >= 50) {
			// 	if(sc + SUM[i-1] >= score) {
			// 		flag = false;
			// 		break;
			// 	}
			// }
		}
		if(sc < score && flag) {
			score = sc;
			val = x;
		}
	}

	if(val != -1) {
		ans = tmp + str(val) + tmp3;
	}

}

void reduceString() {

	// random_shuffle(all(s));
	int mask = 0;
	int idx = 0;
	rep(i,0,s.sz) {
		int x = s[i] - '0';
		if(!((mask>>x)&1)) {
			mask |= 1 << x;
			swap(s[i], s[idx]);
			idx++;
		}
		if(__builtin_popcount(mask) == 9) {
			mask = 0;
		}
	}

	rep(i,idx,s.sz) {
		int x = s[i] - '0';
		if(!((mask>>x)&1)) {
			mask |= 1 << x;
			swap(s[i], s[idx]);
			idx++;
		}
		if(__builtin_popcount(mask) == 7) {
			mask = 0;
		}
	}

	rep(i,0,n) E[i] = 0;
	extra.clear();

	while(s.sz > 21) {
		rep(i,0,n) {
			E[i] = E[i] * 10 + s.back() - '0';
			E[i] %= A[i];
		}
		extra += s.back();
		s.pop_back();
	}

	rep(i,0,n) {
		E[i] = (E[i] * 1LL * PR[i][s.sz]) % A[i];
	}

}

void solve(int idx, int mx) {

	rep(i,0,n) PR[i][0] = 1;

	rep(i,0,n) {
		rep(j,1,s.sz) {
			PR[i][j] = PR[i][j-1] * 10 % A[i];
		}
	}

	score = calcScore(s);
	rep(i,0,n) midScore[i] = score;
	reduceString();
	ans = s;
	strat4(0,5);
	// strat5(s);
	strat2(ans, 5);
	// strat2(ans, 5);
	strat3(ans);

	rep(i,0,itr) {
		// P(score);

		int cnt = 1;

		random_shuffle(all(s));
		// cp = ans;
		strat4(0,5);
		// strat5(s);
		strat2(ans, 5);
		// strat2(ans, 5);
		// strat3(ans);
	}

	rep(i,0,10) strat3(ans);


	printAns();
	// P(score);
	total += score;

}

int main() {
	S(t);
	startTime = clock();
	// srand(time(NULL));
	pre();
	rep(tc,1,t+1) {
		trn++;
		char ch;
		getchar();
		s.clear();
		while((ch = getchar_unlocked()) != '\n') {
			s += ch;
		}
		S(n);
		int mx = 0;
		int mn = 1000000;
		// checkSum = 0.0;
		rep(i,0,n) {
			S(A[i]);
			checkSum += A[i];
			mx = max(mx, A[i]);
			mn = min(mn, A[i]);
		}
		sort(A,A+n,_cmp);
		SUM[n] = 0;
		for(int i = n-1; i >= 0; i--) {
			SUM[i] = SUM[i+1] + A[i] * 100 / 302;
		}

		solve(tc,mx);
	}
	cerr << checkSum / total << endl;
	cerr << total << endl;
	return 0;
}