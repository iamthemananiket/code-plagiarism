#include <bits/stdc++.h>

#include <random>
std::default_random_engine random_engine(0x76543342);
template<class T>
inline T randint(T L, T R) { return std::uniform_int_distribution<T>(L, R)(random_engine); }

using namespace std;

int N, M;
char A[2000], tmp[2000];
int B[100];

inline int evaluate()
{
    int ret=0;
    for(int j=0; j<M; j++)
    {
        int val=0;
        for(int i=0; i<N; i++)
        {
            val=val*10+A[i];
            val%=B[j];
        }
        ret+=val;
    }
    return ret;
}

void force()
{
    sort(A, A+N);
    int ans=0x3f3f3f3f;
    do
    {
        int v=evaluate();
        if(v<ans)
        {
            ans=v;
            strcpy(tmp, A);
        }
    }
    while(next_permutation(A, A+N));
    strcpy(A, tmp);
}

void solve()
{
    scanf("%s", A);
    N=strlen(A);
    for(int i=0; i<N; i++)
        A[i]-='0';
    scanf("%d", &M);
    for(int i=0; i<M; i++)
    {
        scanf("%d", B+i);
        if(B[i]<1000)
            i--, M--;
    }
    if(N<=7)
        force();
    else
    {
        int ans=evaluate();
        int iterations=60000/N;
        int maxlen=N;
        while(iterations--)
        {
            int a=randint(0, N-1);
            int b=randint(a+1, min(N, a+maxlen));
            if(N>50)
                maxlen=max(maxlen-1, 1);
            reverse(A+a, A+b);
            int v=evaluate();
            if(v<ans)
                ans=v;
            else
                reverse(A+a, A+b);
        }
        strcpy(tmp, A);
    }
    for(int i=0; i<N; i++)
        A[i]+='0';
    printf("%s\n", A);
}

int main()
{
    int T;
    scanf("%d", &T);
    while(T--)
        solve();
    return 0;
}
