#include <algorithm>
#include <cstring>
#include <iostream>
#include <set>
#include <vector>

#define NMAX 200010

typedef long long lli;


using namespace std;



int all[1000010];
lli pref[1000010];

int M;
int cont[1010][1010];
int n[1010];
lli cpref[1010][1010];


int A[1010];
int N;

int main(){

	int i,t,j,k;

	scanf("%d",&t);

	lli sum =0,tm ;

	while(t--){

		scanf("%d",&N);
		sum  =0;
		M = 0;

		memset(n,0,sizeof(n));
		for(i = 0; i < N; ++i) scanf("%d",&A[i]);
		for(i = 0; i < N; ++i){
			for(j = i+1; j < N; ++j){
				all[M++] = A[i]+A[j];
			}
			for(j = 0; j < N; ++j){
				if(j ==i ) continue;
				cont[i][n[i]++] = A[i]+A[j];
			}
			sort(cont[i],cont[i]+n[i]);

			cpref[i][0] = cont[i][0];
			for(j = 1; j < n[i]; ++j) cpref[i][j] = cpref[i][j-1]+cont[i][j];
		}

		sort(all,all+M);
		pref[0] = all[0];
		for(i = 1; i < M; ++i) pref[i] = pref[i-1]+all[i];

		for(i = 0; i < N; ++i){
			for(j = i+1; j < N; ++j){

				k = upper_bound(all,all+M,A[i]+A[j])-all;
				if(!k) continue;
				tm = 1LL*(A[i]+A[j])*(k)-pref[k-1];

				k = upper_bound(cont[j],cont[j]+n[j],A[i]+A[j])-cont[j];
				if(k){
					tm -= 1LL*(A[i]+A[j])*(k)-cpref[j][k-1];
				}

				k = upper_bound(cont[i],cont[i]+n[i],A[i]+A[j])-cont[i];
				if(k) {
					tm -= 1LL*(A[i]+A[j])*(k)-cpref[i][k-1];
				}
				sum += tm*2;
			}
		}

		printf("%lld\n",sum);
	}

	return 0;
}
