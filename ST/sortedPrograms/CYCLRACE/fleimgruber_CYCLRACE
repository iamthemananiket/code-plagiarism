#include <cstdio>
#include <algorithm>
#include <vector>
#include <functional>
#include <set>

using namespace std;

#define all(a) (a).begin(),(a).end()
#define pb push_back
#define sz(a) ((int)(a).size())
#define mp make_pair
#define fi first
#define se second

typedef pair<int,int> pint;
typedef long long ll;
typedef vector<int> vi;

//https://github.com/niklasb/contest-algos/blob/master/convex_hull/dynamic.cpp
const ll is_query = -(1LL<<62);
struct Line {
    ll m, b;
    mutable function<const Line*()> succ;
    bool operator<(const Line& rhs) const {
        if (rhs.b != is_query) return m < rhs.m;
        const Line* s = succ();
        if (!s) return 0;
        ll x = rhs.m;
        return (b - s->b)/(s->m - m) < x;
    }
};
struct HullDynamic : public multiset<Line> { // will maintain upper hull for maximum
    bool bad(iterator y) {
        auto z = next(y);
        if (y == begin()) {
            if (z == end()) return 0;
            return y->m == z->m && y->b <= z->b;
        }
        auto x = prev(y);
        if (z == end()) return y->m == x->m && y->b <= x->b;
        return (x->b - y->b)/(y->m - x->m) >= (y->b - z->b)/(z->m - y->m);
    }
    void insert_line(ll m, ll b) {
        auto y = insert({ m, b });
        y->succ = [=] { return next(y) == end() ? 0 : &*next(y); };
        if (bad(y)) { erase(y); return; }
        while (next(y) != end() && bad(next(y))) erase(next(y));
        while (y != begin() && bad(prev(y))) erase(prev(y));
    }
    ll eval(ll x) {
        auto l = *lower_bound((Line) { x, is_query });
        return l.m * x + l.b;
    }
};
//end

#define MAX_N 50005

HullDynamic hull;
ll k[MAX_N],d[MAX_N];

int main()
{
	int n,q;
	scanf("%d %d",&n,&q);
	hull.insert_line(0,0);
	while (q--)
	{
		int t,time;
		scanf("%d %d",&t,&time);
		if (t==1)
		{
			int id,speed;
			scanf("%d %d",&id,&speed);
			d[id]+=time*1LL*(k[id]-speed);
			k[id]=speed;
			hull.insert_line(k[id],d[id]);
		}
		else
			printf("%lld\n",hull.eval(time));
	}
	return 0;
}
