#include <algorithm>
#include <iostream>
#include <cassert>
#include <cstdio>
#include <cstring>

using namespace std;


struct pt{
	int x,y,val;
};

long long cross(pt &p0, pt &p1, pt &p2){
	return (p1.x-p0.x)*1LL*(p2.y-p0.y)-(p1.y-p0.y)*1LL*(p2.x-p0.x);

}

pt st;
int compare(pt a, pt b){
	if(a.x == st.x && a.y == st.y) return 1;
	if(b.x == st.x && b.y == st.y) return 0;
	return (a.y-st.y)*1LL*(b.x-st.x) < (b.y-st.y)*1LL*(a.x-st.x);
}

int D[52][52];

pt cur[52];
int M,N;
pt all[52];

void computeD(){

	int i,j,k;

	memset(D,0,sizeof(D));
	for(i = 0; i < M; ++i){
		for(j = i+1; j <= M; ++j){
			for(k = i; k < j; ++k){
				if(cross(cur[i],cur[k],cur[j]) > 0) continue;
				D[i][j] += cur[k].val;
			}
		}
	}
}

pt st2;

int comp2(int a, int b){
	return cross(st2,cur[a],cur[b]) > 0;
}

int dp[52][52][52];
int pr[52];
int nx[52];

int best[52];

void compute(int s){
	int i,k,j;

	st = all[s];

	M = 0;
	for(i = 0; i < N; ++i){
		if(all[i].x > st.x || (all[i].x == st.x && all[i].y >= st.y)) cur[M++] = all[i];
	}

	sort(cur,cur+M,compare);
	cur[M] = st;
	computeD();

	int p,n;
	for(p = 0; p < M; ++p){
		dp[p][M][0] = 0;
		for(k = 1; k <= M; ++k) dp[p][M][k] = (1e9);
	}

	for(i = M-1; i >=0 ; --i){
		for(p = 0; p < i; ++p) dp[p][i][0] = (1e9);

		p = n = 0;
		for(j = 0; j < i; ++j) pr[p++] = j;
		for(j = i+1; j <= M; ++j) nx[n++] = j;

		pr[p] = i;
		for(k = 1; k <= M; ++k) dp[i][i][k] = (1e9);

		st2 = cur[i];
		sort(pr,pr+p,comp2);
		sort(nx,nx+n,comp2);


		while(p--){
			for(k = 1; k <= M; ++k){
				dp[pr[p]][i][k] = dp[pr[p+1]][i][k];
			}

			while(n && cross(cur[pr[p]],cur[nx[n-1]],st2) <= 0){
				--n;
				for(k = 1; k <= M; ++k)	dp[pr[p]][i][k] = min(dp[pr[p]][i][k], D[i][nx[n]] + dp[i][nx[n]][k-1]);
			}
		}
	}

	for(k = 3; k <= M; ++k){
		for(i = 1; i < M; ++i){
			best[k] = min(best[k],D[0][i] + dp[0][i][k-1]);
		}
	}
}

int main(){
	int i;
	scanf("%d",&N);

	for(i = 0; i < N; ++i) scanf("%d%d%d",&all[i].x,&all[i].y,&all[i].val);

	for(i = 0; i <= N; ++i) best[i] = (1e9);
	for(i = 0; i < N; ++i){
		compute(i);
	}

	for(i = 3; i <= N; ++i){
		printf("%d ",best[i] < (1e9) ? best[i] : -1);
	}

	return 0;
}
