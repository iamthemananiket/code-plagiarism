#define _CRT_SECURE_NO_WARNINGS
#include <string>
#include <vector>
#include <algorithm>
#include <numeric>
#include <set>
#include <map>
#include <queue>
#include <iostream>
#include <sstream>
#include <cstdio>
#include <cmath>
#include <ctime>
#include <cstring>
#include <cctype>
#include <list>
#include <cassert>
#include <limits>
#include <iterator>
#define rep(i,n) for(int (i)=0;(i)<(int)(n);++(i))
#define rer(i,l,u) for(int (i)=(int)(l);(i)<=(int)(u);++(i))
#define reu(i,l,u) for(int (i)=(int)(l);(i)<(int)(u);++(i))
#if defined(_MSC_VER) || __cplusplus > 199711L
#define aut(r,v) auto r = (v)
#else
#define aut(r,v) typeof(v) r = (v)
#endif
#define each(it,o) for(aut(it, (o).begin()); it != (o).end(); ++ it)
#define all(o) (o).begin(), (o).end()
#define pb(x) push_back(x)
#define mp(x,y) make_pair((x),(y))
#define mset(m,v) memset(m,v,sizeof(m))
#define INF 0x3f3f3f3f
#define INFL 0x3f3f3f3f3f3f3f3fLL
using namespace std;
typedef vector<int> vi; typedef pair<int,int> pii; typedef vector<pair<int,int> > vpii;
typedef long long ll; typedef vector<long long> vl; typedef pair<long long,long long> pll; typedef vector<pair<long long,long long> > vpll;
typedef vector<string> vs; typedef long double ld;

int memo[101][101];
int getGrundyNumberSlow(int x, int y) {
	if(memo[x][y] != -1) return memo[x][y];
	if(y == 0 || x == y) return 0;
	if(x < y) return getGrundyNumberSlow(y, x);
	int t = x - y;
	set<int> s;
	while(t > 0) {
		s.insert(getGrundyNumberSlow(t, y));
		t -= y;
	}
	for(int i = 0; ; i ++)
		if(!s.count(i)) return memo[x][y] = i;
}

int getGrundyNumber(int x, int y) {
	if(x == y) return 0;
	if(x < y) return getGrundyNumber(y, x);
	if(x % y == 0) return x / y - 1;
	int t = getGrundyNumber(y, x % y), u = x / y - 1;
	return u + (t <= u);
}

int main() {
	/*
	mset(memo, -1);
	rer(x, 1, 100) rer(y, 1, 100) {
		int a = getGrundyNumberSlow(x, y), b = getGrundyNumber(x, y);
		if(a != b) cerr << x << ", " << y << ": " << a << " vs. " << b << endl;
	}
	*/
	int T;
	scanf("%d", &T);
	rep(ii, T) {
		int N;
		scanf("%d", &N);
		int g = 0;
		rep(i, N) {
			int x, y;
			scanf("%d%d", &x, &y);
			g ^= getGrundyNumber(x, y);
		}
		puts(g == 0 ? "NO" : "YES");
	}
	return 0;
}
