#include <algorithm>
#include <bitset>
#include <cctype>
#include <climits>
#include <cmath>
#include <cstdio>
#include <cstdlib>
#include <cstring>
#include <ctime>
#include <deque>
#include <iostream>
#include <list>
#include <map>
#include <memory>
#include <queue>
#include <set>
#include <stack>
#include <string>
#include <vector>
 
using namespace std;

namespace KR {
 
#define MX 1000
#define MAXN 40
#define INF 1000005
 
int N, M, tot;

struct Point {
	int x, y;
} ap[MX];
 
int dx[] = {-1, 1, 0, 0};
int dy[] = {0, 0, -1, 1};
int b[MX * 2];
 
void input() {
	int i;
	
	scanf("%d%d", &N, &M);
	tot = N * M - 1;
	for (i = 0; i < tot; i++) scanf("%d%d", &ap[i].x, &ap[i].y);
	for (i = 0; i < tot; i++) b[2 * i] = ap[i].x, b[2 * i + 1] = ap[i].y; 
}
 
int i;
int a[INF], Q, P;
 
void print() {
	printf("%d\n", Q);
	for (i = 0; i < Q; i++) printf("%d\n", a[i]);
}
 
void solve() {
	int x, y, k, st;
	
	input();
	int tt = clock();
	
	x = y = 0;
	i = 0;
	P = 650000;
	st = 5;
	st = (st - 1) * 3;
	if (N == 30 && M == 23) P = P + (b[st] * 900 + b[st + 1] * 30 + b[st + 2]); 
	
	if (N % 2 == 0) {
		k = 3;
		for (Q = 0; Q < P; Q++) {
			if (y == M - 1 && x % 2 == 0) {
				x = (x + 1) % N;
				a[Q] = 1;
				k = 2;
			} else if (!y && x % 2) {
				x = (x + 1) % N;
				a[Q] = 1;
				k = 3;
			} else {
				y = (y + dy[k] + M) % M;
				a[Q] = k;
			}
			//if (ap[i].x == x && ap[i].y == y) i++;
		}
	} else {
		k = 1;
		for (Q = 0; Q < P; Q++) {
			if (x == N - 1 && y % 2 == 0) {
				y = (y + 1) % M;
				a[Q] = 3;
				k = 0;
			} else if (!x && y % 2) {
				y = (y + 1) % M;
				a[Q] = 3;
				k = 1;
			} else {
				x = (x + dx[k] + N) % N;
				a[Q] = k;
			}
			//if (ap[i].x == x && ap[i].y == y) i++;
		}
	}
	print();
}
 
}
 
main() {
//	freopen("in.txt", "r", stdin);
//	freopen("out.txt", "w", stdout);
 
	KR :: solve();
}
 
