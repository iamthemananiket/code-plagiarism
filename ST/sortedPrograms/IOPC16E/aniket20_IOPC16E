#include<bits/stdc++.h>
using namespace std;

// Numeric Constants
#define MOD 1000000007
#define maxs 200005
#define mins 1005
#define eps 1e-9
#define imax 2000000200
#define llmax 1000000002000000000ll
#define pi 3.141592653589793

// Others
#define ll long long
#define pb push_back
#define gc getchar_unlocked
#define iosbase ios_base::sync_with_stdio(false)
#define pii pair<int,int>
#define pll pair<ll,ll>
#define ppi pair<pair<int,int>,int>
#define ppl pair<pll,ll>
#define vi vector<int>
#define sc scanf
#define pr printf
#define lld I64d
#define F first
#define S second
#define siter set<int>::iterator
#define p_pq priority_queue
#define ub upper_bound
#define lb lower_bound
#define mps make_pair


// Declarations:

#define point pair<double,double>


struct line{
	double a,b,c;
};

// Different functions:

double signed_triangle_area(point p1,point p2,point p3){	
	double ret=((p2.F-p1.F)*(p3.S-p1.S)-(p2.S-p1.S)*(p3.F-p1.F));
	return ret;
}

bool clockwise(point p1,point p2,point p3){
	return signed_triangle_area(p1,p2,p3)<0;
}

bool counter_clockwise(point p1,point p2,point p3){
	return signed_triangle_area(p1,p2,p3)>0;
}

bool is_collinear(point p1,point p2,point p3){
	return signed_triangle_area(p1,p2,p3)==0;
}


double triangle_area(point p1,point p2, point p3){
	return abs(signed_triangle_area(p1,p2,p3))/2.0;
}



bool coordiantes_between(double x1,double x2,double x3,double x4){ // Checks if co-ordinats of one line are on either sides 
	if(x1>x2){
		swap(x1,x2);
	}
	if(x3>x4){
		swap(x3,x4);
	}
	return max(x1,x3)<=min(x2,x4);
}

bool intersect(point p1,point p2,point p3,point p4){ // returns true if two lines intersect
	return (coordiantes_between(p1.F,p2.F,p3.F,p4.F) && 
			coordiantes_between(p1.S,p2.S,p3.S,p4.S) && 
			signed_triangle_area(p1,p2,p3)*signed_triangle_area(p1,p2,p4)<=0 && 
			signed_triangle_area(p3,p4,p1)*signed_triangle_area(p3,p4,p2)<=0);
}

double det(double x1,double x2,double x3,double x4){  // Det of 2*2 matrix
	return (x1*x4)-(x2*x3);
}

point intersection(line M,line N){
	point ret;
	double den=det(M.a,M.b,N.a,N.b);
	if(det==0){
		cerr<<"Intersection does not exist!\n";
		return ret;
	}
	ret.F=-det(M.c,M.b,N.c,N.b)/den;
	ret.S=-det(M.a,M.c,N.a,N.c)/den;
	return ret;
}

double sqr(double a){
	return a*a;
}

double area_polygon(double side,double num){	// Give a side and number of sides, area of polygon. 
	double ret=sqr(side)*num/(4.0*tan(pi/num));	// Angle is in radians.
}

double distance(point p1,point p2){
	double ret=0;
	ret=sqr(p1.F-p2.F)+sqr(p1.S-p2.S);
	return sqrt(ret);
}

double area_polygon(vector<point> v){	// Points in anticlockwise order
	double ret=0.0;
	int i,n=v.size();
	for(i=0;i<n;i++){
		int nxt=(i+1)%n;
		ret+=(v[i].F*v[nxt].S-v[nxt].F*v[i].S);
	}
	return abs(ret)/2.0;
}

double area_circle(int rad){
	double ret=pi*rad*rad;
	return ret;
}

// Convex Hull:

point pivot;

bool comp(point p1,point p2){
	if(counter_clockwise(pivot,p1,p2)){
		return true;
	}
	if(clockwise(pivot,p1,p2)){
		return false;
	}
	double d1=distance(pivot,p1),d2=distance(pivot,p2);
	return (d1<d2);
}

vector<point> convex_hull(vector<point> V){
	vector<point>ans;
	if(V.size()==1){
		return V;
	}
	int i,n=V.size();
	int pos=0;
	for(i=1;i<V.size();i++){	// Chose pivot carefully depending on the question
		if(V[i].S<V[pos].S){
			pos=i;
		}
		else if(V[i].S==V[pos].S && V[i].F<V[pos].F){
			pos=i;
		}
	}
	swap(V[0],V[pos]);
	pivot=V[0];
	sort(V.begin(),V.end(),comp);
	vector<point>ret;
	ret.resize(n);
	int cntr=0;
	ret[cntr++]=V[0];
	ret[cntr++]=V[1];
	for(i=2;i<n;i++){
		while(cntr>=2 && !counter_clockwise(ret[cntr-2],ret[cntr-1],V[i])){
			cntr--;
		}
		ret[cntr++]=V[i];
	}
	for(i=0;i<cntr;i++){
		ans.pb(ret[i]);
	}
	return ans;
}

set<pii>st;
set<pii>::iterator it;
vector<point>v,hull;

int main()
{
	int t,i,x,y;
	ll n,r;
	sc("%d",&t);
	while(t--){
		sc("%lld %lld",&n,&r);
		v.clear();
		st.clear();
		for(i=0;i<n;i++){
			sc("%d %d",&x,&y);
			st.insert(mps(x,y));
		}
		n=st.size();
		for(it=st.begin();it!=st.end();it++){
			v.pb(*it);
		}
		if(n==1){
			double ans=2*pi*r;
			pr("%.8lf\n",ans);
			continue;
		}
		double ans=2*pi*r;
		hull=convex_hull(v);
		for(i=0;i<hull.size();i++){
			ans+=distance(hull[i],hull[(i+1)%hull.size()]);
		}
		pr("%.8lf\n",ans);
	}
	return 0;
}