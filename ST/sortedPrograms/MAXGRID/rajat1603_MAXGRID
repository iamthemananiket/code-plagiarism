#include "bits/stdc++.h"
using namespace std;
const int N = 1e5 + 5;
const int MX = 1e5;
const int SN = 1 << 18;
int n , l;
int a[N] , b[N] , c[N];
vector < pair < pair < int , int > , int > > v[N];
long long lazy[SN];
long long segtree[SN];
void push(int l , int r , int node){
    if(lazy[node]){
        segtree[node] += lazy[node];
        if(l != r){
            lazy[node + node] += lazy[node];
            lazy[node + node + 1] += lazy[node];
        }
        lazy[node] = 0;
    }
}
void update(int l , int r , int node , int ql , int qr , int val){
    push(l , r , node);
    if(l > qr || r < ql){
        return;
    }
    if(l >= ql && r <= qr){
        lazy[node] = val;
        push(l , r , node);
        return;
    }
    int mid = l + r >> 1;
    update(l , mid , node + node , ql , qr , val);
    update(mid + 1 , r , node + node + 1 , ql , qr , val);
    segtree[node] = max(segtree[node + node] , segtree[node + node + 1]);
}
long long solve(int l){
    long long res = 0;
    for(int i = 1 ; i <= MX ; ++i){
        v[i].clear();
    }
    for(int i = 1 ; i <= n ; ++i){
        v[a[i]].emplace_back(make_pair(make_pair(b[i] , min(MX , b[i] + l - 1)) , c[i]));
        if(a[i] + l <= MX){
            v[a[i] + l].emplace_back(make_pair(make_pair(b[i] , min(MX , b[i] + l - 1)) , -c[i]));
        }
    }
    for(int i = 1 ; i < SN ; ++i){
        lazy[i] = 0;
        segtree[i] = 0;
    }
    for(int i = 1 ; i <= MX ; ++i){
        for(auto it : v[i]){
            update(1 , MX , 1 , it.first.first , it.first.second , it.second);
        }
        res = max(res , segtree[1]);
    }
    return res;
}
int main(){
    scanf("%d %d" , &n , &l);
    for(int i = 1 ; i <= n ; ++i){
        scanf("%d %d %d" , b + i , a + i , c + i);
        a[i] = MX - a[i] + 1;
    }
    long long val = solve(l);
    int ll = 1;
    int rr = l;
    while(ll < rr){
        int mid = ll + rr >> 1;
        if(solve(mid) == val){
            rr = mid;
        }
        else{
            ll = mid + 1;
        }
    }
    printf("%lld %d\n" , val , ll);
}