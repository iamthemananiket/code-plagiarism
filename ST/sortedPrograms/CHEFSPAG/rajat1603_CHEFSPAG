
#include "bits/stdc++.h"
using namespace std;
const int MX = 2e4 + 4;
const int mod = 1e9 + 9;
int add(int a , int b){
    int res = a + b;
    if(res >= mod){
        return res - mod;
    }
    return res;
}
int mult(int a , int b){
    long long res = a;
    res *= b;
    if(res >= mod){
        return res % mod;
    }
    return res;
}
int t;
int n;
int a , b , c , d;
int dp[MX];
struct point{
    long long x;
    long long y;
    point(){
        x = 0;
        y = 0;
    }
    point(long long _x , long long _y){
        x = _x;
        y = _y;
    }
    point operator - (const point &o) const {
        return point(x - o.x , y - o.y);
    }
};
long long cross(point a , point b){
    return a.x * b.y - a.y * b.x;
}
int orient(point a , point b , point c){
    long long tmp = cross(c - a , b - a);
    if(tmp > 0){
        return 1;
    }
    if(tmp < 0){
        return -1;
    }
    return 0;
}
vector < point > arr;
bool between(point a , point b , point c){
    if(b.x >= min(a.x , c.x) && b.x <= max(a.x , c.x) && b.y >= min(a.y , c.y) && b.y <= max(a.y , c.y)){
        return 1;
    }
    return 0;
}
bool pointInPolygon(point p){
    for(int i = 0 ; i < n ; ++i){
        if(orient(arr[i] , arr[(i + 1) % n] , p) == 0){
            if(between(arr[i] , p , arr[(i + 1) % n])){
                return 1;
            }
        }
    }
    int i;
    int j = n - 1;
    bool b = 0;
    for(i = 0 ; i < n ; ++i){
        if((arr[i].y < p.y && arr[j].y >= p.y || arr[j].y < p.y && arr[i].y >= p.y) && (arr[i].x <= p.x || arr[j].x <= p.x)){
            if(arr[i].x + 1.0 * (p.y - arr[i].y) / (arr[j].y - arr[i].y) * (arr[j].x - arr[i].x) < p.x){
                b ^= 1; 
            }
        }
        j = i; 
    }
    return b;
}
int main(){
    scanf("%d" , &t);
    while(t--){
        scanf("%d" , &n);
        scanf("%d %d %d %d" , &a , &b , &c , &d);
        for(int i = 0 ; i < 4 ; ++i){
            scanf("%d" , dp + i);
        }
        for(int i = 4 ; i < MX ; ++i){
            dp[i] = add(add(mult(a , dp[i - 1]) , mult(b , dp[i - 2])) , add(mult(c , dp[i - 3]) , mult(d , dp[i - 4])));
        }
        arr.resize(n);
        for(int i = 0 ; i < n ; ++i){
            scanf("%lld %lld" , &arr[i].x , &arr[i].y);
            assert(arr[i].x <= 100);
            assert(arr[i].y <= 100);
        }
        int ans = 0;
        for(int i = 0 ; i <= 100 ; ++i){
            for(int j = 0 ; j <= 100 ; ++j){
                if(pointInPolygon(point(i , j))){
                    ans = add(ans , dp[i + j]);
                }
            }
        }
        printf("%d\n" , ans);
    }
} 