#include <bits/stdc++.h>
using namespace std;
const int N = 100005;

int to[N],l[N],r[N];
vector< pair<int,pair<int,int> > > root;

int query(int node, int msgL, int msgR)
{
	if(to[node]==0)
		return 0;
	int ans=0;
	if(l[node]>msgL)
		ans+= l[node]-msgL;
	if(r[node]<msgR)
		ans+= msgR-r[node];
	return ans+query(to[node],msgL,msgR);
}

int dfs(int msgL, int msgR)
{
	int cur=0,ans=-1;
	for(int i=0;i<root.size();i++)
	{
		cur=0;
		if(root[i].second.first>msgL)
			cur+=root[i].second.first-msgL;
		if(root[i].second.second<msgR)
			cur+=msgR-root[i].second.second;
		cur+=query(root[i].first,msgL,msgR);
		if(ans==-1 || ans>cur)
			ans=cur;
	}
	return ans;
}

int dp[33];

int main()
{
	int n,m,ans=0,u,v,a,b;
	cin>>n>>m;
	while(m--)
	{
		scanf("%d%d%d%d",&u,&v,&a,&b);
		if(u==1)
			root.push_back(make_pair(v,make_pair(a,b)));
		else
			to[u]=v,l[u]=a,r[u]=b;
	}
	dp[0]=0;
	for(int i=1;i<=32;i++)
		dp[i]=100000000;
	for(int i=1;i<=32;i++)
		for(int j=1;j<=i;j++)
			dp[i]=min(dp[i],dp[j-1]+dfs(j,i));
	cout<<dp[32];
}
