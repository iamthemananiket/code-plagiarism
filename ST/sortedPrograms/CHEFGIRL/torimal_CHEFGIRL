#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <cstring>
#include <cinttypes>
#include <cstdint>
#include <cassert>
#include <iostream>
#include <iomanip>
#include <fstream>
#include <sstream>
#include <algorithm>
#include <vector>
#include <map>
#include <set>
#include <queue>
#include <stack>
#include <deque>
#include <bitset>
#include <complex>
#include <functional>
#include <numeric>
#include <limits>
#include <utility>

#include <array>
#include <unordered_map>
#include <unordered_set>
#include <tuple>

using namespace std;

#define endl '\n'
typedef long long ll;
typedef unsigned int uint;

const int MAX_N = 110000;
const int S = 32;
const int INF = 1 << 30;
typedef tuple<int, int, int> Edge;

int n, m;
vector<Edge> g[MAX_N];
vector<int> ls;
int a[MAX_N][S];
int b[MAX_N][S];
int c[S][S];
int dp[S + 1];

void dfs(int v) {
  if (g[v].empty()) ls.push_back(v);
  for (const auto &e : g[v]) {
    int u, l, r;
    tie(u, l, r) = e;
    for (int i = 0; i < S; i++) a[u][i] = a[v][i];
    for (int i = 0; i < S; i++) b[u][i] = b[v][i];
    if (l > 0) a[u][l - 1]++;
    if (r < S - 1) b[u][r + 1]++;
    dfs(u);
  }
}

int main() {
  ios_base::sync_with_stdio(false); cin.tie(0);
  cin >> n >> m;
  for (int i = 0; i < m; i++) {
    int u, v, l, r;
    cin >> u >> v >> l >> r;
    u--, v--, l--, r--;
    g[u].push_back(Edge(v, l, r));
  }
  dfs(0);
  for (int i = 0; i < S; i++) {
    for (int j = 0; j < S; j++) {
      c[i][j] = INF;
    }
  }
  for (int v : ls) {
    for (int i = S - 1; i >= 1; i--) {
      a[v][i - 1] += a[v][i];
    }
    for (int i = S - 1; i >= 1; i--) {
      a[v][i - 1] += a[v][i];
    }
    for (int i = 0; i < S - 1; i++) {
      b[v][i + 1] += b[v][i];
    }
    for (int i = 0; i < S - 1; i++) {
      b[v][i + 1] += b[v][i];
    }
    for (int l = 0; l < S; l++) {
      for (int r = l; r < S; r++) {
	c[l][r] = min(c[l][r], a[v][l] + b[v][r]);
      }
    }
  }
  fill(dp, dp + S + 1, INF);
  dp[0] = 0;
  for (int l = 0; l < S; l++) {
    for (int r = l; r < S; r++) {
      dp[r + 1] = min(dp[r + 1], dp[l] + c[l][r]);
    }
  }
  cout << dp[S] << endl;
}
