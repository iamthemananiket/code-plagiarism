#include <bits/stdc++.h>
#define rep(i,x,y) for (int i = (x); i<=(y); i++)
#define repe(i,x,y) for (int i = (x); i < (y);i++)
#define drep(i,x,y) for (int i = (x); i >= (y); i--)
#define mp make_pair
#define pb emplace_back
#define mt make_tuple
#define gcd __gcd
#define sf(n) scanf("%Lf",&n)
#define prf(n) printf("%Lf",n)
#define	s(n) scanf("%d",&n)
#define sl(n) scanf("%lld",&n)
#define pr(n) printf("%d",n)
#define prl(n) printf("%lld",n)
#define endc printf("\n")
#define psp printf(" ")

using namespace std;
typedef long long ll;
typedef long double ld;
typedef pair<int,int> pii;

const int maxn = 3e5 + 7;

typedef struct node {
	int next[30];
	int len;
	int suf;
	int occ;
} node;

node T[maxn];

string s;

vector<int> G[maxn];

int bit[maxn]; int N,Z,n;

void update(int x,int v) {
	while (x < maxn) {
		bit[x] = max(bit[x],v);
		x += x & (-x);
	}
}

int query(int x) {
	int ans = 0;
	while (x > 0) {
		ans = max(ans, bit[x]);
		x -= x & (-x);
	}
	return ans;
}


void build(int x) {
	T[x] = *new node();
	repe(j,0,30) {
		T[x].next[j] = -1;
	}
}

int getlink(int x, int pos) {
	int cur = x, curl = T[x].len;
	while (true) {
		if (pos - 1 - curl >= 1 && s[pos-1-curl] == s[pos]) return cur;
		cur = T[cur].suf; curl = T[cur].len;
		
	}
}

void addchar(int pos) {

	//cout<<pos<<endl;

	int cur = getlink(Z,pos); int v = s[pos] - 'a';
	if (T[cur].next[v] > 0) {
		Z = T[cur].next[v]; T[Z].occ++; return;
	}

	//cout<<"*"<<T[cur].len<<endl;

	N++; Z = N; build(Z); T[Z].len = T[cur].len + 2; T[Z].occ = 1; T[cur].next[v] = Z;

	if (cur == 1) {
		T[Z].suf = 2;
	} else {
		T[Z].suf = T[getlink(T[cur].suf,pos)].next[v];
	}

	G[T[Z].suf].pb(Z); //cout<<"suf: "<<T[T[Z].suf].len<<endl;
	//cout<<T[Z].suf<<" "<<Z<<endl;
}

int dfs(int x,int pi) {

	//cout<<" "<<x<<endl;

	int oc = T[x].occ;

	for (int y : G[x]) {
		oc += dfs(y,x);
	}

	update(maxn-oc,T[x].len);

	return oc;
}

int main() {
	ios::sync_with_stdio(false); cin.tie(0);
	cin>>s; int n = s.size(); s = " " + s;


	repe(j,0,maxn) bit[j] = 0;

	N = 2; build(1); build(2); T[1].suf = 1; T[2].suf = 1; T[1].len = -1; T[2].len = 0;
	T[1].occ = 0; T[2].occ = 0; G[1].pb(2); Z = 2;

	rep(i,1,n) {
		addchar(i);

		//cout<<T[Z].len<<endl;
	}

	dfs(1,-1);

	//cout<<"ok"<<endl;

	int q; cin>>q;
	while (q--) {
		int K; cin>>K;
		cout<<query(maxn-K)<<endl;
	}
}
