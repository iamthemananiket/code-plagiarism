#include <bits/stdc++.h>

using namespace std;

vector<int> values;
map<pair<int,int>,int> mp;
vector<long long> ans;
vector<vector<int> > maxs;

/* Assumption: val > 0 */
static vector<int>::size_type int_log(vector<int>::size_type val)
{
    vector<int>::size_type shifts = 0;
    for (; val != 1; val >>= 1, shifts++);
    return shifts;
}

static void preprocess()
{
    for (vector<int>::size_type i = 0; i < values.size(); i++) {
        maxs.push_back(vector<int>());
        maxs[i].push_back(values[i]);
    }

    for (vector<int>::size_type j = 1; (1U << j) <= values.size(); j++) {
        for (vector<int>::size_type i = 0;
             i+(1 << j)-1 < values.size();
             i++) {
            int val = max(maxs[i][j-1], maxs[i+(1<<(j-1))][j-1]);
            maxs[i].push_back(val);
        }
    }
}

static int rmq(vector<int>::size_type from, vector<int>::size_type to)
{
    vector<int>::size_type l = int_log(to-from+1);
    return max(maxs[from][l], maxs[to+1-(1<<l)][l]);
}

int main(){
    int n;
    scanf("%d",&n);

    for(int i=0;i<n;i++){
        int t;
        scanf("%d",&t);
        values.push_back(t);
    }

    int m,x,y;
    scanf("%d %d %d",&m,&x,&y);

    preprocess();

    long long ans = 0;
    vector<int> xpos;
    for(int i=1;i<=n-1;i++){
        xpos.push_back(x);
        x = (x + 7) % (n-1);
    }

    vector<int> ypos;
    for(int i=1;i<=n;i++){
        ypos.push_back(y);
        y = (y + 11) % n;
    }

    int xc = 0,yc = 0;
    for(int i=1;i<=m;i++){
        int d = xpos[xc++];
        int e = ypos[yc++];
        if(xc == (n-1))
            xc = 0;
        if(yc == n)
            yc = 0;
        int l = min(d,e);
        int r = max(d,e);
        ans += rmq(l,r);
    }

    cout << ans;
    return 0;
}
