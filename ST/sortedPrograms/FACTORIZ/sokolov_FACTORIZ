#pragma comment(linker, "/STACK:500000000")
#include <algorithm>
#include <functional>
#include <iostream>
#include <list>
#include <map>
#include <math.h>
#include <set>
#include <stdio.h>
#include <stdlib.h>
#include <string>
#include <string.h>
#include <time.h>
#include <queue>
#include <utility>
#include <vector>
using namespace std;

#define y0 y123
#define y1 y1234
#define ll long long
#define PI 3.1415926535897932384626433832795
#define EPS 1e-9
#define INF 1e9


int gcd(int a, int b) { return (!b) ? a : gcd(b, a % b); }
int lcm(int a, int b) { return a / gcd(a,b) * b; }

int nextInt() { int n; scanf("%d", &n); return n; }
ll nextLong() { ll n; scanf("%lld", &n); return n; }

const int MOD = 1e9;
const int N = 1e7;
int a[120], ans[N], primes[N];
char s[1005];
bool used[N + 1];

bool mod(int v) {
	ll carry = 0;
	for (int i = a[0]; i >= 1; --i) {
		carry = (carry * MOD + a[i]) % v;
	}
	if (carry == 0) {
		carry = 0;
		for (int i = a[0]; i >= 1; --i) {
			ll cur = carry * MOD + a[i];
			a[i] = cur / v;
			carry = cur % v;
		}
		while (a[0] > 1 && a[a[0]] == 0) {
			--a[0];
		}
		return true;
	} else {
		return false;
	}
}

int main() {
	for (int i = 2; i * i <= N; ++i) {
		if (!used[i]) {
			for (int j = i * i; j <= N; j += i) {
				used[j] = true;
			}
		}
	}
	int size = 0;
	for (int i = 2; i <= N; ++i) {
		if (!used[i]) {
			primes[size++] = i;
		}
	}
	int t;
	scanf("%d\n", &t);
	for (int tt = 0; tt < t; ++tt) {
		gets(s);
		a[0] = 0;
		for (int i = strlen(s) - 1; i >= 0; i -= 9) {
			++a[0];
			a[a[0]] = 0;
			int p = 1;
			for (int j = 0; j < 9 && i - j >= 0; ++j) {
				a[a[0]] += p * (s[i - j] - '0');
				p *= 10;
			}
		}
		if (a[0] == 1 && a[1] == 1) {
			puts("1");
			puts("1");
			continue;
		}
		int cnt = 0;
		int S = 50;
		int cur = 0;
		for (int i = 0; cur < S && !(a[0] == 1 && a[1] == 1); ++i) {
			++cur;
			while (mod(primes[i])) {
				ans[cnt++] = primes[i];
				++cur;
			}
		}
		if (a[0] == 1 && a[1] == 1) {
			printf("%d\n", cnt);
		} else {
			printf("%d\n", cnt + 1);
		}
		for (int i = 0; i < cnt; ++i) {
			printf("%d\n", ans[i]);
		}
		if (!(a[0] == 1 && a[1] == 1)) {
			for (int i = a[0]; i >= 1; --i) {
				if (i == a[0]) {
					printf("%d", a[i]);
				} else {
					printf("%09d", a[i]);
				}
			}
			printf("\n");
		}
	}
	return 0;
}