#include <bits/stdc++.h>
 
using namespace std;
 
typedef long long ll;
typedef vector < long long > vll;
typedef pair < long long, long long > pll;
typedef pair < int, int > pii;
typedef vector < int > vii;
 
#define rep(i,n) for(int i = 0; i < n; i++)
#define reps(i,a,n) for(int i = a; i < n; i++)
#define s(n) cin >> n
#define csl ios_base::sync_with_stdio(false); cin.tie(NULL)
#define rsz(x,n) x.clear(); x.resize(n)
#define rrsz(x,a,n) x.clear(); x.resize(n,a)
#define wt while(true)
#define all(x) x.begin(),x.end()
#define pb push_back
#define ls(x) ((2*(x)) + 1)
#define rs(x) ((ls(x)) + 1)
#define md(a,b) (((a) + (b))/2)
#define INF (1e9 + 7)
 
const int N = 23;
int u, v;
int adj [N] = {0};
int n, m;
int DP [1 << N], SUB_DP[1 << N];
int bitc[N];
int popcount (int x){
	int cnt = 0;
	while(x > 0){
		++cnt;
		x -= (x & (-x));
	}
	return cnt;
}
int main(){
    csl; 
	cin >> n >> m;
	int u_mask = (1 << n);
	rep(i, m){
		cin >> u >> v;
		u--;
		v--;
		adj[u] |= (1 << v);
		adj[v] |= (1 << u);
	}
	rep(i, n){ // O(n * log(n));
		bitc[i] = __builtin_popcount(adj[i]); 
	}
	rep(i, u_mask){
		SUB_DP[i] = -1;
		DP[i] = INF;
	}
	SUB_DP[0] = 0;
	DP[0] = 0;
	for(int mask = 0; mask < u_mask; ++mask){
		rep(i, n){
			if(((1 << i) & mask) == 0){
				int cnt = bitc[i] - (2 * __builtin_popcount(mask & (adj[i])));
				int k = SUB_DP[mask | (1 << i)];
				SUB_DP[mask | (1 << i)] = SUB_DP[mask] + cnt;
			}
		}
	}
	for(int mask = 0; mask < u_mask; ++mask){
		for(int i = 0; i < n; ++i){
			if(((1 << i) & mask) == 0){
				DP[mask | (1 << i)] = min(DP[mask | (1 << i)], DP[mask] + SUB_DP[mask]);
			}
		}
	}
	cout << DP[(1 << n) - 1] << '\n';
    return 0;
}