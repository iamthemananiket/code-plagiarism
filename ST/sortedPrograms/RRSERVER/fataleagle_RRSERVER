#include <bits/stdc++.h>

using namespace std;

int N, M;
int C[20][20];
int cost[1<<20];
int dp[1<<20];

int solve(int mask)
{
    int& ret=dp[mask];
    if(ret!=-1)
        return ret;
    if(mask==0)
        return ret=0;
    ret=0x3f3f3f3f;
    for(int i=0; i<N; i++)
        if((mask>>i)&1)
            ret=min(ret, solve(mask&(~(1<<i))));
    ret+=cost[mask];
    return ret;
}

int main()
{
    memset(dp, -1, sizeof dp);
    scanf("%d%d", &N, &M);
    int a, b;
    for(int i=0; i<M; i++)
    {
        scanf("%d%d", &a, &b);
        C[a-1][b-1]=C[b-1][a-1]=1;
    }
    for(int i=1; i<(1<<N); i++)
    {
        cost[i]=cost[i-(i&-i)];
        int cur=__builtin_ctz(i&-i);
        for(int j=0; j<N; j++)
            if((i>>j)&1)
                cost[i]-=C[cur][j];
            else
                cost[i]+=C[cur][j];
    }
    printf("%d\n", solve((1<<N)-1));
    return 0;
}
