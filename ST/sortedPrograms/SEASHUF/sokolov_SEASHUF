#pragma comment(linker, "/STACK:500000000")
#include <algorithm>
#include <functional>
#include <iostream>
#include <list>
#include <map>
#include <math.h>
#include <set>
#include <stdio.h>
#include <stdlib.h>
#include <string>
#include <string.h>
#include <time.h>
#include <queue>
#include <utility>
#include <vector>
using namespace std;

#define y0 y123
#define y1 y1234
#define ll long long
#define PI 3.1415926535897932384626433832795
#define EPS 1e-9
#define INF 2147483647
#define N 100005

ll gcd(ll a, ll b) { return (!b) ? a : gcd(b, a % b); }
int lcm(int a, int b) { return a / gcd(a,b) * b; }

int nextInt() { int n; scanf("%d", &n); return n; }
ll nextLong() { ll n; scanf("%I64d", &n); return n; }

int a[N];

void shift(int l, int r) {
	int tmp = a[l];
	for (int i = l; i < r; ++i) {
		a[i] = a[i + 1];
	}
	a[r] = tmp;
}

int main() {
	int n = nextInt();
	ll sum1 = 0;
	ll sum2 = 0;
	for (int i = 1; i <= n; ++i) {
		a[i] = nextInt();
		if (i <= n / 2) {
			sum1 += a[i];
		} else {
			sum2 += a[i];
		}
	}
	ll gold = abs(sum1 - sum2);
	vector<int> res;
	if (sum1 < sum2) {
		int min_i = 1;
		for (int i = 2; i <= n / 2; ++i) {
			if (a[i] < a[min_i]) {
				min_i = i;
			}
		}
		int pos = n / 2 + 1;
		for (int i = pos + 1; i <= n; ++i) {
			if (abs(sum1 - a[min_i] + a[i] - (sum2 - a[i] + a[min_i])) < 
				abs(sum1 - a[min_i] + a[pos] - (sum2 - a[pos] + a[min_i]))) {
					pos = i;
			}
		}
		while (pos > n / 2 + 1) {
			res.push_back(pos - 1);
			res.push_back(pos);
			shift(pos - 1, pos);
			--pos;
		}
		shift(min_i, n / 2 + 1);
		res.push_back(min_i);
		res.push_back(n / 2 + 1);
	} else if (sum1 > sum2) {
		int min_i = n / 2 + 1;
		for (int i = n / 2 + 2; i <= n; ++i) {
			if (a[i] < a[min_i]) {
				min_i = i;
			}
		}
		while (min_i > n / 2 + 1) {
			res.push_back(min_i - 1);
			res.push_back(min_i);
			shift(min_i - 1, min_i);
			--min_i;
		}
		int pos = 1;
		for (int i = 2; i <= n / 2; ++i) {
			if (abs(sum1 - a[i] + a[min_i] - (sum2 - a[min_i] + a[i])) < 
				abs(sum1 - a[pos] + a[min_i] - (sum2 - a[min_i] + a[pos]))) {
					pos = i;
			}
		}
		shift(pos, min_i);
		res.push_back(pos);
		res.push_back(min_i);
	}
	sum1 = 0;
	sum2 = 0;
	for (int i = 1; i <= n; ++i) {
		if (i <= n / 2) {
			sum1 += a[i];
		} else {
			sum2 += a[i];
		}
	}
	if (abs(sum1 - sum2) > gold) {
		res.clear();
	}
	printf("%d\n", res.size() / 2);
	for (int i = 0; i < res.size(); i += 2) {
		printf("%d %d\n", res[i], res[i + 1]);
	}
	return 0;
}