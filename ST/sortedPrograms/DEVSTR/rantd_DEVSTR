#include <bits/stdc++.h>
using namespace std;

#define repu(i, a, b) for (int i = (a); i < (b); ++i)
#define repd(i, a, b) for (int i = (a); i > (b); --i)
#define mem(a, x) memset(a, x, sizeof(a))
#define all(a) a.begin(), a.end()
#define uni(a) a.erase(unique(all(a)), a.end())
#define count_bits(x) __builtin_popcount(x)
#define count_bitsll(x) __builtin_popcountll(x)
#define least_bits(x) __builtin_ffs(x)
#define least_bitsll(x) __builtin_ffsll(x)
#define most_bits(x) 32 - __builtin_clz(x)
#define most_bitsll(x) 64 - __builtin_clz(x)

vector<string> split(const string &s, char c) {
	vector<string> v;
	stringstream ss(s);
	string x;
	while (getline(ss, x, c)) v.push_back(x);
	return v;
}

#define error(args...) { vector<string> _v = split(#args, ','); err(_v.begin(), args); }

void err(vector<string>::iterator it) {}

template<typename T, typename... Args>
void err(vector<string>::iterator it, T a, Args... args) {
	cerr << it -> substr((*it)[0] == ' ', it -> length()) << " = " << a << '\n';
	err(++it, args...);
}

typedef long long ll;
const int MOD = 1000000007;

template<class T, class U> inline T tmin(T a, U b) {return (a < b) ? a : b;}
template<class T, class U> inline T tmax(T a, U b) {return (a > b) ? a : b;}
template<class T, class U> inline void amax(T &a, U b) {if (b > a) a = b;}
template<class T, class U> inline void amin(T &a, U b) {if (b < a) a = b;}
template<class T> inline T tabs(T a) {return (a > 0) ? a : -a;}
template<class T> T gcd(T a, T b) {while (b != 0) {T c = a; a = b; b = c % b;} return a;}

const int N = 100005;
int n, k;

template<class T> struct Fenwick {
    vector<T> bit;
    int size;
    
    Fenwick(int _n) {
        size = _n;
        bit.assign(_n + 1, 0);
    }
    
    void add(int ind, T val) {
        for (int i = ind; i <= size; i += i & -i) {
            bit[i] += val;
        }
    }
    
    T get(int ind) {
        T ans = 0;
        for (int i = ind; i > 0; i -= i & -i) {
            ans += bit[i];
        }
        return ans;
    }
	
	T range(int l, int r) {
		return get(r) - get(l - 1);
	}
};

int solve(string &ans, const string &s) {
	int x, y, z;
	
	ans = s;
	Fenwick<int> fw(n);
	repu(i, 0, n) if (ans[i] == '1') fw.add(i + 1, 1);
	
	int ret = 0;
	for (int cur = 1; cur + k - 1 <= n; ++cur) {
		x = fw.range(cur, cur + k - 1);
		if (x == 0) {
			y = z = -1;
			if (cur + k * 2 - 2 <= n) y = fw.range(cur + k, cur + k * 2 - 2);
			if (cur > 1) z = fw.range(cur - 1, cur + k - 3);
			if (y != k - 1 || z == k - 1) {
				ans[cur + k - 2] = '1';
				fw.add(cur + k - 1, 1);
			}
			else {
				ans[cur + k - 3] = '1';
				fw.add(cur + k - 2, 1);
			}
			ret++;
		}
		else if (x == k) {
			y = z = -1;
			if (cur + k * 2 - 2 <= n) y = fw.range(cur + k, cur + k * 2 - 2);
			if (cur > 1) z = fw.range(cur - 1, cur + k - 3);
			if (y != 0 || z == 0) {
				ans[cur + k - 2] = '0';
				fw.add(cur + k - 1, -1);
			}
			else {
				ans[cur + k - 3] = '0';
				fw.add(cur + k - 2, -1);
			}
			ret++;
		}
	}
	return ret;
}

int solve_2(string &ans, const string &s) {
	ans = s;
	int ret = 0;
	repu(i, 0, n) {
		ans[i] = '0' + (i & 1);
		if ((i & 1) && s[i] == '0') ret++;
		if (!(i & 1) && s[i] == '1') ret++;
	}
	string ans1 = s;
	int ret1 = 0;
	repu(i, 0, n) {
		ans1[i] = '0' + (1 - (i & 1));
		if ((i & 1) && s[i] == '1') ret1++;
		if (!(i & 1) && s[i] == '0') ret1++;
	}
	if (ret > ret1) {
		ret = ret1;
		ans = ans1;
	}
	return ret;
}

int main(int argc, char *argv[]) {
    ios_base::sync_with_stdio(false);
    
	int ntest;
	string s;
	
	cin >> ntest;
	
	while (ntest--) {
		
		cin >> n >> k >> s;
		
		k++;
		if (k == 2) {
			string ans;
			int ret = solve_2(ans, s);
			printf("%d\n%s\n", ret, ans.c_str());
		}
		else {
			string ans, ans1;
			int ret = solve(ans, s);
			reverse(all(s));
			int ret1 = solve(ans1, s);
			reverse(all(ans1));
			if (ret > ret1) {
				ret = ret1, ans = ans1;
			}
			printf("%d\n%s\n", ret, ans.c_str());
		}
	}
    return 0;
}
