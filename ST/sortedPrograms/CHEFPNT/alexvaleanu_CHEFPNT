#include <bits/stdc++.h>

using namespace std;

const int Nmax = 100 + 3;

int A[Nmax][Nmax], D[Nmax][Nmax];
pair<int,int> sol1[Nmax * Nmax], sol2[Nmax * Nmax], sol3[Nmax * Nmax];
int ans[Nmax * Nmax];
int N, M, K, S1, S2, S3;

void printSolution( pair<int,int> sol[], int S, int a )
{
    cout << S << "\n";

    for ( int i = 1; i <= S; ++i )
        cout << sol[i].first << " " << sol[i].second << " " << a << "\n";
}

void greedy1()
{
    for ( int i = 1; i <= N; ++i )
    {
        for ( int j = 1; j <= M; j++ )
        {
            if ( A[i][j] == 0 )
            {
                int st = j;

                while ( A[i][j] == 0 && j <= M ) j++;

                sol1[ ++S1 ] = pair<int,int>( i, st );
            }
        }
    }
}

void greedy2()
{
    for ( int j = 1; j <= M; ++j )
    {
        for ( int i = 1; i <= N; ++i )
        {
            if ( A[i][j] == 0 )
            {
                int st = i;

                while ( A[i][j] == 0 && i <= N ) i++;

                sol2[ ++S2 ] = pair<int,int>( st, j );
            }
        }
    }
}

void greedy3()
{
    memcpy( D, A, sizeof( A ) );
    int gata = 0;

    do
    {
        gata = 0;

        for ( int i = 1; i <= N; ++i )
        {
            for ( int j = 1; j <= M; ++j )
            {
                if ( D[i][j] == 0 )
                {
                    gata = 1;

                    int row = 0;
                    int x = j;

                    while ( D[i][x] == 0 && x <= M )
                    {
                        row++;
                        x++;
                    }

                    int col = 0;
                    x = i;

                    while ( D[x][i] == 0 && x <= N )
                    {
                        col++;
                        x++;
                    }

                    if ( row < col )
                    {
                        D[i][j] = 1;

                        sol3[ ++S3 ] = pair<int,int>( i, j );
                        ans[S3] = 0;

                        for ( int x = j + 1; x <= M; ++x )
                        {
                            if ( D[i][x] ) break;
                            D[i][x] = 1;
                        }

                        i = N + 1;
                        j = M + 1;
                    }
                    else
                    {
                        sol3[ ++S3 ] = pair<int,int>( i, j );
                        ans[S3] = 1;

                        D[i][j] = 1;

                        for ( int x = i + 1; x <= N; ++x )
                        {
                            if ( D[x][j] ) break;
                            D[x][j] = 1;
                        }

                        i = N + 1;
                        j = M + 1;
                    }
                }
            }
        }

    }
    while ( gata );
}

int main()
{
    ///ifstream cin("data.in");

    cin >> N >> M >> K;

    while ( K-- )
    {
        int a, b;
        cin >> a >> b;
        A[a][b] = 1;
    }

    for ( int i = 1; i <= N; ++i )
        A[i][M + 1] = A[i][0] = 1;

    for ( int i = 1; i <= M; ++i )
        A[N + 1][i] = A[0][i] = 1;

    //for ( int i = 1; i <= N; ++i, cout << endl )
     //   for ( int j = 1; j <= M; ++j )
      //      cout << A[i][j] << " ";

    greedy1();
    greedy2();
    greedy3();

    ///for ( int i = 1; i <= N; ++i, cout << endl )
      ///  for ( int j = 1; j <= M; ++j )
        ///    cout << D[i][j] << " ";

   /// cout << S1 << " " << S2 << " " << S3 << "\n";

    if ( S3 <= S1 && S3 <= S2 )
    {
        cout << S3 << "\n";

        for ( int i = 1; i <= S3; ++i )
            cout << sol3[i].first << " " << sol3[i].second << " " << ans[i] << "\n";

        return 0;
    }

    if ( S1 < S2 )
    {
        printSolution( sol1, S1, 0 );
    }
    else
    {
        printSolution( sol2, S2, 1 );
    }

    return 0;
}
