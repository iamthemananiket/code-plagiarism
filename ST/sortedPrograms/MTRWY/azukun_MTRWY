#include <bits/stdc++.h>
using namespace std;

int dr[] = {1, 0, -1, 0};
int dc[] = {0, 1, 0, -1};
int parent[1000000];
int size[1000000];
int tright[1000][1000];
int tdown[1000][1000];
int a[1000000][5];
bool f[1000][1000];
queue<pair<int, int> > qu;

int FindSet(int v)
{
    if (v == parent[v])
        return v;
    return parent[v] = FindSet(parent[v]);
}

int UnionSets(int a, int b)
{
    a = FindSet(a);
    b = FindSet(b);
    if (a == b)
        return 0;
    if (size[a] > size[b])
    {
        parent[b] = a;
        size[a] += size[b];
        return size[a];
    }
    parent[a] = b;
    size[b] += size[a];
    return size[b];
}

int main()
{
#if _DEBUG
    freopen("input.txt", "r", stdin);
#endif

	memset(tright, 0, sizeof tright);
	memset(tright, 0, sizeof tright);


	int tt;
	for (scanf("%d", &tt); tt > 0; tt--)
	{
		int n, m, q;
		scanf("%d%d%d", &n, &m, &q);

		for (int i = 0; i < q; i++)
		{
			scanf("%d", &a[i][0]);
			if (a[i][0] < 4)
				scanf("%d%d", &a[i][1], &a[i][2]);
			if (a[i][0] == 3)
				scanf("%d%d", &a[i][3], &a[i][4]);
		}

		for (int i = 0; i < q; i++)
			if (a[i][0] == 1)
				tright[a[i][1] - 1][a[i][2] - 1]++;
			else if (a[i][0] == 2)
				tdown[a[i][1] - 1][a[i][2] - 1]++;

		memset(f, 0, sizeof f);
		memset(size, 0, sizeof size);
		for (int i = 0; i < n; i++)
            for (int j = 0; j < m; j++)
                if (!f[i][j])
                {
                    f[i][j] = true;
                    int x = i * m + j;
                    qu.push(make_pair(i, j));
                    while (qu.size() > 0)
                    {
                        size[x]++;
                        pair<int, int> c = qu.front();
						qu.pop();
                        parent[c.first * m + c.second] = x;
                        for (int k = 0; k < 4; k++)
                        {
                            int ni = c.first + dr[k];
                            int nj = c.second + dc[k];
                            if (ni < 0 || ni == n || nj < 0 || nj == m || f[ni][nj] ||
                                k == 0 && tdown[c.first][c.second] > 0 || k == 1 && tright[c.first][c.second] > 0 ||
                                k == 2 && tdown[ni][nj] > 0 || k == 3 && tright[ni][nj] > 0)
                                continue;
                            f[ni][nj] = true;
                            qu.push(make_pair(ni, nj));
                        }
                    }
                }

		int maxx = 0;
		for (int i = 0; i < n * m; i++)
			maxx = max(maxx, size[i]);
		long long ans = 0;
        for (int i = q - 1; i >= 0; i--)
        {
            if (a[i][0] == 1)
            {
                if (--tright[a[i][1] - 1][a[i][2] - 1] == 0)
                {
                    int x = (a[i][1] - 1) * m + a[i][2] - 1;
                    maxx = max(maxx, UnionSets(x, x + 1));
                }
            }
            else if (a[i][0] == 2)
            {
                if (--tdown[a[i][1] - 1][a[i][2] - 1] == 0)
                {
                    int x = (a[i][1] - 1) * m + a[i][2] - 1;
                    maxx = max(maxx, UnionSets(x, x + m));
                }
            }
            else if (a[i][0] == 3)
            {
                if (FindSet((a[i][1] - 1) * m + a[i][2] - 1) == FindSet((a[i][3] - 1) * m + a[i][4] - 1))
                    ans++;
            }
            else
            {
                ans += maxx;
            }
        }

		printf("%lld\n", ans);
	}

    return 0;
}
