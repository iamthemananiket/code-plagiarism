#pragma comment(linker, "/STACK:500000000")
#define _CRT_SECURE_NO_WARNINGS
#include <algorithm>
#include <map>
#include <stdio.h>
#include <string.h>
using namespace std;

#define ll long long

struct Point {
	int x, y;
	
	Point() {}

	Point(int _x, int _y) {
		x = _x;
		y = _y;
	}

	bool equals(Point other) {
		return x == other.x && y == other.y;
	}
};

struct Edge {
	int x1, y1, x2, y2;

	Edge() {}

	Edge(int _x1, int _y1, int _x2, int _y2) {
		x1 = _x1;
		y1 = _y1;
		x2 = _x2;
		y2 = _y2;
	}

	const bool operator < (Edge other) const {
		if (x1 == other.x1) {
			if (y1 == other.y1) {
				if (x2 == other.x2) {
					return y2 < other.y2;
				}
				return x2 < other.x2;
			}
			return y1 < other.y1;
		}
		return x1 < other.x1;
	}
};

const int N = 1000;
const int Q = 1e6;
Point p[N + 5][N + 5];
int cnt[N + 5][N + 5];
Edge queries[Q + 5];
int type[Q + 5];
map<Edge,int> deleted;

Point find(Point a) {
	if (!a.equals(p[a.x][a.y])) {
		p[a.x][a.y] = find(p[a.x][a.y]);
	}
	return p[a.x][a.y];
}

void unite(Point a, Point b) {
	cnt[find(b).x][find(b).y] += cnt[find(a).x][find(a).y];
	p[find(a).x][find(a).y] = find(b);
}

char s[25];
int p10[4];
int len;

int nextInt() {
	int res = 0;
	int pos = 0;
	for (--len; len >= 0 && s[len] != ' '; --len) {
		res += p10[pos] * (s[len] - '0');
		++pos;
	}
	return res;
}

int main() {
	//freopen("input.in", "rt", stdin);
	//freopen("output.out", "wt", stdout);
	p10[0] = 1;
	for (int i = 1; i <= 3; ++i) {
		p10[i] = p10[i - 1] * 10;
	}
	gets(s);
	len = strlen(s);
	int t = nextInt();
	for (int tt = 0; tt < t; ++tt) {
		gets(s);
		len = strlen(s);
		int q = nextInt();
		int m = nextInt();
		int n = nextInt();
		deleted.clear();
		for (int i = 0; i < q; ++i) {
			gets(s);
			len = strlen(s);
			type[i] = s[0] - '0';
			if (type[i] == 1) {
				int y = nextInt();
				int x = nextInt();
				queries[i] = Edge(x, y, x, y + 1);
				++deleted[queries[i]];
			} else if (type[i] == 2) {
				int y = nextInt();
				int x = nextInt();
				queries[i] = Edge(x, y, x + 1, y);
				++deleted[queries[i]];
			} else if (type[i] == 3) {
				int y2 = nextInt();
				int x2 = nextInt();
				int y1 = nextInt();
				int x1 = nextInt();
				queries[i] = Edge(x1, y1, x2, y2);
			}
		}
		for (int x = 1; x <= n; ++x) {
			for (int y = 1; y <= m; ++y) {
				p[x][y] = Point(x, y);
				cnt[x][y] = 1;
			}
		}
		int maxCnt = 1;
		for (int x = 1; x <= n; ++x) {
			for (int y = 1; y <= m; ++y) {
				if (y + 1 <= m && deleted.find(Edge(x, y, x, y + 1)) == deleted.end()) {
					Point a = Point(x, y);
					Point b = Point(x, y + 1);
					if (!find(a).equals(find(b))) {
						unite(a, b);
						maxCnt = max(cnt[find(a).x][find(a).y], maxCnt);
					}
				}
				if (x + 1 <= n && deleted.find(Edge(x, y, x + 1, y)) == deleted.end()) {
					Point a = Point(x, y);
					Point b = Point(x + 1, y);
					if (!find(a).equals(find(b))) {
						unite(a, b);
						maxCnt = max(cnt[find(a).x][find(a).y], maxCnt);
					}
				}
			}
		}
		ll res = 0;
		for (int i = q - 1; i >= 0; --i) {
			if (type[i] == 1 || type[i] == 2) {
				--deleted[queries[i]];
				if (deleted[queries[i]] == 0) {
					Point a = Point(queries[i].x1, queries[i].y1);
					Point b = Point(queries[i].x2, queries[i].y2);
					if (!find(a).equals(find(b))) {
						unite(a, b);
						maxCnt = max(cnt[find(a).x][find(a).y], maxCnt);
					}
				}
			} else if (type[i] == 3) {
				Point a = Point(queries[i].x1, queries[i].y1);
				Point b = Point(queries[i].x2, queries[i].y2);
				if (find(a).equals(find(b))) {
					++res;
				}
			} else {
				res += maxCnt;
			}
		}
		printf("%lld\n", res);
	}
	return 0;
}