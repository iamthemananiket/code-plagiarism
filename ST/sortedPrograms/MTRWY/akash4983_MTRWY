#include <cstdio>
#include <cmath>
#include <iostream>
#include <set>
#include <algorithm>
#include <vector>
#include <map>
#include <cassert>
#include <string>
#include <cstring>
#include <queue>

using namespace std;

#define rep(i,a,b) for(int i = a; i < b; i++)
#define S(x) scanf("%d",&x)
#define S2(x,y) scanf("%d%d",&x,&y)
#define P(x) printf("%d\n",x)
#define all(v) v.begin(),v.end()

typedef long long int LL;
typedef pair<int, int > pii;
typedef vector<int > vi;

const int N = 1005;

int dx[4] = {-1,0,0,+1};
int dy[4] = {0,-1,+1,0};

int n,m;

int W[N][N][4];
int dsu[N*N], sz[N*N];

struct node {
  int t,x1,y1,x2,y2;
  node(int _t, int _x1, int _y1, int _x2, int _y2) {
    t = _t; x1 = _x1; y1 = _y1; x2 = _x2; y2 = _y2;
  }
};

vector<node > inp;

int nodeNumber(int x, int y) {
  x--; y--;
  return x * m + y;
}

int find(int x) {
  return (dsu[x] == x) ? x : (dsu[x] = find(dsu[x]));
}



int main() {
  int t;
  S(t);
  while(t--) {
    int q;
    scanf("%d%d%d",&n,&m,&q);

    rep(i,1,n+1) rep(j,1,m+1) rep(k,0,4) {
      W[i][j][k] = 0;
    }
    LL ans = 0;
    inp.clear();
    rep(i,0,q) {
      int type;
      S(type);
      if(type == 1) {
        int x,y;
        S2(x,y);
        if(W[x][y][2]) continue;
        W[x][y][2] = W[x][y+1][1] = 1;
        inp.push_back(node(1,x,y,0,0));
      } else if(type == 2) {
        int x,y;
        S2(x,y);
        if(W[x][y][3]) continue;
        W[x][y][3] = W[x+1][y][0] = 1;
        inp.push_back(node(2,x,y,0,0));
      } else if(type == 3) {
        int x1,y1,x2,y2;
        S2(x1,y1);
        S2(x2,y2);
        inp.push_back(node(3,x1,y1,x2,y2));
      } else {
        inp.push_back(node(4,0,0,0,0));
      }
    }

    rep(i,0,n*m+1) dsu[i] = i, sz[i] = 1;
    int mx = 1;

    rep(i,1,n+1) rep(j,1,m+1) {
      rep(k,0,2) if(!W[i][j][k]) {
        int a = i + dx[k];
        int b = j + dy[k];
        if(a <= 0 || a > n || b <= 0 || b > m) continue;
        int x = nodeNumber(i,j);
        int y = nodeNumber(a,b);

        int px = find(x);
        int py = find(y);

        if(px != py) {
          dsu[px] = py;
          sz[py] += sz[px];
          mx = max(mx, sz[py]);
        }
      }
    }

    // rep(i,0,n*m) P(find(i));

    for(int i = inp.size()-1; i >= 0; i--) {
      int type = inp[i].t;
      if(type == 1) {
        int xx = inp[i].x1;
        int yy = inp[i].y1;

        int x = nodeNumber(xx, yy);
        int y = nodeNumber(xx, yy+1);

        int px = find(x);
        int py = find(y);

        if(px != py) {
          dsu[px] = py;
          sz[py] += sz[px];
          mx = max(mx, sz[py]);
        }
      } else if(type == 2) {
        int xx = inp[i].x1;
        int yy = inp[i].y1;

        int x = nodeNumber(xx, yy);
        int y = nodeNumber(xx+1, yy);

        int px = find(x);
        int py = find(y);

        if(px != py) {
          dsu[px] = py;
          sz[py] += sz[px];
          mx = max(mx, sz[py]);
        }
      } else if(type == 3) {
        int x = nodeNumber(inp[i].x1, inp[i].y1);
        int y = nodeNumber(inp[i].x2, inp[i].y2);

        int px = find(x);
        int py = find(y);

        ans += (px == py);
      } else {
        ans += mx;
      }
    }

    printf("%lld\n",ans);
  }
  return 0;
}