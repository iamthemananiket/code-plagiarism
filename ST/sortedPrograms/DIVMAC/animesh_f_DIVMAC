#include "bits/stdc++.h"
using namespace std;
 
const int N = 100005;
const int V = 1000006;
 
int t, n, m;
int lpf[V], arr[N], tree[N * 4];
set < int > good;
 
inline void update(int node, int l, int r, int pos, int val){
    if(l == r){
        tree[node] = val;
        return;
    }
    int mid = (l + r) >> 1;
    if(mid >= pos) update(node * 2, l, mid, pos, val);
    else update(node * 2 + 1, mid + 1, r, pos, val);
    tree[node] = max(tree[node * 2], tree[node * 2 + 1]);
}
 
 
inline int query(int node, int l, int r, int qs, int qe){
    if(l > qe || r < qs) return 0;
    if(l >= qs && r <= qe) return tree[node];
    int mid = (l + r) >> 1;
    return max(query(node * 2, l, mid, qs, qe), query(node * 2 + 1, mid + 1, r, qs, qe));
}
 
int main(){
    int t; scanf("%d", &t);
    lpf[1] = 1;
    for(int i = 2; i < V; i++){
        if(lpf[i] != 0) continue;
        lpf[i] = i;
        for(int j = i + i; j < V; j += i){
            if(lpf[j] == 0) lpf[j] = i;
        }
    }
    while(t--){
        scanf("%d %d", &n, &m);
        good.clear();
        for(int i = 1; i <= n; i++){
            scanf("%d", &arr[i]);
            if(arr[i] > 1) good.insert(i);
            update(1, 1, n, i, lpf[arr[i]]);
        }
        for(int i = 1; i <= m; i++){
            int type, l, r;
            scanf("%d %d %d", &type, &l, &r);
            if(type == 0){
                auto it = good.lower_bound(l);
                while((it != good.end()) && (*it <= r)){
                    int index = *it, divisor = lpf[arr[index]];
                    arr[index] /= divisor;
                    update(1, 1, n, index, lpf[arr[index]]);
                    auto it2 = it;
                    it++;
                    if(arr[index] == 1){
                        good.erase(it2);
                    }
                }
            }
            else{
                printf("%d\n", query(1, 1, n, l, r));
            }
        }
    }
}