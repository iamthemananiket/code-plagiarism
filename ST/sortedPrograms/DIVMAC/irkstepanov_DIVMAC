#include <bits/stdc++.h>
 
#define all(a) (a).begin(), (a).end()
#define sz(a) (int)(a).size()
#define pb push_back
#define mp make_pair
 
using namespace std;
 
typedef long long ll;
typedef pair<int, int> pii;
typedef pair<ll, ll> pll;
 
const int amax = 1e6 + 10;
vector<int> mind(amax);
vector<int> primes;
vector<int> a;
vector<int> t;
 
void build(int v, int tl, int tr)
{
    if (tl == tr) {
        t[v] = mind[a[tl]];
        return;
    }
    int tm = (tl + tr) >> 1;
    build(v * 2, tl, tm);
    build(v * 2 + 1, tm + 1, tr);
    t[v] = max(t[v * 2], t[v * 2 + 1]);
}
 
int get(int v, int tl, int tr, int l, int r)
{
    if (tl == l && tr == r) {
        return t[v];
    }
    int tm = (tl + tr) >> 1;
    int ans = 0;
    if (l <= tm) {
        ans = max(ans, get(v * 2, tl, tm, l, min(r, tm)));
    }
    if (r > tm) {
        ans = max(ans, get(v * 2 + 1, tm + 1, tr, max(l, tm + 1), r));
    }
    return ans;
}
 
void update(int v, int tl, int tr, int l, int r)
{
    if (t[v] == 1) {
        return;
    }
    if (tl == tr) {
        a[tl] /= mind[a[tl]];
        t[v] = mind[a[tl]];
        return;
    }
    int tm = (tl + tr) >> 1;
    if (l <= tm) {
        update(v * 2, tl, tm, l, min(r, tm));
    }
    if (r > tm) {
        update(v * 2 + 1, tm + 1, tr, max(l, tm + 1), r);
    }
    t[v] = max(t[v * 2], t[v * 2 + 1]);
}
 
int main()
{
 
    //ifstream cin("input.txt");
    //ofstream cout("output.txt");
    //freopen("input.txt", "r", stdin);
    //freopen("output.txt", "w", stdout);
 
    ios_base::sync_with_stdio(false);
    cin.tie(0);
 
    for (int i = 1; i < amax; ++i) {
        mind[i] = i;
    }
    for (int i = 2; i < amax; ++i) {
        if (mind[i] == i) {
            primes.pb(i);
        }
        for (int p : primes) {
            if (p > mind[i]) {
                break;
            }
            if (p * i < amax) {
                mind[p * i] = p;
            } else {
                break;
            }
        }
    }
 
    int tt;
    cin >> tt;
 
    while (tt--) {
        int n, q;
        cin >> n >> q;
        a.resize(n);
        for (int i = 0; i < n; ++i) {
            cin >> a[i];
        }
        t.assign(4 * n, 0);
        build(1, 0, n - 1);
        while (q--) {
            int type, l, r;
            cin >> type >> l >> r;
            --l, --r;
            if (type == 1) {
                cout << get(1, 0, n - 1, l, r) << "\n";
            } else {
                update(1, 0, n - 1, l, r);
            }
        }
    }
 
}