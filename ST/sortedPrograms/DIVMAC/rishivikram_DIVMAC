#include<bits/stdc++.h>
 
using namespace std;
 
#define ff first
#define ss second
#define pb push_back
#define mp make_pair
#define all(x) x.begin(),x.end()
#define sz(x) ((int)x.size())
#define eps 1e-9
 
const int MOD = 1e9+7;
 
typedef long long ll;
typedef pair<int,int> pii;
 
ll POWER[65];
ll power(ll a, ll b) {ll ret=1;while(b) {if(b&1) ret*=a;a*=a;if(ret>=MOD) ret%=MOD;if(a>=MOD) a%=MOD;b>>=1;}return ret;}
ll inv(ll x) {return power(x,MOD-2);}
 
void precompute() {
	POWER[0]=1;
	for(int i=1;i<63;i++) POWER[i]=POWER[i-1]<<1LL;
}
const int MAXN = 1e5+3;
const int NAX = 1e6+5;
bool vis[NAX];
int sp[NAX];
struct node {
	int val,ans;
};
struct node st[4*MAXN];
int ar[MAXN];
void sieve() {
	for(int i=0;i<NAX;i++) sp[i]=2;
	sp[1]=1;
	for(ll i=3;i<NAX;i+=2) {
		if(vis[i]) continue;
		sp[i]=i;
		for(ll j=i*i;j<NAX;j+=2*i) {
			if(vis[j]) continue;
			vis[j]=true;
			sp[j]=i;
		}
	}
}
void build(int node, int start, int end) {
	st[node].ans=-1;
	if(start==end) {
		st[node].ans=sp[ar[start]];
		st[node].val=ar[start];
		return;
	}
	int mid=(start+end)>>1;
	build(2*node,start,mid);
	build(2*node+1,mid+1,end);
	st[node].ans=max(st[2*node].ans,st[2*node+1].ans);
}
void update(int node, int start, int end, int qs, int qe) {
	if(start>end or qe<start or qs>end) return;
	if(st[node].ans==1) return;
	if(start==end) {
		st[node].val=st[node].val/sp[st[node].val];
		st[node].ans=sp[st[node].val];
		return;
	}
	int mid=(start+end)>>1;
	update(2*node,start,mid,qs,qe);
	update(2*node+1,mid+1,end,qs,qe);
	st[node].ans=max(st[2*node].ans,st[2*node+1].ans);
}
const int INF = 1e9;
int query(int node, int start, int end, int qs, int qe) {
	if(start>end or qe<start or qs>end) return -INF;
	if(start>=qs and end<=qe) return st[node].ans;
	int mid=(start+end)>>1;
	return max(query(2*node,start,mid,qs,qe),query(2*node+1,mid+1,end,qs,qe));
}
int main() {
	// freopen("TASK.in","r",stdin);freopen("TASK.out","w",stdout);
	//precompute();
	int t;
	cin>>t;
	sieve();
	while(t--) {
		int n,m;
		scanf("%d%d",&n,&m);
		for(int i=1;i<=n;i++) scanf("%d",&ar[i]);
		build(1,1,n);
		while(m--) {
			int type;
			scanf("%d",&type);
			if(!type) {
				int l,r;
				scanf("%d%d",&l,&r);
				update(1,1,n,l,r);
			}
			else {
				int l,r;
				scanf("%d%d",&l,&r);
				printf("%d ",query(1,1,n,l,r));
			}
		}
		printf("\n");
	}
	return 0;
}
