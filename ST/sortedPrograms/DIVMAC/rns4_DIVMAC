#include <bits/stdc++.h>
using namespace std;
#define M 1000010
#define lft (id << 1)
#define rgt (id << 1 | 1)

int minp[M], a[M];

int flag[M << 2], mx[M << 2];

void init() {
	for (int i = 1; i < M; i++) minp[i] = i;
	for (int i = 2; i < M; i++) {
		if (minp[i] == i) {
			if (1LL * i * i < M) {
				for (int j = i * i; j < M; j += i) if (minp[j] == j) minp[j] = i;
			}
		}
	}
}

void up(int id) {
	flag[id] = flag[lft] & flag[rgt];
	mx[id] = max(mx[lft], mx[rgt]);
}

void build(int id, int l, int r) {
	if (l == r) {
		if (a[l] == 1) flag[id] = 1;
		else flag[id] = 0;
		mx[id] = minp[a[l]];
		return;
	}
	int mid = (l + r) >> 1;
	build(lft, l, mid);
	build(rgt, mid + 1, r);
	up(id);
}


void update(int id, int l, int r, int L, int R) {
	if (L <= l && r <= R) {
		if (flag[id]) return;
		if (l == r) {
      a[l] /= minp[a[l]];
			if (a[l] == 1) flag[id] = 1;
			mx[id] = minp[a[l]];
			return;
		}
	}
	int mid = (l + r) >> 1;
	if (L <= mid) update(lft, l, mid, L, R);
	if (mid < R) update(rgt, mid + 1, r, L, R);
	up(id);
}

int ans;

void getmax(int id, int l, int r, int L, int R) {
	if (L <= l && r <= R) {
		ans = max(ans, mx[id]); return;
	}
	int mid = (l + r) >> 1;
	if (L <= mid) getmax(lft, l, mid, L, R);
	if (mid < R) getmax(rgt, mid + 1, r, L, R);
}

int main() {
	//freopen("in.txt", "r", stdin);
	init();
	int T, Q, n;
	for (scanf("%d", &T); T--; ) {
		scanf("%d %d", &n, &Q);
		for (int i = 1; i <= n; i++) scanf("%d", a + i);
		build(1, 1, n);
		while (Q--) {
			int type, l, r;
			scanf("%d", &type);
			scanf("%d %d", &l, &r);
			if (type == 0) {
				update(1, 1, n, l, r);
			}
			else {
				ans = 0;
				getmax(1, 1, n, l, r);
				printf("%d ", ans);
			}
		}
		puts("");
	}
}
