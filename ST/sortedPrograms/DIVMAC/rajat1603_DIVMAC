#include "bits/stdc++.h"
using namespace std;
const int N = 1e5 + 5;
const int M = 1e6 + 6;
const int SN = 1 << 18;
int t;
int n , q;
int arr[N];
int spf[M];
int segtree[SN];
int type , l , r;
void pre(){
    memset(spf , -1 , sizeof(spf));
    spf[1] = 1;
    for(int i = 2 ; i < M ; ++i){
        if(spf[i] == -1){
            for(int j = i ; j < M ; j += i){
                if(spf[j] == -1){
                    spf[j] = i;
                }
            }
        }
    }
}
void build(int l , int r , int node){
    if(l == r){
        segtree[node] = spf[arr[l]];
    }
    else{
        int mid = l + r >> 1;
        build(l , mid , node + node);
        build(mid + 1 , r , node + node + 1);
        segtree[node] = max(segtree[node + node] , segtree[node + node + 1]);
    }
}
void update(int l , int r , int node , int ql , int qr){
    if(l > qr || r < ql || segtree[node] < 2){
        return;
    }
    if(l == r){
        arr[l] /= segtree[node];
        segtree[node] = spf[arr[r]];
        return;
    }
    int mid = l + r >> 1;
    update(l , mid , node + node , ql , qr);
    update(mid + 1 , r , node + node + 1 , ql , qr);
    segtree[node] = max(segtree[node + node] , segtree[node + node + 1]);
}
int query(int l , int r , int node , int ql , int qr){
    if(l > qr || r < ql){
        return 1;
    }
    if(l >= ql && r <= qr){
        return segtree[node];
    }
    int mid = l + r >> 1;
    return max(query(l , mid , node + node , ql , qr) , query(mid + 1 , r , node + node + 1 , ql , qr));
}
int main(){
    pre();
    scanf("%d" , &t);
    while(t--){
        scanf("%d %d" , &n , &q);
        for(int i = 1 ; i <= n ; ++i){
            scanf("%d" , arr + i);
        }
        build(1 , n , 1);
        while(q--){
            scanf("%d %d %d" , &type , &l , &r);
            if(type){
                printf("%d\n" , query(1 , n , 1 , l , r));
            }
            else{
                update(1 , n , 1 , l , r);
            }
        }
    }
}
