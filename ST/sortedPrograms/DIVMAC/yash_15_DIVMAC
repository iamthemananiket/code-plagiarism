#include <bits/stdc++.h>
using namespace std;

int a[100005];
int fac[1000006];
int nxt[100005],prv[100005];
void factor(int N){
	fac[1]=1;
	long long i,j;
	for(i=2;i<N;i++)
		if(!fac[i])
			for(fac[i]=i,j=i*1ll*i;j<=N;j+=i)
				if(!fac[j])
					fac[j]=i;
}

int tree[400005],beg,n;

void build(){
	for(beg=1;beg<n;beg<<=1);
	for(int i=0;i<n;i++)
		tree[beg+i]=fac[a[i+1]];
	for(int i=n;i<beg;i++)
		tree[beg+i]=1;
	for(int i=beg-1;i;i--)
		tree[i]=max(tree[i+i],tree[i+i+1]);
}

void update(int pos){
	if(a[pos]==1)
		return;
	a[pos]/=fac[a[pos]];
	tree[beg+pos-1]=fac[a[pos]];
	if(a[pos]==1){
		if(prv[pos]>-1)
			nxt[prv[pos]]=nxt[pos];
		if(nxt[pos]<=n)
			prv[nxt[pos]]=prv[pos];
	}
	for(pos=((beg+pos-1)>>1);pos;pos>>=1)
		if(tree[pos]!=max(tree[pos+pos],tree[pos+pos+1]))
			tree[pos]=max(tree[pos+pos],tree[pos+pos+1]);
		else
			break;
}
stack<int> sidx,slp,srp;
int query(int l, int r){
	int ans=1,idx,lp,rp,mid;	
	sidx.push(1);slp.push(beg);srp.push(beg+beg-1);
	while(!sidx.empty()){
		idx=sidx.top();lp=slp.top();rp=srp.top();
		sidx.pop();slp.pop();srp.pop();
		if(tree[idx]<=ans)
			continue;
		if(l<=lp && r>=rp){
			ans=max(ans,tree[idx]);
			continue;
		}
		else if(l>rp || r<lp)
			continue;
		mid=(lp+rp)/2;
		sidx.push(idx+idx);slp.push(lp);srp.push(mid);
		sidx.push(idx+idx+1);slp.push(mid+1);srp.push(rp);
	}
	return ans;
}

int main(){	
	int t,m,i,j,ch,l,r;
	factor(1000000);
	cin >> t;
	while(t--){
		cin >> n >> m;
		for(i=1;i<=n;i++)
			scanf("%d",a+i);
		for(i=0;i<=n;){
			for(j=i+1;a[j]==1 && j<n;j++);
			for(;i<j;i++)
				nxt[i]=j;
		}
		for(i=n;i>0;){
			for(j=i-1;j>=0 && a[j]==1;j--);
			for(;i>j;i--)
				prv[i]=j;
		}
		build();
		while(m--){
			scanf(" %d %d %d",&ch,&l,&r);
			if(ch==0)
				for(i=nxt[prv[l]];i<=r;i=nxt[i])
					update(i);
			else
				printf("%d ",query(beg+l-1,beg+r-1));
		}
		puts("");
	}
}