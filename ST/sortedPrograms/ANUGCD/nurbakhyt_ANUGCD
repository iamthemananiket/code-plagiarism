#include <bits/stdc++.h>

#define pb push_back
#define f first
#define s second
#define mp make_pair
#define sz(a) int((a).size())
#ifdef _WIN32
#  define I64 "%I64d"
#else
#  define I64 "%lld"
#endif
#define fname "."
#define pi pair < int, int >
#define pp pop_back

typedef long long ll;
typedef long double ld;
typedef unsigned long long ull;

const int MAX_N = (int)1e5 + 123;
const double eps = 1e-6;
const int inf = (int)1e9 + 123;

using namespace std;

vector < int > where[MAX_N];
int n, m;
int a[MAX_N];
vector < pi > h[MAX_N];
int lp[MAX_N];
bool prime[MAX_N];

inline void init() {
	for (int i = 2; i <= (int)1e5; i++) {
		if (!prime[i]) {
			lp[i] = i;
			if (1ll * i * i <= (int)1e5)
				for (int j = i * i; j <= (int)1e5; j += i)
					if (!prime[j])
						lp[j] = i, prime[j] = 1;
		}
	}
}

struct tree {
	int maxi, l, r;
	tree() {
		maxi = l = r = -1;
	}
	tree(int maxi, int l, int r) : maxi(maxi), l(l), r(r) {}
};

vector < tree > t;
int root[MAX_N];

void update(int v, int x, int y, int tl = 1, int tr = n) {
	if (tl == tr) {
		t[v].maxi = max(t[v].maxi, y);
		return;
	}
	int tm = (tl + tr) / 2;
	if (x <= tm) {
		if (t[v].l == -1) {
			t[v].l = sz(t);
			t.pb(tree());
		}
		update(t[v].l, x, y, tl, tm);
	}
	else {
		if (t[v].r == -1) {
			t[v].r = sz(t);
			t.pb(tree());
		}
		update(t[v].r, x, y, tm + 1, tr);
	}
	t[v].maxi = -1;
	if (t[v].l != -1)
		t[v].maxi = max(t[v].maxi, t[t[v].l].maxi);
	if (t[v].r != -1)
		t[v].maxi = max(t[v].maxi, t[t[v].r].maxi);
}

int get(int v, int l, int r, int tl = 1, int tr = n) {
	if (v == -1 || tl > r || l > tr)
		return -1;
	if (tl >= l && tr <= r)
		return t[v].maxi;
	int tm = (tl + tr) / 2;
	return max(get(t[v].l, l, r, tl, tm), get(t[v].r, l, r, tm + 1, tr));
}

int main() {
	#ifdef Nick
	freopen(fname"in", "r", stdin);
	freopen(fname"out", "w", stdout);
	#endif
	scanf("%d%d", &n, &m);
	init();
	for (int i = 1, x; i <= n; i++) {
		scanf("%d", &a[i]);
		where[a[i]].pb(i);
		x = a[i];
		while(x > 1) {
		  int now = lp[x];
			h[now].pb(mp(i, a[i]));
			while(x % now == 0)
				x /= now;
		}
	}
	memset(root, -1, sizeof root);
	for (int i = 2; i <= (int)1e5; i++) {
		if (h[i].empty())
			continue;
		root[i] = sz(t);
		t.pb(tree());
		for (auto j : h[i])
			update(root[i], j.f, j.s);
	}
	for (int i = 1, x, l, r, res, now, L, R; i <= m; i++) {
		scanf("%d%d%d", &x, &l, &r);
		res = -1;
		while(x > 1) {
			now = lp[x];
			while(x % now == 0)
				x /= now;
			res = max(res, get(root[now], l, r));
		}
		if (res == -1)
			printf("-1 -1\n");
		else {
			R = upper_bound(where[res].begin(), where[res].end(), r) - where[res].begin();
			L = lower_bound(where[res].begin(), where[res].end(), l) - where[res].begin();
			assert(R - L > 0);
			printf("%d %d\n", res, R - L);
		}
	}
	return 0;
}