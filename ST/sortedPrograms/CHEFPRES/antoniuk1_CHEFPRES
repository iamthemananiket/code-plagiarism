#include <iostream>
#include <stdio.h>
#include <vector>
#include <math.h>
#include <cassert>
#include <memory.h>
#include <algorithm>
#include <deque>
#include <set>
#include <map>

using namespace std;

vector<int> g[100010];
vector<int> t[100010];
int dist[100010];
int timer = 0;
int tin[100010];
int tout[100010];
int up[10010][30];
int l = 25;

void dfs(int v, int p, int d = 0) {
    tin[v] = ++timer;
    up[v][0] = p;
    for (int i = 1; i <= l; ++i)
        up[v][i] = up[up[v][i-1]][i-1];
    
    dist[v] = d;
    for(int i = 0; i < g[v].size(); ++i)
    if (g[v][i] != p)
        dfs(g[v][i], v, d+1);
    
    tout[v] = ++timer;
}

bool upper (int a, int b) {
    return tin[a] <= tin[b] && tout[a] >= tout[b];
}

int lca (int a, int b) {
    if (upper (a, b))  return a;
    if (upper (b, a))  return b;
    for (int i=l; i>=0; --i)
        if (! upper (up[a][i], b))
            a = up[a][i];
    return up[a][0];
}

int main()
{
    ios::sync_with_stdio(0);
    int n, k, root;
    cin >> n >> k >> root;
    int x, y;
    for(int i = 0; i < n-1; ++i) {
        cin >> x >> y;
        g[x].push_back(y);
        g[y].push_back(x);
    }
    
    for(int i = 1; i <= n; ++i) {
        cin >> x;
        t[x].push_back(i);
    }
    
    dfs(root, root);
    
    int q;
    cin >> q;
    while(q --> 0) {
        cin >> x >> y;
        
        int ans = 0, dis = -1;
        if(t[y].size() == 0) {
            cout << "-1\n";
            continue;
        }
        for(int i = 0; i < t[y].size(); ++i) {
            
            int lc = lca(x, t[y][i]);
            
            if (dist[lc] > dis) {
                dis = dist[lc];
                ans = t[y][i];
            }
        }
        
        cout << ans << "\n";
    }
    
    return 0;
}