#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <cstring>
#include <cassert>
#include <iostream>
#include <iomanip>
#include <sstream>
#include <algorithm>
#include <vector>
#include <map>
#include <set>
#include <queue>
#include <stack>
#include <deque>
#include <bitset>
#include <complex>
#include <functional>
#include <numeric>
#include <limits>
#include <utility>

#include <array>
#include <unordered_map>
#include <unordered_set>
#include <tuple>

using namespace std;

typedef long long ll;

const int MAX_N = 11000;
const int MAX_K = 110;

int n, k, root, q;
vector<int> g[MAX_N];
int a[MAX_N];
int vs[MAX_N][MAX_K];
int us[MAX_N][MAX_K];


void dfs1(int p, int v) {
  fill(vs[v], vs[v] + k, n);
  vs[v][a[v]] = v;
  for (int u : g[v]) {
    if (u != p) {
      dfs1(v, u);
      for (int i = 0; i < k; i++) {
        vs[v][i] = min(vs[v][i], vs[u][i]);
      }
    }
  }
}

void dfs2(int p, int v, vector<int> cur) {
  for (int i = 0; i < k; i++) {
    cur[i] = (vs[v][i] == n ? cur[i] : vs[v][i]);
    us[v][i] = cur[i];
  }
  for (int u : g[v]) {
    if (u != p) {
      dfs2(v, u, cur);
    }
  }  
}

int main() {
  cin >> n >> k;
  cin >> root;
  root--;
  for (int i = 0; i < n - 1; i++) {
    int u, v;
    cin >> u >> v;
    u--, v--;
    g[u].push_back(v);
    g[v].push_back(u);
  }
  for (int i = 0; i < n; i++) {
    cin >> a[i];
    a[i]--;
  }
  dfs1(-1, root);
  vector<int> cur(k, n);
  dfs2(-1, root, cur);
  cin >> q;
  while (q--) {
    int v, x;
    cin >> v >> x;
    v--, x--;
    cout << (us[v][x] == n ? -1 : us[v][x] + 1) << endl;
  }
}
