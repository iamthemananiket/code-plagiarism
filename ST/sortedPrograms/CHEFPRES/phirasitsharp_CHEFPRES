#include <stdio.h>
#include <vector>
#include <math.h>

#define N 10010
#define LG_N 17
#define K 110

using namespace std;

typedef vector<int> vi;

int TB[LG_N][2*N];
int H[N], Fpos[N];
vi E;

vi P[K], adj[N];

int F[N];
int n, k, b, q;

void dfs(int u, int p, int h) {
    E.push_back(u);
    H[u] = h;
    Fpos[u] = E.size() - 1;
    
    for(int i = 0;i < adj[u].size();i++) {
        int v = adj[u][i];
        if(v == p) {
            continue;
        }
        dfs(v, u, h+1);
        
        E.push_back(u);
    }
}
void init_TB(void) {
    for(int i = 0;i < LG_N;i++) {
        for(int j = 0;j < E.size();j++) {
            if(i == 0) {
                TB[i][j] = E[j];
            }else {
                int u = TB[i-1][j];
                int v = TB[i-1][min((int) E.size() - 1, j + (1 << (i-1)))];
                TB[i][j] = (H[u] < H[v] ? u : v);
            }
        }
    }
}
int LCA(int u, int v) {
    if(Fpos[u] > Fpos[v]) {
        swap(u, v);
    }
    int l = (int) ((double) log(Fpos[v] - Fpos[u] + 1) / log(2) );
    int x = TB[l][Fpos[u]], y = TB[l][Fpos[v] - (1 << l) + 1];
    return H[x] < H[y] ? x : y;
}
int main() {
    scanf("%d%d%d", &n, &k, &b);
    for(int i = 0;i < n-1;i++) {
        int u, v;
        scanf("%d%d", &u, &v);  
        adj[u].push_back(v);
        adj[v].push_back(u);
    }
    dfs(b ,-1, 0);
    for(int i = 1;i <= n;i++) {
        scanf("%d", &F[i]);
        P[F[i]].push_back(i);
    }
    init_TB();
    scanf("%d", &q);
    for(int i = 0;i < q;i++) {
        int a, p;
        scanf("%d%d", &a, &p);
        int tw = n+1, len = -1;
        for(int j = 0;j < P[p].size();j++) {
            int u = P[p][j];
            int lca = LCA(a, u);
            if(H[lca] > len || (H[lca] == len && u < tw)) {
                tw = u;
                len = H[lca];
            }
        }
        printf("%d\n", tw == n+1 ? -1 : tw);
    }
    return 0;
}