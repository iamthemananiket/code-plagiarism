#include <cstdio>
#include <algorithm>

#define maxN 10000

using namespace std;

int n,k,kk;
int b;
int q;

int elso[maxN];
int hova[2*maxN];
int kov[2*maxN];

int t[maxN];

bool eler[maxN];

int ans[maxN][100];

int maxchild(int k, int p, int anc) {
    int ret = maxN;
    if(t[k] == p) ret = k;

    for(int i=elso[k]; i>=0; i=kov[i]) {
        if(hova[i] == anc) continue;

        ret = min(ret,maxchild(hova[i],p,k));
    }

    ans[k][p] = ret;
    return ret;
}

void lefolyat(int k, int anc) {
    for(int i=elso[k]; i>=0; i=kov[i]) {
        if(hova[i] == anc) continue;

        for(int j=0; j<kk; j++) {
            if(ans[hova[i]][j] == maxN) ans[hova[i]][j] = ans[k][j];
        }
        lefolyat(hova[i],k);
    }
}

int main()
{
    scanf("%d%d",&n,&k);
    scanf("%d",&b);
    b--;

    for(int i=0; i<n; i++) {
        elso[i] = -1;
        for(int j=0; j<k; j++) {
            ans[i][j] = maxN;
        }
    }

    for(int i=0; i<n-1; i++) {
        scanf("%d%d",&hova[i],&hova[i+maxN]);
        hova[i]--; hova[i+maxN]--;

        kov[i] = elso[hova[i+maxN]];
        elso[hova[i+maxN]] = i;

        kov[i+maxN] = elso[hova[i]];
        elso[hova[i]] = i+maxN;
    }

    for(int i=0; i<n; i++) {
        scanf("%d",&t[i]);
        t[i]--;
    }

    kk = k;
    for(int i=0; i<k; i++) {
        maxchild(b,i,-1);
    }
    lefolyat(b,-1);

    for(int i=0; i<n; i++) {
        for(int j=0; j<k; j++) {
            if(ans[i][j] == maxN) ans[i][j] = -2;
        }
    }

    scanf("%d",&q);
    for(int i=0; i<q; i++) {
        int a,b;
        scanf("%d%d",&a,&b);
        printf("%d\n",ans[a-1][b-1]+1);
    }

    return 0;
}
