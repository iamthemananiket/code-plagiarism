#include <cmath>
#include <cstdio>
#include <vector>
#include <iostream>
#include <algorithm>
using namespace std;
typedef struct kgp{
    int le;
    int r;
}kgp;
kgp a[100000],B[100000];
void Counting_sort(kgp A[], int k, int n)
{
    int i, j;
    int C[2000];
    for(i = 0; i <= k; i++)
            C[i] = 0;
    for(j =0; j < n; j++)
            C[A[j].le] = C[A[j].le] + 1;
    for(i = 0; i <= k; i++)
            C[i] = C[i] + C[i-1];
    for(j = n-1; j >= 0; j--)
    {
            B[C[A[j].le]] = A[j];
            C[A[j].le] = C[A[j].le] - 1;
    }
    for(j=1;j<=n;j++)
        A[j-1]=B[j];
}
 
 
//Read original Article: C program for Counting Sort Algorithm 
int main() {
    /* Enter your code here. Read input from STDIN. Print output to STDOUT */   
    int t,n,s,k,i,j,minr;
  
    scanf("%d",&t);
    while(t--)
        {
      scanf("%d",&n);
        s=0;
        for(i=0;i<n;i++)
           cin>>a[i].le>>a[i].r;
      Counting_sort(a,2000,n);
     minr=a[0].r;
        i=0,j=0;
       // cout<<a[1].le;
        while(i<n)
            {
           
            if(a[i].le>minr)
                {
               s++;
                minr=a[i].r;
                if(i==n-1)
                    s++;
                
            }
            
           else{
              if(i==n-1)
                  s++;
               if(a[i].r<minr)
                   minr=a[i].r;
           }     
            
          //cout<<i<<a[i].le<<a[i].r<<minr<<s<<endl;
            i++;
          }
      //  printf("%d\n",s);
        cout<<s<<endl;
        
        
        }
        return 0;
} 
