#include <iostream>

using namespace std;

int T;

int x1,x2,y;

int db[100000];

int pf[10];
int pfv;

int countRelativePrimes(int n, int m) { //x = 1..m; x is relative primes to n
    if(n == 1) return m;
    if(n < 1) return 0;
    if(m == 0) return 0;

    int dive = 1;

    for(int i=2; i*i<=n; i++) {
        db[i] = 0;
    }
    pfv = 0;

    for(int i=2; i*i<=n; i++) {
        if((!db[i]) && (!(n%i))) {
            pf[pfv++] = i;

            for(long long j=i; j*j<=n; j+=i) {
                db[j]++;
            }

            long long k = i;
            while(!(n%(k*i))) k*=i;
            dive *= k;
        }
    }
    if(dive < n) {
        pf[pfv++] = n/dive;
    }

    int ret = m;

    for(int i=1; i<(1<<pfv); i++) {
        int k = 1;
        int pc = 0;
        for(int j=0; j<pfv; j++) {
            if(i & (1<<j)) {
                k *= pf[j];
                pc++;
            }
        }

        if(pc%2) {
            ret -= m/k;
        } else {
            ret += m/k;
        }
    }

    return ret;
}


int main()
{
    for(cin >> T; T--;) {
        cin >> y >> x1 >> x2;

        if(x2<0) {
            swap(x1,x2);
            x1 = -x1;
            x2 = -x2;
        }
        if(y<0) {
            y = -y;
        }

        if(y==0) {
            cout << (((x2>0) && (x1<=1))+((x1<0) && (x2>=-1))+((x1<=0) && (x2>=0))) << endl;
            continue;
        }

        if(x1<=0) {
            cout << (countRelativePrimes(y,-x1)+countRelativePrimes(y,x2)) << endl;
        } else {
            cout << (countRelativePrimes(y,x2)-countRelativePrimes(y,x1-1)) << endl;
        }
    }

    return 0;
}
