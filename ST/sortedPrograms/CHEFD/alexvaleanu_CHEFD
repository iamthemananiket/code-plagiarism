#include <bits/stdc++.h>

#define VI vector<int>
#define VII vector<pair<int,int>>
#define QI queue<int>

#define ms(a,v) memset( a, v, sizeof( a ) )
#define FOR(i,a,b) for(int i = a; i <= b; ++i)
#define ROF(i,a,b) for(int i = a; i >= b; i--)
#define foreach(v, c) for( typeof( (c).begin() ) v = (c).begin(); v != (c).end(); ++v)

#define pb push_back
#define pp pair<int,int>
#define mp make_pair
#define fi first
#define se second

#define popcount __builtin_popcount
#define gcd __gcd
#define bit(n,i) ( n & ( 1LL << i ) )
#define lsb(x) ( x & ( -x ) )

#define FIN(str) freopen(str,"r",stdin)
#define FOUT(str) freopen(str,"w",stdout)
#define Fin(str) ifstream(str)
#define Fout(str) ostream(str)
#define SYNC ios_base::sync_with_stdio(0);

#define ll long long
#define ull unsigned long long

inline void read( int &a )
{
    register char ch;
    a = 0;
    int sign = 1;

    do
    {
        ch = getchar();

    } while ( !isdigit( ch ) && ch != '-' );

    if ( ch == '-' )
    {
        sign = -1;
        ch = getchar();
    }

    do
    {
        a = a * 10 + ch - '0';
        ch = getchar();

    } while( isdigit( ch ) );

    a *= sign;
}

inline void write( int a )
{
    char s[20];
    int i = 0;
    int sign = 1;

    if ( a < 0 )
        sign = -1,
        a = -a;

    do
    {
        s[ i++ ] = a % 10 + '0';
        a /= 10;

    } while ( a );

    i--;

    if ( sign == -1 )
        putchar( '-' );

    while ( i >= 0 ) putchar( s[ i-- ] );
}

const int dx[] = { -1, 0, 1, 0 };
const int dy[] = { 0, 1, 0, -1 };

const int dl[] = { -1, -1, -1, 0, 0, 1, 1, 1 };
const int dc[] = { -1, 0, 1, -1, 1, -1, 0, 1 };

const int INF = 2e9;
const double EPS = 1e-9;

const int Nmax = 1e5 + 2;

const int LgMax = log2(Nmax) + 1;

using namespace std;

class SegmentTree
{
public:

    SegmentTree(const int _N, const vector<int> &v )
    {
        N = _N;

        lazy = new int[4 * N];

        ms( lazy, 0 );

    }

    int *lazy;
    int N;

    void update( int nod, int st, int dr, int st_q, int dr_q, int value )
    {
        if ( st_q <= st && dr <= dr_q )
        {
            lazy[nod] += value;
        }
        else
        {
            lazy[2 * nod] += lazy[nod];
            lazy[2 * nod + 1] += lazy[nod];
            lazy[nod] = 0;

            int m = ( st + dr ) / 2;

            if ( st_q <= m ) update( 2 * nod, st, m, st_q, dr_q, value );
            if ( m < dr_q ) update( 2 * nod + 1, m + 1, dr, st_q, dr_q, value );
        }
    }

    void update( int nod, int st, int dr, int pos, int val )
    {
        if ( st == dr )
        {
            lazy[nod] = 0;
        }
        else
        {
            lazy[2 * nod] += lazy[nod];
            lazy[2 * nod + 1] += lazy[nod];
            lazy[nod] = 0;

            int m = ( st + dr ) / 2;

            if ( pos <= m ) update( 2 * nod, st, m, pos, val );
            else            update( 2 * nod + 1, m + 1, dr, pos, val );
        }
    }

    int query( int nod, int st, int dr, int pos )
    {
        if ( st == dr )
            return lazy[nod];
        else
        {
            lazy[2 * nod] += lazy[nod];
            lazy[2 * nod + 1] += lazy[nod];
            lazy[nod] = 0;

            int m = ( st + dr ) / 2;

            if ( pos <= m )
                return query( 2 * nod, st, m, pos );
            else
                return query( 2 * nod + 1, m + 1, dr, pos );
        }
    }
};

int N, M;
vector <int> A;
int V[Nmax];

int main()
{
    ///FIN("data.in");
    ///FOUT("data.out");

    read( N );

    for ( int i = 0, a; i < N; ++i )
    {
        read( a );
        A.pb( a );
        V[i + 1] = a;
    }

    SegmentTree P2( N, A );
    SegmentTree P3( N, A );
    SegmentTree P5( N, A );

    read( M );

    while ( M-- )
    {
        int tip, l, r, p, d;

        read( tip );

        if ( tip == 1 )
        {
            read( l ); read( r ); read( p );

            if ( p == 2 ) P2.update( 1, 1, N, l, r, 1 );
            if ( p == 3 ) P3.update( 1, 1, N, l, r, 1 );
            if ( p == 5 ) P5.update( 1, 1, N, l, r, 1 );
        }
        else
        {
            read( l ); read( d );

            V[l] = d;

            P2.update( 1, 1, N, l, d );
            P3.update( 1, 1, N, l, d );
            P5.update( 1, 1, N, l, d );
        }
    }

    for ( int i = 1; i <= N; ++i )
    {
        int cat2 = P2.query( 1, 1, N, i );
        int cat3 = P3.query( 1, 1, N, i );
        int cat5 = P5.query( 1, 1, N, i );

        while ( cat2-- && V[i] % 2 == 0 ) V[i] /= 2;
        while ( cat3-- && V[i] % 3 == 0 ) V[i] /= 3;
        while ( cat5-- && V[i] % 5 == 0 ) V[i] /= 5;

        cout << V[i] << " ";
    }

    return 0;
}
