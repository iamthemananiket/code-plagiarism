#include<cstdio>
#include<iostream>
#include<vector>
#include<algorithm>
#include<string>
#include<cstring>
using namespace std;

typedef long long LL;
typedef vector<int> VI;

#define REP(i,n) for(int i=0, i##_len=(n); i<i##_len; ++i)
#define EACH(i,c) for(__typeof((c).begin()) i=(c).begin(),i##_end=(c).end();i!=i##_end;++i)
#define eprintf(s...)  fprintf(stderr, s)

template<class T> inline void amin(T &x, const T &y) { if (y<x) x=y; }
template<class T> inline void amax(T &x, const T &y) { if (x<y) x=y; }

const LL MOD = 1e9 + 7;
inline void add(int &x, int y) {
    if ((x += y) >= MOD) x -= MOD;
}

int T;
int N, K, L, A[16];
int lcs[2][17];
int nxt[16][1<<16];
int dp[17][1<<16];

int main() {
    scanf("%d", &T);
    REP ($, T) {
	scanf("%d%d%d", &N, &K, &L);
	REP (i, N) scanf("%d", A+i), A[i]--;

	REP (c, K) REP (S, 1<<N) {
	    nxt[c][S] = 0;
	    REP (i, N) {
		lcs[0][i+1] = lcs[0][i] + ((S & (1<<i)) ? 1 : 0);

		if (A[i] == c) lcs[1][i+1] = lcs[0][i] + 1;
		else lcs[1][i+1] = max(lcs[0][i+1], lcs[1][i]);

		if (lcs[1][i+1] > lcs[1][i]) nxt[c][S] |= 1<<i;
	    }
	}

	memset(dp, 0, sizeof dp);
	dp[0][0] = 1;
	REP (i, N) REP (c, K) REP (S, 1<<N) add(dp[i+1][nxt[c][S]], dp[i][S]);

	LL ans = 0;
	REP (S, 1<<N) if (__builtin_popcount(S) == L) ans += dp[N][S];
	ans %= MOD;
	printf("%d\n", (int)ans);
    }

    return 0;
}
