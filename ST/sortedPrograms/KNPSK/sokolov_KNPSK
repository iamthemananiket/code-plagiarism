#pragma comment(linker, "/STACK:500000000")
#include <algorithm>
#include <functional>
#include <iostream>
#include <list>
#include <map>
#include <math.h>
#include <set>
#include <stdio.h>
#include <stdlib.h>
#include <string>
#include <string.h>
#include <time.h>
#include <queue>
#include <utility>
#include <vector>
using namespace std;

#define sqr(x) ((x)*(x))
#define y0 y123
#define y1 y1234
#define Int long long
#define PI 3.1415926535897932384626433832795
#define EPS 1e-9
#define INF 2147483647


int main() {
	int n;
	scanf("%d", &n);
	int m = 0;
	multiset<int> ones;
	multiset<int> twoes;
	multiset<int> used_ones;
	multiset<int> used_twoes;
	for (int i = 0; i < n; i++) {
		int w, c;
		scanf("%d %d", &w, &c);
		if (w == 1) {
			ones.insert(c);
		} else {
			twoes.insert(c);
		}
		m += w;
	}
	Int res = 0;
	if (ones.empty()) {
		for (int w = 1; w <= m; w++) {
			if (w % 2 == 1) {
				if (w != 1) {
					printf(" ");
				}
				printf("%lld", res);
			} else {
				multiset<int> :: iterator i;
				i = twoes.end();
				i--;
				res += *i;
				twoes.erase(i);
				printf(" %lld", res);
			}
		}
		printf("\n");
		return 0;
	}
	for (int w = 1; w <= m; w++) {
		multiset<int> :: iterator i;
		Int res1 = res;
		if (!used_ones.empty() && !twoes.empty()) {
			i = used_ones.begin();
			res1 -= *i;
			i = twoes.end();
			i--;
			res1 += *i;
		} else {
			res1 = -1;
		}
		Int res2 = res;
		if (!ones.empty()) {
			i = ones.end();
			i--;
			res2 += *i;
		} else {
			res2 = -1;
		}
		if (res1 != -1 || res2 != -1) {
			if (res1 > res2) {
				if (res1 >= res) {
					i = used_ones.begin();
					res -= *i;
					ones.insert(*i);
					used_ones.erase(i);
					i = twoes.end();
					i--;
					res += *i;
					used_twoes.insert(*i);
					twoes.erase(i);
				}
			} else {
				i = ones.end();
				i--;
				res += *i;
				used_ones.insert(*i);
				ones.erase(i);
			}
		}
		if ((int) (used_ones.size()) + (int) (used_twoes.size()) * 2 + 2 == w) {
			i = twoes.end();
			i--;
			res += *i;
			used_twoes.insert(*i);
			twoes.erase(i);
		}
		if (w > 1) {
			printf(" ");
		}
		printf("%lld", res);
	}
	printf("\n");
	return 0;
}