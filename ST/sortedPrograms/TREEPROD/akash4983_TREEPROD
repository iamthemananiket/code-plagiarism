#include <cstdio>
#include <cmath>
#include <iostream>
#include <set>
#include <algorithm>
#include <vector>
#include <map>
#include <cassert>
#include <string>
#include <cstring>
#include <queue>

using namespace std;

#define rep(i,a,b) for(int i = a; i < b; i++)
#define S(x) scanf("%d",&x)
#define S2(x,y) scanf("%d%d",&x,&y)
#define P(x) printf("%d\n",x)
#define all(v) v.begin(),v.end()
#define FF first
#define SS second

typedef long long int LL;
typedef pair<int, int > pii;
typedef vector<int > vi;

const int N = 100005;
vector<pii > g[N];
vector<int > V;
vector<int > factors;
int val[N];
int P[N];
int m;
int sum[501];

int X[N][501];

void dfs(int c, int p, int v) {
  val[c] = v;
  P[c] = p;
  rep(i,0,g[c].size()) {
    int u = g[c][i].FF;
    if(u != p) {
      dfs(u, c, g[c][i].SS);
    }
  }
  V.push_back(c);
}

LL ans = 0;
void solve() {
  rep(ii,0,V.size()) {
    int c = V[ii];
    rep(i,0,m+1) sum[i] = 0;
    sum[1] = 1;
    rep(i,0,g[c].size()) {
      int u = g[c][i].FF;
      if(u == P[c]) continue;
      rep(j,0,factors.size()) rep(k,0,factors.size()) {
        if(__gcd(factors[j] * factors[k], m) == m) {
          ans += sum[factors[j]] * 1LL * X[u][factors[k]];
        }
      }

      rep(j,0,factors.size()) sum[factors[j]] += X[u][factors[j]];
    }

    if(c == 1) continue;

    rep(i,0,g[c].size()) {
      int u = g[c][i].FF;
      if(u == P[c]) continue;
      rep(j,0,factors.size()) {
        X[c][__gcd(val[c] * 1LL * factors[j], m * 1LL)] += X[u][factors[j]];
      }
    }
    X[c][__gcd(val[c], m)]++;

    // P(c);
    // rep(i,0,factors.size()) {
    //   printf("%d %d\n",factors[i], X[c][factors[i]]);
    // }
  }
}

int main() {
  int n;
  S2(n,m);
  rep(i,0,n-1) {
    int u,v,c;
    scanf("%d%d%d",&u,&v,&c);
    g[u].push_back(make_pair(v,c));
    g[v].push_back(make_pair(u,c));
  }

  rep(i,1,m+1) if(m%i == 0) {
    factors.push_back(i);
  }

  dfs(1,-1,0);
  solve();
  printf("%lld\n",ans);
  return 0;
}