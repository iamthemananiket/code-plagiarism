#include <bits/stdc++.h>
using namespace std;

#define REPU(i, a, b) for (int i = (a); i < (b); ++i)
#define REPD(i, a, b) for (int i = (a); i > (b); --i)
#define MEM(a, x) memset(a, x, sizeof(a))
#define ALL(a) a.begin(), a.end()
#define UNIQUE(a) a.erase(unique(ALL(a)), a.end())

typedef long long ll;
const int MOD = 1000000007;

template<class T> inline T tmin(T a, T b) { return (a < b) ? a : b; }
template<class T> inline T tmax(T a, T b) { return (a > b) ? a : b; }
template<class T> inline void amax(T &a, T b) { if (b > a) a = b; }
template<class T> inline void amin(T &a, T b) { if (b < a) a = b; }
template<class T> inline T tabs(T a) { return (a > 0) ? a : -a; }
template<class T> T gcd(T a, T b) { while (b != 0) { T c = a; a = b; b = c % b; } return a; }

typedef unsigned long long ull;
const unsigned bs = 1000000007U;
vector<ull> tp, th;

// based on 1-index
struct RollingHash {
	RollingHash() {
		tp.resize(1000002);
		th.resize(1000002);
	}
	template<class T> void init(const T s, const int _size) {
		tp[0] = 1, th[0] = 0;
		for (int i = 0; i < _size; ++i) {
			tp[i + 1] = tp[i] * bs;
			th[i + 1] = s[i] + th[i] * bs;
		}
	}
	// return range[l, r]
	ull range(int l, int r) const { return th[r] - th[l - 1] * tp[r - l + 1]; }
};

int main(int argc, char *argv[]) {
	ios_base::sync_with_stdio(false);
	
	int T; string s;
	RollingHash rh;

	cin >> T;
	while (T--) {
		cin >> s;
		int n = s.size();
		if (n == 1) puts("NO");
		else if (n % 2 == 0) {
			if (s.substr(0, n >> 1) == s.substr(n >> 1)) puts("YES");
			else puts("NO");
		}
		else {
			rh.init(s, n);
			bool ok = false;
			REPU(i, 0, n) {
				if (i < n / 2) {
					ull lb = (i > 0 ? rh.range(1, i) : 0U) * tp[n / 2 - i] + rh.range(i + 2, (n + 1) >> 1);
					ull rb = rh.range(n / 2 + 2, n);
					if (lb == rb) ok = true;
				}
				else if (i > n / 2) {
					ull lb = rh.range(1, n / 2);
					ull rb = rh.range(n / 2 + 1, i) * tp[n - 1 - i] + (i != n - 1 ? rh.range(i + 2, n) : 0U);
					if (lb == rb) ok = true;
				}
				else {
					if (s.substr(0, n >> 1) == s.substr((n + 1) >> 1)) ok = true;
				}
				if (ok) break;
			}
			puts(ok ? "YES" : "NO");
		}
	}
	
	return 0;
}
