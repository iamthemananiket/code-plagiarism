/*********************************************************************\
   |--\        ---       /\        |-----------| -----   /-------|    |
   |   \        |       /  \       |               |    /             |
   |    \       |      /    \      |               |   |              |
   |     \      |     /      \     |               |   |----|         |
   |      \     |    / ------ \    |-------|       |        |-----|   |
   |       \    |   /          \   |               |              |   |
   |        \   |  /            \  |               |              /   |
  ---        -------            ------           ----- |---------/    |
                                                                      |
    codeforces = nfssdq  ||  topcoder = nafis007                      |
    mail = nafis_sadique@yahoo.com || nfssdq@gmail.com                |
    IIT,Jahangirnagar University(41)                                  |
                                                                      |
**********************************************************************/

#include <bits/stdc++.h>

using namespace std;

#define xx         first
#define yy         second
#define pb         push_back
#define mp         make_pair
#define LL         long long
#define inf        INT_MAX/3
#define mod        1000000007ll
#define PI         acos(-1.0)
#define linf       (1ll<<60)-1
#define FOR(I,A,B) for(int I = (A); I < (B); ++I)
#define REP(I,N)   FOR(I,0,N)
#define ALL(A)     ((A).begin(), (A).end())
#define set0(ar)   memset(ar,0,sizeof ar)
#define vsort(v)   sort(v.begin(),v.end())
#define setinf(ar) memset(ar,126,sizeof ar)

//cout << fixed << setprecision(20) << p << endl;

template <class T> inline T bigmod(T p,T e,T M){
    LL ret = 1;
    for(; e > 0; e >>= 1){
        if(e & 1) ret = (ret * p) % M;
        p = (p * p) % M;
    } return (T)ret;
}
template <class T> inline T gcd(T a,T b){if(b==0)return a;return gcd(b,a%b);}
template <class T> inline T modinverse(T a,T M){return bigmod(a,M-2,M);}


#define MX 30

LL mul_res[MX][MX], N;
void multiply(LL a[][MX], LL b[][MX]){
    set0(mul_res);
    for(int i = 0; i < N; i++){
        for(int j = 0; j < N; j++){
            for(int k = 0; k < N; k++)
                mul_res[i][j] = (mul_res[i][j] + a[i][k] * b[k][j]) % mod;
        }
    }
}

LL big_res[MX][MX];
LL init[MX][MX], mat1[MX][MX], mat2[MX][MX];
void matrix_expo(LL n){
    if(n == 0){
        set0(big_res);
        REP(i, N)big_res[i][i] = 1;
        return;
    }
    if(n % 2 == 0){
        matrix_expo(n / 2);
        multiply(big_res, big_res);
        REP(i, N){
            REP(j, N)big_res[i][j] = mul_res[i][j];
        }
    }
    else {
        matrix_expo(n - 1);
        multiply(big_res, init);
        REP(i, N){
            REP(j, N)big_res[i][j] = mul_res[i][j];
        }
    }
}

int main() {
//    ios_base::sync_with_stdio(0); cin.tie(0);
    int a,b = 0,c,d = 0,e,f = 0,g,h = 0,x,y,z = 0;
    scanf("%d", &a);
    while(a--){
        scanf("%d %d", &b, &c);
        if(c == 1){
            if(b == 1) cout << 1 << endl;
            else cout << 0 << endl;
            continue;
        }
        set0(mat1); set0(mat2);
        for(int i = 1; i < c - 1; i++){
            mat1[i][i-1] = mat1[i][i+1] = 1;
            mat2[i][i-1] = mat2[i][i] = mat2[i][i + 1] = 1;
        }
        mat1[0][1] = mat1[c-1][c-2] = 1;
        mat2[0][1] = mat2[0][0] = mat2[c-1][c-2] = mat2[c-1][c-1] = 1;
        N = c;
        multiply(mat1, mat2);
        REP(i, N) REP(j, N) init[i][j] = mul_res[i][j];
        matrix_expo((b-1)/2);
        if(b % 2 == 0) {
            multiply(big_res, mat1);
            REP(i, N) REP(j, N) big_res[i][j] = mul_res[i][j];
        }
        f = 0;
        REP(i, N) REP(j, N){
            f = (f + big_res[i][j]) % mod;
        }
        cout << f << endl;
    }
}
/*
*-*-* 1 1 1 1 1
-*-*- 1 2 2 2 1
*-*-* 3 5 6 5 3
-*-*- 5 9 10 9 5
*/
