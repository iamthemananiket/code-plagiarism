#include <cstdio>
#include <cmath>
#include <iostream>
#include <set>
#include <algorithm>
#include <vector>
#include <map>
#include <cassert>
#include <string>
#include <cstring>
#include <queue>

using namespace std;

#define rep(i,a,b) for(int i = a; i < b; i++)
#define S(x) scanf("%d",&x)
#define S2(x,y) scanf("%d%d",&x,&y)
#define P(x) printf("%d\n",x)
#define all(v) v.begin(),v.end()
#define FF first
#define SS second

typedef long long int LL;
typedef pair<int, int > pii;
typedef vector<int > vi;

const int N = 11;
vi A;
double G[101][101], Y[101];
bool done[101];

map<vi, int > M;
int T[N], trn;
int idx;

vi X[101];

int findIndex(vi &v) {
  vi res;
  trn++;
  rep(i,0,v.size()){
    int cnt = 0;
    int x = v[i];
    while(T[x] != trn) {
      T[x] = trn;
      x = v[x];
      cnt++;
    }
    if(cnt) res.push_back(cnt);
  }
  sort(all(res));
  if(M.find(res) == M.end()) {
    X[idx] = v;
    M[res] = idx++;
  }
  return M[res];
}

void solve(int n) {

  double p = 2.0 / ((n - 1.0) * n);
  memset(G, 0, sizeof(G));
  memset(Y, 0, sizeof(Y));
  memset(done, false, sizeof(done));
  M.clear();

  G[0][0] = 1.0; Y[0] = 0.0;
  vi v;
  rep(i,0,n) v.push_back(1);
  M[v] = 0;
  done[0] = true;
  idx = 1;
  if(findIndex(A) == 0) {
    P(0);
    return;
  }

  while(1) {
    int id = -1;
    rep(i,0,idx) if(!done[i]) {
      id = i;
      break;
    }

    if(id == -1) break;
    done[id] = true;
    Y[id] = 1.0;
    G[id][id] = 1.0;

    rep(i,0,n) rep(j,i+1,n) {
      swap(X[id][i], X[id][j]);
      int cnt = findIndex(X[id]);
      G[id][cnt] -= p;
      swap(X[id][i], X[id][j]);
    }
  }

  // rep(i,0,idx) {
  //   rep(j,0,idx) {
  //     printf("%lf ",G[i][j]);
  //   }
  //   printf(": %lf\n",Y[i]);
  // }

  rep(i,0,idx) if(G[i][i] != 0.0) {
    rep(j,i+1,idx) G[i][j] /= G[i][i];
    Y[i] /= G[i][i];
    G[i][i] = 1;
    rep(j,i+1,idx) if(G[j][i] != 0) {
      rep(k,i+1,idx) {
        G[j][k] -= G[j][i] * G[i][k];
      }
      Y[j] -= G[j][i] * Y[i];
      G[j][i] = 0.0;
    }
  }

  for(int i = idx - 1; i >= 0; i--) if(G[i][i] != 0.0) {
    for(int j = i - 1; j >= 0; j--) if(G[j][i] != 0.0) {
      Y[j] -= G[j][i] * Y[i];
      G[j][i] = 0;
    }
  }

  printf("%0.10lf\n",Y[findIndex(A)]);

  // rep(i,0,n+1) {
  //   rep(j,0,n+1) {
  //     printf("%lf ",G[i][j]);
  //   }
  //   printf("\n");
  // }
}

int main() {
  int t;
  S(t);
  while(t--) {
    int n;
    S(n);
    A.clear();
    rep(i,0,n) {
      int x;
      S(x);
      A.push_back(x-1);
    }

    solve(n);
  }
  return 0;
}