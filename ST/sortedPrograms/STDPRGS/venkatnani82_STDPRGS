#include <bits/stdc++.h>
using namespace std;
int sq, a[50010], b[50010], BLOCK = 233;
long long ans[50010];
int cnt[1000010];
class Query{
public:
	int l, r, pos;
	bool operator < (const Query& o) const {
    	if ((l / BLOCK) != (o.l / BLOCK)) return (l / BLOCK) < (o.l / BLOCK);
        return r < o.r;
    }
}q[50010];
long long answer = 0;
set<int> s, sn;
void remove(int x){
	cnt[x]--;
	if(cnt[x] == 0) s.erase(x), sn.erase(-x);
	if(cnt[x] >= 2) return;
	set<int> :: iterator it1 = s.upper_bound(x - 1), it2 = sn.upper_bound(-x);
	if(it2 == sn.end() && it1 != s.end()) answer -= ((*it1) - x) * 1LL * ((*it1) - x);
	else if(it2 != sn.end() && it1 == s.end()) answer -= ((*it2) + x) * 1LL * ((*it2) + x);
	else if(it2 != sn.end() && it1 != s.end()) {
		answer += ((*it1) + (*it2)) * 1LL * ((*it1) + (*it2));
		answer -= ((*it1) - x) * 1LL * ((*it1) - x);
		answer -= ((*it2) + x) * 1LL * ((*it2) + x);
	}
}
void add(int x){
	if(cnt[x] >= 2) {
		cnt[x]++;
		return;
	}
	set<int> :: iterator it1 = s.upper_bound(x - 1), it2 = sn.upper_bound(-x);
	if(it2 == sn.end() && it1 != s.end()) answer += ((*it1) - x) * 1LL * ((*it1) - x);
	else if(it2 != sn.end() && it1 == s.end()) answer += ((*it2) + x) * 1LL * ((*it2) + x);
	else if(it2 != sn.end() && it1 != s.end()) {
		answer -= ((*it1) + (*it2)) * 1LL * ((*it1) + (*it2));
		answer += ((*it1) - x) * 1LL * ((*it1) - x);
		answer += ((*it2) + x) * 1LL * ((*it2) + x);
	}
	cnt[x]++;
	if(cnt[x] == 1) s.insert(x), sn.insert(-x);
}
int main(){
	int n, t, x, y;
	cin>>n;
	sq = (int)(sqrt(n) + 0.5);
	for (int i = 0; i < n; i++) scanf("%d", a + i);
	cin>>t;
	for (int i = 0; i < t; i++) scanf("%d %d", &q[i].l, &q[i].r), q[i].pos = i, q[i].l--, q[i].r--;
	sort(q, q + t);
	int currentL = 0, currentR = 0, l, r;
	for (int i = 0; i < t; i++) {
		l = q[i].l, r = q[i].r;
		while (currentL > l) add(a[--currentL]);
        while (currentR < r + 1) add(a[currentR++]);
        while (currentL < l) remove(a[currentL++]);
        while (currentR > r + 1) remove(a[--currentR]);
        ans[q[i].pos] = answer;
	}
	for (int i = 0; i < t; i++) printf("%lld\n", ans[i]);
}