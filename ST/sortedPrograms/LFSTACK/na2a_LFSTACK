/* GG */

#include <map>
#include <set>
#include <list>
#include <cmath>
#include <ctime>
#include <deque>
#include <queue>
#include <stack>
#include <string>
#include <bitset>
#include <cstdio>
#include <limits>
#include <vector>
#include <climits>
#include <cstring>
#include <cstdlib>
#include <fstream>
#include <numeric>
#include <sstream>
#include <cassert>
#include <iomanip>
#include <iostream>
#include <algorithm>
//#include <unordered_set>
//#include <unordered_map>

#define f first
#define s second

#define pb push_back
#define mp make_pair

template <class T = int> inline T readInt(); // skip spaces, read signed int

using namespace std;

typedef pair<int, int> pii;
typedef long long ll;
typedef long double ld;
typedef unsigned long long ull;

const double EPS = 1e-9;
const double PI = acos(-1);

const int N = (int) 1e6 + 7;
const int MOD = (int) 1e9 + 7;

int t, n;
vector<int> a[N];

int p[N];
int f[N];

int get(vector<int> &v) {
  int res = 0;
  assert(n == v.size());
  for (int i = 0; i < n; i++)
    res += v[i] * p[i];
  return res;
}

vector<int> restore(int x) {
  vector<int> res;
  for (int i = n - 1; i >= 0; i--) {
    res.pb(x / p[i]);
    x %= p[i];
  }
  reverse(res.begin(), res.end());
  return res;
}

bool cur[N];
bool nxt[N];

int main() {
  #ifdef LOCAL
  freopen("in", "r", stdin);
  #endif

  scanf("%d", &t);
  while (t--) {
    scanf("%d", &n);
    int sum = 0;
    int prod = 1;
    for (int i = 0; i < n; i++) {
      int len;
      scanf("%d", &len);
      sum += len;
      prod *= (len + 1); 
      a[i].clear();
      while (len--) {
        int x;
        scanf("%d", &x);
        a[i].pb(x);
      }
    }
    for (int i = 0; i < sum; i++)
      scanf("%d", &f[i]);

    p[0] = 1;
    for (int i = 0; i < n; i++)
      p[i + 1] = p[i] * ((int) a[i].size() + 1);

    reverse(f, f + sum);
    memset(cur, 0, sizeof cur);
    cur[0] = 1;
    queue<int> q;
    q.push(0);
    while (!q.empty()) {
      vector<int> st = restore(q.front());
      q.pop();
      int pos = 0;
      for (auto it : st)
        pos += it;
      for (int i = 0; i < n; i++) {
        if (st[i] != a[i].size() && f[pos] == a[i][st[i]]) {
          st[i]++;
          int go = get(st);
          if (!cur[go]) {
            cur[go] = 1;
            q.push(go);
          }
          st[i]--; 
        }
      }
    }
    puts(cur[prod - 1] ? "Yes" : "No");
  }
  return 0;
}