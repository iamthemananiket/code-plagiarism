#include <bits/stdc++.h>

#define llong long long

using namespace std;

const int INF = (int) 1e9 + 7;
const int MXN = (int) 1e7 + 7;

int n, m, low, high;
int deg[MXN], mob[MXN], d[MXN];

vector<int> v;

inline void add(int &x, int y) {
    x += y;
    if (x >= INF) x -= INF;
    if (x < 0) x += INF;
}

int binpow(int x, int y) {
    int res = 1;
    while (y > 0) {
        if (y & 1)
            res = (1LL * res * x) % INF;

        y >>= 1;
        x = (1LL * x * x) % INF;
    }
    return res;
}

int main() {
    for (int i = 4; i < MXN; i += 2) d[i] = 2;
    for (int i = 3; i * i < MXN; i += 2) {
        if (!d[i]) {
            for (int j = i * i; j < MXN; j += i + i)
                d[j] = i;
        }
    }
    for (int i = 2; i < MXN; i++) if (!d[i]) d[i] = i;
    mob[1] = 1;
    v.push_back(1);
    for (int i = 2; i < MXN; i++) {
        int prv = i / d[i];
        if (prv % d[i]) mob[i] = -mob[prv];
        if (mob[i] != 0) v.push_back(i);
    }
    int t;
    scanf("%d", &t);
    while (t--) {
        scanf("%d%d%d%d", &n, &m, &low, &high);
        //n=m=high=MXN-7;
        //low=1;
        deg[1] = 1;
        deg[0] = 1;
        for (int i = 2; i <= m; i++) {
            if (d[i] == i) deg[i] = binpow(i, n);
            else deg[i] = (1LL * deg[d[i]] * deg[i / d[i]]) % INF;
        }
        int ans = 0;
        for (int i = low; i <= high; i++) {
            int up = m / i;
            for (int j = 0; j < v.size(); j++) {
                if (v[j] > up) break;
                int cc = v[j];
                int x = up / cc;
                add(ans, mob[cc] * deg[x]);
            }
        }

        printf("%d\n", ans);
    }
    return 0;
}
