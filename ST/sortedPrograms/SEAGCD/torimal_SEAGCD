#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <cstring>
#include <cassert>
#include <iostream>
#include <iomanip>
#include <sstream>
#include <algorithm>
#include <vector>
#include <map>
#include <set>
#include <queue>
#include <stack>
#include <deque>
#include <bitset>
#include <complex>
#include <functional>
#include <numeric>
#include <limits>
#include <utility>

#include <array>
#include <unordered_map>
#include <unordered_set>
#include <tuple>

using namespace std;

typedef long long ll;
typedef unsigned int uint;

const int MAX_V = 10000001;
const int MOD = 1000000007;

int n, m, l, r;
uint ct[MAX_V];

int mod_pow(int x, int y) {
  int r = 1;
  while (y > 0) {
    if (y & 1) r = (ll)r * x % MOD;
    x = (ll)x * x % MOD;
    y >>= 1;
  }
  return r;
}

int main() {
  int T;
  scanf("%d", &T);
  while (T--) {
    scanf("%d%d%d%d", &n, &m, &l, &r);
    uint t = 0;
    int ci = -1, cv = -1;    
    for (int i = m; i >= 1; i--) {
      ll s = 0;
      if (ci == m / i) {
        s = cv;
      } else {
        ci = m / i;
        s = cv = mod_pow(m / i, n);
      }
      for (int j = i + i; j <= m; j += i) {
        s -= ct[j];
      }
      ct[i] = (s % MOD + MOD) % MOD;
    }
    for (int i = 0; i < m; i++) {
      ct[i + 1] = (ct[i + 1] + ct[i]) % MOD;
    }
    printf("%u\n", (ct[r] - ct[l - 1] + MOD) % MOD);
  }
}
