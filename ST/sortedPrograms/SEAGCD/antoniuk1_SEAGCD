#include <iostream>
#include <stdio.h>
#include <vector>
#include <math.h>
#include <cassert>
#include <memory.h>
#include <algorithm>
#include <deque>
#include <set>
#include <map>

using namespace std;

const int mod = 1e9+7;

const int N = 10000000;
int lp[N+1];
int pr[700000];
int sz = 0;
int mu[N+1];
int muS[N+1];
int step[N+1];

void add(int & a, int b) {
    a += b;
    if (a >= mod)
        a -= mod;
}

int bin_pow(int a, int n) {
    int res = 1;
    while (n) {
        if (n & 1)
            res = (res * 1ll * a) % mod;
        
        a = (a * 1ll * a) % mod;
        n >>= 1;
    }
    return res;
}

int Step(int n, int k) {
    //return bin_pow(n, k);
    
    if (step[n] == -1)
        step[n] = bin_pow(n, k);
    return step[n];
}

int f(int n, int k) {
    int i = 1;
    int res = 0, d;
    while(i * i <= k) {
        d = ((Step(k / i, n) * 1ll * mu[i])%mod + mod) % mod;
        //if (d < 0) exit(-1);
        res += d;
        res %= mod;
        
        if ((k/i) != i) {
            int to = k / i;
            int from = k / (i+1);
            int mS = (muS[to] - muS[from])%mod; mS = (mS + mod) % mod;
            
            //if (mS < 0) exit(-1);
            res += (Step(i, n) * 1ll * mS)%mod;
            res %= mod;
        }
        i++;
    }
    
    //int res = 0;
    //for(int p = 1; p <= k; ++p)
    //    res = (res + (mu[p] * 1ll * Step(k/p, n))%mod)%mod;

    return res;
}

int main()
{
    for (int i=2; i<=N; ++i) {
        if (lp[i] == 0) {
            lp[i] = i;
            pr[sz++] = i;
        }
        for (int j=0; j<sz && pr[j]<=lp[i] && i*pr[j]<=N; ++j)
            lp[i * pr[j]] = pr[j];
    }
    mu[1] = 1;
    for(int i = 2 ; i <= N ; ++i)
    {
        int q = i/lp[i];
        if(q % lp[i] != 0)
            mu[i] = -mu[q];
    }
    
    muS[0] = mu[0] = 0;
    for(int i = 1; i <= N; ++i) {
        muS[i] = muS[i-1] + mu[i];
        muS[i] = (muS[i] + mod) % mod;
    }
    
    ios::sync_with_stdio(0);
    int t;
    cin >> t;
    //t = 10;
    while(t --> 0) {
        int n, m, l, r;
        cin >> n >> m >> l >> r;
        //n = m = r = 1e7;
        //l = 1;
        
        for(int i = 0; i <= N; ++i)
            step[i] = -1;//bin_pow(i, n);
        
        
        int ans = 0;
        int prev = -1, re = 0;
        for(int i = l; i <= r; ++i) {
            //add(ans, f(n, m / i));
            
            if (prev != m / i) {
                re = f(n, m / i);
                prev = m / i;
            }
         
            ans = (ans + re) % mod;
        }
        cout << ans << "\n";
    }
    //cout << clock() / (double)CLOCKS_PER_SEC << "\n";
    return 0;
}