#include <bits/stdc++.h>
#define rep(i,x,y) for (int i = (x); i<=(y); i++)
#define repe(i,x,y) for (int i = (x); i < (y);i++)
#define drep(i,x,y) for (int i = (x); i >= (y); i--)
#define mp make_pair
#define pb emplace_back
#define mt make_tuple
#define gcd __gcd
#define sf(n) scanf("%Lf",&n)
#define prf(n) printf("%Lf",n)
#define	s(n) scanf("%d",&n)
#define sl(n) scanf("%lld",&n)
#define pr(n) printf("%d",n)
#define prl(n) printf("%lld",n)
#define endc printf("\n")
#define psp printf(" ")

using namespace std;
typedef long long ll;
typedef long double ld;
typedef pair<int,int> pii;

const int maxn = 510;

string A[maxn];
int lft[maxn][maxn];
int dwn[maxn][maxn];

bool G[maxn][maxn];
int match[maxn];
bool seen[maxn];

int n;

bool kuhn(int x) {

	rep(j,1,n) {
		if (G[x][j]) {

			//cout<<x<<" : "<<j<<" : "<<seen[j]<<" : "<<match[j]<<endl;

			if (!seen[j]) {
				seen[j] = true;
				if (match[j] < 0 || kuhn(match[j])) {

					match[j] = x;
					return true;
				}
			}
		}
	}

	return false;
}

void solve() {
	cin>>n;

	rep(i,1,n) {
		cin>>A[i]; A[i] = " " + A[i];
	}


	rep(i,1,n) {
		rep(j,1,n) {
			G[i][j] = false;
			if (j == 1) {
				lft[i][j] = (A[i][j] == '.');
			} else {
				lft[i][j] = (A[i][j] == '.') ? lft[i][j-1] + 1 : 0;
			}
		}
	}

	drep(i,n,1) {
		rep(j,1,n) {
			if (i == n) {
				dwn[i][j] = (A[i][j] == '.');
			} else {
				dwn[i][j] = (A[i][j] == '.') ? dwn[i+1][j] + 1 : 0;
			}
		}
	}

	int ans = 0;

	rep(i,1,n) {
		match[i] = -1;
		bool ok = false;
		rep(j,1,n) {
			if (lft[i][j] == j && dwn[i][j] == n-i+1) {
				G[i][j] = true;		
				//cout<<i<<" "<<j<<endl;	
			}
		}
		ans += ok;
	}

	
	ans = 0;

	rep(i,1,n) {
		
		rep(j,1,n) seen[j] = false;

		if (kuhn(i)) ans++;
	}

	cout<<ans<<endl;
}

int main() {
	ios::sync_with_stdio(false); cin.tie(0);
	int t; cin>>t; while (t--) solve();


}
