#include<cstdio>
#include<iostream>
#include<algorithm>
#include<cmath>
#include<string>
#include<cstring>
#include<vector>
#include<utility>
#include<queue>
#include<set>
#include<map>
using namespace std;
typedef long long LL;
#define MOD 1000000007LL

#define gx getchar_unlocked
#define px putchar_unlocked
#define ps putchar_unlocked(' ')
#define pn putchar_unlocked('\n')

void scan(int &n){int sign=1;n=0;char c=gx();while(c<'0'||c>'9'){if(c=='-')sign=-1;c=gx();}while(c>='0'&&c<='9')n=(n<<3)+(n<<1)+c-'0',c=gx();n=n*sign;}
void lscan(LL &n){int sign=1;n=0;char c=gx();while(c<'0'||c>'9'){if(c=='-')sign=-1;c=gx();}while(c>='0'&&c<='9')n=(n<<3)+(n<<1)+c-'0',c=gx();n=n*(LL)(sign);}
int sscan(char a[]){char c=gx();while(c==' '||c=='\n')c=gx();int i=0;while(c!='\n')a[i++]=c,c=gx();a[i]=0;return i;}
int wscan(char a[]){char c=gx();while(c==' '||c=='\n')c=gx();int i=0;while(c!='\n'&&c!=' ')a[i++]=c,c=gx();a[i]=0;return i;}
void print(int n){if(n<0){n=-n;px('-');}int i=10;char o[10];do{o[--i]=(n%10)+'0';n/=10;}while(n);do{px(o[i]);}while(++i<10);}
void lprint(LL n){if(n<0LL){n=-n;px('-');}int i=21;char o[21];do{o[--i]=(n%10LL)+'0';n/=10LL;}while(n);do{px(o[i]);}while(++i<21);}
void sprint(const char*a){const char*p=a;while(*p)px(*p++);}

map<int,int> T[100002];

bool mark[100002];
int n;
int globalcost, target;
void dfs( int u, int cost ) {
    mark[u] = 1;
    if( u == target ) globalcost = cost;
    map<int,int>::iterator i;
    for( i = T[u].begin(); i != T[u].end(); ++i ) {
        if( mark[i->first] == 0 ) {
            dfs( i->first, cost+i->second );
        }
    }
}

int pathlength( int u, int v ) {
    for( int i = 1; i <= n; ++i ) mark[i] = 0;
    target = v;
    dfs( u, 0 );
    return globalcost;
}

int main() {
    int i, u, v, w, q, x, c;
    int edges[3][100002];
    scan(n);
    for( i = 1; i < n; ++i ) {
        scan(u); scan(v); scan(w);
        edges[0][i] = u;
        edges[1][i] = v;
        edges[2][i] = w;
        T[u].insert(make_pair(v,w));
        T[v].insert(make_pair(u,w));
    }
    scan(q);
    while(q--) {
        scan(x);
        if(x == 1) {
            scan(i); scan(c);
            edges[2][i] = c;
            T[edges[0][i]][edges[1][i]] = c;
            T[edges[1][i]][edges[0][i]] = c;
        }
        else {
            scan(u); scan(v);
            print(pathlength(u,v));pn;
        }
    }
    return 0;
}