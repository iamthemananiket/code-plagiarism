#include <bits/stdc++.h>

using namespace std;

#define X first
#define Y second
#define INPUT freopen("tadtree.inp","r",stdin)
#define OUTPUT freopen("tadtree.out","w",stdout)
#define FOR(i,l,r) for(int i=l;i<=r;i++)
#define REP(i,l,r) for(int i=l;i<r;i++)
#define FORD(i,l,r) for(int i=l;i>=r;i--)
#define REPD(i,l,r) for(int i=l;i>r;i--)
#define ENDL printf("\n")
#define debug 1

typedef long long ll;
typedef pair<int,int> ii;

const int inf=2e9;
const int MOD=1e9+7;
const int N=1e5+10;

ii e[N<<1];
int in[N],out[N],b[N]={0},p[N][20],n,x,y,w[N],aff[N],lv[N],q,key;
vector <int> a[N];
void update(int x,int v){
    while (x<=n){
        b[x]+=v;
        x+=x&-x;
    }
}
int get(int x){
    int tmp=0;
    while (x){
        tmp+=b[x];
        x-=x&-x;
    }
    return tmp;
}
void DFS(int par,int x){
    static int c=0;
    p[x][0]=par;
    lv[x]=lv[par]+1;
    in[x]=++c;
    for(auto &i:a[x]){
        int nx=e[i].Y;
        if (nx==par) continue;
        aff[i%(n-1)]=nx;
        DFS(x,nx);
    }
    out[x]=c;
}
void prepare(){
    scanf("%d",&n);
    REP(i,0,n-1){
        scanf("%d%d%d",&e[i].X,&e[i].Y,w+i);
        e[n-1+i]=ii(e[i].Y,e[i].X);
        a[e[i].X].push_back(i);
        a[e[i].Y].push_back(n-1+i);
    }
    DFS(0,1);
    REP(i,0,n-1){
        int L=in[aff[i]],R=out[aff[i]];
        update(L,w[i]);
        update(R+1,-w[i]);
    }
    FOR(i,1,18)
        FOR(j,1,n) p[j][i]=p[p[j][i-1]][i-1];
    //FOR(i,1,n) printf("%d %d\n",in[i],out[i]);
    //REP(i,0,n-1) printf("%d ",aff[i]);
}
int LCA(int x,int y){
    if (lv[x]<lv[y]) swap(x,y);
    FORD(i,18,0) if (lv[p[x][i]]>=lv[y]) x=p[x][i];
    if (x==y) return x;
    FORD(i,18,0) if (p[x][i]!=p[y][i]&&p[x][i])
        x=p[x][i],y=p[y][i];
    return p[x][0];
}
int solve(int x,int y){
    int lc=LCA(x,y);
    //printf("%d %d %d %d\n",lc,get(x),get(y),get(lc));
    return get(in[x])+get(in[y])-2*get(in[lc]);
}
int main(){
    prepare();
    scanf("%d",&q);
    while (q--){
        scanf("%d%d%d",&key,&x,&y);
        if (key==1){
            int L=in[aff[x-1]],R=out[aff[x-1]];
            update(L,y-w[x-1]);
            update(R+1,-(y-w[x-1]));
            w[x-1]=y;
        }else printf("%d\n",solve(x,y));
    }
}
