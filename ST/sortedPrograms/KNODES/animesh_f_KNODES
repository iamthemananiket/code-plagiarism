#include <bits/stdc++.h>
#define rf freopen("inp.in","r",stdin)
#define NMAX 100050
#define mbrc gold
#define LN 25
using namespace std;

 
long long K , N , T , query;
long long u , v;
vector<int> adjList[NMAX];
int DP[LN][NMAX];
int LEVEL[NMAX];

void dfs(int v, int p) {
	
	LEVEL[v] = LEVEL[p] + 1;
	DP[0][v] = p;
	for (int i = 0; i < adjList[v].size(); ++i) {
		int u = adjList[v][i];
		if (u == p) continue;
		dfs(u, v);
	}

}

bool cmp(int a, int b) {
	return LEVEL[a] > LEVEL[b];
}

int lca (int a, int b) {
	
	if (LEVEL[a] > LEVEL[b]) swap(a, b);
	int diff = LEVEL[b] - LEVEL[a];
	
	for (int i = 0; i < LN; ++i) {
		if (diff & (1 << i)) b = DP[i][b];
	}

	if (a == b) return a;

	for (int i = LN - 1; i >= 0; --i) {
		if (DP[i][a] != DP[i][b]) 
			a = DP[i][a] , b = DP[i][b];
	}

	return DP[0][a];
}

vector<int> A,B,Q;

int main(){
	
	
	cin.tie(0);
	ios::sync_with_stdio(false);
	
	cin >> T;

	while (T--) {
		
		cin >> N;
		
		for (int i = 0; i <= N; ++i) 
			for (int j = 0; j < LN; ++j) 
				DP[j][i] = 0;
		
		for (int i = 0; i <= N; ++i) LEVEL[i] = 0;
		
		for (int i = 0; i < N - 1; ++i) {
			cin >> u >> v;
			adjList[u].push_back(v);
			adjList[v].push_back(u);
		}

		dfs(1, 0);
		
		for (int i = 1; i < LN; ++i) 
			for (int j = 1; j <= N; ++j) 
				DP[i][j] = DP[i - 1][DP[i - 1][j]];
		
		for (int i = 0; i <= N; ++i) adjList[i].clear();
		
		cin >> query;
		
		while (query--) {
			
			A.clear() , B.clear() , Q.clear();
			
			cin >> K;
			int common_lca = 0;
			bool flag = true;

			for (int i = 0; i < K; ++i) {
				cin >> v;
				if (common_lca == 0) common_lca = v;
				common_lca = lca(v, common_lca);
				Q.push_back(v);
			}

			sort(Q.begin(), Q.end(), cmp); // Descending Depth Sort
			
			A.push_back(Q[0]);
			
			for (int i = 0; i < Q.size() - 1; ++i) {
				
				int y = lca(Q[i], Q[i + 1]);
				if (y != Q[i + 1] and y != common_lca) flag = false;
				if (lca(A.back(), Q[i + 1]) == Q[i + 1]) A.push_back(Q[i + 1]);
				else if( B.empty() or lca(B.back() , Q[i+1]) == Q[i+1])
					B.push_back(Q[i + 1]);
				else { flag = false ; break; }

			}

			if (flag) cout << "Yes\n";
			else      cout << "No\n" ;
		}
	}
	return 0;
}
  