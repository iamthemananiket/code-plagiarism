#include<stack>
#include<cstdio>
#include<iostream>
#include<vector>
#include<algorithm>
#include<string>
#include<cstring>
using namespace std;

typedef long long LL;
typedef vector<int> VI;

#define REP(i,n) for(int i=0, i##_len=(n); i<i##_len; ++i)
#define EACH(i,c) for(__typeof((c).begin()) i=(c).begin(),i##_end=(c).end();i!=i##_end;++i)
#define eprintf(s...) fprintf(stderr, s)

template<class T> inline void amin(T &a, const T &b) { if (b<a) a=b; }
template<class T> inline void amax(T &a, const T &b) { if (a<b) a=b; }
typedef vector<vector<int> > Adj;
const int MAX_V = 1000000;
const int LOG_V = 20;

struct LCA {
    vector<int> depth;
    vector<vector<int> > par; // par[v][i] : v's 2^i ancestor
    LCA() {}
    LCA(const Adj &G, int r=0) {
	int n = G.size();
	par = vector<vector<int> >(n, vector<int>(LOG_V));
	depth = vector<int>(n);
	stack<int>vv, pp; // Stack DFS
	vv.push(r); pp.push(r);
	depth[r] = 0;
	for (;!vv.empty();) {
	    int v = vv.top(), p = pp.top();
	    vv.pop(); pp.pop();
	    par[v][0] = p;
	    for (int i=0; i<(int)G[v].size(); i++) {
		if (G[v][i] == p) continue;
		vv.push(G[v][i]);
		pp.push(v);
		depth[G[v][i]] = depth[v]+1;
	    }
	}
	for (int i=1; i<LOG_V; i++) {
	    for (int v=0; v<n; v++) par[v][i] = par[par[v][i-1]][i-1];
	}
    }
    int lca(int x, int y) {
	if (depth[x] < depth[y]) swap(x, y); // x must be deeper
	for (int i=0; depth[x] != depth[y]; i++) {
	    if ((depth[x]-depth[y]) & (1<<i)) x = par[x][i];
	}
	if (x == y) return x;
	for (int i=LOG_V; i--;) {
	    if (par[x][i] != par[y][i]) { x=par[x][i]; y=par[y][i]; }
	}
	return par[x][0];
    }
    bool ancestor(int v, int a) {
	int d = depth[v] - depth[a];
	for (int i=0; i<LOG_V; i++) {
	    if (d & (1<<i)) v = par[v][i];
	}
	return v == a;
    }
    int dist(int x, int y) { // number of edges in {x -- y}
	int z = lca(x, y);
	return depth[x] + depth[y] - 2 * depth[z];
    }
    int kth(int x, int y, int k) { // assert( dist(x, y) >= k );
	int z = lca(x, y);
	if (depth[x] - depth[z] < k) {
	    k = depth[x] + depth[y] - 2 * depth[z] - k;
	    x = y;
	}
	for (int i=LOG_V; i--;)
	    if (k & (1<<i)) x = par[x][i];
	return x;
    }
};



int T;
int N, Q, K, A[100011];
Adj G;
int main() {
    scanf("%d", &T);
    REP ($, T) {
	scanf("%d", &N);

	G = Adj(N);
	REP (i, N-1) {
	    int x, y;
	    scanf("%d%d", &x, &y);
	    x--; y--;
	    G[x].push_back(y);
	    G[y].push_back(x);
	}

	LCA L(G);
	scanf("%d", &Q);

	REP ($$, Q) {
	    scanf("%d", &K);
	    REP (i, K) scanf("%d", A+i);
	    REP (i, K) A[i]--;
	    bool yes = true;
	    int head = A[0];
	    REP (i, K) if (i) head = L.lca(head, A[i]);

	    
	    vector<pair<int, int> > x;
	    REP (i, K) x.push_back(make_pair(L.depth[A[i]], A[i]));
	    sort(x.begin(), x.end());

	    int le = head, ri = head;
	    VI R, M;
	    if (x[0].second != head) M.push_back(head);
	    REP (i, K) {
		int v = x[i].second;
		if (L.ancestor(v, le)) { M.push_back(v); le = v; }
		else R.push_back(v);
	    }

	    if (M.size() == 1u) M.push_back(head);
	    REP (i, R.size()) {
		int v = R[i];
		if (L.lca(M[1], v) != head) { yes = false; break; }
		if (L.ancestor(v, ri)) ri = v;
		else { yes = false; break; }
	    }

	    puts(yes ? "Yes" : "No");
	}
    }
    return 0;
}
