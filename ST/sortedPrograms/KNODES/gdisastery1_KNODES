#include <cstdio>
#include <cstring>
#include <cmath>
#include <cassert>
#include <iostream>
#include <vector>
#include <set>
#include <map>
#include <queue>
#include <stack>
#include <string>
#include <algorithm>
using namespace std;
#define SZ(x) ( (int) (x).size() )
#define CNT(s, x) ( (s).find(x) != (s).end() )
#define ALL(x) (x).begin(), (x).end()
#define dbg(x) cerr << #x << " = " << x << endl;
#define mp make_pair
#define pb push_back
#define fi first
#define se second
typedef long long ll;
typedef pair<int, int> pii;
// const int INF = 1e9;
const int MAXN = 1e5 + 10;
const int LOG = 18;

vector<int> E[MAXN];
int T, N;
int dtime;
int ent[MAXN], ext[MAXN];
int p[MAXN][LOG];
int h[MAXN];

int is_ancestor(int u, int v)
{
    return ent[u] <= ent[v] && ent[v] <= ext[u];
}

int findlca(int u, int v)
{
    if(h[u] < h[v])
        swap(u, v);

    for(int i = LOG - 1; i >= 0; i--)
        if(h[p[u][i]] >= h[v])
            u = p[u][i];

    if(u == v)
        return u;

    for(int i = LOG - 1; i >= 0; i--)
        if(p[u][i] != p[v][i])
            u = p[u][i], v = p[v][i];
    return p[u][0];
}

void dfs(int u)
{
    for(int i = 1; i < LOG; i++)
        p[u][i] = p[p[u][i - 1]][i - 1];
    h[u] = h[p[u][0]] + 1;
    ent[u] = ++dtime;
    for(int v: E[u])
    {
        E[v].erase(find(ALL(E[v]), u));
        p[v][0] = u;
        dfs(v);
    }
    ext[u] = dtime;
}

int main()
{
    scanf("%d", &T);
    while(T--)
    {
        scanf("%d", &N);
        dtime = 0;
        for(int i = 1; i <= N; i++)
        {
            E[i].clear();
            for(int j = 0; j < LOG; j++)
                p[i][j] = 0;
            h[i] = 0;
        }
        for(int i = 0; i < N - 1; i++)
        {
            int u, v;
            scanf("%d%d", &u, &v);
            E[u].pb(v);
            E[v].pb(u);
        }
        dfs(1);

        int Q;
        scanf("%d", &Q);
        while(Q--)
        {
            int n;
            static int V[MAXN];
            scanf("%d", &n);
            for(int i = 0; i < n; i++)
            {
                scanf("%d", V + i);
            }
            sort(V, V + n, [&](const int& u, const int& v) -> bool { return h[u] > h[v]; });

            int other = -1, papa = -1;
            bool okay = true;
            for(int i = 1; i < n; i++)
            {
                if(other == -1)
                {
                    if(is_ancestor(V[i], V[0]))
                        continue;
                    other = V[i];
                    papa = findlca(V[0], other);
                }
                else
                {
                    if(!is_ancestor(papa, V[i]))
                        okay = false;
                    else
                        okay &= (is_ancestor(V[i], V[0]) || is_ancestor(V[i], other));
                }
            }
            puts(okay ? "Yes" : "No");
        }
    }
    return 0;
}
