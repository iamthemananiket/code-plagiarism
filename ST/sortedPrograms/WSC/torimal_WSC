#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <cstring>
#include <cassert>
#include <iostream>
#include <iomanip>
#include <sstream>
#include <algorithm>
#include <vector>
#include <map>
#include <set>
#include <queue>
#include <stack>
#include <deque>
#include <bitset>
#include <complex>
#include <functional>
#include <numeric>
#include <limits>
#include <utility>

#include <array>
#include <unordered_map>
#include <unordered_set>
#include <tuple>

using namespace std;

typedef long long ll;

const int MAX_N = 10;
const int MAX_M = 20;

int n, m;
int a[MAX_M];
bool memo[1 << MAX_N][2];

bool dfs(int S, bool pos) {
  if (memo[S][pos]) return false;
  memo[S][pos] = true;
  int T = S ^ ((1 << n) - 1);
  if (S == (1 << n) - 1 && pos) {
    return true;
  }
  for (int i = 0; i < m; i++) {
    if ((T & a[i]) == a[i]) return false;
  }
  if (dfs(T, !pos)) return true;
  for (int i = 0; i < n; i++) {
    if (S & (1 << i)) {
      if (dfs(T | (1 << i), !pos)) return true;
    }
  }
  return false;
}

int main() {
  int T;
  scanf("%d", &T);
  while (T--) {
    scanf("%d%d", &n, &m);
    for (int i = 0; i < m; i++) {
      int u, v;
      scanf("%d%d", &u, &v);
      u--, v--;
      a[i] = (1 << u) | (1 << v);
    }
    memset(memo, 0, sizeof(memo));
    printf("%s\n", dfs((1 << n) - 1, false) ? "YES" : "NO");
  }
}
