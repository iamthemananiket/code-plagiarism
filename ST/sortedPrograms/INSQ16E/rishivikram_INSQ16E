#include<bits/stdc++.h>

using namespace std;

#define ff first
#define ss second
#define pb push_back
#define mp make_pair
#define all(x) x.begin(),x.end()
#define sz(x) ((int)x.size())
#define eps 1e-9

const int MOD = 1e9+7;

typedef long long ll;
typedef pair<int,int> pii;

ll POWER[65];
ll power(ll a, ll b) {ll ret=1;while(b) {if(b&1) ret*=a;a*=a;if(ret>=MOD) ret%=MOD;if(a>=MOD) a%=MOD;b>>=1;}return ret;}
ll inv(ll x) {return power(x,MOD-2);}

void precompute() {
	POWER[0]=1;
	for(int i=1;i<63;i++) POWER[i]=POWER[i-1]<<1LL;
}
int n;
set<pii> bridge;
const int MAXN = 2e5+5;
const int LOGN = 22;
int P[LOGN][MAXN];
int lev[MAXN];
int low[MAXN],disc[MAXN];
int tme=0;
bool vis[MAXN];;
int group[MAXN];
vector<int> adj[MAXN];
vector<int> g[MAXN];
void DFS(int s, int par=-1) {
	low[s]=tme;
	disc[s]=tme;
	++tme;
	vis[s]=true;
	for(auto it:adj[s]) {
		if(it==par) continue;
		if(vis[it]) {
			low[s]=min(low[s],disc[it]);
		}
		else {
			DFS(it,s);
			low[s]=min(low[s],low[it]);
			if(low[it]>disc[s]) bridge.insert(mp(s,it)),bridge.insert(mp(it,s));
		}
	}
}
int cc;
void DFS2(int s) {
	vis[s]=true;
	group[s]=cc;
	for(auto it:adj[s]) {
		if(vis[it]) continue;
		if(bridge.find(mp(s,it))!=bridge.end()) continue;
		DFS2(it);
	}
}
void DFS3(int s, int par=-1) {
	P[0][s]=par;
	for(auto it:g[s]) {
		if(it==par) continue;
		lev[it]=lev[s]+1;
		DFS3(it,s);
	}
}
void pre() {
	for(int i=1;i<LOGN;i++) for(int j=1;j<=cc;j++) P[i][j]=-1;
	for(int i=1;i<LOGN;i++) for(int j=1;j<=cc;j++) if(P[i-1][j]!=-1) P[i][j]=P[i-1][P[i-1][j]];
}
int lca(int x, int y) {
	if(lev[x]>lev[y]) swap(x,y);
	for(int i=LOGN-1;i>=0;i--) if(lev[y]-POWER[i]>=lev[x]) y=P[i][y];
	if(x==y) return x;
	for(int i=LOGN-1;i>=0;i--) if(P[i][x]!=P[i][y]) x=P[i][x],y=P[i][y];
	return P[0][x];
}
int main() {
	//freopen("TASK.in","r",stdin);freopen("TASK.out","w",stdout);
	precompute();
	int m,q;
	cin>>n>>m>>q;
	for(int i=1;i<=m;i++) {
		int x,y;
		scanf("%d%d",&x,&y);
		adj[x].pb(y);
		adj[y].pb(x);
	}
	DFS(1);
	for(int i=1;i<=n;i++) vis[i]=false;
	cc=0;
	for(int i=1;i<=n;i++) {
		if(vis[i]) continue;
		++cc;
		DFS2(i);
	}
	set<pii> vis;
	for(auto it:bridge) {
		int u=it.ff;
		int v=it.ss;
		if(vis.find(mp(u,v))!=vis.end()) continue;
		vis.insert(mp(u,v));
		vis.insert(mp(v,u));
		g[group[u]].pb(group[v]);
		g[group[v]].pb(group[u]);
	}
	lev[1]=0;
	DFS3(1);
	pre();
	while(q--) {
		int u,v;
		scanf("%d%d",&u,&v);
		u=group[u];
		v=group[v];
		int lc=lca(u,v);
		ll ans=lev[u]+lev[v];
		ans-=2LL*lev[lc];
		printf("%lld\n",ans);
	}
	return 0;
}
