// A union by rank and path compression based program to detect cycle in a graph
#include <stdio.h>
#include <stdlib.h>
#include <cmath>
#include <cstdio>
#include <map>
#include <iostream>
#include <algorithm>
using namespace std;
const int MAX =1000005;
map<string,int> mymap;
map<string,int> :: iterator it;
typedef struct subset
{
    int parent;
    int rank;
}sun;

// A utility function to find set of an element i
// (uses path compression technique)
sun s[MAX];
int find(int i)
{
    // find root and make root as parent of i (path compression)
    if (s[i].parent != i)
        s[i].parent = find(s[i].parent);

    return s[i].parent;
}

// A function that does union of two sets of x and y
// (uses union by rank)
void Union( int x, int y)
{
    
    // Attach smaller rank tree under root of high rank tree
    // (Union by Rank)
    if (s[x].rank < s[y].rank)
        s[x].parent = y;
    else if (s[x].rank > s[y].rank)
        s[y].parent = x;

    // If ranks are same, then make one as root and increment
    // its rank by one
    else
    {
        s[y].parent = x;
        s[x].rank++;
    }
}


// Driver program to test above functions
int main()
{

    int t;
    string a,b;
    int a1,b1,k,p;
    for(int i=0;i<MAX;i++){
        s[i].parent=i;
        s[i].rank=1;
    }
    cin>>t;
    cin>>a>>b;
    //int k=0;
    k=0;
    mymap.insert( std::pair<string,int>(a,k) );
    k++;
    mymap.insert( std::pair<string,int>(b,k) );
    k++;    
   t--;
   Union(0,1);
   printf("Found by random\n") ;
   while(t--){
    cin>>a>>b;
    if(mymap.find(a)!=mymap.end()){
        it=mymap.find(a);
        p=it->second;
       // cout<<p<<endl;
    }
    else
    {
         mymap.insert ( std::pair<string,int>(a,k) );
         p=k;
         k++;

    }
    //cout<<p<<" ";
    a1=find(p);
     if(mymap.find(b)!=mymap.end()){
        it=mymap.find(b);
        p=it->second;
    }
    else
    {
         mymap.insert ( std::pair<string,int>(b,k) );
         p=k;
         k++;

    }
    //cout<<p<<" "<<endl;
     b1=find(p);
     //cout<<a1<<" "<<b1<<endl;
     if(a1==b1)
        printf("Found in friend list\n");
    else{
            Union(a1,b1);
            //cout<<s[a1].parent<<" "<<s[b1].parent<<endl;
            printf("Found by random\n") ;
    }

   }
    return 0;
}
