#include <bits/stdc++.h>

using namespace std;

#define X first
#define Y second
#define INPUT freopen("long.inp","r",stdin)
#define OUTPUT freopen("long.out","w",stdout)
#define FOR(i,l,r) for(auto i=(l);i<=(r);i++)
#define REP(i,l,r) for(auto i=(l);i<(r);i++)
#define FORD(i,l,r) for(auto i=(l);i>=(r);i--)
#define REPD(i,l,r) for(auto i=(l);i>(r);i--)
#define ENDL printf("\n")
#define debug 1

typedef long long ll;
typedef pair<int,int> ii;

const int inf=1e9;
const int MOD=1e9+7;
const int N=1e3+10;

int n;
int a[N],p[N],t[N],h[N];
vector <int> v[N];
int root(int x){
    if (t[x]<0) return x;
    t[x]=root(t[x]);
    return t[x];
}
int subseg(int x){
    return x*(x+1)/2;
}
void merge(int &sum,int x,int y){
    x=root(x);
    y=root(y);
    if (x==y) return;
    sum-=subseg(-t[x])+subseg(-t[y]);
    if (t[x]>t[y]) swap(x,y);
    t[x]+=t[y];
    t[y]=x;
    sum+=subseg(-t[x]);
}
void prepare(){
    scanf("%d",&n);
    FOR(i,1,n) scanf("%d",a+i);
    FOR(i,1,n) p[i]=a[i];
    sort(p+1,p+n+1);
    int n1=unique(p+1,p+n+1)-p-1;
    FOR(i,1,n) a[i]=lower_bound(p+1,p+n1+1,a[i])-p;
    FOR(i,1,n1) v[i].clear();
    FORD(i,n,1) v[a[i]].push_back(i);
}
ll solve(){
    ll ans=0;
    FOR(en,1,n){
        FOR(i,1,en) h[a[i]]++;
        int sum=0;
        memset(t,-1,sizeof(t));
        FOR(i,en+1,n) if (!h[a[i]]) sum++;
        FOR(i,en+2,n) if (!h[a[i]]&&!h[a[i-1]]) merge(sum,i,i-1);
        FOR(i,1,en){
            ans+=sum;
            h[a[i]]--;
            if (!h[a[i]])
                for(auto j:v[a[i]]){
                    if (j<=en) break;
                    sum++;
                    if (j<n&&!h[a[j+1]]) merge(sum,j,j+1);
                    if (!h[a[j-1]]) merge(sum,j-1,j);
                }
        }
    }
    return ans;
}
int main(){
//    freopen("input.inp","r",stdin);
    int test;
    scanf("%d",&test);
    while (test--){
        prepare();
        cout<<solve()<<'\n';
    }
}
