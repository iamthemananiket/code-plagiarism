#include<bits/stdc++.h>
using namespace std;

#define ll long long
#define pb push_back
#define gc getchar_unlocked
#define iosbase ios_base::sync_with_stdio(false)
#define pii pair<int,int>
#define pll pair<ll,ll>
#define ppi pair<pair<int,int>,int>
#define vi vector<int>
#define sc scanf
#define lld I64d
#define F first
#define S second
#define N 1000000007
#define maxs 200005
#define mins 1005
#define maxs1 100005
#define eps 0.000000000001
#define imax 1000000000
#define lmax 1000000000000000000ll
#define pr printf
#define mps make_pair

inline int getint(){
	char c;
	while((c=getchar())<'0'||c>'9'); return c-'0';
}

vector<int>adj[maxs];
vector<int>tree[maxs],tcost[maxs];
int isBridge[maxs],f[maxs],s[maxs],cost[maxs];
//vector<int>compv[maxs];					// Stores the vertices numbers int the ith component
queue<int>q[maxs1];							// For bfs
int disc[maxs],low[maxs],parent[maxs],cmpno,mark[maxs];	//Finding bridges
map<pii,int>mp;
int status;

int find_edge(int e,int k)
{
	if(f[e]==k){
		return s[e];
	}
	else{
		return f[e];
	}
}

void dfsBridge(int k)
{
	mark[k]=1;
	static int test=0;
	disc[k]=low[k]=++test;
	pii p1;
	
	for(int i=0;i<adj[k].size();i++){
		int edge=adj[k][i];
		int k1=find_edge(edge,k);
		p1.F=k;
		p1.S=k1;
		if(p1.F>p1.S){
			swap(p1.F,p1.S);
		}
		if(!mark[k1]){
			parent[k1]=k;
			dfsBridge(k1);
			low[k]=min(low[k],low[k1]);
			if(low[k1]>disc[k] && mp[p1]==1){
				isBridge[edge]=1;
			}
		}
		else if(k1!=parent[k]){
			low[k]=min(low[k],disc[k1]);
		}
	}
}

void dfsBlockTree(int k)
{
	mark[k]=1;
	int curr=cmpno;
	q[curr].push(k);
	disc[k]=curr;				// disc array is used in brdge as well as here to store compno of every vertex
	while(!q[curr].empty()){
		int t=q[curr].front();
		disc[t]=curr;
		q[curr].pop();
		for(int i=0;i<adj[t].size();i++){
			int edge=adj[t][i];
			int opp=find_edge(edge,t);
			if(isBridge[edge] && !mark[opp]){
				cmpno++;
				tree[curr].pb(cmpno);
				tree[cmpno].pb(curr);
				dfsBlockTree(opp);
			}
			else if(!mark[opp]){
				q[curr].push(opp);
				mark[opp]=1;
			}
		}
	}
}
void dfs2(int k){
	mark[k]=1;
	int cnt=0;
	for(int i=0;i<tree[k].size();i++){
		if(!mark[tree[k][i]]){
			dfs2(tree[k][i]);
			cnt++;
		}
	}
	if(cnt>=2){
		status=1;
	}
}

int main()
{
	int t,n,m,i,j;
	scanf("%d %d",&n,&m);
	for(i=0;i<m;i++){
		scanf("%d %d",&f[i],&s[i]);
		adj[f[i]].pb(i);
		adj[s[i]].pb(i);
		if(f[i]>s[i]){
			swap(f[i],s[i]);
		}
		mp[mps(f[i],s[i])]++;
	}
	for(i=0;i<=n;i++){
		mark[i]=0;
	}
	for(i=0;i<=m;i++){
		isBridge[i]=0;
	}
	dfsBridge(1);
	for(i=0;i<=n;i++){
		mark[i]=0;
	}
	cmpno=1;
	dfsBlockTree(1);
	if(cmpno==1){
		pr("YES\n");
		return 0;
	}
	int vert = -1;
	for(i=1;i<=cmpno;i++){
		if(tree[i].size()==1){
			vert = i;
			break;
		}
	}
	if(vert == -1){
		cout<<"NO\n";
		return 0;
	}
	else{
		for(i=0;i<=cmpno;i++){
			mark[i]=0;
		}
		status =0;
		dfs2(vert);
		if(status==1){
			cout<<"NO\n";
		}
		else{
			cout<<"YES\n";
		}
	}
	return 0;
}