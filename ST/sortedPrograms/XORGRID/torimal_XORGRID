#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <cstring>
#include <cassert>
#include <iostream>
#include <iomanip>
#include <fstream>
#include <sstream>
#include <algorithm>
#include <vector>
#include <map>
#include <set>
#include <queue>
#include <stack>
#include <deque>
#include <bitset>
#include <complex>
#include <functional>
#include <numeric>
#include <limits>
#include <utility>

#include <array>
#include <unordered_map>
#include <unordered_set>
#include <tuple>

using namespace std;

typedef long long ll;
typedef tuple<int, int, int> S;

typedef unsigned int uint;
const int D = 31;
struct BinaryTrie {
  
  BinaryTrie *ch[2];
  BinaryTrie () {
    ch[0] = ch[1] = nullptr;
  };
  
  void insert(uint x, int d) {
    if (d < 0) {
      return;
    } else {
      uint p = x >> d & 1;
      if (ch[p] == nullptr) ch[p] = new BinaryTrie();
      ch[p]->insert(x, d - 1);
    }
  }
  
  void insert(uint x) {
    insert(x, D);
  }

  uint maxxor(uint x, int d) {
    if (d < 0) {
      return 0;
    } else {
      uint p = x >> d & 1;
      if (ch[1 - p] == nullptr) {
        assert(ch[p] != nullptr);
        return ch[p]->maxxor(x, d - 1);
      } else {
        return 1 << d | ch[1 - p]->maxxor(x, d - 1);
      }
    }
  }

  uint maxxor(uint x) {
    return maxxor(x, D);
  }
};


const int MAX_N = 18;
int n;
uint opt;
int b[MAX_N][MAX_N];
BinaryTrie ts[MAX_N][MAX_N];
unordered_set<ll> used;

ll h(int i, int j, int x) {
  return (ll(x) << 10) + (ll(i) << 5) + ll(j);
}

void dfs1(int i, int j, uint x) {
  if (used.count(h(i, j, x))) return;
  
  used.insert(h(i, j, x));
  x ^= b[i][j];
  if (i + j >= n - 1) {
    ts[i][j].insert(x);
    return;
  }
  if (i + 1 < n) {
    dfs1(i + 1, j, x);
  }
  if (j + 1 < n) {
    dfs1(i, j + 1, x);
  }
}

void dfs2(int i, int j, uint x) {
  if (used.count(h(i, j, x))) return;
  used.insert(h(i, j, x));
  x ^= b[i][j];
  if (i + j <= n - 1) {
    x ^= b[i][j];
    opt = max(opt, ts[i][j].maxxor(x));
    return;
  }
  if (i - 1 >= 0) {
    dfs2(i - 1, j, x);
  }
  if (j - 1 >= 0) {
    dfs2(i, j - 1, x);
  }
}

int main() {
  cin >> n;
  for (int i = 0; i < n; i++) {
    for (int j = 0; j < n; j++) {
      cin >> b[i][j];      
    }
  }
  used.clear();
  dfs1(0, 0, 0);

  opt = 0;
  used.clear();
  dfs2(n - 1, n - 1, 0);
  cout << opt << endl;
}
