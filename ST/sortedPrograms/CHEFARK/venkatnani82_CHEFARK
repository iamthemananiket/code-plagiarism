#include <bits/stdc++.h>
using namespace std;
long long mod = 1e9 + 7;
long long fact[200010];
long long power(long long x, long long p) {
    if(p == 0) return 1;
    long long tmp = power(x, p / 2);
    tmp *= tmp;
    tmp %= mod;
    if(p % 2 == 0) return tmp;
    else return (tmp * x) % mod;
}
long long inverse(long long x) {
    return power(x, mod - 2);
}
long long ncr(int n, int k) {
    long long ret = fact[n];
    long long den = inverse((fact[k] * fact[n - k]) % mod);
    return (ret * den) % mod;
}
int main() {
    fact[0] = 1;
    for(int i = 1; i < 200010; i++) fact[i] = fact[i - 1] * i, fact[i] %= mod;
    int test;
    cin >> test;
    while(test--) {
        int n, k, x;
        cin >> n >> k;
        int cnt = 0;
        for(int i = 0; i < n; i++) {
            scanf("%d", &x);
            if(x == 0) cnt++;
        }
        n -= cnt;
        int st = (k & 1);
        long long ans = 0;
        for(int i = st; i <= min(n, k); i += 2) {
            ans += ncr(n, i);
            if(ans >= mod) ans -= mod;
        }
        if(cnt > 0) {
            st ^= 1;
            for(int i = st; i <= min(n, k - 1); i += 2) {
                ans += ncr(n, i);
                if(ans >= mod) ans -= mod;
            }
        }
        printf("%lld\n", ans);
    }
}