#pragma comment(linker, "/STACK:500000000")
#define _CRT_SECURE_NO_WARNINGS
#include <algorithm>
#include <assert.h>
#include <bitset>
#include <functional>
#include <iostream>
#include <list>
#include <map>
#include <math.h>
#include <set>
#include <stack>
#include <stdio.h>
#include <stdlib.h>
#include <string>
#include <string.h>
#include <time.h>
#include <queue>
#include <utility>
#include <vector>
using namespace std;

#define y0 y0ChloeGraceMoretz
#define y1 y1ChloeGraceMoretz
#define ll long long
int nextInt() { int n; scanf("%d", &n); return n; }
ll nextLong() { ll n; scanf("%lld", &n); return n; }
const double PI = acos(-1.0);
const double EPS = 1e-9;
const int INF = (int)2e9;
const int MOD = (int)1e9 + 7;
const int N = (int)1e5;

int binpow(int a, int n) {
	int res = 1;
	while (n > 0) {
		if (n & 1) {
			res = ((ll)res * a) % MOD;
		}
		a = ((ll)a * a) % MOD;
		n >>= 1;
	}
	return res;
}

int fact[N + 9], factInv[N + 9];

int C(int n, int k) {
	return ((((ll)fact[n] * factInv[n - k]) % MOD) * factInv[k]) % MOD;
}

int main() {
	//freopen("in.txt", "rt", stdin);
	//freopen("out.txt", "wt", stdout);
	fact[0] = 1;
	factInv[0] = binpow(fact[0], MOD - 2);
	for (int i = 1; i <= N; ++i) {
		fact[i] = ((ll)fact[i - 1] * i) % MOD;
		factInv[i] = binpow(fact[i], MOD - 2);
	}
	int t;
	scanf("%d", &t);
	while (t--) {
		int n, k;
		scanf("%d %d", &n, &k);
		int nonZero = 0;
		for (int i = 0; i < n; ++i) {
			int v;
			scanf("%d", &v);
			if (v != 0) {
				++nonZero;
			}
		}
		int res = 0;
		if (n == nonZero) {
			for (int x = (k > n) ? (n - k % 2) : k; x >= 0; x -= 2) {
				res = (res + C(n, x)) % MOD;
			}
		} else {
			for (int x = min(nonZero, k); x >= 0; --x) {
				res = (res + C(nonZero, x)) % MOD;
			}
		}
		printf("%d\n", res);
	}
	return 0;
}