/*
*/

#pragma comment(linker, "/STACK:16777216")
#define _CRT_SECURE_NO_WARNINGS

#include <fstream>
#include <iostream>
#include <string>
#include <complex>
#include <math.h>
#include <set>
#include <vector>
#include <map>
#include <queue>
#include <stdio.h>
#include <stack>
#include <algorithm>
#include <list>
#include <ctime>
#include <memory.h>
#include <assert.h>

#define y0 sdkfaslhagaklsldk
#define y1 aasdfasdfasdf
#define yn askfhwqriuperikldjk
#define j1 assdgsdgasghsf
#define tm sdfjahlfasfh
#define lr asgasgash
#define norm asdfasdgasdgsd

#define eps 1e-9
#define M_PI 3.141592653589793
#define bs 1000000009
#define bsize 350

using namespace std;

const int INF = 1e9;
const int N = 531;

int n, p;
int ar[N][N];

int h[N], v[N];
int which_block[N];

long long block_sum[N], toadd[N];
int ans;
long long VERT[N][N];
long long ANS;

int v_cut[N], h_cut[N];
long long Block_sum[N][N];
long long vsum[N][N];

bool check(long long val)
{
	ans = 0;

	for (int i = 1; i <= p; i++)
	{
		block_sum[i] = 0;
		v[i] = 0;
	}
	for (int i = 1; i <= n; i++)
	{
		for (int j = 1; j <= p; j++)
		{
			toadd[j] = 0;
		}
		for (int j = 1; j <= p; j++)
		{
			toadd[j] += VERT[i][j];
		}
		int shit = 0;
		for (int j = 1; j <= p; j++)
		{
			if (toadd[j] + block_sum[j] > val)
				shit = 1;
			if (toadd[j] > val)
				return false;
		}
		if (shit)
		{
			++ans;
			if (ans == p)
				return false;
			for (int j = 1; j <= p; j++)
			{
				block_sum[j] = 0;
			}
			v[ans] = i - 1;
		}
		for (int j = 1; j <= p; j++)
			block_sum[j] += toadd[j];
	}

	//cout << val << " " << ans << endl;

	/*for (int i = 1; i <= ans; i++)
	{
	cout << "%" << v[i] << " ";
	}
	cout << endl;
	*/
	return (ans < p);
}

int cut_at[N];

void transpose()
{
	for (int i = 1; i <= n; i++)
	{
		for (int j = 1; j <= i; j++)
		{
			swap(ar[i][j], ar[j][i]);
		}
	}


	for (int i = 1; i <= n; i++)
	{
		for (int j = 1; j <= n; j++)
			vsum[i][j] = vsum[i - 1][j] + ar[i][j];
	}

}

vector<vector<long long > > solver(double shi)
{
	for (int i = 1; i <= n; i++)
	{
		which_block[i] = 0;
	}

	for (int i = 1; i <p; i++)
	{
		h[i] = (n*1.0 / p*i + shi);
	}

	h[p] = n;

	for (int j = 1; j <= n; j++)
	{
		for (int i = 1; i <= p; i++)
		{
			VERT[j][i] = vsum[h[i]][j] - vsum[h[i - 1]][j];
			//cout << "%%%" << endl;
			//cout << vsum[h[i] - 1][j] << " " << vsum[h[i - 1]][j] << " " << h[i] - 1 << " " << h[i - 1] << endl;
		}
	}

	long long l, r;
	l = 0;
	r = 1e15;
	if (!check(ANS - 1))
		l = r = ANS + 1;
	else
		r = ANS - 1;

	if (l != r)
	{
		l = r*0.99;
		if (check(l))
			r = l, l = 0;
	}

	while (l < r)
	{
		long long mid = l + r;
		mid /= 2;
		if (check(mid))
			r = mid;
		else
			l = mid + 1;
	}
	//cout << "!" << l << endl;
	check(l);
	vector<vector<long long> > ret;
	vector<long long> temp;
	for (int i = 1; i < p; i++)
	{
		temp.push_back(h[i]);
	}
	ret.push_back(temp);
	temp.clear();

	int S = p + 1;

	for (int i = 1; i <= n; i++)
		cut_at[i] = 0;

	for (int i = 1; i < p; i++)
	{
		cut_at[v[i]] = 1;
		if (v[i] == 0)
		{
			S = i;
			break;
		}
	}

	for (int i = n - 1; i >= 1; --i)
	{
		if (cut_at[i] == 0 && S < p)
		{
			S++;
			cut_at[i] = 1;
		}
	}

	int cnt = 0;
	for (int i = 1; i <= n; i++)
	{
		if (cut_at[i])
		{
			v[cnt + 1] = i;
			++cnt;
		}
	}

	//cout << "@@@" << S << endl;

	for (int i = 1; i < p; i++)
	{
		temp.push_back(v[i]);
	}
	ret.push_back(temp);
	temp.clear();
	temp.push_back(l);
	ret.push_back(temp);

	return ret;
}


bool invalid(vector<long long > v)
{
	for (int i = 0; i < v.size(); i++)
	{
		if (v[i] < 1 || v[i] >= n)
			return true;
	}
	for (int i = 1; i < v.size(); i++)
	{
		if (v[i] <= v[i - 1])
			return true;
	}
	return false;
}

vector<vector<long long> > run_optimizer(vector<vector<long long> > v)
{
	vector<vector<long long> > memo = v;
	int P = 1;

	for (int i = 0; i < P; i++)
	{

		int id = rand() % v[0].size();
		if (rand() % 2)
			v[0][id] += rand() % 2 + 1;
		else
			v[0][id] -= rand() % 2 + 1;
	}
	if (invalid(v[0]))
		return memo;
	return v;
}


vector<vector<long long > > solver_opt(vector<vector<long long> > V)
{
	for (int i = 1; i <p; i++)
	{
		h[i] = (V[0][i - 1]);
	}

	h[p] = n;

	for (int j = 1; j <= n; j++)
	{
		for (int i = 1; i <= p; i++)
		{
			VERT[j][i] = vsum[h[i]][j] - vsum[h[i - 1]][j];
		}
	}

	long long l, r;
	l = 0;
	r = 1e15;
	if (!check(ANS - 1))
		l = r = ANS + 1;
	else
		r = ANS - 1;


	if (l != r)
	{
		l = r*0.99;
		if (check(l))
			r = l, l = 0;
	}


	while (l < r)
	{
		long long mid = l + r;
		mid /= 2;
		if (check(mid))
			r = mid;
		else
			l = mid + 1;
	}
	//cout << "!" << l << endl;
	check(l);
	vector<vector<long long> > ret;
	vector<long long> temp;
	for (int i = 1; i < p; i++)
	{
		temp.push_back(h[i]);
	}
	ret.push_back(temp);
	temp.clear();

	int S = p + 1;

	for (int i = 1; i <= n; i++)
		cut_at[i] = 0;

	for (int i = 1; i < p; i++)
	{
		cut_at[v[i]] = 1;
		if (v[i] == 0)
		{
			S = i;
			break;
		}
	}

	for (int i = n - 1; i >= 1; --i)
	{
		if (cut_at[i] == 0 && S < p)
		{
			S++;
			cut_at[i] = 1;
		}
	}

	int cnt = 0;
	for (int i = 1; i <= n; i++)
	{
		if (cut_at[i])
		{
			v[cnt + 1] = i;
			++cnt;
		}
	}

	//cout << "@@@" << S << endl;

	for (int i = 1; i < p; i++)
	{
		temp.push_back(v[i]);
	}
	ret.push_back(temp);
	temp.clear();
	temp.push_back(l);
	ret.push_back(temp);

	return ret;
}

vector<vector<long long > > solver_perm(vector<long long > V)
{
	for (int i = 1; i <p; i++)
	{
		h[i] = h[i - 1] + V[i - 1];
	}

	h[p] = n;

	for (int i = 1; i <= n; i++)
	{
		for (int j = 1; j <= p; j++)
		{
			VERT[i][j] = 0;
		}
	}

	for (int j = 1; j <= n; j++)
	{
		for (int i = 1; i <= p; i++)
		{
			VERT[j][i] = vsum[h[i]][j] - vsum[h[i - 1]][j];
		}
	}

	long long l, r;
	l = 0;
	r = 1e15;
	if (!check(ANS - 1))
		l = r = ANS + 1;
	else
		r = ANS - 1;

	if (l != r)
	{
		l = r*0.99;
		if (check(l))
			r = l, l = 0;
	}

	while (l < r)
	{
		long long mid = l + r;
		mid /= 2;
		if (check(mid))
			r = mid;
		else
			l = mid + 1;
	}
	//cout << "!" << l << endl;
	check(l);
	vector<vector<long long> > ret;
	vector<long long> temp;
	for (int i = 1; i < p; i++)
	{
		temp.push_back(h[i]);
	}
	ret.push_back(temp);
	temp.clear();

	int S = p + 1;

	for (int i = 1; i <= n; i++)
		cut_at[i] = 0;

	for (int i = 1; i < p; i++)
	{
		cut_at[v[i]] = 1;
		if (v[i] == 0)
		{
			S = i;
			break;
		}
	}

	for (int i = n - 1; i >= 1; --i)
	{
		if (cut_at[i] == 0 && S < p)
		{
			S++;
			cut_at[i] = 1;
		}
	}

	int cnt = 0;
	for (int i = 1; i <= n; i++)
	{
		if (cut_at[i])
		{
			v[cnt + 1] = i;
			++cnt;
		}
	}

	//cout << "@@@" << S << endl;

	for (int i = 1; i < p; i++)
	{
		temp.push_back(v[i]);
	}
	ret.push_back(temp);
	temp.clear();
	temp.push_back(l);
	ret.push_back(temp);

	return ret;
}

vector<long long> R;

int RAND()
{
	int res = 0;
	for (int i = 0; i <= 100; i++)
	{
		res = res * 2 + rand() % 2;
		res %= bs;
	}
	return res;
}

int main(){
	//freopen("fabro.in","r",stdin);
	//freopen("fabro.out","w",stdout);
	//freopen("F:/in.txt", "r", stdin);
	//freopen("F:/output.txt", "w", stdout);
	ios_base::sync_with_stdio(0);
	//cin.tie(0);

	srand(190);
	cin >> n >> p;

	ANS = 1e18;

	for (int i = 1; i <= p; i++)
	{
		R.push_back(n / p);
	}

	for (int i = 0; i < n%p; i++)
	{
		R[i]++;
	}


	for (int i = 1; i <= n; i++)
	{
		for (int j = 1; j <= n; j++)
		{
			cin >> ar[i][j];
			//	ar[i][j] = RAND();
			//		ar[i][j] = rand();
		}
	}

	for (int i = 1; i <= n; i++)
	{
		for (int j = 1; j <= n; j++)
			vsum[i][j] = vsum[i - 1][j] + ar[i][j];
	}

	vector<vector<long long> > V;// = solver(0.1);

	random_shuffle(R.begin(), R.end());

	V = solver_perm(R);

	ANS = V[2][0];

	int II = 0;

	for (double shi = 0; shi < 1; shi += 23.0 / 10)
	{
		//continue;
		++II;

		long long TANS = ANS;
		ANS = 1e18;

		random_shuffle(R.begin(), R.end());
		vector<vector<long long> > temp = solver_perm(R);
		ANS = temp[2][0];
		//cout << ANS << endl;
		int ct = 0;

		for (;;)
		{
			++ct;
			if (ct > 11)
				break;
			//	if (clock()*1.0 / CLOCKS_PER_SEC>0.2*II)
			//		break;
			vector<vector<long long> > here = run_optimizer(temp);
			vector<vector<long long> > temp2 = solver_opt(here);
			if (temp2.back()[0] < temp.back()[0])
			{
				ANS = temp2[2][0];
				temp = temp2;

				transpose();
				swap(temp2[0], temp2[1]);
				vector<vector<long long> > v = solver_opt(temp2);
				transpose();
				swap(v[0], v[1]);

				if (v[2][0] < ANS)
				{
					ANS = v[2][0];
					temp = v;
				}
			}
		}
		//cout << TANS << " " << ANS << endl;

		if (ANS>TANS)
		{
			ANS = TANS;
		}
		else
		{
			V = temp;
		}
		//cout << V[2][0] << endl;
	}

	long long perone = n*n + 10 * n*p;
	long long can = 1e8 / perone;

	for (int i = 1;; i++)
	{
		if (clock()*1.0 / CLOCKS_PER_SEC >1.97)
			break;
		vector<vector<long long> > here = run_optimizer(V);
		vector<vector<long long> > temp = solver_opt(here);
		if (temp.back()[0] < V.back()[0])
		{
			ANS = temp[2][0];
			V = temp;

			transpose();
			swap(temp[0], temp[1]);
			vector<vector<long long> > v = solver_opt(temp);
			transpose();
			swap(v[0], v[1]);

			if (v[2][0] < ANS)
			{
				ANS = v[2][0];
				V = v;
				//cout << ANS << endl;
			}
		}
	}

	//	cout << ANS << endl;

	for (int i = 0; i < p - 1; i++)
	{
		if (i)
			cout << " ";
		cout << V[0][i];
	}
	cout << endl;
	for (int i = 0; i < p - 1; i++)
	{
		if (i)
			cout << " ";
		cout << V[1][i];
	}
	cout << endl;

	cin.get(); cin.get();
	return 0;
}
