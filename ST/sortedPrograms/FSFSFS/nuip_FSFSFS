#include <string>
#include <vector>
#include<iostream>
#include<cstdio>
#include<cstdlib>
#include<stack>
#include<queue>
#include<cmath>
#include<algorithm>
#include<functional>
#include<list>
#include<deque>
#include<bitset>
#include<set>
#include<map>
#include<unordered_map>
#include<cstring>
#include<sstream>
#include<complex>
#include<iomanip>
#include<numeric>
#define X first
#define Y second
#define pb push_back
#define rep(X,Y) for (int (X) = 0;(X) < (Y);++(X))
#define rrep(X,Y) for (int (X) = (Y)-1;(X) >=0;--(X))
#define repe(X,Y) for ((X) = 0;(X) < (Y);++(X))
#define peat(X,Y) for (;(X) < (Y);++(X))
#define all(X) (X).begin(),(X).end()
#define rall(X) (X).rbegin(),(X).rend()
#define eb emplace_back
#define UNIQUE(X) (X).erase(unique(all(X)),(X).end())

using namespace std;
typedef long long ll;
typedef pair<int,int> pii;
typedef pair<ll,ll> pll;
template<class T> using vv=vector<vector<T>>;
template<class T> ostream& operator<<(ostream &os, const vector<T> &t) {
os<<"{"; rep(i,t.size()) {os<<t[i]<<",";} os<<"}"<<endl; return os;}
template<class S, class T> ostream& operator<<(ostream &os, const pair<S,T> &t) { return os<<"("<<t.first<<","<<t.second<<")";}

const int PRIME_MAX=3000;
vector<int> primes;
int prime[PRIME_MAX];
void findPrime(){
  for(int i=2;i<PRIME_MAX;i++)if(!prime[i]){
      primes.pb(i);
      for(int j=i*2;j<PRIME_MAX;j+=i)
	prime[j]=1;
  }
}
const int SQ=54;
int n,m,sp;
ll solve(bool flag=0){
    vector<int> ps;
    for(int p:primes){
      int sum=0;
      for(ll i=p;i<=n;i*=p)
	sum+=n/i;
      if(sum%2) ps.pb(p);
    }
    if(flag)cout<<ps;
    sp=0;
    for(int p:ps) if(p<SQ) ++sp;
    vector<pii> nums;
    rep(i,n+1)if(i>1){
      int f=1,num=i,fact=0;
      rep(j,ps.size()){
	if(ps[j]>SQ)break;
	if(num%ps[j]==0){
	  fact|=1<<j;
	  num/=ps[j];
	  //if(i==33)cout<<f<<","<<num<<","<<ps[j]<<endl;
	  f&=!!(num%ps[j]);
	  //if(i==33)cout<<f<<","<<num<<","<<ps[j]<<endl;
	}
      }
      f&=num==1;
      //if(i==33)cout<<f<<","<<num<<endl;
      if(f) nums.eb(i,fact);
    }
    vector<ll> st(1<<sp);
    st[0]=1;
    for(pii num:nums)
      rep(i,1<<sp){
	if(num.Y&i)continue;
	(st[i|num.Y]+=st[i])%=m;
      }
    if(flag)cout<<nums<<sp<<endl<<st;
    
    vector<ll> dp[2];
    rep(i,2) dp[i].resize(1<<sp);
    dp[0][0]=1;
    int cur=0,nxt=1;
    rrep(i,ps.size()){
      if(ps[i]<SQ)break;
      dp[nxt]=dp[cur];
      for(pii num:nums){
	if(1ll*ps[i]*num.X>n) break;
	rep(j,1<<sp){
	  if(j&num.Y)continue;
	  (dp[nxt][j|num.Y]+=dp[cur][j])%=m;
	}
      }
      swap(cur,nxt);	
    }

    if(flag)cout<<dp[cur];
    ll re=0;
    rep(i,1<<sp)
      (re+=dp[cur][i]*st[((1<<sp)-1)^i]%m)%=m;
    (re*=2)%=m; //1
    return re;
}
void poyo();
int t[1000];
int main(){
  ios_base::sync_with_stdio(false);
  cout<<fixed<<setprecision(0);
  findPrime();
  int T;
  cin>>T;
  while(T--){
    cin>>n>>m;
    cout<<solve()<<endl;
  }
  /*poyo();
  rep(i,501)if(i){
    n=i; m=1e9+7;
    if(t[i]!=solve()){
      cout<<i<<endl;
      cout<<"expected:"<<t[i]<<endl;
      cout<<"found:"<<solve(1)<<endl;
      return 0;
    }
    }*/
  return 0;
}

void poyo(){
t[1]=2;
t[2]=2;
t[3]=2;
t[4]=2;
t[5]=2;
t[6]=2;
t[7]=2;
t[8]=2;
t[9]=2;
t[10]=2;
t[11]=2;
t[12]=2;
t[13]=2;
t[14]=4;
t[15]=4;
t[16]=4;
t[17]=4;
t[18]=2;
t[19]=2;
t[20]=2;
t[21]=4;
t[22]=8;
t[23]=8;
t[24]=2;
t[25]=2;
t[26]=4;
t[27]=8;
t[28]=4;
t[29]=4;
t[30]=2;
t[31]=2;
t[32]=4;
t[33]=18;
t[34]=6;
t[35]=6;
t[36]=6;
t[37]=6;
t[38]=16;
t[39]=8;
t[40]=4;
t[41]=4;
t[42]=30;
t[43]=30;
t[44]=18;
t[45]=8;
t[46]=4;
t[47]=4;
t[48]=2;
t[49]=2;
t[50]=4;
t[51]=16;
t[52]=8;
t[53]=8;
t[54]=2;
t[55]=4;
t[56]=22;
t[57]=126;
t[58]=28;
t[59]=28;
t[60]=2;
t[61]=2;
t[62]=10;
t[63]=8;
t[64]=8;
t[65]=28;
t[66]=16;
t[67]=16;
t[68]=12;
t[69]=4;
t[70]=10;
t[71]=10;
t[72]=2;
t[73]=2;
t[74]=10;
t[75]=46;
t[76]=30;
t[77]=30;
t[78]=2;
t[79]=2;
t[80]=4;
t[81]=4;
t[82]=12;
t[83]=12;
t[84]=110;
t[85]=64;
t[86]=16;
t[87]=4;
t[88]=10;
t[89]=10;
t[90]=6;
t[91]=6;
t[92]=6;
t[93]=28;
t[94]=126;
t[95]=66;
t[96]=2;
t[97]=2;
t[98]=12;
t[99]=14;
t[100]=14;
t[101]=14;
t[102]=12;
t[103]=12;
t[104]=46;
t[105]=62;
t[106]=12;
t[107]=12;
t[108]=62;
t[109]=62;
t[110]=46;
t[111]=12;
t[112]=10;
t[113]=10;
t[114]=8;
t[115]=20;
t[116]=16;
t[117]=28;
t[118]=126;
t[119]=674;
t[120]=6;
t[121]=6;
t[122]=34;
t[123]=254;
t[124]=186;
t[125]=674;
t[126]=44;
t[127]=44;
t[128]=234;
t[129]=52;
t[130]=2;
t[131]=2;
t[132]=14;
t[133]=60;
t[134]=432;
t[135]=264;
t[136]=22;
t[137]=22;
t[138]=564;
t[139]=564;
t[140]=68;
t[141]=14;
t[142]=2;
t[143]=2;
t[144]=2;
t[145]=8;
t[146]=62;
t[147]=440;
t[148]=334;
t[149]=334;
t[150]=8;
t[151]=8;
t[152]=36;
t[153]=54;
t[154]=48;
t[155]=12;
t[156]=46;
t[157]=46;
t[158]=348;
t[159]=54;
t[160]=28;
t[161]=12;
t[162]=114;
t[163]=114;
t[164]=102;
t[165]=120;
t[166]=16;
t[167]=16;
t[168]=46;
t[169]=46;
t[170]=16;
t[171]=28;
t[172]=28;
t[173]=28;
t[174]=674;
t[175]=234;
t[176]=422;
t[177]=76;
t[178]=10;
t[179]=10;
t[180]=2;
t[181]=2;
t[182]=128;
t[183]=1220;
t[184]=96;
t[185]=530;
t[186]=408;
t[187]=314;
t[188]=278;
t[189]=554;
t[190]=14;
t[191]=14;
t[192]=2;
t[193]=2;
t[194]=14;
t[195]=192;
t[196]=192;
t[197]=192;
t[198]=74;
t[199]=74;
t[200]=452;
t[201]=88;
t[202]=12;
t[203]=48;
t[204]=170;
t[205]=52;
t[206]=442;
t[207]=706;
t[208]=1504;
t[209]=1058;
t[210]=14;
t[211]=14;
t[212]=14;
t[213]=146;
t[214]=1482;
t[215]=276;
t[216]=2;
t[217]=12;
t[218]=150;
t[219]=2082;
t[220]=44670;
t[221]=44018;
t[222]=244;
t[223]=244;
t[224]=564;
t[225]=564;
t[226]=46;
t[227]=46;
t[228]=322;
t[229]=322;
t[230]=464;
t[231]=84;
t[232]=6;
t[233]=6;
t[234]=122;
t[235]=788;
t[236]=716;
t[237]=8084;
t[238]=126;
t[239]=126;
t[240]=2;
t[241]=2;
t[242]=22;
t[243]=228;
t[244]=188;
t[245]=1022;
t[246]=10;
t[247]=10;
t[248]=62;
t[249]=556;
t[250]=18;
t[251]=18;
t[252]=36;
t[253]=158;
t[254]=1488;
t[255]=1576;
t[256]=1576;
t[257]=1576;
t[258]=1134;
t[259]=448;
t[260]=230;
t[261]=252;
t[262]=2810;
t[263]=2810;
t[264]=6;
t[265]=46;
t[266]=1536;
t[267]=19888;
t[268]=16860;
t[269]=16860;
t[270]=20;
t[271]=20;
t[272]=10;
t[273]=22;
t[274]=230;
t[275]=464;
t[276]=22;
t[277]=22;
t[278]=2;
t[279]=2;
t[280]=714;
t[281]=714;
t[282]=554;
t[283]=554;
t[284]=500;
t[285]=20;
t[286]=196;
t[287]=44;
t[288]=4;
t[289]=4;
t[290]=232;
t[291]=2652;
t[292]=2188;
t[293]=2188;
t[294]=24;
t[295]=4;
t[296]=40;
t[297]=868;
t[298]=84;
t[299]=64;
t[300]=6;
t[301]=34;
t[302]=386;
t[303]=4986;
t[304]=2648;
t[305]=22222;
t[306]=3558;
t[307]=3558;
t[308]=240;
t[309]=18;
t[310]=28;
t[311]=28;
t[312]=82;
t[313]=82;
t[314]=1078;
t[315]=33910;
t[316]=28970;
t[317]=28970;
t[318]=176;
t[319]=852;
t[320]=120;
t[321]=1586;
t[322]=1986;
t[323]=1986;
t[324]=1986;
t[325]=926;
t[326]=76;
t[327]=6;
t[328]=76;
t[329]=378;
t[330]=830;
t[331]=830;
t[332]=766;
t[333]=1128;
t[334]=14258;
t[335]=2404;
t[336]=30;
t[337]=30;
t[338]=2;
t[339]=32;
t[340]=556;
t[341]=2532;
t[342]=18822;
t[343]=109552;
t[344]=5142;
t[345]=64;
t[346]=1030;
t[347]=1030;
t[348]=9804;
t[349]=9804;
t[350]=124;
t[351]=22;
t[352]=94;
t[353]=94;
t[354]=88;
t[355]=790;
t[356]=738;
t[357]=152;
t[358]=2056;
t[359]=2056;
t[360]=20;
t[361]=20;
t[362]=276;
t[363]=3652;
t[364]=376;
t[365]=3578;
t[366]=16;
t[367]=16;
t[368]=14;
t[369]=16;
t[370]=26;
t[371]=134;
t[372]=1192;
t[373]=1192;
t[374]=276;
t[375]=152;
t[376]=1406;
t[377]=7850;
t[378]=1656;
t[379]=1656;
t[380]=508;
t[381]=36;
t[382]=554;
t[383]=554;
t[384]=544;
t[385]=6674;
t[386]=95016;
t[387]=141630;
t[388]=123918;
t[389]=123918;
t[390]=24;
t[391]=14;
t[392]=218;
t[393]=3658;
t[394]=228;
t[395]=2406;
t[396]=8536;
t[397]=8536;
t[398]=139078;
t[399]=936;
t[400]=936;
t[401]=936;
t[402]=786;
t[403]=4104;
t[404]=3844;
t[405]=428;
t[406]=19008;
t[407]=8980;
t[408]=84;
t[409]=84;
t[410]=8964;
t[411]=142544;
t[412]=124772;
t[413]=28296;
t[414]=874;
t[415]=100;
t[416]=560;
t[417]=36;
t[418]=16;
t[419]=16;
t[420]=18856;
t[421]=18856;
t[422]=318828;
t[423]=441192;
t[424]=18856;
t[425]=8560;
t[426]=7426;
t[427]=1448;
t[428]=1364;
t[429]=16198;
t[430]=94;
t[431]=94;
t[432]=6;
t[433]=6;
t[434]=352;
t[435]=78792;
t[436]=68666;
t[437]=68178;
t[438]=324;
t[439]=324;
t[440]=1898;
t[441]=1898;
t[442]=108;
t[443]=108;
t[444]=914;
t[445]=8292;
t[446]=110976;
t[447]=9132;
t[448]=1594;
t[449]=1594;
t[450]=108;
t[451]=40;
t[452]=40;
t[453]=620;
t[454]=9416;
t[455]=20336;
t[456]=204;
t[457]=204;
t[458]=3308;
t[459]=20122;
t[460]=79288;
t[461]=79288;
t[462]=208;
t[463]=208;
t[464]=108;
t[465]=342;
t[466]=5236;
t[467]=5236;
t[468]=1894;
t[469]=15266;
t[470]=6826;
t[471]=466;
t[472]=5396;
t[473]=2108;
t[474]=1734;
t[475]=1216;
t[476]=278;
t[477]=328;
t[478]=5292;
t[479]=5292;
t[480]=2;
t[481]=8;
t[482]=142;
t[483]=41488;
t[484]=41488;
t[485]=497994;
t[486]=1564;
t[487]=1564;
t[488]=22056;
t[489]=408630;
t[490]=2276;
t[491]=2276;
t[492]=108;
t[493]=74;
t[494]=600;
t[495]=32740;
t[496]=20934;
t[497]=3894;
t[498]=3296;
t[499]=3296;
t[500]=352;
}
