/*********************************************************************\
   |--\        ---       /\        |-----------| -----   /-------|    |
   |   \        |       /  \       |               |    /             |
   |    \       |      /    \      |               |   |              |
   |     \      |     /      \     |               |   |----|         |
   |      \     |    / ------ \    |-------|       |        |-----|   |
   |       \    |   /          \   |               |              |   |
   |        \   |  /            \  |               |              /   |
  ---        -------            ------           ----- |---------/    |
                                                                      |
    codeforces = nfssdq  ||  topcoder = nafis007                      |
    mail = nafis_sadique@yahoo.com || nfssdq@gmail.com                |
    IIT,Jahangirnagar University(41)                                  |
                                                                      |
**********************************************************************/

#include <bits/stdc++.h>

using namespace std;

#define xx         first
#define yy         second
#define pb         push_back
#define mp         make_pair
#define LL         long long
#define inf        INT_MAX/3
#define mod        1000000007ll
#define PI         acos(-1.0)
#define linf       (1ll<<60)-1
#define FOR(I,A,B) for(int I = (A); I < (B); ++I)
#define REP(I,N)   FOR(I,0,N)
#define ALL(A)     ((A).begin(), (A).end())
#define set0(ar)   memset(ar,0,sizeof ar)
#define vsort(v)   sort(v.begin(),v.end())
#define setinf(ar) memset(ar,126,sizeof ar)

//cout << fixed << setprecision(20) << p << endl;

template <class T> inline T bigmod(T p,T e,T M){
    LL ret = 1;
    for(; e > 0; e >>= 1){
        if(e & 1) ret = (ret * p) % M;
        p = (p * p) % M;
    } return (T)ret;
}
template <class T> inline T gcd(T a,T b){if(b==0)return a;return gcd(b,a%b);}
template <class T> inline T modinverse(T a,T M){return bigmod(a,M-2,M);}


struct Bigint {
    // representations and structures
    string a; // to store the digits
    int sign; // sign = -1 for negative numbers, sign = 1 otherwise

    // constructors
    Bigint() {} // default constructor
    Bigint( string b ) { (*this) = b; sign = 1; } // constructor for string

    // some helpful methods
    int size() { // returns number of digits
        return a.size();
    }
    Bigint inverseSign() { // changes the sign
        sign *= -1;
        return (*this);
    }
    Bigint normalize( int newSign ) { // removes leading 0, fixes sign
        for( int i = a.size() - 1; i > 0 && a[i] == '0'; i-- )
            a.erase(a.begin() + i);
        sign = ( a.size() == 1 && a[0] == '0' ) ? 1 : newSign;
        return (*this);
    }

    // assignment operator
    void operator = ( string b ) { // assigns a string to Bigint
        a = b[0] == '-' ? b.substr(1) : b;
        reverse( a.begin(), a.end() );
        this->normalize( b[0] == '-' ? -1 : 1 );
    }

    // conditional operators
    bool operator < ( const Bigint &b ) const { // less than operator
        if( sign != b.sign ) return sign < b.sign;
        if( a.size() != b.a.size() )
            return sign == 1 ? a.size() < b.a.size() : a.size() > b.a.size();
        for( int i = a.size() - 1; i >= 0; i-- ) if( a[i] != b.a[i] )
            return sign == 1 ? a[i] < b.a[i] : a[i] > b.a[i];
        return false;
    }
    bool operator == ( const Bigint &b ) const { // operator for equality
        return a == b.a && sign == b.sign;
    }

    // mathematical operators
    void add() { // addition operator overloading
        for(int i = 0; i < a.size(); i++){
            if(a[i] < '9'){
                a[i]++;
                break;
            }
            a[i] = '0';
            if(i == a.size() - 1) {
                a += "1";
                break;
            }
        }
    }
    Bigint operator + ( Bigint b ) { // addition operator overloading
        if( sign != b.sign ) return (*this) - b.inverseSign();
        Bigint c;
        for(int i = 0, carry = 0; i<a.size() || i<b.size() || carry; i++ ) {
            carry+=(i<a.size() ? a[i]-48 : 0)+(i<b.a.size() ? b.a[i]-48 : 0);
            c.a += (carry % 10 + 48);
            carry /= 10;
        }
        return c.normalize(sign);
    }
    Bigint operator - ( Bigint b ) { // subtraction operator overloading
        if( sign != b.sign ) return (*this) + b.inverseSign();
        int s = sign; sign = b.sign = 1;
        if( (*this) < b ) return ((b - (*this)).inverseSign()).normalize(-s);
        Bigint c;
        for( int i = 0, borrow = 0; i < a.size(); i++ ) {
            borrow = a[i] - borrow - (i < b.size() ? b.a[i] : 48);
            c.a += borrow >= 0 ? borrow + 48 : borrow + 58;
            borrow = borrow >= 0 ? 0 : 1;
        }
        return c.normalize(s);
    }
};

string s, s1, s2;
int main() {
    ios_base::sync_with_stdio(0); cin.tie(0);
    LL a,b = 0,c,d = 0,e = 0,f = 0,g,h = 0,x,y,z = 0;
    cin >> a;
    while(a--){
        cin >> s;
        b = 0;
        s1 = ""; e = -1;
        FOR(i, 1, s.size() + 1){
            if(b) break;
            for(int j = 0; j <= s.size() - i; j++){
                int k = j + i - 1;
                if(j >= i) break;
                s2 = "";
                for(int l = j; l <= k; l++) s2 += s[l];
                Bigint B = Bigint(s2);
                Bigint C = Bigint(s2);
                C = C - Bigint("1");
                int last = k + 1;
                f = 0;
                while(last < s.size()){
                    B.add();
                    for(int l = B.a.size() - 1; l >= 0; l--){
                        if(last >= s.size()) break;
                        if(s[last++] != B.a[l]){
                            f = 1;
                            break;
                        }
                    }
                }
                last = 0;
                for(int l = j - 1; l >= 0; l--){
                    if(last >= C.a.size()){
                        f = 1;
                        break;
                    }
                    if(C.a[last++] != s[l]){
                        f = 1;
                        break;
                    }
                }
                if(f == 0){
                    b = 1;
                    if(s1 == "") {
                        s1 = s2; e = j;
                    }
                    else if(s1 > s2) {
                        s1 = s2; e = j;
                    }
                }
            }
        }
        if(s1.size() == 1){
            cout << s1 << endl;
            continue;
        }
        f = 0; g = 9; h = 0;
        for(LL i = 1; i < s1.size(); i++){
            f += (g*i) % mod;
            h = (h + g) % mod;
            g = (g * 10ll) % mod;
        }
        c = 0;
        for(int i = 0; i < s1.size(); i++){
            c = ((c * 10ll) + s1[i] - '0') % mod;
        }
        c = (c - h - 1 + mod) % mod;
        f = (f + c * (LL)(s1.size())) % mod;
        f = (f + 1) % mod;
        f = (f - e + mod) % mod;
        cout << f << endl;
    }
}
