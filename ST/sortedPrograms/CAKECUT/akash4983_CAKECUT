#include <cstdio>
#include <cmath>
#include <iostream>
#include <set>
#include <algorithm>
#include <vector>
#include <map>
#include <cassert>
#include <string>
#include <cstring>
#include <queue>

using namespace std;

#define rep(i,a,b) for(int i = a; i < b; i++)
#define S(x) scanf("%d",&x)
#define S2(x,y) scanf("%d%d",&x,&y)
#define P(x) printf("%d\n",x)
#define all(v) v.begin(),v.end()
#define FF first
#define SS second

typedef long long int LL;
typedef unsigned long long int ULL;
typedef pair<int, int > pii;
typedef vector<int > vi;

int n,m;

const int N = 1501;
const int BSZ = 6;
const int TMP = (1<<BSZ) - 1;
string s[N];

ULL X[N][N];
ULL tmp[N];

// LL solve(int type, int r1, int r2, int c1, int c2) {
//   LL res = 0;
//   if(!type) {
//     int m = (r1 + r2) >> 1;
//     rep()
//   } else {

//   }
// }

LL f(LL x) {
  return (x * (x + 1)) / 2;
}

int main() {
  S2(n,m);

  int sz = (m + TMP) >> BSZ;
  rep(i,0,n) {
    cin >> s[i];
    int cnt = 0;
    rep(j,0,m) {
      cnt += s[i][j] == '1';
      if((cnt & 1)) {
        X[i][(j>>BSZ)] |= 1LL<<(j & TMP);
      }
    }
  }

  LL ans = 0;
  rep(i,0,n) rep(j,i,n) {
    if(j == i) {
      memset(tmp, 0, sizeof(tmp));
    }
    int one = 0;
    rep(k,0,sz) {
      tmp[k] ^= X[j][k];
      one += __builtin_popcountll(tmp[k]);
    }
    int zero = m - one;

    ans += f(one - 1) + f(zero);
  }

  printf("%lld\n",ans);

  return 0;
}