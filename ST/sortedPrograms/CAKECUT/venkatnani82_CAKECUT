#include <bits/stdc++.h>
using namespace std;
int NumberOfSetBits64(long long i) {
    i = i - ((i >> 1) & 0x5555555555555555);
    i = (i & 0x3333333333333333) +
        ((i >> 2) & 0x3333333333333333);
    i = ((i + (i >> 4)) & 0x0F0F0F0F0F0F0F0F);
    return (i*(0x0101010101010101))>>56;
}
char s[1510][1510];
int sum[1510][1510];
long long bits[1510][40];
int main() {
	int n, m;
	cin >> n >> m;
	for(int i = 1; i <= n; i++) scanf("%s", s[i] + 1);
	for(int i = 1; i <= n; i++) {
		for(int j = 1; j <= m; j++) {
			sum[i][j] = sum[i - 1][j] + sum[i][j - 1] - sum[i - 1][j - 1] + (s[i][j] - '0');
			sum[i][j] &= 1;
		}
	}
	int tot = 0;
	for(int i = 1; i <= n; i++) {
		int tim = 0;
		for(int j = 1; j <= m; j += 60) {
			long long push = 0;
			for(int k = j; k < min(j + 60, m + 1); k++) {
				push = push * 2 + sum[i][k];
			}
			bits[i][tim] = push;
			tim++;
		}
		tot = tim;
	}
	long long ans = 0;
	for(int i = 1; i <= n; i++) {
		for(int j = i; j <= n; j++) {
			int odd = 0;
			for(int k = 0; k < tot; k++) {
				odd += NumberOfSetBits64(bits[j][k] ^ bits[i - 1][k]);
			}
			ans += (odd * 1LL * (odd - 1)) / 2;
			odd = m + 1 - odd;
			ans += (odd * 1LL * (odd - 1)) / 2;
		}
	}
	cout << ans << endl;
}