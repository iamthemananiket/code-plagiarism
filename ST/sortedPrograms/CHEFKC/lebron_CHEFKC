/*
*/

//#pragma comment(linker, "/STACK:16777216")
#define _CRT_SECURE_NO_WARNINGS

#include <fstream>
#include <iostream>
#include <string>
#include <complex>
#include <math.h>
#include <set>
#include <vector>
#include <map>
#include <queue>
#include <stdio.h>
#include <stack>
#include <algorithm>
#include <list>
#include <ctime>
#include <memory.h>
#include <assert.h>

#define y0 sdkfaslhagaklsldk
#define y1 aasdfasdfasdf
#define yn askfhwqriuperikldjk
#define j1 assdgsdgasghsf
#define tm sdfjahlfasfh
#define lr asgasgash
#define norm asdfasdgasdgsd

#define eps 1e-9
#define M_PI 3.141592653589793
#define bs 1000000007
#define bsize 350

using namespace std;

const int INF = 1e9;
const int N = 931;

struct edge
{
	int a;
	int b;
	int cap;
	int flow;
};

vector<edge> e;
vector<int> g[N];
int d[N];
int s, t;
int ptr[N];
int E;
int a[N], b[N], c[N];
int n;

void add_edge(int a, int b, int cap)
{
	edge e1 = { a, b, cap, 0 };
	g[a].push_back(e.size());
	e.push_back(e1);
	edge e2 = { b, a,0, 0 };
	g[b].push_back(e.size());
	e.push_back(e2);
}

bool bfs()
{
	for (int i = 0; i <= n+1; i++)
	{
		d[i] = -1;
	}
	d[s] = 0;
	queue<int> qu;
	qu.push(s);
	while (qu.size())
	{
		int v = qu.front();
		qu.pop();
		for (int i = 0; i < g[v].size(); i++)
		{
			int id = g[v][i];
			if (e[id].flow == e[id].cap)
				continue;
			int to = e[id].b;
			if (d[to] != -1)
				continue;
			d[to] = d[v] + 1;
			qu.push(to);
		}
	}
	return d[t] != -1;
}

int dfs(int v, int flow)
{
	if (v == t||flow==0)
	{
		return flow;
	}
	for (; ptr[v] < g[v].size();ptr[v]++)
	{
		int id = g[v][ptr[v]];
		int to = e[id].b;
		if (d[to] != d[v] + 1)
			continue;
		if (e[id].flow == e[id].cap)
			continue;
		int pushed = dfs(to, min(flow, e[id].cap - e[id].flow));
		if (pushed)
		{
			e[id].flow += pushed;
			e[id ^ 1].flow -= pushed;
			return pushed;
		}
	}
	return 0;
}

long long dinic()
{
	long long flow = 0;
	while (true)
	{
		if (!bfs())
			break;
		for (int i = 0; i <= n+1; i++)
		{
			ptr[i] = 0;
		}
		while (true)
		{
			int pushed = dfs(s,1000000000);
			//cout << pushed << endl;
			if (!pushed)
				break;
			flow += pushed;
		}
	}
	return flow;
}

int USED[N];

void trace_reach(int v)
{
	USED[v] = 1;
	for (int i = 0; i < g[v].size(); i++)
	{
		int id = g[v][i];
		int to = e[id].b;
		if (USED[to])
			continue;
		if (e[id].flow == e[id].cap)
			continue;
		trace_reach(to);
	}
}

string get_cut(string st)
{
	for (int i = 0; i <= n+1; i++)
	{
		g[i].clear();
	}
	
	e.clear();

	for (int i = 0; i < E; i++)
	{
		add_edge(a[i], b[i], c[i]);
	}

	for (int i = 0; i < st.size(); i++)
	{
		if (st[i] == '0')
		{
			add_edge(i + 1, n + 1, 1000000000);
		}
		else
		{
			add_edge(0, i + 1, 1000000000);
		}
	}
	
	s = 0;
	t = n + 1;

	int res = dinic();

	for (int i = 0; i <= n + 1; i++)
	{
		USED[i] = 0;
	}

	trace_reach(0);

	string Res = "";
	for (int i = 1; i <= n; i++)
	{
		if (USED[i])
			Res += "1";
		else
			Res += "0";
	}
	return Res;
}

int k;
int maps[N];
int ANS;

set<pair<int, string> > S;
set<pair<int, string> > ::iterator it;

int eval(string st)
{
	int res = 0;
	for (int i = 0; i < E; i++)
	{
		if (st[a[i] - 1] == '1'&&st[b[i] - 1] == '0')
			res += c[i];
	}
	return res;
}

void add_shit(string st)
{
	if (st[st.size() - 1] == '1')
		st[st.size() - 1] = '0';
	else
		st[st.size() - 1] = '1';
	string RES = get_cut(st);
	S.insert(make_pair(eval(RES), st));
}

int main(){
	//freopen("fabro.in","r",stdin);
	//freopen("fabro.out","w",stdout);
	//freopen("F:/in.txt", "r", stdin);
	//freopen("F:/output.txt", "w", stdout);
	ios_base::sync_with_stdio(0);
	//cin.tie(0);
	
	cin >> n;
	cin >> E;
	cin >> k;
	cin >> s >> t;
	if (s==t)
	while (true);

	maps[s] = 1;
	maps[t] = 2;
	
	int temp = 3;
	for (int i = 1; i <= n; i++)
	{
		if (i == s || i == t)
			continue;
		maps[i] = temp;
		++temp;
	}

	for (int i = 0; i < E; i++)
	{
		cin >> a[i] >> b[i] >> c[i];
		a[i] = maps[a[i]];
		b[i] = maps[b[i]];
	}

	string res = get_cut("10");
	ANS = eval(res);
	//cout << res << endl;

	//cout << ANS << endl;
	//cout << eval(res) << endl;
	
	while (res.size()>2)
	{
		add_shit(res);
		res.erase(res.end()-1);
	}

	//string cur = get_cut("1011");
	//cout << cur << " " << eval(cur) << endl;

	for (int i = 1; i < k; i++)
	{
		it = S.begin();
		ANS = (*it).first;
		//cout << ANS << endl;
		//cout << (*it).second << endl;

		string temp = (*it).second;
		S.erase(it);
		string temp2 = get_cut(temp);
		//cout << temp2 << endl;

		while (temp2.size()>temp.size())
		{
			add_shit(temp2);
			temp2.erase(temp2.end()-1);
		}
	}
	
	cout << ANS << endl;

	cin.get(); cin.get();
	return 0;
}