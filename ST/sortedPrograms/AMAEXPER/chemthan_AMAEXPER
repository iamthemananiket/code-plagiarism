#include <bits/stdc++.h>
using namespace std;

#define ms(s, n) memset(s, n, sizeof(s))
#define FOR(i, a, b) for (int i = (a); i < (b); i++)
#define FORd(i, a, b) for (int i = (a) - 1; i >= (b); i--)
#define FORall(it, a) for (__typeof((a).begin()) it = (a).begin(); it != (a).end(); it++)
#define sz(a) int((a).size())
#define all(a) (a).begin(), (a).end()
#define uni(a) (a).erase(unique(all(a)), (a).end())
#define pb push_back
#define pf push_front
#define mp make_pair
#define fi first
#define se second
#define prec(n) fixed<<setprecision(n)
#define bit(n, i) (((n) >> (i)) & 1)
#define bitcount(n) __builtin_popcount(n)
typedef long long ll;
typedef unsigned long long ull;
typedef long double ld;
typedef pair<int, int> pi;
typedef vector<int> vi;
typedef vector<pi> vii;
const int MOD = (int) 1e9 + 7;
const int INF = (int) 1e9;
const ll LINF = (ll) 1e18;
const ld PI = acos((ld) -1);
const ld EPS = 1e-9;
ll gcd(ll a, ll b) {ll r; while (b) {r = a % b; a = b; b = r;} return a;}
ll lcm(ll a, ll b) {return a / gcd(a, b) * b;}
ll fpow(ll n, ll k, int p = MOD) {ll r = 1; for (; k; k >>= 1) {if (k & 1) r = r * n % p; n = n * n % p;} return r;}
template<class T> inline int chkmin(T& a, const T& val) {return a > val ? a = val, 1 : 0;}
template<class T> inline int chkmax(T& a, const T& val) {return a < val ? a = val, 1 : 0;}
void addmod(int& a, int val, int p = MOD) {if ((a = (a + val)) >= p) a -= p;}
void submod(int& a, int val, int p = MOD) {if ((a = (a - val)) < 0) a += p;}
int mult(int a, int b, int p = MOD) {return (ll) a * b % p;}
int inv(int a, int p = MOD) {return fpow(a, p - 2, p);}

const int maxn = 100010;
int n;
vii adj[maxn];
int p[maxn];
int d[maxn];
int g[maxn];
int ans[maxn];
vii va[maxn];

int compare(pi a, pi b) {
	return mp(d[a.fi], a) > mp(d[b.fi], b);
}

pi dfs(int u, int dad = -1) {
	va[u].clear();
	FOR(i, 0, sz(adj[u])) {
		int v = adj[u][i].fi;
		int w = adj[u][i].se;
		if (v != dad) {
			p[v] = u;
			d[v] = d[u] + w;
			va[u].pb(dfs(v, u));
		}
	}
	if (!sz(va[u])) {
		return mp(u, u);
	}
	sort(all(va[u]), compare);
	pi res = va[u][0];
	int x = sz(va[u]) > 1 ? (d[va[u][1].fi] - d[u]) : 0;
	int cur = res.se;
	int found = 0;
	while (cur != u) {
		int from = p[cur];
		if (!~from) break;
		if (max(d[res.fi] - d[from], x + d[from] - d[u]) < max(d[res.fi] - d[cur], x + d[cur] - d[u])) {
			cur = from;
			found = 1;
		}
		else {
			break;
		}
	}
	res.se = cur;
	ans[u] = max(d[res.fi] - d[res.se], x + d[res.se] - d[u]);
	if (!found) {
		if (res.se >= 0 && res.se < n && ans[u] < g[res.se]) {
//			ans[u] = g[res.se];
		}
//		chkmax(ans[u], f[res.se]);
	}
//	f[res.se] = ans[u];
	return res;
}

void solve() {
	int T; cin>>T;
	while (T--) {
		cin>>n;
		fill_n(ans, n, 0); fill_n(g, n, 0); fill_n(p, n, -1);
		FOR(i, 0, n) adj[i].clear();
		FOR(i, 0, n - 1) {
			int u, v, w; cin>>u>>v>>w; u--; v--;
			adj[u].pb(mp(v, w)); adj[v].pb(mp(u, w));
		}
		d[0] = 0; dfs(0);
		FOR(i, 0, n) cout<<ans[i]<<"\n";
	}
}

int main() {
	ios_base::sync_with_stdio(0); cin.tie(0);
#ifdef _LOCAL_
	freopen("in.txt", "r", stdin); //freopen("out.txt", "w", stdout);
#endif
	solve();
#ifdef _LOCAL_
	//printf("\nTime elapsed: %dms", 1000 * clock() / CLOCKS_PER_SEC);
#endif
	return 0;
}
