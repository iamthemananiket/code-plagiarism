/*
_._._._._._._._._._._._._._._._._._._._._._._._._._._._._._._._._._._._._._._._._._._._._._._._._._._._._._._._.

	Abhinandan Agarwal
_._._._._._._._._._._._._._._._._._._._._._._._._._._._._._._._._._._._._._._._._._._._._._._._._._._._._._._._.*/
#include<bits/stdc++.h>
using namespace std;
#define pc putchar_unlocked
#define gc getchar_unlocked
typedef long long ll;
typedef unsigned long long llu;
#define mp make_pair
#define pb push_back
#define sc(x) scanf("%d",&x)
#define sc2(x,y) scanf("%d%d",&x,&y)
#define sc3(x,y,z) scanf("%d%d%d",&x,&y,&z)
#define scl(x) scanf("%lld",&x)
#define scl2(x,y) scanf("%lld%lld",&x,&y)
#define scl3(x,y,z) scanf("%lld%lld%lld",&x,&y,&z)
#define scstr(x) scanf("%s",x)
#define pd(x) printf("%d",x)
#define pstr(x) printf("%s",x)
#define newl() printf("\n")
#define fl(i,n) for (i=0;i<n;i++)
#define fle(i,n) for (i=1;i<=n;i++)
#define fla(i,a,n) for (i=a;i<n;i++)
#define mem(a,i) memset(a,i,sizeof(a))
#define fi first
#define se second
typedef pair<int,int> pii;
typedef pair<int,pair<int,int> > piii ;
typedef pair<ll,ll> pll;
typedef pair<ll,int> pli;
#define gcd __gcd
#define wl(n) while (n--)
#define debug(x) cout<<"debug->"<<#x<<"::"<<x<<endl
#define debug2(x,y) cout<<#x<<" :: "<<x<<"\t"<<#y<<" :: "<<y<<"\n"
#define debug3(x,y,z) cout<<#x<<" :: "<<x<<"\t"<<#y<<" :: "<<y<<"\t"<<#z<<" :: "<<z<<"\n"
#define tr(container, it)  for(typeof(container.begin()) it = container.begin(); it != container.end(); it++) 
#define all(v) v.begin(),v.end()
const double eps=0.000000000000001 ;
#define MOD 1000000007
typedef long double LF;
typedef double lF;
//-------------
ll inf;
typedef pair<ll,pair<int,int> > kaam;
ll dist[100010][2];
vector<int>gr[100010];
int C[100010],H[100010];
int n,m;
bool vis[100010][2];
int main()
{
	sc2(n,m);
	int i,j;
	inf=(1LL<<60);
	for (i=1;i<=n;i++)
	{
		sc(H[i]);
		dist[i][0]=dist[i][1]=inf;
	}
	for (i=1;i<=n;i++)
		sc(C[i]);
	
	for (i=0;i<m;i++)
	{
		int x,y;
		sc2(x,y);
		gr[x].pb(y);
		gr[y].pb(x);
	}
	dist[1][0]=dist[1][1]=C[1];

	priority_queue<kaam,vector<kaam>,greater<kaam> >pq;
	pq.push(mp(C[1],mp(1,0)));
	pq.push(mp(C[1],mp(1,1))); // dist, node, mode (current)
	while (!pq.empty())
	{
		kaam x=pq.top();
		//printf("got to %d , with mode :%d and distance :%lld\n",x.se.fi,x.se.se,x.fi);
		pq.pop();
		
		if (vis[x.se.fi][x.se.se])
			continue;

		vis[x.se.fi][x.se.se]=true;
		if (vis[n][0]&&vis[n][1])break;
		dist[x.se.fi][x.se.se]=x.fi;
		int z=gr[x.se.fi].size();
		int c=x.se.fi,v;

		for (i=0;i<z;i++)
		{
			v=gr[c][i];
			ll got;
			if (H[v]>=H[c]&&dist[v][1]>dist[c][x.se.se]+(x.se.se==1?0:C[c]))
			{
				dist[v][1]=dist[c][x.se.se]+(x.se.se==1?0:C[c]);
				pq.push(mp(dist[v][1],mp(v,1)));
			}
			if (H[v]<=H[c]&&dist[v][0]>dist[c][x.se.se]+(x.se.se==0?0:C[c]))
			{
				dist[v][0]=dist[c][x.se.se]+(x.se.se==0?0:C[c]);
				pq.push(mp(dist[v][0],mp(v,0)));
			}
			if (H[v]==H[c]&&dist[v][x.se.se]>dist[c][x.se.se])
			{
				dist[v][x.se.se]=dist[c][x.se.se];
				pq.push(mp(dist[v][x.se.se],mp(v,x.se.se)));
			}
		}
	}
	ll ans=min(dist[n][0],dist[n][1]);
	if (ans>=inf)
		printf("-1\n");
	else 
		printf("%lld\n",ans);

	return 0;

}