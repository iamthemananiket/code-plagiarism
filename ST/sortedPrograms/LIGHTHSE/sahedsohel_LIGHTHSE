/***************************************
    codeforces = topcoder = sahedsohel
    IIT,Jahangirnagar University(42)
****************************************/
#include <cassert>
#include <cctype>
#include <climits>
#include <cmath>
#include <cstdio>
#include <cstdlib>
#include <cstring>
#include <iostream>
#include <sstream>
#include <iomanip>
#include <string>
#include <vector>
#include <list>
#include <set>
#include <map>
#include <stack>
#include <queue>
#include <algorithm>
#include <iterator>
#include <utility>
using namespace std;

#define ll long long int
#define ull unsigned long long int
#define inf (INT_MAX/10)
#define linf (LLONG_MAX/10LL)
#define sc(a) scanf("%d",&a)
#define sc2(a,b) scanf("%d%d",&a,&b)
#define sc3(a,b,c) scanf("%d%d%d",&a,&b,&c)
#define sc4(a,b,c,d) scanf("%d%d%d%d",&a,&b,&c,&d)
#define fl(c,i,n) for(i=c;i<n;i++)
#define f(i,n) for(i=0;i<n;i++)
#define mem(a) memset(a,0,sizeof(a))
#define memn(a) memset(a,-1,sizeof(a))
#define pb push_back
#define pp pop_back()
#define aov(a) a.begin(),a.end()
#define mpr make_pair
#define PI (2.0*acos(0.0)) //#define PI acos(-1.0)
#define xx first
#define yy second
#define mxv(a) *max_element(aov(a))
#define mnv(a) *min_element(aov(a))
#define LB(a,x) (lower_bound(aov(a),x)-a.begin())
#define UB(a,x) (upper_bound(aov(a),x)-a.begin())
#define to_c_string(a) a.c_str()
#define strtoint(c) atoi(&c[0])
#define pii pair< int , int >
#define pll pair< ll , ll >
#define pcs(a) printf("Case %d: ", a)
#define nl puts("")
#define dbg(x) cout<<#x<<" : "<<x<<endl

template <class T> inline T bigmod(T p,T e,T M){ll ret = 1;for(; e > 0; e >>= 1){if(e & 1) ret = (ret * p) % M;p = (p * p) % M;}return (T)ret;}
template <class T> inline T gcd(T a,T b){if(b==0)return a;return gcd(b,a%b);}
template <class T> inline T modinverse(T a,T M){return bigmod(a,M-2,M);}   // M is prime}
template <class T> inline T bpow(T p,T e){ll ret = 1;for(; e > 0; e >>= 1){if(e & 1) ret = (ret * p);p = (p * p);}return (T)ret;}

int toInt(string s){int sm;stringstream ss(s);ss>>sm;return sm;}
int toLlint(string s){long long int sm;stringstream ss(s);ss>>sm;return sm;}


///int mnth[]={-1,31,28,31,30,31,30,31,31,30,31,30,31};  //Not Leap Year
///int dx[]={1,1,0,-1,-1,-1,0,1};int dy[]={0,1,1,1,0,-1,-1,-1};//8 direction
///int dx[]={2,1,-1,-2,-2,-1,1,2};int dy[]={1,2,2,1,-1,-2,-2,-1};//Knight Direction
///int dx[]={-1,-1,+0,+1,+1,+0};int dy[]={-1,+1,+2,+1,-1,-2}; //Hexagonal Direction
const double eps=1e-9;
///int dx[]={0,1,0,-1};int dy[]={1,0,-1,0}; //4 Direction

/*****************************************************************/
/// ////////////////////   GET SET GO    ////////////////////// ///
/*****************************************************************/

#define M 100005
#define MD 1000000007LL
#define MX 2000012LL

#define area(i,j,k) (aa[i]*bb[j]+aa[j]*bb[k]+aa[k]*bb[i]-bb[i]*aa[j]-bb[j]*aa[k]-bb[k]*aa[i])
#define intx(i,j,k,l) ((a[i]*b[j]-b[i]*a[j])*(a[k]-a[l])-(a[i]-a[j])*(a[k]*b[l]-b[k]*a[l]))/((a[i]-a[j])*(b[k]-b[l])-(b[i]-b[j])*(a[k]-a[l]))
#define inty(i,j,k,l) ((a[i]*b[j]-b[i]*a[j])*(b[k]-b[l])-(b[i]-b[j])*(a[k]*b[l]-b[k]*a[l]))/((a[i]-a[j])*(b[k]-b[l])-(b[i]-b[j])*(a[k]-a[l]))
#define dst(u,v,x,y) sqrt((x-u)*(x-u)+(y-v)*(y-v))

int x[M],y[M];
int n;

int main()
{
    int t,i,j,k;
    int mxi,myi,nxi,nyi,p1i,p2i;
    ll mx,my,nx,ny;
    pll p1,p2;
    sc(t);
    while(t--)
    {
        p1i=p2i=-1;
        p2=p1=pll(linf,linf);
        my=mx=-linf;
        ny=nx=linf;

        sc(n);
        for(i=1;i<=n;i++)
        {
            scanf("%lld%lld",&x[i],&y[i]);
            if(mx<x[i])
            {
                mx=x[i];
                mxi=i;
            }
            if(my<y[i])
            {
                my=y[i];
                myi=i;
            }
            if(nx>x[i])
            {
                nx=x[i];
                nxi=i;
            }
            if(ny>y[i])
            {
                ny=y[i];
                nyi=i;
            }
            if(p2.yy>y[i])
            {
                p2=pll(x[i],y[i]);
                p2i=i;
                if(p1.yy>p2.yy)
                    swap(p1,p2),swap(p1i,p2i);
            }
        }
        if(y[mxi]==my)
        {
            printf("1\n%d SW\n",mxi);
            continue;
        }
        if(y[mxi]==ny)
        {
            printf("1\n%d NW\n",mxi);
            continue;
        }

        if(y[nxi]==my)
        {
            printf("1\n%d SE\n",nxi);
            continue;
        }
        if(y[nxi]==ny)
        {
            printf("1\n%d NE\n",nxi);
            continue;
        }


        if(x[myi]==mx)
        {
            printf("1\n%d SW\n",myi);
            continue;
        }
        if(x[myi]==nx)
        {
            printf("1\n%d SE\n",myi);
            continue;
        }

        if(x[nyi]==mx)
        {
            printf("1\n%d NW\n",nyi);
            continue;
        }
        if(x[nyi]==nx)
        {
            printf("1\n%d NE\n",nyi);
            continue;
        }


        if(p1.xx>p2.xx)
            swap(p1i,p2i);

        printf("2\n%d NE\n%d NW\n",p1i,p2i);

    }

    return 0;
}
