#include <iostream>
#include <iosfwd>
#include <iomanip>
#include <cstdio>
#include <cstring>
#include <cstdlib>
#include <ctime>
#include <cmath>
#include <cassert>
#include <cctype>
#include <climits>
#include <vector>
#include <bitset>
#include <set>
#include <queue>
#include <stack>
#include <map>
#include <deque>
#include <string>
#include <list>
#include <iterator>
#include <sstream>
#include <complex>
#include <fstream>
#include <functional>
#include <numeric>
#include <utility>
#include <algorithm>
#include <assert.h>
using namespace std;

typedef long long ll;
typedef unsigned long long ull;
typedef double ld;
typedef vector < long long > vll;
typedef pair < long long, long long > pll;
typedef pair < int, int > pii;
typedef vector < int > vii;

#define csl ios_base::sync_with_stdio(false); cin.tie(NULL)
#define mp make_pair
#define fst first
#define snd second
ll t, n, u, v, m, q, r, ql, qr, k, l, s, x, y, w, h, c, z, d, b;
const int N = 1e5 + 500;
const long long mod = 1e9 + 7;
const long long INF = 1LL << 62LL;
const bool JUDGE = false;
ll X[N], D[N];
pll f[2 * N];
int main() {
    csl;
    if (JUDGE) {
        freopen("cricket.in", "r", stdin);
        freopen("cricket.out", "w", stdout);
    }
    cin >> t;
    while (t--) {
        cin >> n >> k;
        for (int i = 0; i < n; ++i) {
            cin >> X[i] >> D[i];
        }
        int j = 0;
        if (k == n) {
            ll x = 1;
            for (int i = 0; i < 100; ++i) {
                x *= 10;
                x %= mod;
            }
            x++;
            x %= mod;
            cout << x << '\n';
            continue;
        }
        for (int i = 0; i < n; ++i) {
            f[j].snd = 0;
            f[j++].fst = X[i] * D[i];
            f[j].snd = 1;
            f[j++].fst = X[i] * D[i] + (X[i] - 1);
        }
        sort(f, f + 2 * n);
        int cnt = 0;
        ll p = 0;
        ll sol = 0;
        for (int i = 0; i < 2 * n; ++i) {
            if (f[i].snd == 0) {
                cnt++;
                if (cnt == n - k) p = f[i].fst;
            } else {
                cnt--;
                if (cnt == n - k - 1) {
                    sol += (f[i].fst - p + 1);
                    sol %= mod;
                }
            }
        }
        cout << sol << '\n';
    }
    return 0;
}



















