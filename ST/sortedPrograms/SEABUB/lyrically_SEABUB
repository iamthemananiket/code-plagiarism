#include <cstdio>
#include <cstdlib>
#include <cstring>
#include <cmath>
#include <cassert>
#include <iostream>
#include <sstream>
#include <string>
#include <vector>
#include <queue>
#include <deque>
#include <set>
#include <map>
#include <utility>
#include <numeric>
#include <algorithm>
#include <bitset>
#include <complex>
#include <unordered_set>
#include <unordered_map>

using namespace std;

typedef unsigned uint;
typedef long long Int;
typedef vector<int> vint;
typedef pair<int,int> pint;
#define mp make_pair

template<typename T> void pv(T a, T b) { for (T i = a; i != b; ++i) cout << *i << " "; cout << endl; }
template<typename T> void chmin(T &t, const T &f) { if (t > f) t = f; }
template<typename T> void chmax(T &t, const T &f) { if (t < f) t = f; }
int in() { int x; scanf("%d", &x); return x; }

const int LIM_N = 105;
const int LIM_K = LIM_N * LIM_N / 2;
double prob[LIM_N + 10][LIM_K + 10];
double probSum[LIM_N + 10][LIM_K + 10];
double probKSum[LIM_N + 10][LIM_K + 10];

int N;
Int K;
int A[110];
double dp[LIM_K + 10];

int main() {
	prob[0][0] = 1.0;
	for (int n = 0; n <= LIM_N; ++n) {
		for (int k = 0; k <= n * (n - 1) / 2; ++k) {
			for (int dk = 0; dk <= n; ++dk) {
				prob[n + 1][k + dk] += prob[n][k] / (n + 1.0);
			}
		}
	}
	for (int n = 0; n <= LIM_N; ++n) {
		for (int k = 0; k <= n * (n - 1) / 2; ++k) {
			probSum[n][k + 1] = probSum[n][k] + prob[n][k];
			probKSum[n][k + 1] = probKSum[n][k] + prob[n][k] * k;
		}
	}
	
	for (int TC = in(); TC--; ) {
		N = in();
		scanf("%lld", &K);
		for (int i = 0; i < N; ++i) {
			A[i] = in();
		}
		
		if (K >= N * (N - 1) / 2) {
			puts("0");
			continue;
		}
		
		dp[0] = N * (N - 1) / 2 / 2.0;
		for (int k = 1; k <= K; ++k) {
			dp[k] = 0.0;
			/*
				max(l - k, 0) vs. dp[k - 1]
			*/
			const int lim = min(k + (int)dp[k - 1], N * (N - 1) / 2);
			dp[k] += (probKSum[N][lim + 1] - probKSum[N][k]) - (probSum[N][lim + 1] - probSum[N][k]) * k;
			dp[k] += (probSum[N][N * (N - 1) / 2 + 1] - probSum[N][lim + 1]) * dp[k - 1];
		}
// pv(dp,dp+K+1);
		
		int cnt = 0;
		for (int i = 0; i < N; ++i) for (int j = i + 1; j < N; ++j) {
			if (A[i] > A[j]) {
				++cnt;
			}
		}
		
		double ans = max(cnt - K, 0LL);
		if (K > 0) {
			chmin(ans, dp[K - 1]);
		}
		printf("%.10f\n", ans);
	}
	
	return 0;
}
