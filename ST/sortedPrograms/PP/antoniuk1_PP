//#include "testlib.h"
//#include <spoj.h>

#include <iostream>
#include <stdio.h>
#include <vector>
#include <string>
#include <algorithm>
#include <math.h>
#include <assert.h>
#include <time.h>
#include <memory.h>
#include <set>
#include <numeric>
#include <map>
#include <queue>
#include <stack>
#include <bitset>

//#include <boost/geometry.hpp>
//#include <boost/geometry/geometries/point_xy.hpp>
//#include <boost/geometry/geometries/polygon.hpp>
//#include <boost/foreach.hpp>

using namespace std;

long long ans;
int p[1111111];
string s[1111111];

struct node {
    int cnt;
    node * next[26];
    node() {
        cnt = 0;
        for(int i = 0; i < 26; ++i)
            next[i] = nullptr;
    }
};

node * root1;
node * root2;

void init() {
    ans = 0;
    root1 = new node();
    root2 = new node();
}

bool isPal(int l, int r, vector<int> & d1, vector<int> & d2) {
    if (l > r) return 1;
    if (l == r) return 1;
    
    if ((r-l+1)%2 == 1) {
        int md = (l+r) >> 1;
        if (md + d1[md] - 1 >= r)
            return 1;
        return 0;
    }
    else {
        int md = (l+r) >> 1; md += 1;
        if (md + d2[md] - 1 >= r)
            return 1;
        return 0;
    }
}

void add(string & s) {
    int n = (int)s.size();
    vector<int> d1 (n);
    int l=0, r=-1, k, i;
    for(i = 0; i < n; i++){
        if(i > r) k = 1;
        else k = min(d1[l + r - i], r - i);
        
        while(0 <= i-k && i+k < n && s[i - k] == s[i + k]) k++;
        d1[i] = k;
        if(i + k - 1 > r)
            r = i + k - 1, l = i - k + 1;
    }
    vector<int> d2 (n);
    l=0, r=-1;
    for(i = 0; i < n; i++){
        if(i > r) k = 0;
        else k = min(d2[l + r - i + 1], r - i + 1);
        
        while(i + k < n && i - k - 1 >= 0 && s[i+k] == s[i - k - 1]) k++;
        d2[i] = k;
        
        if(i + k - 1 > r)
            l = i - k, r = i + k - 1;
    }
    
    
    node * tmp = root1;
    for(int i = (int)s.size()-1; i >= 0; --i) {
        if (tmp->next[s[i]-'a'] == nullptr) {
            tmp = new node();
            break;
        }
        tmp = tmp->next[s[i]-'a'];
        if (tmp->cnt > 0) {
            if (isPal(0, i-1, d1, d2))
                ans += tmp->cnt;
        }
    }
    
    tmp = root2;
    for(int i = 0; i < s.size(); ++i) {
        if (tmp->next[s[i]-'a'] == nullptr) {
            tmp = new node();
            break;
        }
        tmp = tmp->next[s[i]-'a'];
        if (tmp->cnt > 0) {
            if (isPal(i+1, (int)s.size()-1, d1, d2))
                ans += tmp->cnt;
        }
    }
    
    tmp = root1;
    for(int i = 0; i < s.size(); ++i) {
        if (tmp->next[s[i]-'a'] == nullptr)
            tmp->next[s[i]-'a'] = new node();
        tmp = tmp->next[s[i]-'a'];
    }
    tmp->cnt++;
    
    tmp = root2;
    for(int i = (int)s.size()-1; i >= 0; --i) {
        if (tmp->next[s[i]-'a'] == nullptr)
            tmp->next[s[i]-'a'] = new node();
        tmp = tmp->next[s[i]-'a'];
    }
    tmp->cnt++;

    //cout << s << " " << ans << "\n";
}

int cmp(int a, int b) {
    return s[a].length() < s[b].length();
}

int main() {
    ios::sync_with_stdio(0);
    int t;
    cin >> t;
    while (t --> 0) {
        init();
        int n;
        cin >> n;
        for(int i = 0; i < n; ++i) {
            cin >> s[i];
            p[i] = i;
        }
        sort(p, p+n, cmp);
        for(int i = 0; i < n; ++i)
            add(s[p[i]]);
        
        cout << ans << "\n";
    }
    return 0;
}