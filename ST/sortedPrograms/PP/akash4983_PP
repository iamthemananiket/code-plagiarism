#include <cstdio>
#include <cmath>
#include <iostream>
#include <set>
#include <algorithm>
#include <vector>
#include <map>
#include <cassert>
#include <string>
#include <cstring>
#include <queue>

using namespace std;

#define rep(i,a,b) for(int i = a; i < b; i++)
#define S(x) scanf("%d",&x)
#define S2(x,y) scanf("%d%d",&x,&y)
#define P(x) printf("%d\n",x)
#define all(v) v.begin(),v.end()
#define FF first
#define SS second

typedef long long int LL;
typedef pair<int, int > pii;
typedef vector<int > vi;

const int N = 2000006;
int trie[26][N];
int cnt[N], rev[N];
string s[N];
int front;
bool palin[N], revPalin[N];
int P[2*N];
string T;

void insertTrie(string &s) {
  int idx = 0;
  for(int i = s.size()-1; i >= 0; i--) {
    int x = s[i] - 'a';
    if(!trie[x][idx]) {
      trie[x][idx] = ++front;
    }
    idx = trie[x][idx];
  }
  cnt[idx]++;

  idx = 0;
  for(int i = 0; i < s.size(); i++) {
    int x = s[i] - 'a';
    if(!trie[x][idx]) {
      trie[x][idx] = ++front;
    }
    idx = trie[x][idx];
  }
  rev[idx]++;
}

string preProcess(string& s) {
  int n = s.length();
  if (n == 0) return "^$";
  string ret = "^";
  for (int i = 0; i < n; i++)
    ret += "#" + s.substr(i, 1);
 
  ret += "#$";
  return ret;
}

void markPalindromes(string &s) {

  rep(i,0,s.size()) palin[i] = revPalin[i] = false;

  T = preProcess(s);
  reverse(all(T));

  rep(i,0,T.size()+5) P[i] = 0;

  // cout << T << "\n";

  int n = T.length();
  int C = 0, R = 0;
  for (int i = 1; i < n-1; i++) {
    int i_mirror = 2*C-i; // equals to i' = C - (i-C)
    
    P[i] = (R > i) ? min(R-i, P[i_mirror]) : 0;
    
    // Attempt to expand palindrome centered at i
    while (T[i + 1 + P[i]] == T[i - 1 - P[i]])
      P[i]++;
 
    // If palindrome centered at i expand past R,
    // adjust center based on expanded palindrome.
    if (i + P[i] > R) {
      C = i;
      R = i + P[i];
    }
  }
  
  for (int i = 1; i < n-1; i++) {
    // cout << s << " " << P[i] << "\n";
    if(P[i] == i - 1) {
      palin[s.size() - P[i]] = true;
    }
    if(P[i] + i == n-2) {
      // cout << s << " " << i << "\n";
      revPalin[P[i]-1] = true;
    }
  }

}

int main() {
  int t;
  S(t);
  while(t--) {
    rep(i,0,front+1) rep(j,0,26) {
      trie[j][i] = 0;
      cnt[i] = 0;
      rev[i] = 0;
    }
    front = 0;

    int n;
    S(n);
    getchar();
    char ch;
    rep(i,0,n) {
      s[i].clear();
      while((ch = getchar_unlocked()) != ' ' && ch != '\n' && ch != EOF) {
        s[i] += ch;
      }
      insertTrie(s[i]);
    }

    LL ans = 0;
    rep(i,0,n) {
      markPalindromes(s[i]);
      int idx = 0;
      rep(j,0,s[i].size()) {
        if(palin[j]) {
          ans += cnt[idx];
        }
        int x = s[i][j] - 'a';
        if(!trie[x][idx]) break;
        idx = trie[x][idx];
        if(j+1 == s[i].size()) {
          ans += cnt[idx];
          if(palin[0]) ans--;
        }
      }

      idx = 0;
      for(int j = s[i].size()-1; j >= 0; j--) {
        if(revPalin[j]) {
          ans += rev[idx];
        }
        int x = s[i][j] - 'a';
        if(!trie[x][idx]) break;
        idx = trie[x][idx];
      }
    }

    printf("%lld\n",ans);
  }
  return 0;
}