#include <bits/stdc++.h>
 
using namespace std;

typedef long long ll;
typedef double dd;

struct Point {
  int x, y;
  dd ang;
  
  bool operator<(const Point& p) const {
    return ang < p.ang;
  }
  
  bool collinear(const Point& p) const {
    return 1LL*x*p.y == 1LL*y*p.x;
  }
};

const dd EPS = 1e-10;
const dd PI = acos(-1.0);
vector<Point> pts;

int count_btw(dd a, dd b) {
  return upper_bound(pts.begin(), pts.end(), Point{0,0,b}) - lower_bound(pts.begin(), pts.end(), Point{0,0,a});
}

int calc(dd fr, dd to) {
  //(fr, to)
  fr = fmod(fr, 2*PI);
  to = fmod(to, 2*PI);
  if (fr > to) {
    swap(fr, to);
  }
  if (to-fr < PI) {
    return count_btw(fr+EPS, to-EPS);;
  } else {
    return pts.size() - count_btw(fr-EPS, to+EPS);
  }
}

int main() {
  ios::sync_with_stdio(false);
  cin.tie(nullptr);
  int N;
  cin >> N;
  assert(N <= 12000);
  ll res = 0;
  for(int i=0,x,y;i<N;++i) {
    cin >> x >> y;
    dd ang = atan2(y, x);
    if (ang < 0) ang += 2*PI;
    int now = 0;
    Point me = {x, y, ang};
    for(const auto& pt : pts) {
      if (me.collinear(pt))
        continue;
      now += calc(ang+PI, pt.ang+PI);
    }
    pts.push_back(me);
    for(int i=pts.size()-2;i>=0;--i)
      if(pts[i+1] < pts[i])
        swap(pts[i], pts[i+1]);
      else
        break;
    now >>= 1;
    res += now;
    cout << res << '\n';
    cout.flush();
  }
  return 0;  
} 