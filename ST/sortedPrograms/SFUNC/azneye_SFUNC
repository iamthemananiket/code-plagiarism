/*
 * SuperFunction
 * File:   SFUNC.cpp
 * Author: Andy Y.F. Huang (azneye)
 * Created on 2013-12-29, 1:04:41 AM
 */

#include <algorithm>
#include <bitset>
#include <cassert>
#include <cctype>
#include <climits>
#include <cmath>
#include <cstddef>
#include <cstdio>
#include <cstdlib>
#include <cstring>
#include <ctime>
#include <complex>
#include <deque>
#include <fstream>
#include <functional>
#include <iomanip>
#include <iostream>
#include <limits>
#include <list>
#include <map>
#include <numeric>
#include <queue>
#include <set>
#include <sstream>
#include <stack>
#include <string>
#include <utility>
#include <valarray>
#include <vector>

using namespace std;

namespace SFUNC {
template <size_t MAXLEN> class BigUInt {
  static const int BASE = 1000000000;
  int len, digits[MAXLEN];

  void normalize() {
    while (len > 1 && digits[len - 1] == 0)
      len--;
  }

public:

  //TODO: make string constructor
  //  BigUInt(const char* str, int _len) : len(0) {
  //    //memset(digits, 0, MAXLEN);
  //    for (int i = _len - 1; i >= 0; i--)
  //      digits[len++] = str[i] - '0';
  //    normalize();
  //  }

  BigUInt(long long num)
      : len(0) {
    if (num == 0)
      len = 1;
    memset(digits, 0, sizeof(digits));
    for (; num > 0; num /= BASE)
      digits[len++] = num % BASE;
  }

  BigUInt(int num)
      : len(0) {
    if (num == 0)
      len = 1;
    memset(digits, 0, sizeof(digits));
    for (; num > 0; num /= BASE)
      digits[len++] = num % BASE;
  }

  BigUInt()
      : len(1) {
    memset(digits, 0, sizeof(digits));
  }

  BigUInt operator+(const BigUInt& x) const {
    BigUInt res = *this;
    return res += x;
  }

  BigUInt& operator+=(const BigUInt& x) {
    if (x.len > len)
      len = x.len;
    for (int i = 0; i < len; i++) {
      digits[i] += x.digits[i];
      if (digits[i] >= BASE)
        digits[i] -= BASE, digits[i + 1]++;
    }
    if (digits[len] > 0)
      len++;
    return *this;
  }

  BigUInt& operator-(const BigUInt& x) const {
    BigUInt res = *this;
    return res -= x;
  }

  BigUInt& operator-=(const BigUInt& x) {
    if (x.len > len)
      len = x.len;
    for (int i = 0; i < len; i++)
      if ((digits[i] -= x.digits[i]) < 0)
        digits[i] += BASE, digits[i + 1]--;
    normalize();
    return *this;
  }

  BigUInt operator*(const BigUInt& x) const {
    BigUInt res = *this;
    return res *= x;
  }

  BigUInt& operator*=(const BigUInt& x) {
    static long long temp[MAXLEN];
    memset(temp, 0, sizeof(long long) * (len + x.len));
    for (int i = 0; i < len; i++) {
      for (int j = 0, m = i; j < x.len; j++, m++) {
        temp[m] += (long long) (digits[i]) * x.digits[j];
        temp[m + 1] += temp[m] / BASE;
        temp[m] %= BASE;
      }
    }
    len += x.len;
    for (int i = 0; i < len; i++)
      digits[i] = (int) temp[i];
    normalize();
    return *this;
  }

  BigUInt& operator<<=(int amount) {
    if (len == 1 && digits[0] == 0)
      return *this;
    memmove(digits + amount, digits, len << 2);
    memset(digits, 0, amount << 2);
    len += amount;
    return *this;
  }

  BigUInt operator/(const BigUInt& x) const {
    return divide_mod(*this, x).first;
  }

  BigUInt& operator/=(const BigUInt& x) {
    return *this = divide_mod(*this, x).first;
  }

  BigUInt operator%(const BigUInt& x) const {
    return divide_mod(*this, x).second;
  }

  BigUInt& operator%=(const BigUInt& x) {
    return *this = divide_mod(*this, x).second;
  }

  static pair<BigUInt, BigUInt> divide_mod(const BigUInt& a, const BigUInt& b) {
    if (a < b)
      return make_pair(BigUInt(), a);
    pair<BigUInt, BigUInt> ans;
    BigUInt &quot = ans.first, &rem = ans.second;
    for (int i = a.len - 1; i >= 0; i--) {
      rem <<= 1, rem.digits[0] = a.digits[i];
      for (int low = 0, high = BASE - 1, mid; low <= high;) {
        mid = (low + high) >> 1;
        if ((b * mid).compare(rem) <= 0)
          quot.digits[i] = mid, low = mid + 1;
        else
          high = mid - 1;
      }
      rem -= b * quot.digits[i];
    }
    quot.len = a.len, quot.normalize();
    return ans;
  }

  //comparison operators

  bool operator>(const BigUInt& x) const {
    return compare(x) > 0;
  }

  bool operator<(const BigUInt& x) const {
    return compare(x) < 0;
  }

  int compare(const BigUInt& x) const {
    if (len != x.len)
      return len - x.len;
    for (int i = len - 1; i >= 0; i--)
      if (digits[i] != x.digits[i])
        return digits[i] - x.digits[i];
    return 0;
  }

  friend ostream& operator<<(ostream& out, const BigUInt& num) {
    out << num.digits[num.len - 1];
    for (int i = num.len - 2; i >= 0; i--)
      out << setw(9) << setfill('0') << num.digits[i];
    return out;
  }

  int length() const {
    return len;
  }

  int operator[](int pos) const {
    return digits[pos];
  }

  void print() const {
    printf("%d", digits[len - 1]);
    for (int i = len - 2; i >= 0; i--)
      printf("%09d", digits[i]);
  }

  void debug() const {
    cerr << "Len: " << len << ": ";
    for (int i = len - 1; i >= 0; i--)
      cerr << digits[i] << ',';
    cerr << endl;
  }
};

typedef BigUInt<222> Int;
typedef long long ll;
ll mod;

ll mult(ll a, ll b) {
  ll res = 0;
  for (; b > 0; b >>= 1) {
    if (b & 1)
      res = (res + a) % mod;
    a = (a << 1) % mod;
  }
  return res;
}

ll fpow(ll b, int e) {
  ll res = b;
  for (int i = 1; i < e; i++)
    res = mult(res, b);
  //pln(b,e,res);
  return res;
}

ll power_sum(ll n, int k) {
  Int pw[12], N(n);
  pw[0] = 1;
  for (int i = 1; i < 12; i++)
    pw[i] = pw[i - 1] * N;
  //plnarr(pw, pw + 12);
  //pln((pw[2] + pw[1]) / 2);
  Int sum;
  if (k == 1)
    sum = (pw[2] + pw[1]) / 2;
  else if (k == 2)
    sum = (pw[3] * 2 + pw[2] * 3 + pw[1]) / 6;
  else if (k == 3)
    sum = (pw[4] + pw[3] * 2 + pw[2]) / 4;
  else if (k == 4)
    sum = (pw[5] * 6 + pw[4] * 15 + pw[3] * 10 - pw[1]) / 30;
  else if (k == 5)
    sum = (pw[6] * 2 + pw[5] * 6 + pw[4] * 5 - pw[2]) / 12;
  else if (k == 6)
    sum = (pw[7] * 6 + pw[6] * 21 + pw[5] * 21 - pw[3] * 7 + pw[1]) / 42;
  else if (k == 7)
    sum = (pw[8] * 3 + pw[7] * 12 + pw[6] * 14 - pw[4] * 7 + pw[2] * 2) / 24;
  else if (k == 8)
    sum = (pw[9] * 10 + pw[8] * 45 + pw[7] * 60 - pw[5] * 42 + pw[3] * 20 - pw[1] * 3) / 90;
  else if (k == 9)
    sum = (pw[10] * 2 + pw[9] * 10 + pw[8] * 15 - pw[6] * 14 + pw[4] * 10 - pw[2] * 3) / 20;
  else if (k == 10)
    sum = (pw[11] * 6 + pw[10] * 33 + pw[9] * 55 - pw[7] * 66 + pw[5] * 66 - pw[3] * 33 + pw[1] * 5)
        / 66;
  sum %= mod;
  //sum.print();
  ll res = sum[0];
  if (sum.length() > 1)
    res += 1000000000LL * sum[1];
  return res;
}

void solve(int test_num) {
  ll N;
  int K;
  cin >> N >> K >> mod;
  ll res = power_sum(N, K);
  //dbgln(res);
  vector<int> pr;
  ll temp = N;
  for (int i = 2; i <= temp / i; i++) {
    if (temp % i == 0) {
      pr.push_back(i);
      while (temp % i == 0)
        temp /= i;
    }
  }
  if (temp > 1)
    pr.push_back(temp);
  const int P = pr.size();
  for (int m = (1 << P) - 1; m > 0; m--) {
    ll p = 1;
    for (int i = 0; i < P; i++)
      if (1 << i & m)
        p *= pr[i];
    //dbgln(p);
    ll cnt = mult(fpow(p, K), power_sum(N / p, K));
    //dbgln(cnt);
    if (__builtin_popcount(m) & 1)
      res = (res - cnt + mod) % mod;
    else
      res = (res + cnt) % mod;
  }
  cout << res << endl;
}

void solve() {
#ifdef AZN
  freopen("input.txt", "r", stdin);
  freopen("output.txt", "w", stdout);
  freopen("azn.txt", "w", stderr);
#endif
  //power_sum((int)1e12, 10);
  solve(1);
}
}

int main() {
  SFUNC::solve();
  return 0;
}
