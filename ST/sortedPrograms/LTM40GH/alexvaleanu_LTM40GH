#include <iostream>
#include <fstream>
#include <algorithm>
#include <vector>
#include <memory>
#include <cassert>

using namespace std;

///---------------------------------------------------
const int BUFFER_SIZE = (1 << 16);
char buffer[BUFFER_SIZE];
int position = BUFFER_SIZE;

inline char getChar()
{
    if ( position == BUFFER_SIZE )
    {
        position = 0;
        fread(buffer, BUFFER_SIZE, 1, stdin);
    }

    return buffer[position++];
}

inline int getInt()
{
    register int a = 0;
    char ch;
    int sgn = 1;

    do
    {
        ch = getChar();

    } while ( !isdigit(ch) && ch != '-' );

    if ( ch == '-' )
    {
        sgn = -1;
        ch = getChar();
    }

    do
    {
        a = (a << 3) + (a << 1) + ch - '0';
        ch = getChar();

    } while ( isdigit(ch) );

    return a * sgn;
}
///---------------------------------------------------

constexpr int MAX_VALUE = 1'000'000'000;

class Trie{
private:

    static constexpr int MAX_BITS = 29;
    static_assert(((1 << MAX_BITS) < MAX_VALUE) && ((1 << (MAX_BITS + 1)) > MAX_VALUE), "MAX_BITS is set wrong");

    class TrieNode{
    public:

        shared_ptr<TrieNode> child[2];
    };

    shared_ptr<TrieNode> root;

    int isSet(const int value, const int b) const{
        return (value >> b) & 1;
    }

public:

    Trie() : root{new TrieNode}{
    }

    Trie(const Trie &trie) : root{trie.root}{
    }

    Trie& operator=(const Trie& trie) = delete;

    Trie(Trie&& trie) : root{trie.root}{
    }

    Trie& operator=(Trie&& trie){
        this->root = trie.root;
        return *this;
    }

    ~Trie(){
        root = nullptr;
    }

    void insert(const int &value){
        assert(root);
        shared_ptr<TrieNode> auxRoot = this->root;

        for (int b = MAX_BITS; b >= 0; b--){
            int bit = isSet(value, b);

            if (auxRoot->child[bit] == nullptr)
                auxRoot->child[bit].reset(new TrieNode);

            auxRoot = auxRoot->child[bit];
        }
    }

    int maxxor(const int &value) const{
        assert(this->root);

        shared_ptr<TrieNode> auxRoot = this->root;
        int answer = 0;

        for (int b = MAX_BITS; (b >= 0) && (auxRoot != nullptr); b--){
            int bit = isSet(value, b);

            if (auxRoot->child[bit ^ 1]){
                answer ^= (1 << b);
                auxRoot = auxRoot->child[bit ^ 1];
            }
            else if (auxRoot->child[bit])
                auxRoot = auxRoot->child[bit];
            else
                auxRoot = nullptr;
        }

        return answer;
    }
};

template<typename T>
class Vector : public vector<T>{
public:

    const T& operator[](const int &p) const{
        return this->at(p);
    }

    T& operator[](const int &p){
        return this->at(p);
    }
};

constexpr int MAX_N = 100'000;
constexpr int NIL = -1;

struct Edge{
    int node;
    int next;
};

vector<int> graph[MAX_N];
Vector<int> values;

/*Vector<int> head;

Vector<int> sizeSubtree;
Vector<Trie> tries;
Vector<int> maximalUgliness;
Vector<int> valuesInSubtree[MAX_N];
Vector<int> whichTrie;
Vector<int> lazyValue;

void addEdge(int from, int to){
    graph.push_back({to, head[from]});
    head[from] = static_cast<int>(graph.size()) - 1;
}
*/

vector<int> G[MAX_N];

void dfs(int node, int father){
    //int heavySon = NIL;
    //sizeSubtree[node] = 1;

    for (int son : graph[node]){
        if (son != father){
            G[node].push_back(son); ///TO-DO
            dfs(son, node);

            /*sizeSubtree[node] += sizeSubtree[son];

            if (heavySon == NIL || sizeSubtree[heavySon] < sizeSubtree[son])
                heavySon = son;
                */
        }
    }

    /*if (heavySon == NIL){
        maximalUgliness[node] = values[node];
        whichTrie[node] = node;
        tries[whichTrie[node]].insert(values[node]);
        valuesInSubtree[whichTrie[node]].push_back(values[node]);
        lazyValue[whichTrie[node]]= 0;
    }
    else{
        whichTrie[node] = whichTrie[heavySon];

        maximalUgliness[node] = maximalUgliness[heavySon];
        maximalUgliness[node] = max(maximalUgliness[node], tries[whichTrie[node]].maxxor(values[node]));
        maximalUgliness[node] = max(maximalUgliness[node], values[node]);

        lazyValue[whichTrie[node]] = values[node];

        for (int p = head[node]; p != NIL; p = graph[p].next){
            int son = graph[p].node;

            if (son != father && son != heavySon){
                maximalUgliness[node] = max(maximalUgliness[node], maximalUgliness[son]);

                while (!valuesInSubtree[whichTrie[son]].empty()){
                    int e = valuesInSubtree[whichTrie[son]].back();
                    valuesInSubtree[whichTrie[son]].pop_back();

                    e ^= lazyValue[whichTrie[son]];

                    maximalUgliness[node] = max(maximalUgliness[node], values[node] ^ e);

                    int mxor = tries[whichTrie[node]].maxxor(lazyValue[whichTrie[node]] ^ e);
                    maximalUgliness[node] = max(maximalUgliness[node], mxor);

                    tries[whichTrie[node]].insert(e);
                    valuesInSubtree[whichTrie[node]].push_back(e);
                }
            }
        }

        valuesInSubtree[whichTrie[node]].push_back(0);
        tries[whichTrie[node]].insert(0);
    }
    */
}

#include <set>

set<int> setMin[MAX_N], setMax[MAX_N];
vector<int> best;
vector<int> sol;

void bruteDFS(int node, int R, int xorSum){
    best[R] = max(best[R], xorSum);
    setMin[R].insert(xorSum);
    setMax[R].insert(xorSum);

    if (setMin[R].size() > 50)
        setMin[R].erase(*setMin[R].rbegin());

    if (setMax[R].size() > 50)
        setMax[R].erase(*setMax[R].begin());

    for (int v : G[node]){
        bruteDFS(v, R, xorSum ^ values[v]);
    }
}

void simpleDFS(int node){
    for (int v : G[node]){
        simpleDFS(v);
    }

    sol[node] = best[node];

    for (int i = 0; i < G[node].size(); i++){
        Trie trie;
        int u = G[node][i];

        for (int x : setMin[u])
            trie.insert(x);

        for (int x : setMax[u])
            trie.insert(x);

        for (int j = i + 1; j < G[node].size(); j++){
            int v = G[node][j];

            for (int y : setMin[v])
                sol[node] = max(sol[node], trie.maxxor(y ^ values[node]));

            for (int y : setMax[v])
                sol[node] = max(sol[node], trie.maxxor(y ^ values[node]));
        }
    }

    for (int v : G[node])
        sol[node] = max(sol[node], sol[v]);
}

void brute(int N){
    best.clear();
    sol.clear();

    best.resize(N, 0);
    sol.resize(N, 0);

    for (int i = 0; i < N; ++i)
        bruteDFS(i, i, values[i]);

    simpleDFS(0);

    for (int i = 0; i < N; ++i){
        cout << sol[i] << "\n";
    }

   /// cout << endl;
}

int main()
{
    ///freopen("data.in", "r", stdin);

    int T = getInt();

    for (int test = 1; test <= T; ++test){
        int N = getInt();
        assert(1 <= N && N <= MAX_N);

        for (int i = 0; i < N; ++i){
///            valuesInSubtree[i].clear();
            G[i].clear();
            graph[i].clear();
            setMin[i].clear();
            setMax[i].clear();
        }

///        head.clear();
        values.clear();
        values.resize(N);
///        graph.clear();
       /* sizeSubtree.clear();
        tries.clear();
        maximalUgliness.clear();
        whichTrie.clear();
        lazyValue.clear();

        head.resize(N, NIL);
        values.resize(N);
///        graph.resize(2 * N);
        sizeSubtree.resize(N, 0);
        tries.resize(N);
        maximalUgliness.resize(N, NIL);
        whichTrie.resize(N);
        lazyValue.resize(N, 0);
        */



        for (int i = 0; i < N; i++)
            values[i] = getInt();

        for (int i = 1; i <= N - 1; i++){
            int x = getInt();
            int y = getInt();

            x--; y--;

            assert(0 <= x && x < N);
            assert(0 <= y && y < N);
            assert(x != y);

            ///addEdge(x, y);
            ///addEdge(y, x);

            graph[x].push_back(y);
            graph[y].push_back(x);
        }

        dfs(0, -1);

        brute(N);

        ///for (int i = 0; i < N; ++i)
          ///  printf("%d\n", maximalUgliness[i]);

        ///cout << endl;
    }

    return 0;
}
