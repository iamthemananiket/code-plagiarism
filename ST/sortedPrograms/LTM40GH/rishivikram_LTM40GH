#include<bits/stdc++.h>
 
using namespace std;
 
#define ff first
#define ss second
#define pb push_back
#define mp make_pair
#define all(x) x.begin(),x.end()
#define sz(x) ((int)x.size())
#define eps 1e-9
#define fast_cin ios_base::sync_with_stdio(false)
 
const int MOD = 1e9+7;
 
typedef long long ll;
typedef pair<int,int> pii;
 
ll POWER[65];
ll power(ll a, ll b) {ll ret=1;while(b) {if(b&1) ret*=a;a*=a;if(ret>=MOD) ret%=MOD;if(a>=MOD) a%=MOD;b>>=1;}return ret;}
ll inv(ll x) {return power(x,MOD-2);}
 
void precompute() {
	POWER[0]=1;
	for(int i=1;i<63;i++) POWER[i]=POWER[i-1]<<1LL;
}
const int MAXN = 1e5+5;
vector<int> adj[MAXN];
int ar[MAXN];
int to[MAXN];
set<int> st[MAXN];
int ans[MAXN];
typedef struct node* pnode;
struct node {
	pnode l, r;
	node() {
		l=r=NULL;
	}
};
pnode trie[MAXN];
pnode upd(pnode rt, int x, int lev) {
	if(lev==-1) return rt;
	if(POWER[lev]&x) {
		if(rt->r==NULL) rt->r = new node();
		rt->r=upd(rt->r,x,lev-1);
	}
	else {
		if(rt->l==NULL) rt->l = new node();
		rt->l=upd(rt->l,x,lev-1);
	}
	return rt;
}
void update(int r, int x) {
	pnode rt = trie[r];
	rt = upd(rt, x, 30);
}
int que(pnode rt, int x, int lev) {
	if(lev==-1) return 0;
	if(x&POWER[lev]) {
		if(rt->l!=NULL) return POWER[lev]+que(rt->l,x,lev-1);
		return que(rt->r,x,lev-1);
	}
	else {
		if(rt->r!=NULL) return POWER[lev]+que(rt->r,x,lev-1);
		return que(rt->l,x,lev-1);
	}
}
int query(int r, int x) {
	return que(trie[r], x, 30);
}
void dfs(int s, int par=-1) {
	for(auto it:adj[s]) {
		if(it==par) continue;
		to[it]=to[s]^ar[it];
		dfs(it,s);
	}
}
int DFS(int s, int par=-1) {
	int r = s;
	int answer = ar[s];
	for(auto it:adj[s]) {
		if(it==par) continue;
		int x = DFS(it,s);
		answer=max(answer,ans[it]);
		answer = max(answer, query(x,to[s]^ar[s]));
		if(sz(st[x])>sz(st[r])) swap(r,x);
		for(auto it:st[x]) {
			int p = it^ar[s];
			int z = query(r,p);
			answer=max(answer,z);
		}
		for(auto it:st[x]) {
			st[r].insert(it);
			update(r,it);
		}
	}
	ans[s]=answer;
	st[r].insert(to[s]);
	update(r,to[s]);
	return r;
}
int main() {
	// freopen("TASK.in","r",stdin);freopen("TASK.out","w",stdout);
	precompute();
	int t;
	cin>>t;
	while(t--) {
		int n;
		scanf("%d",&n);
		for(int i=1;i<=n;i++) {
			scanf("%d",&ar[i]);
			adj[i].clear();
			st[i].clear();
			trie[i]=NULL;
			trie[i]=new node();
		}
		for(int i=1;i<n;i++) {
			int x,y;
			scanf("%d%d",&x,&y);
			adj[x].pb(y);
			adj[y].pb(x);
		}
		to[1]=ar[1];
		dfs(1);
		DFS(1);
		for(int i=1;i<=n;i++) printf("%d\n",ans[i]);
	}
	return 0;
}
 