#include <bits/stdc++.h>

using namespace std;

const int N=1e5+10;
const int maxlog=30;
int n;
int wp[N],w[N];


struct node{
    node *link[2];
    node (){
        for(int i=0;i<=1;i++) link[i]=NULL;
    }
};
int q[N],pa[N];
int ans[N];
node *root[N];

vector <int> v[N],gr[N];
int spe[N];
void BFS(){
    q[1]=1;
    int top=1,bot=1;
    while (top<=bot){
        int x=q[top++];
        for(auto y:v[x]) if (y!=pa[x]){
            pa[y]=x;
            q[++bot]=y;
        }
    }
}
void trieinsert(node *root,int val){
    for(int i=maxlog;i>=0;i--){
        int cur=(val&(1<<i))>0;
        if (root->link[cur]==NULL) root->link[cur]=new node();
        root=root->link[cur];
    }
}
int findmaxxor(node *root,int val){
    int ans=0;
    for(int i=maxlog;i>=0;i--){
        int cur=(val&(1<<i))>0;
        if (root->link[cur^1]!=NULL){
            ans|=1<<i;
            root=root->link[cur^1];
        }else root=root->link[cur];
    }
    return ans;
}
void prepare(){
    scanf("%d",&n);
    for(int i=1;i<=n;i++) scanf("%d",w+i);
    for(int i=1;i<=n;i++) v[i].clear();
    for(int i=1;i<n;i++){
        int x,y;
        scanf("%d%d",&x,&y);
        v[x].push_back(y);
        v[y].push_back(x);
    }
    BFS();
    for(int i=1;i<=n;i++)
        wp[q[i]]=w[q[i]]^wp[pa[q[i]]];
    for(int i=1;i<=n;i++) gr[i].clear();
}
void solve(){
    fill(ans+1,ans+n+1,0);
    for(int i=n;i>=1;i--){
        int x=q[i];
        if (v[x].size()==(pa[x]>0)){
            root[x]=new node();
            spe[x]=x;
        }else{
            spe[x]=0;
            for(auto y:v[x]) if (y!=pa[x]&&gr[spe[y]].size()>gr[spe[x]].size()) spe[x]=spe[y];
            root[x]=root[spe[x]];
            for(auto y:v[x]) if (y!=pa[x]) ans[x]=max(ans[x],ans[y]);
            for(auto y:v[x]) if (y!=pa[x]&&spe[y]!=spe[x]){
                for(auto ys:gr[spe[y]]) ans[x]=max(ans[x],findmaxxor(root[x],wp[ys]^w[x]));
                for(auto ys:gr[spe[y]]){
                    gr[spe[x]].push_back(ys);
                    trieinsert(root[x],wp[ys]);
                }
            }
        }
        trieinsert(root[x],wp[x]);
        gr[spe[x]].push_back(x);
        ans[x]=max(ans[x],findmaxxor(root[x],wp[x]^w[x]));
    }
//    for(int i=1;i<=n;i++) cout<<spe[i]<<" ";printf("\n");
    for(int i=1;i<=n;i++) printf("%d\n",ans[i]);
}
int main(){
    int test;
    scanf("%d",&test);
    while (test--){
        prepare();
        solve();
    }
}
