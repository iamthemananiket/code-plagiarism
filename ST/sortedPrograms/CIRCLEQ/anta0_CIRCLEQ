#include "bits/stdc++.h"
using namespace std;
#define rep(i,n) for(int (i)=0;(i)<(int)(n);++(i))
#define rer(i,l,u) for(int (i)=(int)(l);(i)<=(int)(u);++(i))
#define reu(i,l,u) for(int (i)=(int)(l);(i)<(int)(u);++(i))
static const int INF = 0x3f3f3f3f; static const long long INFL = 0x3f3f3f3f3f3f3f3fLL;
typedef vector<int> vi; typedef pair<int, int> pii; typedef vector<pair<int, int> > vpii; typedef long long ll;
template<typename T, typename U> static void amin(T &x, U y) { if(y < x) x = y; }
template<typename T, typename U> static void amax(T &x, U y) { if(x < y) x = y; }

inline int sq(int x) { return x * x; }
inline double sq(double x) { return x * x; }
inline double sqrt(int x) { return sqrt((double)x); }
inline double integrate(double r, double x) {
	double s = sqrt(max(0., sq(r) - sq(x)));
	return (x * s + sq(r) * atan2(x, s)) / 2;
}
inline double integrate(double r, double xL, double xR, double y0) {
	return integrate(r, xR) - integrate(r, xL) - y0 * (xR - xL);
}

struct Circle {
	int r, cx, cy;
};
struct Query {
	int i;
	int L, R;
	int sign;
};

class RangeSumQuery {
public:
	typedef double Val;
	typedef double Sum;

	void init(int N, int BucketSize) {
		this->BucketSize = BucketSize;
		this->NumBuckets = (N - 1) / BucketSize + 1;
		values.assign(N, Sum());
		buckets.assign(NumBuckets, Sum());
	}

	void add(int i, Val val) {
		values[i] += val;
		buckets[i / BucketSize] += val;
	}

	Sum query(int L, int R) const {
		int bL = (L + BucketSize - 1) / BucketSize;
		int bR = R / BucketSize;
		Sum sum = Sum();
		if(bL >= bR) {
			for(int i = L; i < R; ++ i)
				sum += values[i];
		} else {
			int A = bL * BucketSize, B = bR * BucketSize;
			for(int i = L; i < A; ++ i)
				sum += values[i];
			for(int i = bL; i < bR; ++ i)
				sum += buckets[i];
			for(int i = B; i < R; ++ i)
				sum += values[i];
		}
		return sum;
	}
	
private:
	int BucketSize, NumBuckets;
	vector<Sum> values;
	vector<Sum> buckets;
};

int main() {
	const int MaxR = 50;
	static double gridArea[MaxR + 1][MaxR + 1][MaxR + 1];
	for(int r = 1; r <= MaxR; ++ r) {
		rep(y, r) rep(x, y + 1) {
			double &a = gridArea[r][y][x];
			if(sq(y) + sq(x) >= sq(r)) {
				a = 0;
			} else if(sq(y + 1) + sq(x + 1) <= sq(r)) {
				a = 1;
			} else if(sq(y + 1) + sq(x) <= sq(r)) {
				double ix = sqrt(sq(r) - sq(y + 1));
				a = (ix - x) + integrate(r, ix, x + 1, y);
			} else if(sq(y) + sq(x + 1) <= sq(r)) {
				a = integrate(r, x, x + 1, y);
			} else {
				double ix = sqrt(sq(r) - sq(y));
				a = integrate(r, x, ix, y);
			}
		}
		rep(y, r) reu(x, y + 1, r)
			gridArea[r][y][x] = gridArea[r][x][y];
		double sum = 0;
		rep(y, r) rep(x, r)
			sum += gridArea[r][y][x];
	}
	int N; int Q;
	while(~scanf("%d%d", &N, &Q)) {
		const int MaxX = 51000, MaxX2 = MaxX + MaxR * 2;
		vector<vector<Circle>> circles(MaxX2 + 1);
		rep(i, N) {
			int cx, cy, r;
			scanf("%d%d%d", &cx, &cy, &r);
			assert(0 <= cx && cx <= MaxX && 0 <= cy && cy <= MaxX);
			cx += MaxR, cy += MaxR;
			Circle c{ r, cx, cy };
			rer(dy, -r, r - 1)
				circles[cy + dy].push_back(c);
		}
		vector<vector<Query>> queries(MaxX2 + 1);
		rep(i, Q) {
			int x1, y1, x2, y2;
			scanf("%d%d%d%d", &x1, &y1, &x2, &y2);
			assert(0 <= x1 && x1 <= x2 && x2 <= MaxX && 0 <= y1 && y1 <= y2 && y2 <= MaxX);
			x1 += MaxR, y1 += MaxR, x2 += MaxR, y2 += MaxR;
			queries[y2].push_back(Query{ i, x1, x2, +1 });
			queries[y1].push_back(Query{ i, x1, x2, -1 });
		}
		vector<double> ans(Q, 0.);
		RangeSumQuery rsq;
		rsq.init(MaxX2 + 1, 300);
		rer(y, 0, MaxX2) {
			for(const Query &q : queries[y]) {
				ans[q.i] += rsq.query(q.L, q.R) * q.sign;
			}
			for(const Circle &c : circles[y]) {
				int r = c.r, cx = c.cx, cy = c.cy;
				int dy = y < cy ? cy - y - 1 : y - cy;
				for(int dx = -r; dx < 0; ++ dx)
					rsq.add(cx + dx, gridArea[r][dy][-dx - 1]);
				for(int dx = 0; dx < r; ++ dx)
					rsq.add(cx + dx, gridArea[r][dy][dx]);
			}
		}
		rep(i, Q)
			printf("%.10f\n", ans[i]);
		break;
	}
	return 0;
}
