#include "bits/stdc++.h"
using namespace std;
int t;
long long n , m , z , l , r , b;
long long ans;
/*namespace brute{
    int dp[7][7][7][7][7][7][7][7][7];
    int solve(int N , int M , int n , int m , int z , int l , int r , int b , int last){
        if(min(min(l , r) , min(z , b)) < 0){
            return -1000000;
        }
        if(m > M){
            m = 1;
            ++n;
        }
        if(n > N){
            return 0;
        }
        if(dp[N][M][n][m][z][l][r][b][last] != -1){
            return dp[N][M][n][m][z][l][r][b][last];
        }
        int res = 0;
        if(m == 1){
            res = max(res , solve(N , M , n , m + 1 , z - 1 , l , r , b , 0) + 1);
            res = max(res , solve(N , M , n , m + 1 , z , l - 1 , r , b , 1) + 1);
            res = max(res , solve(N , M , n , m + 1 , z , l , r - 1 , b , 2) + 1);
            res = max(res , solve(N , M , n , m + 1 , z , l , r , b - 1 , 3) + 1);
        }
        else{
            res = max(res , solve(N , M , n , m + 1 , z - 1 , l , r , b , 0) + 1);
            if(last < 2){
                res = max(res , solve(N , M , n , m + 1 , z , l - 1 , r , b , 1) + 1);
            }
            res = max(res , solve(N , M , n , m + 1 , z , l , r - 1 , b , 2) + 1);
            if(last < 2){
                res = max(res , solve(N , M , n , m + 1 , z , l , r , b - 1 , 3) + 1);
            }
        }
        res = max(res , solve(N , M , n , m + 1 , z , l , r , b , 0));
        return dp[N][M][n][m][z][l][r][b][last] = res;
    }
    int call(){
        return solve(n , m , 1 , 1 , z , l , r , b , 0);
    }
};*/
int main(){
    //memset(brute::dp , -1 , sizeof(brute::dp));
    scanf("%d" , &t);
    while(t--){
        scanf("%lld %lld %lld %lld %lld %lld" , &n , &m , &z , &l , &r , &b);
        vector < long long > v = {n , m , z , l , r , b};
        //int tempans = brute::call();
        if(m == 1){
            //assert(tempans == min(n , z + l + r + b));
            printf("%lld\n" , min(n , z + l + r + b));
            continue;
        }
        if(z + l + r >= n * m){
            //assert(tempans == n * m);
            printf("%lld\n" , n * m);
            continue;
        }
        ans = z;
        l += r;
        r = 0;
        if(l){
            if(!(m & 1)){
                ans += min(l , n);
                l -= min(l , n);
                --m;
            }
        }
        if(m == 1){
            ans += min(n , b + l);
        }
        else{
            long long temp = min(n , l / (m - 1));
            ans += temp * (m - 1);
            l -= temp * (m - 1);
            n -= temp;
            if(b >= temp){
                ans += temp;
                b -= temp;
            }
            else{
                ans += b;
                temp -= b;
                b = 0;
                ans += min(temp , l);
                l = max(0LL , l - temp);
            }
            if(n >= 1){
            //cout << ans << " " << l << " " << b << " " << n << endl;
                if(l){
                    long long lft = 0;
                    if((m - l) & 1){
                        ans += l;
                        lft = m - l;
                        l = 0;
                    }
                    else{
                        ans += l - 1;
                        lft = m - l + 1;
                        l = 1;
                        if(!(m & 1)){
                            if(n != 1){
                                ++ans;
                                l = 0;
                            }
                        }
                    }
                //cout << ans << " " << l << " " << b << " " << n << " " << lft << endl;
                    long long req = (lft >> 1) + (lft & 1);
                    if(b >= req){
                        ans += req;
                        b -= req;
                    }
                    else{
                        ans += b;
                        b = 0;
                        if(l){
                            ans += l;
                            l = 0;
                        }
                    }
                    --n;
                }
                //cout << ans << " " << l << " " << b << " " << n << endl;
                if(n >= 1){
                    temp = (m >> 1) + (m & 1);
                    temp *= n;
                    if(b < temp){
                        ans += l;
                    }
                    else{
                        if(!(m & 1)){
                            ans += l;
                            l = 0;
                        }
                    }
                    ans += min(temp , b);
                }
            }
        }
        ans = min(ans , v[0] * v[1]);
        ans = max(0LL , ans);
        /*if(tempans != ans){
            for(auto it : v){
                cout << it << " ";
            }
            cout << endl << tempans << " " << ans << endl;
        }*/
        printf("%lld\n" , ans);
    }
}   