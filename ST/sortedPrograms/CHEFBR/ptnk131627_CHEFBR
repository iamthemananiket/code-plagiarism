#include <bits/stdc++.h>

using namespace std;

#define X first
#define Y second
#define INPUT freopen("chefbr.inp","r",stdin)
#define OUTPUT freopen("chefbr.out","w",stdout)
#define FOR(i,l,r) for(int i=l;i<=r;i++)
#define REP(i,l,r) for(int i=l;i<r;i++)
#define FORD(i,l,r) for(int i=l;i>=r;i--)
#define REPD(i,l,r) for(int i=l;i>r;i--)
#define ENDL printf("\n")
#define debug 1

typedef long long ll;
typedef pair<int,int> ii;

const int inf=2e9;
const int MOD=1e9+7;
const int N=1e2+10;

int n,a[N],f[N][N]={0},g[N][N]={0};
vector <int> p[N];
void prepare(){
    scanf("%d",&n);
    FOR(i,1,n) scanf("%d",a+i);
    FOR(i,1,n) a[i]=-a[i];
}
void solve(){
    FOR(i,1,n) if (a[i]>0) {
        FOR(j,i+1,n) if (a[j]+a[i]==0) p[i].push_back(j);
    }else FORD(j,i-1,1) if (a[j]+a[i]==0) p[i].push_back(j);
    int ans=0;
    FOR(length,1,n-1)
        FOR(x,1,n-length) {
            int y=x+length;
            if (a[x]>0&&a[y]<0) {
                int sumR=0;
                FORD(i,y-1,x+1) sumR=(sumR+f[i][y])%MOD;
                int R=x+1;
                for(int L=0;L<p[x].end()-p[x].begin()&&p[x][L]<y;L++){
                    while (R<=p[x][L]){
                        sumR=(sumR+MOD-f[R][y])%MOD;
                        R++;
                    }
                    f[x][y]=(f[x][y]+(1LL*f[x][p[x][L]]*sumR)%MOD)%MOD;
                }
                if (a[x]+a[y]==0) f[x][y]=(f[x][y]+g[x+1][y-1]+1)%MOD;
            }
            g[x][y]=(1LL*f[x][y]+g[x][y-1]+g[x+1][y]-g[x+1][y-1])%MOD;
    }
    printf("%d\n",g[1][n]+1);
}
int main(){
    //INPUT;
    prepare();
    solve();
}
