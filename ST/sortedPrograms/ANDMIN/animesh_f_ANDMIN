#include "bits/stdc++.h"
using namespace std;

const int N = 1e5 + 5;
const int LN = 31;

set < int > bit[LN];
int n;
int arr[N], tree[N * 4];

inline void update(int node, int l, int r, int idx, int val){
	if(l == r){
		tree[node] = val;
		return;
	}
	int mid = (l + r) >> 1;
	if(mid >= idx) update(node * 2, l, mid, idx, val);
	else update(node * 2 + 1, mid + 1, r, idx, val);
	tree[node] = min(tree[node * 2], tree[node * 2 + 1]);
}

inline int query(int node, int l, int r, int qs, int qe){
	if(l > qe || r < qs) return (INT_MAX);
	if(l >= qs && r <= qe) return tree[node];
	int mid = (l + r) >> 1;
	return min(query(node * 2, l, mid, qs, qe), query(node * 2 + 1, mid + 1, r, qs, qe));
}


int main(){
	ios :: sync_with_stdio(false);
	int n, q;
	cin >> n >> q;
	for(int i = 1; i <= n; i++) cin >> arr[i];
	for(int i = 1; i <= n; i++){
		for(int j = 0; j < LN; j++){
			if(arr[i] & (1 << j)) bit[j].insert(i);
		}
		update(1, 1, n, i, arr[i]);
	}
	while(q--){
		int type;
		cin >> type;
		if(!type){
			int l, r;
			cin >> l >> r;
			cout << query(1, 1, n, l, r) << '\n';
		}
		else{
			int l, r, x;
			cin >> l >> r >> x;
			for(int i = 0; i < LN; i++){
				if(!(x & (1 << i))){
					auto it = bit[i].lower_bound(l);
					while((it != bit[i].end()) && (*it <= r)){
						int index = *it;
						auto it2 = it; it2++;
						arr[index] ^= (1 << i);
						update(1, 1, n, index, arr[index]);
						bit[i].erase(it);
						it = it2;
					} 
				}
			}
		}
	}
}