#include <bits/stdc++.h>
#include<ext/pb_ds/assoc_container.hpp>
#include<ext/pb_ds/tree_policy.hpp>
// #include <boost/multiprecision/cpp_int.hpp> 

#define gc getchar//_unlocked
#define pc putchar//_unlocked
#define ll long long
#define ld long double
#define pb push_back
#define mp make_pair
#define pp pair<int,int>
#define bigint boost::multiprecision::cpp_int
#define finp ios_base::sync_with_stdio(0);cin.tie(0);
#define bc __builtin_popcount
#define afor(i,a,b) for(int i=a;i<=b;++i)
#define bfor(i,a,b) for(int i=a;i>=b;--i)
#define vi vector<int>
#define vpp vector<pp>
#define vll vector<ll>

using namespace std;
using namespace __gnu_pbds;

char putnb[20];
void putn(ll n) {if(!n)pc('0');if(n<0)pc('-'),n=0-n;int pi=0;while(n)putnb[pi++]=(n%10)+'0',n/=10;while(pi)pc(putnb[--pi]);}
void sci(int *x) {register char c = gc();*x = 0;for(; (c<48)||(c>57);c = gc());for(; (c>47)&&(c<58);c = gc())*x = (int)((((*x)<<1) + ((*x)<<3)) + c - 48);}
void scll(ll *x)  {register char c = gc();*x = 0;for(; (c<48)||(c>57);c = gc());for(; (c>47)&&(c<58);c = gc())*x =  (ll)((((*x)<<1) + ((*x)<<3)) + c - 48);}
ll fp(ll a,ll b,ll c) {if(b==0)return 1%c; if(b==1)return a%c; ll ret=fp(a,b/2,c); ret=(ret*ret)%c; if(b&1)ret=(ret*a)%c; return ret;}

const ll mod=1e9 +7;
const ll mod2=1999999973;
const ll inf=1e18;
const int infs=1e9 + 1000;
const int N=100000;
const long double PI = acos(-1);

template <typename T>
using ordered_set = tree<T, null_type, less<T>, rb_tree_tag, tree_order_statistics_node_update>;

ll trmin[4*N + 5];
ll trbit[4*N + 5];
ll lazy[4*N + 5];
ll A[N+5];
ll n,q;

void build(int node,int a,int b)
{
  if(a>b)return;
  if(a==b)
  {
    trmin[node]=A[a];
    trbit[node]=lazy[node]=(1LL << 32LL) - 1;
    return;
  }

  int mid = (a + b) >> 1;
  build(node*2  ,a,mid);
  build(node*2 +1 ,mid+1,b);

  trmin[node] = min(trmin[node*2],trmin[node*2 + 1]);
  trbit[node] = lazy[node] =(1LL << 32LL) - 1;
}

void update(int node,int a,int b,int i,int j,ll val)
{
  if(a>b || i>j)return;
  
    if(a>=i && b<=j)lazy[node]&=val;
    
    if(a==b)
    {
        trbit[node]&=lazy[node];
        trmin[node]&=trbit[node];
        return;
    }
    
    if((trbit[node] & lazy[node])==trbit[node])
    {
      if(a>j || b<i)return; 
      if(a>=i && b<=j)return;
    }
    
    trbit[node]&=lazy[node];
    lazy[node*2]&=lazy[node];
    lazy[node*2 + 1]&=lazy[node];
    
    int mid = (a + b) >> 1;

    update(node*2 ,a,mid,i,j,val);
    update(node*2 + 1,mid+1,b,i,j,val);
  
  trmin[node] = min(trmin[node*2],trmin[node*2 + 1]);
}

ll query(int node,int a,int b,int i,int j)
{
  if(a>b || i>j)return inf;

 
    if(a==b)
    {
      trbit[node]&=lazy[node];
      trmin[node]&=trbit[node];
      if(a>=i && b<=j)return trmin[node];
      else return inf;
    }

    if((trbit[node] & lazy[node])==trbit[node])
    {
      if(a>=i && b<=j)return trmin[node];
      if(a>j || b<i)return inf; 
    }

    trbit[node]&=lazy[node];
    lazy[node*2]&=lazy[node];
    lazy[node*2 + 1]&=lazy[node];



    int mid = (a + b) >> 1;
    ll r1=query(node*2,a,mid,i,j);
    ll r2=query(node*2+1,mid+1,b,i,j);

    trmin[node] = min(trmin[node*2],trmin[node*2 + 1]);

    return min(r1,r2);
  
}

int main()
{
  finp;
  cin>>n>>q;
  afor(i,1,n)cin>>A[i];
  build(1,1,n);

  while(q--)
  {
    ll type,l,r,x;
    cin>>type;

    if(!type)
    {
      cin>>l>>r;
      ll ans = query(1,1,n,l,r);
      assert(ans != inf);
      cout<<ans<<"\n";
    }  
    else
    {
      cin>>l>>r>>x;
      update(1,1,n,l,r,x);
    }
  }
  
return 0;
}