#include <bits/stdc++.h>

using namespace std;

int N, M;
int A[100001];
set<int> bit[30];
int seg[1<<18];

void build(int idx, int begin, int end)
{
    if(begin==end)
        seg[idx]=A[begin];
    else
    {
        int mid=(begin+end)/2;
        build(idx*2, begin, mid);
        build(idx*2+1, mid+1, end);
        seg[idx]=min(seg[idx*2], seg[idx*2+1]);
    }
}

void update(int idx, int begin, int end, int x, int v)
{
    if(x<begin || end<x)
        return;
    if(begin==end)
        seg[idx]=v;
    else
    {
        int mid=(begin+end)/2;
        update(idx*2, begin, mid, x, v);
        update(idx*2+1, mid+1, end, x, v);
        seg[idx]=min(seg[idx*2], seg[idx*2+1]);
    }
}

int query(int idx, int begin, int end, int l, int r)
{
    if(r<begin || end<l)
        return 0x3f3f3f3f;
    if(l<=begin && end<=r)
        return seg[idx];
    int mid=(begin+end)/2;
    return min(query(idx*2, begin, mid, l, r),
               query(idx*2+1, mid+1, end, l, r));
}

int main()
{
    scanf("%d%d", &N, &M);
    for(int i=1; i<=N; i++)
    {
        scanf("%d", A+i);
        for(int j=0; j<30; j++) if((A[i]>>j)&1)
            bit[j].insert(i);
    }
    build(1, 1, N);
    while(M--)
    {
        int t, l, r, x;
        scanf("%d", &t);
        if(t==0)
        {
            scanf("%d%d", &l, &r);
            printf("%d\n", query(1, 1, N, l, r));
        }
        else
        {
            scanf("%d%d%d", &l, &r, &x);
            for(int i=0; i<30; i++) if(!((x>>i)&1))
            {
                while(1)
                {
                    auto it=bit[i].lower_bound(l);
                    if(it==bit[i].end() || *it>r)
                        break;
                    A[*it]&=~(1<<i);
                    update(1, 1, N, *it, A[*it]);
                    bit[i].erase(it);
                }
            }
        }
    }
    return 0;
}
