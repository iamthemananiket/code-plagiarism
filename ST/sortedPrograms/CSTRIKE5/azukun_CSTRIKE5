#include<cstdio>
#include<cstring>
#include<algorithm>
#include<set>
#include<queue>
#include<iostream>
#include<map>
#include<vector>
using namespace std;
#define long long long

int rint() { int ret; scanf("%d", &ret); return ret; }
int rlong() { long ret; scanf("%lld", &ret); return ret; }

const int MAXN = 100000;
vector<vector<pair<int, int>>> g(MAXN, vector<pair<int, int>>());

int n;
int cnt[MAXN];
long sum[MAXN];
void Dfs(int x, int p)
{
	sum[x] = 0;
	cnt[x] = 1;
	for(auto e : g[x])
		if (e.first != p)
		{
			Dfs(e.first, x);
			cnt[x] += cnt[e.first];
			sum[x] += 1LL * cnt[e.first] * e.second + sum[e.first];
		}
}

long ans[MAXN];
void Dfs2(int x, int p, long v)
{
	ans[x] = sum[x] + v;
	for(auto e : g[x])
		if (e.first != p)
			Dfs2(e.first, x, ans[x] - sum[e.first] + 1LL * e.second * (n - 2 * cnt[e.first]));
}

int main()
{
#ifdef _DEBUG
	freopen("..\\input.txt", "r", stdin);
#endif

	for (int tt = rint(); tt > 0; tt--)
	{
		n = rint();

		for (int i = 0; i < n; i++)
			g[i].clear();
		for (int i = 1; i < n; i++)
		{
			int u = rint() - 1;
			int v = rint() - 1;
			int w = rint();
			g[u].push_back(make_pair(v, w));
			g[v].push_back(make_pair(u, w));
		}

		Dfs(0, -1);
		Dfs2(0, -1, 0);

		for (int i = 0; i < n; i++)
			printf("%lld\n", ans[i]);
	}

	return 0;
}