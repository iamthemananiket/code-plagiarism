#include <string>
#include <vector>
#include <algorithm>
#include <numeric>
#include <set>
#include <map>
#include <queue>
#include <iostream>
#include <sstream>
#include <cstdio>
#include <cmath>
#include <ctime>
#include <cstring>
#include <cctype>
#include <cassert>
#include <limits>
#include <functional>
#define rep(i,n) for(int (i)=0;(i)<(int)(n);++(i))
#define rer(i,l,u) for(int (i)=(int)(l);(i)<=(int)(u);++(i))
#define reu(i,l,u) for(int (i)=(int)(l);(i)<(int)(u);++(i))
#if defined(_MSC_VER) || __cplusplus > 199711L
#define aut(r,v) auto r = (v)
#else
#define aut(r,v) __typeof(v) r = (v)
#endif
#define each(it,o) for(aut(it, (o).begin()); it != (o).end(); ++ it)
#define all(o) (o).begin(), (o).end()
#define pb(x) push_back(x)
#define mp(x,y) make_pair((x),(y))
#define mset(m,v) memset(m,v,sizeof(m))
#define INF 0x3f3f3f3f
#define INFL 0x3f3f3f3f3f3f3f3fLL
using namespace std;
typedef vector<int> vi; typedef pair<int,int> pii; typedef vector<pair<int,int> > vpii; typedef long long ll;
template<typename T, typename U> inline void amin(T &x, U y) { if(y < x) x = y; }
template<typename T, typename U> inline void amax(T &x, U y) { if(x < y) x = y; }

template<typename T>
typename map<int,pair<int,T> >::iterator splitInterval(map<int,pair<int,T> > &intervals, int i) {
	typename map<int,pair<int,T> >::iterator it = -- intervals.upper_bound(i);
	if(it->first != i) {
		intervals.insert(mp(i, it->second));
		it->second.first = i;
		it = intervals.find(i);
	}
	return it;
}

struct FenwickTree {
	typedef int T;
	vector<T> v;
	void init(int n) { v.assign(n, 0); }
	void add(int i, T x) {
		for(; i < (int)v.size(); i |= i+1) v[i] += x;
	}
	T sum(int i) const {	//[0, i)
		T r = 0;
		for(-- i; i >= 0; i = (i & (i+1)) - 1) r += v[i];
		return r;
	}
	T sum(int left, int right) const {	//[left, right)
		return sum(right) - sum(left);
	}
};

int main() {
	int N; int M;
	while(~scanf("%d%d", &N, &M)) {
		vector<set<int> > naivesets(N);
		vector<map<int,pii> > intervalSets(N);
		rep(i, N)
			intervalSets[i].insert(mp(0, mp(N, 0)));
		FenwickTree ft;
		ft.init(N+1);
		rep(ii, M) {
			int ty;
			scanf("%d", &ty);
			if(ty == 0) {
				int l, r, x;
				scanf("%d%d%d", &l, &r, &x), -- l, -- x;
				map<int, pii> &a = intervalSets[x];
				splitInterval(a, l);
				splitInterval(a, r);
				map<int, pair<int, int> >::iterator it, jt, kt;
				it = a.find(l);
				jt = a.find(r);
				for(kt = it; kt != jt; ++ kt) {
					if(kt->second.second == 0) {
						ft.add(kt->first, +1);
						ft.add(kt->second.first, -1);
					}
				}
				a.erase(it, jt);
				a.insert(make_pair(l, make_pair(r, 1)));
			} else if(ty == 1) {
				int q;
				scanf("%d", &q), -- q;
				int ans = ft.sum(q+1);
				printf("%d\n", ans);
			} else {
				abort();
			}
		}
	}
	return 0;
}
