#include <bits/stdc++.h>

#ifdef getchar
#undef getchar
#endif
#define getchar() (*_pinp?*_pinp++:(_inp[fread(_pinp=_inp, 1, 4096, stdin)]='\0', *_pinp++))
char _inp[4097], *_pinp=_inp;
#define scan(x) do{while((x=getchar())<'0'); for(x-='0'; '0'<=(_=getchar()); x=(x<<3)+(x<<1)+_-'0');}while(0)
char _;

using namespace std;

int N, M, Q;
int lp[100001];
long long val[100001];
int seg[262144];
int ans[100001];

inline int mulmod(int a, int b)
{
    return (long long)a*b%M;
}

inline int powmod(int a, long long b)
{
    int ret=1;
    while(b)
    {
        if(b&1)
            ret=mulmod(ret, a);
        a=mulmod(a, a);
        b>>=1;
    }
    return ret;
}

void init(int idx, int begin, int end)
{
    seg[idx]=1;
    if(begin!=end)
    {
        int mid=(begin+end)/2;
        init(idx*2, begin, mid);
        init(idx*2+1, mid+1, end);
    }
}

void update(int idx, int begin, int end, int x)
{
    if(x<begin || end<x)
        return;
    if(begin==end)
        seg[idx]=powmod(x, val[x]);
    else
    {
        int mid=(begin+end)/2;
        update(idx*2, begin, mid, x);
        update(idx*2+1, mid+1, end, x);
        seg[idx]=mulmod(seg[idx*2], seg[idx*2+1]);
    }
}

void work(int x, int sign)
{
    int ox=x;
    while(x!=1)
    {
        val[lp[x]]+=sign*ox;
        update(1, 1, N, lp[x]);
        x/=lp[x];
    }
}

void solve()
{
    scan(N);
    scan(M);
    scan(Q);
    for(int i=1; i<=N; i++)
        val[i]=0;
    init(1, 1, N);
    for(int i=1, j=N; i<=j; i++, j--)
    {
        work(j, 1);
        work(i, -1);
        ans[i]=seg[1];
    }
    int a;
    for(int i=0; i<Q; i++)
    {
        scan(a);
        printf("%d\n", ans[min(a, N-a)]);
    }
}

int main()
{
    for(long long i=2; i<=100000; i++)
        if(lp[i]==0)
        {
            lp[i]=i;
            for(long long j=i*i; j<=100000; j+=i)
                if(lp[j]==0)
                    lp[j]=i;
        }
    int T;
    scan(T);
    while(T--)
        solve();
    return 0;
}
