#include <bits/stdc++.h>

using namespace std;
typedef long long ll;
vector <ll> primes;
bool sieve[100005] = {false};
void preproc();
ll t;
ll n, m, q, r, ans;
ll csum(ll n){return n*(n + 1LL)/2LL; }
ll Power(ll base, ll exp);
int main(){
	std::ios_base::sync_with_stdio(false);
	cin.tie(0);
	preproc();
	cin >> t;
	while(t--){
		cin >> n >> m >> q;
		while(q--){
			cin >> r;
			ans = 1;
			for(int i = 0; i < primes.size(); ++i){
				if(primes[i] > n)
					break;
				ll res = 0;
				for(ll j = primes[i]; j <= n; j *= primes[i]){
					res += j * csum(n / j);
					if(j <= n - r)
						res -= j * csum((n-r) / j);
					if(j <= r)
						res -= j * csum(r / j);
				}
				ans *= Power(primes[i], res);
				ans %= m;
			}
		  cout << ans << '\n';
		}
	}
	return 0;
}
void preproc(){
	sieve[1] = true;
	for(ll i = 2; i <= 100000; ++i){
		if(sieve[i] == false){
			primes.push_back(i);
			for(ll j = i*i; j <= 100000; j += i)
				sieve[j] = true;
		}
	}
}
ll Power(ll base, ll exp){
	if(exp == 1)
		return base % m;
	else if(exp == 0)
		return 1;
	else if(exp%2 == 0)
		return Power((base*base)%m, exp / 2);
	else return (base*Power((base*base) % m, exp / 2)) % m;
}