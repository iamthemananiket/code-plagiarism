#include <cstdio>
#include <cstdio>
#include <cstring>
#include <cmath>
#include <cassert>
#include <iostream>
#include <vector>
#include <set>
#include <map>
#include <queue>
#include <stack>
#include <string>
#include <algorithm>
using namespace std;
#define SZ(x) ( (int) (x).size() )
#define CNT(s, x) ( (s).find(x) != (s).end() )
#define ALL(x) (x).begin(), (x).end()
#define dbg(x) cerr << #x << " = " << x << endl;
#define mp make_pair
#define pb push_back
#define fi first
#define se second
#define NL '\n'
typedef long long ll;
typedef pair<int, int> pii;
// const int INF = 1e9;
const int MAXN = 1e5;

int N;
int A[MAXN];
int C[MAXN];

int fullMask(int n)
{
    return ((1 << n) - 1);
}

struct fast_subsetsum 
{
    int S[1 << 7][1 << 7];
    void add(int m1, int m2, int x)
    {
        for(int m = 0; m < (1 << 7); m++)
            if((m & m2) == m)
                S[m1][m] += x;
    }

    int query(int m1, int m2)
    {
        int sum = 0;
        for(int m = 0; m < (1 << 7); m++)
            if((m & m1) == m1)
                sum += S[m][m2];
        return sum;
    }

    void update(int mask, int x = 1)
    {
        add(mask & fullMask(7), (mask >> 7), x);
    }

    int query(int mask)
    {
        return query(mask & fullMask(7), (mask >> 7));
    }
} fs[2][2];

int cnt[2][1 << 14];

ll daq(int L, int R)
{
    if(L == R)
        return 0;
    int mid = (L + R) / 2;
    ll ans = 0;
    C[mid] = A[mid];
    for(int i = mid - 1; i >= L; i--)
        C[i] = max(A[i], C[i + 1]);

    C[mid + 1] = A[mid + 1];
    for(int i = mid + 2; i <= R; i++)
        C[i] = max(A[i], C[i - 1]);

    int i = mid, j = mid + 1;
    while(i >= L || j <= R)
    {
        int side = 0;
        if(i < L) side = 1;
        else if(j > R) side = 0;
        else side = C[i] > C[j];

        int c = side ? j : i;

        for(int k = 0; k < 2; k++)
        {
            int mask = (k ? ~A[c] : A[c]) & fullMask(14);
            // printf("L=%d R=%d i=%d j=%d c=%d A[c]=%d iA[c]=%d mask=%d\n", L, R, i, j, c, A[c], ~A[c],mask);
            ans += 1LL * C[c] * fs[1-side][k].query(mask);
            fs[side][k].update(mask, 1);
        }

        ans -= C[c] * cnt[1 - side][A[c]];
        cnt[side][A[c]]++;

        if(side == 0) i--;
        if(side == 1) j++;
    }

    for(i = L; i <= R; i++)
    {
        for(j = 0; j < 2; j++)
        {
            int mask = (j ? ~A[i] : A[i]) & fullMask(14);
            fs[i>mid][j].update(mask, -1);
        }
        cnt[i>mid][A[i]]--;
    }

    // printf("L=%d R=%d sum=%lld\n", L, R, ans);
    ans += daq(L, mid);
    ans += daq(mid + 1, R);
    return ans;
}

ll naive()
{
    ll sum = 0;
    for(int i = 0; i < N; i++)
    {
        int m = A[i];
        for(int j = i + 1; j < N; j++)
        {
            m = max(m, A[j]);
            if((A[i]&A[j])==A[j] || (A[i]&A[j])==A[i])
                sum += m;
        }
    }
    return sum;
}


int main()
{
#ifndef TEST
    scanf("%d", &N);
    for(int i = 0; i < N; i++)
        scanf("%d", A + i);
    printf("%lld\n", daq(0, N - 1));
#else
    N = 100;
    srand(10);
    do
    {
        for(int i = 0; i < N; i++)
            A[i] = rand() % (1 << 14);
    } while (daq(0, N - 1) == naive());
    for(int i = 0; i < N; i++)
        printf("%d ", A[i]); puts("");
    printf("%lld\n", daq(0, N -1));
    printf("%lld\n", naive());
#endif
    return 0;
}
