#include <bits/stdc++.h>
#define rep(i,x,y) for (int i = (x); i<=(y); i++)
#define repe(i,x,y) for (int i = (x); i < (y);i++)
#define drep(i,x,y) for (int i = (x); i >= (y); i--)
#define mp make_pair
#define pb emplace_back
#define mt make_tuple
#define gcd __gcd
#define sf(n) scanf("%Lf",&n)
#define prf(n) printf("%Lf",n)
#define	s(n) scanf("%d",&n)
#define sl(n) scanf("%lld",&n)
#define pr(n) printf("%d",n)
#define prl(n) printf("%lld",n)
#define endc printf("\n")
#define psp printf(" ")
#define NO printf("Not Possible\n");

using namespace std;
typedef long long ll;
typedef long double ld;
typedef pair<int,int> pii;

const int maxn = 5e5 + 7;
const int inf = 1e9;

int bit[maxn];

void update(int x,int v) {
	while (x < maxn) {
		bit[x] = max(bit[x],v);
		x += x & (-x);
	}
}

int query(int x) {
	int ans = 0;
	while (x > 0) {
		ans = max(ans,bit[x]);
		x -= x & (-x);
	}
	return ans;
}

int clr() {
	repe(i,0,maxn) bit[i]=0;
}

int a[maxn];
int b[maxn];
int A[maxn];

typedef tuple<int,int,int> tii;
tii Z[maxn];

int S[8*maxn];

int lft[maxn];
int rgt[maxn];

void init(int x,int l,int r) {
	if (l == r) {S[x] = get<2>(Z[l]); return; }
	int mid = (l+r)/2;
	init(x*2,l,mid); init(x*2 + 1,mid+1,r);
	S[x] = min(S[x*2],S[x*2 + 1]);
}

int qry(int x,int l,int r,int i,int j) {
	if (i <= l && r <= j) return S[x];
	if (j < l || r < i) return inf;
	int mid = (l+r)/2;
	return min(qry(x*2,l,mid,i,j),qry(x*2+1,mid+1,r,i,j));
}


int main() {
	int n; s(n);
	rep(i,1,n) {
		s(A[i]);
	}
		
	clr();

	rep(i,1,n) {
		b[i] = 1 + query(A[i]);
		update(A[i],b[i]);	
	}

	clr();

	drep(i,n,1) {
		a[i] = 1 + query(n+1-A[i]);
		update(n+1-A[i],a[i]);
	}

	rep(i,1,n) {
		Z[i] = mt(b[i],a[i],A[i]);
		lft[i] = inf;
		rgt[i] = -inf;
	}

	sort(Z+1,Z+n+1);

	init(1,1,n);

	rep(i,1,n) {

		//cout<<get<0>(Z[i])<<" "<<get<2>(Z[i])<<endl;

		lft[get<0>(Z[i])] = min(lft[get<0>(Z[i])], i);
		rgt[get<0>(Z[i])] = max(rgt[get<0>(Z[i])], i);
	}


	int q; s(q);
	while (q--) {

		int k,p; s(k); s(p);

		int l = lft[p], r = rgt[p];

		//cout<<l<<" : "<<r<<endl;

		if (l > r) {
			NO; continue;
		}

		while (l < r) {
			int mid = (l+r-1)/2;
			if (get<1>(Z[mid]) < k-p+1) {
				l = mid+1;
			} else {
				r = mid;
			}
		}

		if (get<1>(Z[l]) < k-p+1) {
			NO; continue;
		}

		//cout<<l<<endl;

		pr(qry(1,1,n,l,rgt[p])); endc;

	}
}
