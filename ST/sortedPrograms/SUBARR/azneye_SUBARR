/*
 * Perfect Subarrays
 * File:   SUBARR.cpp
 * Author: Andy Y.F. Huang (azneye)
 * Created on 2013-12-29, 1:00:55 AM
 */

#include <algorithm>
#include <bitset>
#include <cassert>
#include <cctype>
#include <climits>
#include <cmath>
#include <cstddef>
#include <cstdio>
#include <cstdlib>
#include <cstring>
#include <ctime>
#include <complex>
#include <deque>
#include <fstream>
#include <functional>
#include <iomanip>
#include <iostream>
#include <limits>
#include <list>
#include <map>
#include <numeric>
#include <queue>
#include <set>
#include <sstream>
#include <stack>
#include <string>
#include <utility>
#include <valarray>
#include <vector>

using namespace std;

namespace SUBARR {
template <class T, size_t MAXNODES> struct Treap {

  struct Node {
    T val;
    int pri, cnt;
    Node *left, *right;

    void update() {
      cnt = leftcnt() + 1 + rightcnt();
    }

    int leftcnt() {
      return left ? left->cnt : 0;
    }

    int rightcnt() {
      return right ? right->cnt : 0;
    }
  };

  Node pool[MAXNODES], *ptr;
  Node *root;

  Node * make(T val) {
    ptr->val = val;
    ptr->cnt = 1;
    ptr->pri = rand();
    ptr->left = ptr->right = NULL;
    return ptr++;
  }

  Node * rotateRight(Node * node) {
    Node *temp = node->left;
    node->left = temp->right;
    temp->right = node;
    node->update();
    return temp;
  }

  Node * rotateLeft(Node * node) {
    Node *temp = node->right;
    node->right = temp->left;
    temp->left = node;
    node->update();
    return temp;
  }

  Node * insert(Node *at, T val) {
    if (!at)
      return make(val);
    else if (val < at->val) {
      at->left = insert(at->left, val);
      if (at->left->pri < at->pri)
        at = rotateRight(at);
    } else {
      at->right = insert(at->right, val);
      if (at->right->pri < at->pri)
        at = rotateLeft(at);
    }
    at->update();
    return at;
  }

  int get_le(T v) {
    Node* at = root;
    int cnt = 0;
    while (at) {
      if (at->val <= v) {
        cnt += 1 + (at->left ? at->left->cnt : 0);
        at = at->right;
      } else
        at = at->left;
    }
    return cnt;
  }

  void init() {
    srand(time(NULL));
    ptr = pool;
    root = NULL;
  }

  void insert(T val) {
    root = insert(root, val);
  }
};
typedef long long ll;
int a[1 << 20];
Treap<ll, 1 << 20> tree;

void solve(int test_num) {
  int N, K;
  scanf("%d %d", &N, &K);
  for (int i = 0; i < N; i++)
    scanf("%d", a + i);
  tree.init();
  tree.insert(0);
  ll res = 0, sum = 0;
  for (int i = 0; i < N; i++) {
    a[i] -= K;
    sum += a[i];
    res += tree.get_le(sum);
    tree.insert(sum);
  }
  printf("%lld\n", res);
}

void solve() {
#ifdef AZN
  freopen("input.txt", "r", stdin);
  freopen("output.txt", "w", stdout);
  freopen("azn.txt", "w", stderr);
#endif
  solve(1);
}
}

int main() {
  SUBARR::solve();
  return 0;
}
