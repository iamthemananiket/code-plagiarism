#include <iostream>
#include <vector>
#include <algorithm>
using namespace std;

typedef  long long  ll ;

const ll MOD = 1000000007 ;

inline  ll  power( ll ba )
{
        int  ex = 1000000005 ;
        ll  res = 1 ;
        while(ex)
        {
                if( ex & 1 )   res = ( res * ba ) % MOD ;
                ba = ( ba * ba ) % MOD ;
                ex >>= 1 ;
        }
        return res ;
}

int main() 
{
        ios_base::sync_with_stdio(0);
        cin.tie(0);
        
        int  t ;
        cin >> t ;
        while(t--)
        {
                ll  n, x, m ;
                cin >> n >> x >> m ;
                
                vector<ll>  a(n);
                for( int i=0; i<n; i++ )
                        cin >> a[i] ;
                
                m %= MOD ;
                
                vector<ll>  binomial(x,1LL);            // is comb( n+m-2, m-1 )
                for( n=2; n<=x; n++ )                     //  comb(n,r) = comb(n-1,r) * (n) / (n-r)
                {
                        binomial[n-1] = ( (n+m-2) * power((n+m-2)-(m-1)) ) % MOD ;
                        binomial[n-1] = ( binomial[n-1] * binomial[n-2] ) % MOD ;
                }
                
                ll  ans = 0 ;
                for( int i=0; i<x; i++ )
                        ans = ( ans + a[i]%MOD * binomial[x-1-i] ) % MOD ;
                
                cout << ans << endl ;
        }
        
        return 0;
}


/*

m=1  binomial = [ 1, 1, 1, 1, 1, ... ]   comb( n+m-2, m-1 )
m=2  binomial = [ 1, 2, 3, 4, 5, ... ]   comb( n+m-2, m-1 )
m=3  binomial = [ 1, 3, 6, 10, 15, ... ]  comb( n+m-2, m-1 )
m=4  binomial = [ 1, 4, 10, 20, 35, ... ]  comb( n+m-2, m-1 )
m=5  binomial = [ 1, 5, 15, 35, 70, ... ]  comb( n+m-2, m-1 )
.
.
.

*/