#include <bits/stdc++.h>
#include <assert.h>
 
using namespace std;
 
typedef long long ll;
typedef vector < long long > vll;
typedef pair < long long, long long > pll;
typedef pair < int, int > pii;
typedef vector < int > vii;
 
#define rep(i,n) for(int i = 0; i < n; i++)
#define reps(i,a,n) for(int i = a; i < n; i++)
#define s(n) cin >> n
#define csl ios_base::sync_with_stdio(false); cin.tie(NULL)
#define rsz(x,n) x.clear(); x.resize(n)
#define rrsz(x,a,n) x.clear(); x.resize(n,a)
#define wt while(true)
#define all(x) x.begin(),x.end()
#define pb push_back
#define ls(x) ((2*(x)) + 1)
#define rs(x) ((ls(x)) + 1)
#define md(a,b) (((a) + (b))/2)
#define INF (1LL << 60LL)
 
ll t, u, v, n, k, m, c, d, f, e, l, r;
const long long N = 10005;
ll DP [4][N];
ll X[N];
int main() {
    csl;
	cin >> t;
	while (t--) {
		cin >> n;
		reps (i, 1, n + 1) {
			cin >> X[i];
		}
		rep (i, n + 2) {
			DP[1][i] = DP[3][i] = INF;
			DP[0][i] = DP[2][i] = (-INF);
		}
		ll sum = -INF;
		reps (i, 1, n + 1) {
			sum = max(X[i], sum + X[i]);
			DP[0][i] = max(DP[0][i - 1], sum);
		}
		sum = INF;
		reps (i, 1, n + 1) {
			sum = min(X[i], sum + X[i]);
			DP[1][i] = min(DP[1][i - 1], sum);
		}
		sum = -INF;
		for (int i = n; i >= 1; --i) {
			sum = max(X[i], sum + X[i]);
			DP[2][i] = max(DP[2][i + 1], sum);
		}
		sum = INF;
		for (int i = n; i >= 1; --i) {
			sum = min(X[i], sum + X[i]);
			DP[3][i] = min(DP[3][i + 1], sum);
		}
		ll ans = 0;
		reps (i, 1, n) {
			ans = max(ans, max(abs(DP[0][i] - DP[3][i + 1]), abs(DP[1][i] - DP[2][i + 1])));
		}
		cout << ans << '\n';
	}
    return 0;
}