#include<cstdio>
#include<iostream>
#include<algorithm>
#include<cmath>
#include<unordered_map>
#include<utility>
#include<vector>
using namespace std;
typedef long long LL;
#define MOD 1000000009LL

#define gx getchar_unlocked
#define px putchar_unlocked
#define ps putchar_unlocked(' ')
#define pn putchar_unlocked('\n')

void scan(int &n){int sign=1;n=0;char c=gx();while(c<'0'||c>'9'){if(c=='-')sign=-1;c=gx();}while(c>='0'&&c<='9')n=(n<<3)+(n<<1)+c-'0',c=gx();n=n*sign;}
void lscan(LL &n){int sign=1;n=0;char c=gx();while(c<'0'||c>'9'){if(c=='-')sign=-1;c=gx();}while(c>='0'&&c<='9')n=(n<<3)+(n<<1)+c-'0',c=gx();n=n*(LL)(sign);}
int sscan(char a[]){char c=gx();while(c==' '||c=='\n')c=gx();int i=0;while(c!='\n')a[i++]=c,c=gx();a[i]=0;return i;}
int wscan(char a[]){char c=gx();while(c==' '||c=='\n')c=gx();int i=0;while(c!='\n'&&c!=' ')a[i++]=c,c=gx();a[i]=0;return i;}
void print(int n){if(n<0){n=-n;px('-');}int i=10;char o[10];do{o[--i]=(n%10)+'0';n/=10;}while(n);do{px(o[i]);}while(++i<10);}
void lprint(LL n){if(n<0LL){n=-n;px('-');}int i=21;char o[21];do{o[--i]=(n%10LL)+'0';n/=10LL;}while(n);do{px(o[i]);}while(++i<21);}
void sprint(const char*a){const char*p=a;while(*p)px(*p++);}

unordered_map<int,int> m;
unordered_map<int,int>::iterator mi;

int last( int x ) {
    mi = m.find(x);
    if( mi == m.end() ) return 0;
    return mi->second;
}

void setlast( int x, int i ) {
    mi = m.find(x);
    if( mi == m.end() ) {
        m.insert( pair<int,int>(x,i) );
    }
    else {
        mi->second = i;
    }
}

LL DistSubseq( int *h, int n ) {
	LL add;
    long long int * sum;
    sum = (long long int*)( malloc( (n+1)*sizeof(LL) ) );
	sum[0] = 1; // null subsequence
	int i, x;
    m.clear();
    
	for( i = 1; i <= n; ++i ) {
		add = sum[i - 1];
        x = last(h[i]);
		if( x ) add -= sum[x - 1];
		sum[i] = sum[i - 1] + add;
		sum[i] += MOD;
		sum[i] %= MOD;
		setlast(h[i],i);
	}
	return sum[n];
}

int main() {
	int t, n, i, hh1, hh2;
	int *h;
    h = (int*)( malloc( 1000002 * sizeof(int) ) );
    scan(t);
	while(t--) {
		scan(n);
        
        h[0] = 0;
        scan(hh1);
		for( i = 1; i < n; ++i ) {
            scan(hh2);
			h[i] = hh2 - hh1;
            hh1 = hh2;
		}
		
		lprint( DistSubseq( h, n-1 ) - 1 );
		pn;
	}
	return 0;
}
