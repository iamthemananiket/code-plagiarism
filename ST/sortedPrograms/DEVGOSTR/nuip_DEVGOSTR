#include <string>
#include <vector>
#include<iostream>
#include<cstdio>
#include<cstdlib>
#include<stack>
#include<queue>
#include<cmath>
#include<algorithm>
#include<functional>
#include<list>
#include<deque>
#include<bitset>
#include<set>
#include<map>
#include<unordered_map>
#include<cstring>
#include<sstream>
#include<complex>
#include<iomanip>
#include<numeric>
#include<tuple>
#define X first
#define Y second
#define pb push_back
#define rep(X,Y) for (int (X) = 0;(X) < (Y);++(X))
#define rrep(X,Y) for (int (X) = (Y)-1;(X) >=0;--(X))
#define repe(X,Y) for ((X) = 0;(X) < (Y);++(X))
#define peat(X,Y) for (;(X) < (Y);++(X))
#define all(X) (X).begin(),(X).end()
#define rall(X) (X).rbegin(),(X).rend()
#define eb emplace_back
#define UNIQUE(X) (X).erase(unique(all(X)),(X).end())

using namespace std;
typedef long long ll;
typedef pair<int,int> pii;
typedef pair<ll,ll> pll;
template<class T> using vv=vector<vector<T>>;
template<class T> ostream& operator<<(ostream &os, const vector<T> &t) {
os<<"{"; rep(i,t.size()) {os<<t[i]<<",";} os<<"}"<<endl; return os;}
template<class S, class T> ostream& operator<<(ostream &os, const pair<S,T> &t) { return os<<"("<<t.first<<","<<t.second<<")";}
template<class T> inline bool MX(T &l,const T &r){return l<r?l=r,1:0;}
template<class T> inline bool MN(T &l,const T &r){return l>r?l=r,1:0;}
const ll MOD=1e9+7;
vv<ll> re(50,vector<ll>(50));
int cnt[51][51]=												  {{1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,}
,{1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,}
,{1,2,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,}
,{1,3,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,}
,{1,4,6,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,}
,{1,5,10,6,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,}
,{1,6,15,14,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,}
,{1,7,21,26,10,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,}
,{1,8,28,44,25,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,}
,{1,9,36,68,51,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,}
,{1,10,45,100,98,24,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,}
,{1,11,55,140,165,64,7,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,}
,{1,12,66,190,267,144,25,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,}
,{1,13,78,250,407,284,78,6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,}
,{1,14,91,322,601,520,188,22,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,}
,{1,15,105,406,849,862,386,64,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,}
,{1,16,120,504,1175,1394,763,164,14,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,}
,{1,17,136,616,1580,2136,1395,390,43,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,}

,{1,18,153,744,2089,3192,2434,798,97,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,}

,{1,19,171,888,2703,4584,3991,1550,220,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
,}
,{1,20,190,1050,3452,6470,6396,2894,469,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,}
,{1,21,210,1230,4338,8892,9870,5224,1044,18,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,}
,{1,22,231,1430,5395,12060,14989,9202,2197,62,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,}
,{1,23,253,1650,6622,15982,21908,15358,4466,232,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,}
,{1,24,276,1892,8058,20940,31527,24956,8537,634,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,}
,{1,25,300,2156,9706,26996,44290,39332,16061,1940,33,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
,0,0,0,0,0,}
,{1,26,325,2444,11606,34466,61381,60602,28701,4658,168,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
,0,0,0,0,0,0,}
,{1,27,351,2756,13758,43376,83148,90280,49045,10410,658,12,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
,0,0,0,0,0,0,0,}
,{1,28,378,3094,16210,54182,111700,133306,82809,22146,1969,36,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,}
,{1,29,406,3458,18963,66930,147557,192044,134711,43882,5359,106,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,}
,{1,30,435,3850,22066,82104,193126,272744,212906,80536,12127,362,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
,0,0,0,0,0,0,0,0,0,0,}
,{1,31,465,4270,25520,99748,249011,378932,326890,143690,28040,1740,11,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,}
,{1,32,496,4720,29379,120466,318645,520886,492419,244872,57067,5118,153,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,}
,{1,33,528,5200,33645,144332,402971,704088,725074,405208,111476,12914,491,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,}
,{1,34,561,5712,38376,172054,506554,944938,1057350,658542,208641,29482,1515,14,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,}
,{1,35,595,6256,43571,203638,629818,1247618,1506407,1037974,377902,65412,4479,40,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,}
,{1,36,630,6834,49293,239914,778488,1633940,2117831,1593732,647158,128814,10876,224,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,}
,{1,37,666,7446,55545,281002,954330,2116432,2937923,2415140,1102714,258636,28181,1106,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,}
,{1,38,703,8094,62391,327778,1163823,2722604,4033752,3593360,1811579,482106,63259,3754,86,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,}
,{1,39,741,8778,69831,380278,1407883,3461404,5447755,5231490,2899933,872506,134402,9894,307,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,}
,{1,40,780,9500,77937,439618,1695934,4379202,7314484,7555794,4580974,1539788,273376,24832,1139,20,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,}
,{1,41,820,10260,86710,505862,2029264,5488196,9695060,10732714,7094890,2655782,535691,56158,3110,84,1,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,}
,{1,42,861,11060,96223,580172,2418117,6841802,12755653,15064752,10754372,4400662,980170,114954,7313,244,4,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,}
,{1,43,903,11900,106477,662616,2864000,8455838,16584814,20825562,16022192,7186922,1789650,239030,17345,672,14,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,}
,{1,44,946,12782,117550,754530,3379671,10403104,21434356,28536408,23526594,11443764,3131227,467436,38682,1764,41,0,0,0,0
,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,}
,{1,45,990,13706,129444,856030,3967537,12708426,27445789,38656144,34103647,17992042,5410513,892516,80213,3886,99,0,0,0,0
,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,}
,{1,46,1035,14674,142241,968596,4642684,15465644,34982793,52057216,49022421,27925870,9179340,1677776,170238,9554,266,0,0
,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,}
,{1,47,1081,15686,155940,1092236,5406031,18690052,44162645,69222616,69386622,42622820,15336664,3111306,351701,21918,674,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,}
,{1,48,1128,16744,170628,1228624,6275780,22502298,55483246,91424260,97163305,63868870,24809389,5467606,672009,45516,1505
,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,}
,{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,}
										  };
void dfs(ll s,int t){
  if(t<3)cout<<pii(s,t)<<endl;
  ++re[t][__builtin_popcountll(s)];
  if(t>=48) return;
  dfs(s,t+1);
  for(int a=t-1,b=t-2;b>=0;--a,b-=2)
    if(s>>a&1 && s>>b&1) return;
  dfs(s|(1ll<<t),t+1);
}
void dfs(string s){
  if(s.size()==15){
    rep(c,15) rep(j,15)if(j){
      if(c-j<0 || c+j>=15) break;
      if(s[c-j]==s[c] && s[c]==s[c+j]){
	return;
      }
    }
    cout<<s<<endl;
    return;
  }
  rep(i,3) dfs(s+(char)('a'+i));
}
#include<cassert>
int main(){
  ios_base::sync_with_stdio(false);
  cout<<fixed<<setprecision(0);
  int T;
  cin>>T;
  while(T--){
    int m,t;
    string str;
    cin>>m>>t>>str;
    int n=str.size();
    ll re=0;
    if(m==3){
      queue<tuple<int,ll,ll>> que;
      que.emplace(0,0,0);
      ll a,b;
      int t;
      while(que.size()){
	tie(t,a,b)=que.front(); que.pop();
	assert(((a|b)^b)==a);
	//cout<<t<<":"<<a<<","<<b<<endl;
	//rep(i,t)cout<<(a>>i&1?'a':(b>>i&1?'b':'c'));cout<<endl;
	//if(!a) cout<<t<<endl;
	if(t==n){
	  int cnt=n;
	  rep(i,n){
	    if(a>>i&1){
	      if(str[i]=='a') --cnt;
	    }else if(b>>i&1){
	      if(str[i]=='b') --cnt;
	    }else{
	      if(str[i]=='c') --cnt;
	    }
	  }
	  //{rep(i,t)cout<<(a>>i&1?'a':(b>>i&1?'b':'c'));cout<<endl;}
	  if(cnt<=t) ++re;
	  continue;
	}
	int A=0,B=0,C=0;
	rep(i,n)if(i){
	  if(t-2*i<0) break;
	  if((a>>(t-i)&1)==(a>>(t-i*2)&1) &&
	     (b>>(t-i)&1)==(b>>(t-i*2)&1)){
	    (a>>(t-i)&1?A:(b>>(t-i)&1?B:C))=1;
	  }
	}
	if(!A) que.emplace(t+1,a|(1ll<<t),b);
	if(!B) que.emplace(t+1,a,b|(1ll<<t));
	if(!C) que.emplace(t+1,a,b);
	//if(A+B+C==3){rep(i,t)cout<<(a>>i&1?'a':(b>>i&1?'b':'c'));cout<<endl;}
      }
      cout<<re<<endl;
    }else if(m==2){
      if(n>10){
	cout<<0<<endl;
      }else{
	rep(i,1<<n){
	  int f=0;
	  rep(j,n) rep(k,n)if(k){
	    if(j-k<0 || j+k>=n) continue;
	    if((i>>(j-k)&1)==(i>>j&1) && (i>>j&1)==(i>>(j+k)&1)){
	      f=1;
	      break;
	    }
	  }
	  if(!f){
	    int cnt=0;
	    rep(j,n) if((i>>j&1)==(str[j]=='a')) ++cnt;
	    //rep(j,n)cout<<(i>>j&1);cout<<cnt<<endl;
	    if(cnt<=t) ++re;
	  }
	}
	cout<<re<<endl;
      }
    }else{
      cout<<(n<=2)<<endl;
    }
  }
  return 0;
  rep(n,50){
    double re=0;
    rep(i,50)rep(j,50)rep(k,50)
      if(i+j+k>=n) re+=1.*cnt[n][i]*cnt[n][j]*cnt[n][k];
    cout<<n<<"\t:"<<re<<endl;
  }
  //dfs(0,0);
  //cout<<re<<endl;
  return 0;
}
//690413019
//max of builtin_popcount is 16
//48:1505
