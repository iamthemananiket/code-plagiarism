//Problem TREEDIAM

#include<iostream>
#include<cstdio>
#include<cstdlib>
#include<cstring>
#include<algorithm>
#include<cmath>
#include<vector>
#include<set>
#include<queue>

using namespace std;

int get()
{
  char c;
  while(c=getchar(),(c<'0'||c>'9')&&(c!='-'));
  bool flag=(c=='-');
  if(flag)
    c=getchar();
  int x=0;
  while(c>='0'&&c<='9')
    {
      x=x*10+c-48;
      c=getchar();
    }
  return flag?-x:x;
}

void output(int x)
{
  if(x<0)
    {
      putchar('-');
      x=-x;
    }
  int len=0,data[10];
  while(x)
    {
      data[len++]=x%10;
      x/=10;
    }
  if(!len)
    data[len++]=0;
  while(len--)
    putchar(data[len]+48);
  putchar('\n');
}

struct edge
{
  int data,num;
};

const int maxn=100000;
const int mod=1000000007;

long long val[maxn];
int x[maxn],y[maxn];
bool invalid[maxn];
vector<edge> g[maxn];

long long Pow(long long a,int b)
{
  if(!b)
    return 1;
  long long t=Pow(a*a%mod,b/2);
  if(b&1)
    t=t*a%mod;
  return t;
}

long long getDiameter(int root)
{
  static int q[maxn],parent[maxn];
  static long long down[maxn][2];
  int f=0,r=1;
  q[0]=root;
  parent[root]=-1;
  while(f<r)
    {
      int u=q[f++];
      for(int i=0;i<g[u].size();i++)
        if(!invalid[g[u][i].num])
          {
            int v=g[u][i].data;
            if(v!=parent[u])
              {
                parent[v]=u;
                q[r++]=v;
              }
          }
    }
  for(int i=r-1;i>=0;i--)
    {
      int u=q[i];
      down[u][0]=down[u][1]=val[u];
      for(int j=0;j<g[u].size();j++)
        if(!invalid[g[u][j].num]&&g[u][j].data!=parent[u])
          {
            down[u][1]=max(down[u][1],down[g[u][j].data][0]+val[u]);
            if(down[u][1]>down[u][0])
              swap(down[u][0],down[u][1]);
          }
    }
  long long ans=0;
  for(int i=0;i<r;i++)
    {
      int v=q[i];
      ans=max(ans,down[v][0]+down[v][1]-val[v]);
    }
  return ans;
}

int main()
{
  int n=get();
  for(int i=0;i<n;i++)
    val[i]=get();
  for(int i=1;i<n;i++)
    {
      x[i]=get()-1;
      y[i]=get()-1;
      g[x[i]].push_back((edge){y[i],i});
      g[y[i]].push_back((edge){x[i],i});
    }
  memset(invalid,0,sizeof(invalid));
  long long ans=getDiameter(0);
  output(ans);
  for(int i=1;i<n;i++)
    {
      int loss=get();
      int u=x[loss],v=y[loss];
      ans=ans*Pow(getDiameter(u),mod-2)%mod;
      invalid[loss]=true;
      ans=ans*getDiameter(u)%mod;
      ans=ans*getDiameter(v)%mod;
      output(ans);
    }
  return 0;
}
