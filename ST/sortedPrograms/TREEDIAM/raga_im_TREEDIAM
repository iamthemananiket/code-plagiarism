#include <bits/stdc++.h>
 using namespace std;
#define  modulo(a,b) a%b 
#define pb push_back
#define m_p make_pair
#define F first
#define S second
#define For(i,a,b) for(int i=a;i<b;i++)
#define Fore(i,a,b) for(int i=a;i<=b;i++)
#define rFor(i,a,b) for(int i=a;i>b;i--)
#define rFore(i,a,b) for(int i=a;i>=b;i--)
#define tr(it,a) for(__typeof((a).begin()) it=(a).begin();it!=(a).end();it++)
#define all(a) a.begin(),a.end()
#define mem(a,b) memset(a,b,sizeof(a))
typedef long long int lli;
typedef pair<int,int> pii;
typedef pair<int,pii> pi3;
typedef pair<pii,pii> pi4;
typedef vector<int> vi;
typedef vector<pii> vpii;
void sc(int& a){scanf("%d",&a);}
void sc(lli& a){scanf("%lld",&a);}
void sc(int& a,int& b){sc(a);sc(b);}
void sc(lli& a,lli& b){sc(a);sc(b);}
void sc(int& a,int& b,int& c){sc(a,b);sc(c);}
void sc(lli& a,lli& b,lli& c){sc(a,b);sc(c);}
void prl(int a){printf("%d\n",a);}
void prl(lli a){printf("%lld\n",a);}
void prl(){printf("\n");}
void prs(int a){printf("%d ",a);}
void prs(lli a){printf("%lld ",a);}
void prl(lli a, lli b){cout<<a<<" "<<b<<" "<<endl;}
void prl(lli a, lli b, lli c){cout<<a<<" "<<b<<" "<<c<<" "<<endl;}
void prl(lli a, lli b, lli c, lli d){cout<<a<<" "<<b<<" "<<c<<" "<<d<<endl;}
void prl(lli a, lli b, lli c, lli d, lli e){cout<<a<<" "<<b<<" "<<c<<" "<<d<<" "<<e<<endl;}
void prl(lli a, lli b, lli c, lli d, lli e, lli f){cout<<a<<" "<<b<<" "<<c<<" "<<d<<" "<<e<<" "<<f<<endl;}
lli mod =1000000007;
lli pmod=40000;
lli modpow(lli a, lli b, lli mod){lli res=1;while(b>0){if(b&1)res=(res*a)%mod;a=(a*a)%mod;b=b/2;}return res%mod;}
lli pow(lli a, lli b){lli res=1;while(b>0){if(b&1)res=(res*a);a=(a*a);b=b/2;}return res;}
lli modInverse(lli a, lli m)
{
    lli  m0 = m, t, q;
    lli x0 = 0, x1 = 1;
 
    if (m == 1)
      return 0;
 
    while (a > 1)
    {
        // q is quotient
        q = a / m;
 
        t = m;
 
        // m is remainder now, process same as
        // Euclid's algo
        m = a % m, a = t;
 
        t = x0;
 
        x0 = x1 - q * x0;
 
        x1 = t;
    }
 
    // Make x1 positive
    if (x1 < 0)
       x1 += m0;
 
    return x1;
}

// C function for extended Euclidean Algorithm
int modI[100000];

 
#define inf INT_MAX
#define linf LLONG_MAX
const lli MAX = 1000005;
lli max(lli a, lli b) { return (a > b)? a : b; }
typedef pair<int, int> Key;
set<Key> myset;
bool visited[5000],visitedMax[5000];
int w[5000];
int xx[5000];
int yy[5000];
int mn,n,mw;
vector<vector<int > > A;
void DFS(int x,int y){
  y=y+w[x];
  if(y>mw){
    mn=x;
    mw=y;
  }
  visited[x]=true;
  int p=A[x].size();
  For(i,0,p){
    if(!visited[A[x][i]]){
      DFS(A[x][i],y);
    }
  }

}

void DFS_max(int x,int y){
  y=y+w[x];
  if(y>mw){
    mn=x;
    mw=y;
  }
  visitedMax[x]=true;
  int p=A[x].size();
  For(i,0,p){
    if(!visitedMax[A[x][i]]){
      DFS_max(A[x][i],y);
    }
  }


}

int getproduct(){
lli ans=1;
 For(i,0,n){
  if(!visited[i]){
    mn=i;
    mw=0;

    DFS(i,0);

    mw=0;
    DFS_max(mn,0);
    ans=modulo(ans*mw,mod);
  }
 }
 return ans; 
}
map<int,Key> mymap;
map<int,Key> :: iterator it;
int main() {
  int  t,m,x,y,l;
  Key k;
  vector<int> v;
    sc(n);
    lli ans;
    For(i,0,n){
      A.push_back(v);
      sc(w[i]);
    }
    For(i,0,n-1)
    {
        sc(x,y);
        A[x-1].push_back(y-1);
        A[y-1].push_back(x-1);
        xx[i]=x-1;
        yy[i]=y-1;
    }
    For(j,0,n-1){
    For(i,0,n)
    visited[i]=false; 
    For(i,0,n)
      visitedMax[i]=false; 
    ans=getproduct();
    prl(ans);
    sc(l);
    x=xx[l-1];
    y=yy[l-1];
    int p=A[x].size();
    int q;
    For(g,0,p)
    {
      if(A[x][g]==y)
      {
        q=g;
        break;
      }
    }
    For(g,q,p-1){
      A[x][g]=A[x][g+1];
    }
    A[x].pop_back();
    p=A[y].size();
    For(g,0,p)
    {
      if(A[y][g]==x)
      {
        q=g;
        break;
      }
    }
    For(g,q,p-1){
      A[y][g]=A[y][g+1];
    }
    A[y].pop_back();

    }
    ans=1;
    For(i,0,n)
      ans=modulo(ans*w[i],mod);
    prl(ans);  
  

  return 0;

}  