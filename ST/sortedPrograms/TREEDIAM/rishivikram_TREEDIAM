#include<bits/stdc++.h>

using namespace std;

#define ff first
#define ss second
#define pb push_back
#define mp make_pair
#define all(x) x.begin(),x.end()
#define sz(x) ((int)x.size())
#define eps 1e-9

const int MOD = 1e9+7;

typedef long long ll;
typedef pair<int,int> pii;

ll POWER[65];
ll power(ll a, ll b) {ll ret=1;while(b) {if(b&1) ret*=a;a*=a;if(ret>=MOD) ret%=MOD;if(a>=MOD) a%=MOD;b>>=1;}return ret;}
ll inv(ll x) {return power(x,MOD-2);}

void precompute() {
	POWER[0]=1;
	for(int i=1;i<63;i++) POWER[i]=POWER[i-1]<<1LL;
}
//dp1 from root to some node
//dp2 some path in subtree
const int MAXN = 1e5+5;
pii edge[MAXN];
int parent[MAXN];
int w[MAXN];
vector<int> adj[MAXN];
int root[MAXN];
int dp1[MAXN],dp2[MAXN];
void DFS(int s, int par=-1) {
	root[s]=1;
	parent[s]=par;
	int maxim=-1,sec=-1;
	for(auto it:adj[s]) {
		if(it==par) continue;
		DFS(it,s);
		dp1[s]=max(dp1[s],dp1[it]);
		dp2[s]=max(dp2[s],dp2[it]);
		if(dp1[it]>maxim) sec=maxim,maxim=dp1[it];
		else if(dp1[it]>sec) sec=dp1[it];
	}
	dp1[s]+=w[s];
	if(sec==-1) dp2[s]=max(dp2[s],maxim+w[s]);
	else dp2[s]=max(dp2[s],maxim+sec+w[s]);
	dp2[s]=max(dp2[s],dp1[s]);
}
set<pii> removed;
void recalculate(int s) {
	if(s==-1) return;
	int maxim=-1,sec=-1;
	dp1[s]=0;
	dp2[s]=0;
	for(auto it:adj[s]) {
		if(it==parent[s]) continue;
		if(removed.find(mp(s,it))!=removed.end()) continue;
		dp1[s]=max(dp1[s],dp1[it]);
		dp2[s]=max(dp2[s],dp2[it]);
		if(dp1[it]>maxim) sec=maxim,maxim=dp1[it];
		else if(dp1[it]>sec) sec=dp1[it];		
	}
	dp1[s]+=w[s];
	if(sec==-1) dp2[s]=max(dp2[s],maxim+w[s]);
	else dp2[s]=max(dp2[s],maxim+sec+w[s]);
	dp2[s]=max(dp2[s],dp1[s]);
	recalculate(parent[s]);
}
int src;
void reassign(int s, int par=-1) {
	root[s]=src;
	for(auto it:adj[s]) {
		if(it==par) continue;
		if(removed.find(mp(s,it))!=removed.end()) continue;
		reassign(it,s);
	}
}
int main() {
//	freopen("TASK.in","r",stdin);freopen("TASK.out","w",stdout);
	precompute();
	int n;
	cin>>n;
	for(int i=1;i<=n;i++) scanf("%d",&w[i]);
	for(int i=1;i<n;i++) {
		int x,y;
		scanf("%d%d",&x,&y);
		edge[i]=mp(x,y);
		adj[x].pb(y);
		adj[y].pb(x);
	}
	DFS(1);
	ll ans=dp2[1];
	for(int i=1;i<n;i++) {
		printf("%lld\n",ans);
		int x;
		scanf("%d",&x);
		int u=edge[x].ff;
		int v=edge[x].ss;
		ans*=inv(dp2[root[u]]);
		if(ans>=MOD) ans%=MOD;
		removed.insert(mp(u,v));
		removed.insert(mp(v,u));
		if(parent[u]==v) {
			src=u;
			parent[u]=-1;
			reassign(u);
			recalculate(v);
			ans*=dp2[root[u]];
			if(ans>=MOD) ans%=MOD;
			ans*=dp2[root[v]];
			if(ans>=MOD) ans%=MOD;
		}
		else {
			parent[v]=-1;
			src=v;
			reassign(v);
			recalculate(u);
			ans*=dp2[root[u]];
			if(ans>=MOD) ans%=MOD;
			ans*=dp2[root[v]];
			if(ans>=MOD) ans%=MOD;
		}
	}
	cout<<ans<<endl;
	return 0;
}
