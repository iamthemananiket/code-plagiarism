#pragma comment(linker, "/STACK:500000000")
#define _CRT_SECURE_NO_WARNINGS
#include <algorithm>
#include <assert.h>
#include <bitset>
#include <functional>
#include <iostream>
#include <list>
#include <map>
#include <math.h>
#include <set>
#include <stack>
#include <stdio.h>
#include <stdlib.h>
#include <string>
#include <string.h>
#include <time.h>
#include <queue>
#include <utility>
#include <vector>
using namespace std;

#define y0 y0ChloeGraceMoretz
#define y1 y1ChloeGraceMoretz
#define ll long long
int nextInt() { int n; scanf("%d", &n); return n; }
ll nextLong() { ll n; scanf("%lld", &n); return n; }
const double PI = acos(-1.0);
const double EPS = 1e-9;
const int INF = (int)1e9;
const int MOD = (int)1e9 + 7;

int n;
int color[(int)1e5 + 9];

void dfs1(int x, int prev, const int k, int dist) {
	color[x] = dist;
	if ((x << 1) <= n && (x << 1) != prev && dist + 1 <= k) {
		dfs1((x << 1), x, k, dist + 1);
	}
	if ((x << 1) + 1 <= n && (x << 1) + 1 != prev && dist + 1 <= k) {
		dfs1((x << 1) + 1, x, k, dist + 1);
	}
	if ((x >> 1) >= 1 && (x >> 1) != prev && dist + 1 <= k) {
		dfs1((x >> 1), x, k, dist + 1);
	}
}

set<int> used;

void dfs3(int x) {
	if (color[x] != 0) {
		used.insert(color[x]);
	}
	if ((x << 1) <= n) {
		dfs3(x << 1);
	}
	if ((x << 1) + 1 <= n) {
		dfs3((x << 1) + 1);
	}
}

int main() {
	//freopen("in.txt", "rt", stdin);
	//freopen("out.txt", "wt", stdout);
	int q;
	scanf("%d %d", &n, &q);
	while (q--) {
		int type;
		scanf("%d", &type);
		if (type == 1) {
			int x, k;
			scanf("%d %d", &x, &k);
			dfs1(x, -1, k, 0);
		} else if (type == 2) {
			int x, y;
			scanf("%d %d", &x, &y);
			used.clear();
			while (x != y) {
				if (x > y) {
					if (color[x] != 0) {
						used.insert(color[x]);
					}
					x >>= 1;
				} else {
					if (color[y] != 0) {
						used.insert(color[y]);
					}
					y >>= 1;
				}
			}
			if (color[x] != 0) {
				used.insert(color[x]);
			}
			printf("%d\n", used.size());
		} else {
			int x;
			scanf("%d", &x);
			used.clear();
			dfs3(x);
			printf("%d\n", used.size());
		}
	}
	return 0;
}