
#include <stdio.h>
#include <bits/stdc++.h>
using namespace std;
typedef long long ll;
#define pii pair<int,int>
#define pll pair<ll,ll>
#define pdd pair<double,double>
#define FILL(a,x) memset(a,x,sizeof(a))
#define	foreach( gg,ii ) for( typeof(gg.begin()) ii=gg.begin();ii!=gg.end();ii++)
#define	mp make_pair
#define	pb push_back
#define	X first
#define	Y second
#define sz(a) int((a).size())
#define maxn 1000010
#define mod 1000000007
#define REP(i,a) for(int i=0;i<a;++i)
#define REPP(i,a,b) for(int i=a;i<b;++i)
const ll INF = 1e18+1;

inline ll input(void)
{
	char t;
	ll x=0;
	int neg=0;
	t=getchar();
	while((t<48 || t>57) && t!='-')
		t=getchar();
	if(t=='-')
		{neg=1; t=getchar();}
    while(t>=48 && t<=57)
    {
        x=(x<<3)+(x<<1)+t-48;
        t=getchar();
    }
	if(neg)
		x=-x;
	return x;
}

inline void output(ll x)
{
	char a[20];
	int i=0,j;
	a[0]='0';
	if (x<0) {putchar('-'); x=-x;}
	if (x==0) putchar('0');
	while(x)
	{
		a[i++]=x%10+48;
		x/=10;
	}
	for(j=i-1;j>=0;j--)
	{
		putchar(a[j]);
	}
	putchar('\n');
}


int losscurr[30]={0},n,k;
string s;
vector< pair<int,int>  > v(maxn);
int state[maxn];
int reach[30]={0};

void incr(int i)
{
	if(state[i]==0)	losscurr[v[i].X]++;
	reach[v[i].X]++;
}

void decr(int i)
{
	if(i>=n) return ;
	if(state[i]==0) losscurr[v[i].X]--;
	reach[v[i].X]--;
}

int main()
{
	ll t;
	t=input();
	while(t--)
	{
		cin>>n>>k;
		for(int i=0;i<30;i++) losscurr[i]=reach[i]=0;
		for(int i=0;i<n;i++)
		{
			state[i]=-1;
			cin>>s;
			assert((s[0]-'a')>=0 && (s[0]-'a')<26);
			int k_=s.length()-1;
			assert((s[k_]-'a')>=0 && (s[k_]-'a')<26);
			v[i]=mp(s[0]-'a',s[s.length()-1]-'a');
		}
		for(int i=n-1;i>=0;i--)
		{
			if (!reach[v[i].Y]) state[i]=0; 
			else
			{
				if(losscurr[v[i].Y]) state[i]=1; 
				else state[i]=0;
			}
			incr(i);decr(i+k);
		}
		int f=0;
		for(int i=0;i<k&&i<n;i++)
			if(state[i]==0) f=1;
		if(!f) cout<<"Bob"<<"\n";
		else cout<<"Alex"<<"\n";
	}
return 0;
}
