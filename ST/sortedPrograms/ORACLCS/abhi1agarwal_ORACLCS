/*
._._._._._._._._._._._._._._._._._._._._._._._._._._._._._._._._._._._._._._._._
	ABHINANDAN AGARWAL
	MNNIT ALLAHABAD
	CSE
._._._._._._._._._._._._._._._._._._._._._._._._._._._._._._._._._._._._._._._._
*/
#include<bits/stdc++.h>
using namespace std;
#define pc putchar_unlocked
#define gc getchar_unlocked
typedef long long ll;
typedef unsigned long long llu;
#define mp make_pair
#define pb push_back
int fs()
{
	int x=0;
	char c;
	c=getchar_unlocked();
	while (c<'0'||c>'9')
		c=getchar_unlocked();
	while ('0'<=c&&c<='9')
	{
		x=(x<<3)+(x<<1)+c-'0';
		c=getchar_unlocked();
	}
	return x; 
}
void pps(const char *s)
{
	int i;
	for (i=0;s[i]!='\0';i++)
	{
		putchar_unlocked(s[i]);
	}
}
void _ppd(int a)
{
	if (a==0)
		return ;
	_ppd(a/10);
	putchar_unlocked(a%10+'0');
}
void ppd(int a) // Printing integer using utchar unlocked!
{
	if (a==0)
	{
		pc('0');
		return;
	}
	if (a<0)
	{
		pc('-');
		a=-a;
	}
	_ppd(a);
}
void _pplld(ll a)
{
	if (a==0)
		return ;
	_pplld(a/10);
	pc(a%10+'0');
}
void pplld(ll a)
{
	if (a==0)
	{
		pc('0');
		return ;
	}
	if (a<0)
	{
		pc('-');
		a=-a;
	}
	_pplld(a);
}
int ggs(char *s) // String inputting
{
	int x=0;
	char c=gc();
	while (!('a'<=c&&c<='z')&&c!=-1) // change conditions to whatever strings can input !
		c=gc();
	while ('a'<=c&&c<='z')
	{
		s[x++]=c;
		c=gc();
	}
	s[x]='\0';
	return x;
}

int fsn()
{
	int x=0;
	char c;
	c=getchar_unlocked();
	while (!('0'<=c&&c<='9'||c=='-'))
		c=getchar_unlocked();
	int neg=0;
	if (c=='-'){
		neg=1;
		c=getchar_unlocked();
	}
	while ('0'<=c&&c<='9')
	{
		x=(x<<3)+(x<<1)+c-'0';
		c=getchar_unlocked();
	}
	return (neg==0?x:-x); 
}
//------------------------------------------------------------------------------------

char s[101+10];
int main()
{
	int t=fs();
	while (t--)
	{
		int n=fs(),m,i,j,acm=INT_MAX,bcm=INT_MAX;
		for (i=0;i<n;i++)
		{
			m=ggs(s);
			//printf("string read :%s and m:%d\n",s,m);
			int ac=0,bc=0;
			for (j=0;j<m;j++)
			{
				if (s[j]=='a')
					ac++;
				else bc++;
			}
			//printf("ac:%d and bc:%d\n",ac,bc);
			acm=(ac<acm?ac:acm);
			bcm=(bc<bcm?bc:bcm);
		}
		ppd(acm<bcm?acm:bcm);
		pc('\n');
	}
	return 0;
}
