#pragma comment(linker, "/STACK:500000000")
#include <algorithm>
#include <functional>
#include <iostream>
#include <list>
#include <map>
#include <math.h>
#include <set>
#include <stdio.h>
#include <stdlib.h>
#include <string>
#include <string.h>
#include <time.h>
#include <queue>
#include <utility>
#include <vector>
using namespace std;

#define y0 y123
#define y1 y1234
#define ll long long
#define PI 3.1415926535897932384626433832795
#define EPS 1e-9
#define INF 2147483647
#define N 200005

ll gcd(ll a, ll b) { return (!b) ? a : gcd(b, a % b); }
int lcm(int a, int b) { return a / gcd(a,b) * b; }

int nextInt() { int n; scanf("%d", &n); return n; }
ll nextLong() { ll n; scanf("%I64d", &n); return n; }

struct query {
	int r, u, v, i;
} queries[N];

bool cmp(query a, query b) {
	return a.r < b.r;
}

vector<int> a[N];
int res[N], p[N], d[N];

void rebuild(int node, int from, int len) {
	p[node] = from;
	d[node] = len;
	for (int i = 0; i < a[node].size(); ++i) {
		int j = a[node][i];
		if (j != from) {
			rebuild(j, node, len + 1);
		}
	}
}

int main() {
	int n;
	scanf("%d", &n);
	for (int i = 0; i < n - 1; ++i) {
		int u, v;
		scanf("%d %d", &u, &v);
		a[u].push_back(v);
		a[v].push_back(u);
	}
	int q;
	scanf("%d", &q);
	for (int i = 0; i < q; ++i) {
		scanf("%d %d %d", &queries[i].r, &queries[i].u, &queries[i].v);
		queries[i].i = i;
	}
	sort(queries, queries + q, cmp);
	int prev = -1;
	for (int i = 0; i < q; ++i) {
		if (prev != queries[i].r) {
			prev = queries[i].r;
			rebuild(prev, -1, 0);
		}
		int u = queries[i].u;
		int v = queries[i].v;
		while (u != v) {
			if (d[u] > d[v]) {
				u = p[u];
			} else {
				v = p[v];
			}
		}
		res[queries[i].i] = u;
	}
	for (int i = 0; i < q; ++i) {
		printf("%d\n", res[i]);
	}
    return 0;
}