#include <cstdio>
#include <cmath>
#include <iostream>
#include <set>
#include <algorithm>
#include <vector>
#include <map>
#include <cassert>
#include <string>
#include <cstring>
#include <queue>

using namespace std;

#define rep(i,a,b) for(int i = a; i < b; i++)
#define S(x) scanf("%d",&x)
#define S2(x,y) scanf("%d%d",&x,&y)
#define P(x) printf("%d\n",x)
#define all(v) v.begin(),v.end()
#define sz size()

typedef long long int LL;
typedef pair<int, int > pii;
typedef vector<int > vi;

const int N = 100005;
const int BSZ = 320;
const int mod = 1000000007;

int A[N],AA[501];
LL ANS[501][501];
int PR[N];
int p = 1;
int n,m;
int X[10000];

struct qNode {
	int i,j;
	int l,r;
};

vector<qNode> B[N / BSZ + 5];
vector<int > D[N];

bool _cmp(qNode &a, qNode &b) {
	return a.r < b.r;
}

void pre() {

	for(int i = 2; i < N; i++) if(!PR[i]) {
		PR[i] = p++;
		for(int j = 2*i; j < N; j += i) {
			PR[j] = -1;
		}
	}

	rep(i,0,n) {
		int tmp = A[i];
		for(int j = 2; j * j <= tmp; j++) if(tmp % j == 0) {
			D[i].push_back(PR[j]);
			while(tmp % j == 0) {
				tmp /= j;
			}
		}
		if(tmp > 1) {
			D[i].push_back(PR[tmp]);
		}
	}

}

void solve() {

	pre();

	rep(i,0,N/BSZ+1) {
		sort(all(B[i]),_cmp);
		int idx = i;
		LL ans = 0;
		memset(X, 0, sizeof(X));

		rep(j,0,B[i].size()) {
			qNode q = B[i][j];
			int x = q.r / BSZ;
			while(idx < x - 1) {
				rep(k,0,BSZ) {
					int kk = k + (idx + 1) * BSZ;
					if(kk >= n) break;
					rep(l,0,D[kk].size()) {
						int tmp = D[kk][l];
						ans -= X[tmp] * 1LL * X[tmp];
						X[tmp]++;
						ans += X[tmp] * 1LL * X[tmp];
					}
				}
				idx++;
			}
			LL tmpAns = ans;
			// cout << tmpAns << "\n";
			rep(k, q.l, min((i+1)*BSZ, q.r+1)) {
				rep(l,0,D[k].size()) {
					int tmp = D[k][l];
					tmpAns -= X[tmp] * 1LL * X[tmp];
					X[tmp]++;
					tmpAns += X[tmp] * 1LL * X[tmp];
				}
			}

			// cout << tmpAns << "\n";


			rep(k, (idx+1)*BSZ, q.r+1) {
				rep(l,0,D[k].size()) {
					int tmp = D[k][l];
					tmpAns -= X[tmp] * 1LL * X[tmp];
					X[tmp]++;
					tmpAns += X[tmp] * 1LL * X[tmp];
				}
			}

			rep(k, q.l, min((i+1)*BSZ, q.r+1)) {
				rep(l,0,D[k].size()) {
					int tmp = D[k][l];
					X[tmp]--;
				}
			}

			rep(k, (idx+1)*BSZ, q.r+1) {
				rep(l,0,D[k].size()) {
					int tmp = D[k][l];
					X[tmp]--;
				}
			}
			// printf("%d %d %d %d %lld\n",q.i, q.j, q.l, q.r, tmpAns);

			ANS[q.i][q.j] = tmpAns % mod;
		}
	}

	LL finalAns = 0;

	rep(i,1,m+1) {
		LL tmp = 1;
		rep(j,1,m+1) {
			tmp *= ANS[i][j];
			// printf("%lld ",ANS[i][j]);
			tmp %= mod;
		}
		// printf("\n");
		finalAns += tmp;
		if(finalAns >= mod)
			finalAns %= mod;
	}

	cout << finalAns << "\n";
}


int main() {
	S2(n,m);

	rep(i,0,n) S(A[i]);
	rep(i,1,m+1) S(AA[i]);

	rep(i,1,m+1) rep(j,1,m+1) {
		qNode q;
		q.i = i; q.j = j;
		q.l = (AA[i] + AA[j]) % n;
		q.r = (AA[i] - AA[j] + n) % n;

		if(q.l > q.r) swap(q.l, q.r);

		B[q.l / BSZ].push_back(q);
	}

	solve();

	return 0;
}