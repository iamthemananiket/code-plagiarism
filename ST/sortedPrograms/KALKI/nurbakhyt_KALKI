#include <bits/stdc++.h>

#define pb push_back
#define f first
#define s second
#define mp make_pair
#define sz(a) (int)((a).size())
 
using namespace std;
 
const int N = 423;
const int inf = (int)1e9 + 123;

int n;
pair < pair < int, int >, int > a[N];
vector < int > g[N], out[N][N];
int d[N], ans[N];
bool u[N];

double dist(pair < pair < double, double >, int > a, pair < pair < double, double >, int > b) {
	return sqrt((a.f.f - b.f.f) * (a.f.f - b.f.f) + (a.f.s - b.f.s) * (a.f.s - b.f.s));
}

void dfs(int v, int p = -1) {
	double maxi = (p == -1 ? 0.0 : dist(a[v], a[p]));
	for (auto to : g[v])
		maxi = max(maxi, dist(a[v], a[to]));
	for (int i = 1; i <= n; i++)
		if (dist(a[v], a[i]) <= maxi)
			d[i]++;
	for (auto to : g[v])
		dfs(to, v);	
}

void dfs2(int v) {
	u[v] = 1;	
	double mini = inf * 1.0;
	int id = -1;
	for (int i = 1; i <= n; i++)
		if (!u[i] && mini > dist(a[v], a[i]))
			mini = dist(a[v], a[i]),
			id = i;
	if (id != -1) {
		g[v].pb(id);
		dfs2(id);
	}	
}

int Do(int type) {
	for (int i = 1; i <= n; i++)	
		g[i].clear();
	memset(d, 0, sizeof d);
	for (int i = 2; i <= n; i++) {
		int id = -1;
		double mini = 1.0 * inf;
		for (int j = 1; j < i; j++)
			if (mini > dist(a[i], a[j])) {
				mini = dist(a[i], a[j]);
				id = j;
			}
		g[id].pb(i);
	}
	dfs(1);
	int maxi = -1;
	for (int i = 1; i <= n; i++) {
		maxi = max(d[i], maxi);
	    out[type][a[i].s].clear();
	    for (auto to : g[i])
	    	out[type][a[i].s].pb(a[to].s);
	}
	return maxi;
}

int Do2(int type) {
	for (int i = 1; i <= n; i++)	
		g[i].clear();
	memset(d, 0, sizeof d);
	memset(u, 0, sizeof u);
	dfs2(1);
	dfs(1);
	int maxi = -1;
	for (int i = 1; i <= n; i++) {
		maxi = max(d[i], maxi);
	    out[type][a[i].s].clear();
	    for (auto to : g[i])
	    	out[type][a[i].s].pb(a[to].s);
	}
	return maxi;
}

bool cmp(pair < pair < int, int >, int > a, pair < pair < int, int >, int > b) {
	if (a.f.s < b.f.s)
		return 1;
	if (a.f.s == b.f.s && a.f.f < b.f.f)
		return 1;
	return 0;
}

bool cmp2(pair < pair < int, int >, int > a, pair < pair < int, int >, int > b) {
	if (a.f.f + a.f.s < b.f.f + b.f.s)
		return 1;
	return 0;
}

struct P {
	int x, y, id;
	double sum;
	P() {}
	P(int x, int y, int id, double sum) : x(x), y(y), id(id), sum(sum) {}
} dd[N];

bool cmp3(P a, P b) {
	if (a.sum <= b.sum)
		return 1;
	return 0;
}
   
void solve() {
	scanf("%d", &n);	
	for (int i = 1; i <= n; i++) {
		scanf("%d%d", &a[i].f.f, &a[i].f.s);
		a[i].s = i;
	}
	sort(a + 1, a + n + 1);
	ans[0] = Do(0);
	sort(a + 1, a + n + 1, &cmp);
	ans[1] = Do(1);
	random_shuffle(a + 1, a + n + 1);
	ans[2] = Do(2);
	sort(a + 1, a + n + 1, &cmp2);
	ans[3] = Do(3);
	for (int i = 1; i <= n; i++)
		dd[i] = P(a[i].f.f, a[i].f.s, a[i].s, 0.0);
	for (int i = 1; i <= n; i++)
		for (int j = 1; j <= n; j++) {
			if (i == j)
				continue;
			dd[i].sum += dist(mp(mp(a[i].f.f, a[i].f.s), a[i].s), mp(mp(a[j].f.f, a[j].f.s), a[j].s));
		}
	sort(dd + 1, dd + n + 1, &cmp3);
	for (int i = 1; i <= n; i++)
		a[i] = mp(mp(dd[i].x, dd[i].y), dd[i].id);
	ans[4] = Do(4);
	sort(a + 1, a + n + 1);
	for (int l = n / 2, r = n / 2 + 1, i = 1; l > 0 || r <= n; l--, r++) {
		if (l == 0)
			dd[i++] = P(a[r].f.f, a[r].f.s, a[r].s, 0.0);
		else if (r == n + 1)
			dd[i++] = P(a[l].f.f, a[l].f.s, a[l].s, 0.0);
		else
			dd[i++] = P(a[l].f.f, a[l].f.s, a[l].s, 0.0),
			dd[i++] = P(a[r].f.f, a[r].f.s, a[r].s, 0.0);
	}
	for (int i = 1; i <= n; i++)
		a[i] = mp(mp(dd[i].x, dd[i].y), dd[i].id);
	ans[5] = Do(5);
	ans[6] = Do2(6);
	int mini = inf;
	for (int i = 0; i < 7; i++)
		mini = min(mini, ans[i]);
	for (int i = 0; i < 7; i++)
		if (mini == ans[i]) {
		    for (int j = 1; j <= n; j++)
		    	for (auto to : out[i][j])
		    		printf("%d %d\n", j, to);
			return;
		}
	return;
}
 
int test;
 
int main() {
	srand(time(0));
	scanf("%d", &test);
	while(test--)
		solve();
	return 0;
}
 