#include <bits/stdc++.h>
using namespace std;
 
#define repu(i, a, b) for (int i = (a); i < (b); ++i)
#define repd(i, a, b) for (int i = (a); i > (b); --i)
#define mem(a, x) memset(a, x, sizeof(a))
#define all(a) a.begin(), a.end()
#define uni(a) a.erase(unique(all(a)), a.end())
#define count_bits(x) __builtin_popcount(x)
#define count_bitsll(x) __builtin_popcountll(x)
#define least_bits(x) __builtin_ffs(x)
#define least_bitsll(x) __builtin_ffsll(x)
#define most_bits(x) 32 - __builtin_clz(x)
#define most_bitsll(x) 64 - __builtin_clz(x)
 
vector<string> split(const string &s, char c) {
	vector<string> v;
	stringstream ss(s);
	string x;
	while (getline(ss, x, c)) v.push_back(x);
	return v;
}
 
#define error(args...) { vector<string> _v = split(#args, ','); err(_v.begin(), args); }
 
void err(vector<string>::iterator it) {}
 
template<typename T, typename... Args>
void err(vector<string>::iterator it, T a, Args... args) {
	cerr << it -> substr((*it)[0] == ' ', it -> length()) << " = " << a << '\n';
	err(++it, args...);
}
 
typedef long long ll;
const int MOD = 1000000007;
 
template<class T, class U> inline T tmin(T a, U b) {return (a < b) ? a : b;}
template<class T, class U> inline T tmax(T a, U b) {return (a > b) ? a : b;}
template<class T, class U> inline void amax(T &a, U b) {if (b > a) a = b;}
template<class T, class U> inline void amin(T &a, U b) {if (b < a) a = b;}
template<class T> inline T tabs(T a) {return (a > 0) ? a : -a;}
template<class T> T gcd(T a, T b) {while (b != 0) {T c = a; a = b; b = c % b;} return a;}
 
#define X first
#define Y second
 
typedef pair<int, int> P;
typedef pair<P, P> Q;
 
const int N = 105, M = 1001;
int n, m, a[N][N];
int f[M], g[M];
 
bool compare_x(const Q &q1, const Q &q2) {
	int n1 = q1.Y.X * N + q1.X.X;
	int n2 = q2.Y.X * N + q2.X.X;
	if (n1 == n2) {
		return q1.X.Y + q1.Y.Y < q2.X.Y + q2.Y.Y;
	}
	return n1 < n2;
}
 
bool compare_y(const Q &q1, const Q &q2) {
	int n1 = q1.Y.Y * N + q1.X.Y;
	int n2 = q2.Y.Y * N + q2.X.Y;
	if (n1 == n2) {
		return q1.X.X + q1.Y.X < q2.X.X + q2.Y.X;
	}
	return n1 < n2;
}
 
void fix(vector<Q> &x) {
	
	sort(all(x), compare_x);
	while (true) {
		bool found = 0;
		repu(i, 0, x.size() - 1) {
			int j = i + 1;
			if (x[i].X.X == x[j].X.X && x[i].Y.X == x[j].Y.X && x[j].X.Y - x[i].Y.Y == 1) {
				x[i].Y.Y = x[j].Y.Y;
				x.erase(x.begin() + j);
				found = 1; break;
			}
		}
		if (!found) break;
	}
	
	sort(all(x), compare_y);
	while (true) {
		bool found = 0;
		repu(i, 0, x.size() - 1) {
			int j = i + 1;
			if (x[i].X.Y == x[j].X.Y && x[i].Y.Y == x[j].Y.Y && x[j].X.X - x[i].Y.X == 1) {
				x[i].Y.X = x[j].Y.X;
				x.erase(x.begin() + j);
				found = 1; break;
			}
		}
		if (!found) break;
	}
}
 
int main(int argc, char *argv[]) {
	ios_base::sync_with_stdio(false);
	
	int ntest;
	
	srand(time(NULL));
	
	cin >> ntest;
	while (ntest--) {
		cin >> n >> m;
		mem(f, 0);
		repu(i, 0, n) repu(j, 0, m) {
			cin >> a[i][j];
			f[a[i][j]]++;
		}
		
		vector<int> rows(n), cols(m);
		repu(i, 0, n) rows[i] = i;
		repu(i, 0, m) cols[i] = i;
		
		vector<Q> ret(n * m);
		vector<Q> tmp;
		
		repu(it, 0, 100) {
			repu(i, 1, M) g[i] = f[i] >> 1;
			
			repu(i, 0, n) {
				int ind = rows[i];
				for (int j = 0; j < m;) {
					if (g[a[ind][j]] == 0) {
						j++;
						continue;
					}
					int st = j;
					while (j < m && g[a[ind][j]] > 0) {
						g[a[ind][j]]--;
						j++;
					}
					tmp.push_back(Q(P(ind + 1, st + 1), P(ind + 1, j)));
				}
			}
			fix(tmp);
			random_shuffle(all(rows));
			if (tmp.size() < ret.size()) ret = tmp;
			
			tmp.clear();
			repu(i, 1, M) g[i] = f[i] >> 1;
			repu(j, 0, m) {
				int ind = cols[j];
				for (int i = 0; i < n;) {
					if (g[a[i][ind]] == 0) {
						i++;
						continue;
					}
					int st = i;
					while (i < n && g[a[i][ind]] > 0) {
						g[a[i][ind]]--;
						i++;
					}
					tmp.push_back(Q(P(st + 1, ind + 1), P(i, ind + 1)));
				}
			}
			fix(tmp);
			random_shuffle(all(cols));
			if (tmp.size() < ret.size()) ret = tmp;
			tmp.clear();
		}
		
		printf("%d\n", ret.size());
		repu(i, 0, ret.size()) {
			printf("%d %d %d %d\n", ret[i].X.X, ret[i].X.Y, ret[i].Y.X, ret[i].Y.Y);
		}
	}
	
	return 0;
}