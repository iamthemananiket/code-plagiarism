#include<cassert>
#include<cstdio>
#include<iostream>
#include<vector>
#include<algorithm>
#include<string>
#include<cstring>
using namespace std;

typedef long long LL;
typedef vector<int> VI;

#define REP(i,n) for(int i=0, i##_len=(n); i<i##_len; ++i)
#define EACH(i,c) for(__typeof((c).begin()) i=(c).begin(),i##_end=(c).end();i!=i##_end;++i)
#define FOR(i,c) for(__typeof((c).begin()) i=(c).begin(),i##_end=(c).end();i!=i##_end;++i)
#define eprintf(s...)  fprintf(stderr, s)

template<class T> inline void amin(T &x, const T &y) { if (y<x) x=y; }
template<class T> inline void amax(T &x, const T &y) { if (x<y) x=y; }

typedef vector<VI> Adj;
struct Edge {
    int src, dst;
    Edge(int s=0, int d=0): src(s), dst(d) {};
};
typedef vector<Edge> Edges;
typedef vector<Edges> Graph;


#define EVEN(x) (mu[x] == x || (mu[x] != x && phi[mu[x]] != mu[x]))
#define ODD(x)  (mu[x] != x && phi[mu[x]] == mu[x] && phi[x] != x)
#define OUTER(x) (mu[x] != x && phi[mu[x]] == mu[x] && phi[x] == x)
int maximumMatching(const Adj&g) {//, Edges &matching) {
  int n = g.size();
  vector<int> mu(n), phi(n), rho(n), scanned(n);
  REP(v,n) mu[v] = phi[v] = rho[v] = v; // (1) initialize
  for (int x = -1; ; ) {
    if (x < 0) {                        // (2) select even
      for (x = 0; x < n && (scanned[x] || !EVEN(x)); ++x);
      if (x == n) break;
    }
    int y = -1;                         // (3) select incident
    FOR(e, g[x]) if (OUTER(*e) || (EVEN(*e) && rho[*e] != rho[x])) y = *e;
    if (y == -1) scanned[x] = true, x = -1;
    else if (OUTER(y)) phi[y] = x;      // (4) growth
    else {
      vector<int> dx(n, -2), dy(n, -2); // (5,6), !TRICK! x % 2 --> x >= 0
      for (int k = 0, w = x; dx[w] < 0; w = k % 2 ? mu[w] : phi[w]) dx[w] = k++;
      for (int k = 0, w = y; dy[w] < 0; w = k % 2 ? mu[w] : phi[w]) dy[w] = k++;
      bool vertex_disjoint = true;
      REP(v,n) if (dx[v] >= 0 && dy[v] > 0) vertex_disjoint = false;
      if (vertex_disjoint) {            // (5) augment
        REP(v,n) if (dx[v] % 2) mu[phi[v]] = v, mu[v] = phi[v];
        REP(v,n) if (dy[v] % 2) mu[phi[v]] = v, mu[v] = phi[v];
        mu[x] = y; mu[y] = x; x = -1;
        REP(v,n) phi[v] = rho[v] = v, scanned[v] = false;
      } else {                          // (6) shrink
        int r = x, d = n;
        REP(v,n) if (dx[v] >= 0 && dy[v] >= 0 && rho[v] == v && d > dx[v]) d = dx[v], r = v;
        REP(v,n) if (dx[v] <= d && dx[v] % 2 && rho[phi[v]] != r) phi[phi[v]] = v;
        REP(v,n) if (dy[v] <= d && dy[v] % 2 && rho[phi[v]] != r) phi[phi[v]] = v;
        if (rho[x] != r) phi[x] = y;
        if (rho[y] != r) phi[y] = x;
        REP(v,n) if (dx[rho[v]] >= 0 || dy[rho[v]] >= 0) rho[v] = r;
      }
    }
  }

  int ans = 0;
  REP (u,n) if (u < mu[u]) ans++;
  return ans;
/*  matching.clear();
  REP(u,n) if (u < mu[u]) matching.push_back( Edge(u, mu[u]) );
  return matching.size(); // make explicit matching
  */
}
// Blossom Algorithm
// O(V^4)
struct Matching {
    const Adj &G;
    vector<int> match;
    vector<char> use, act;
    int ans;
    bool dfs(int v) {
	use[v] = act[v] = true;
	for (int i=0; i<(int)G[v].size(); i++) {
	    int u = G[v][i], y = match[u];
	    if (act[u]) continue;
	    act[u] = true;
	    if (y == -1 || (!use[y] && dfs(y))) {
		match[u] = v; match[v] = u;
		act[v] = act[u] = false;
		return true;
	    }
	    act[u] = false;
	}
	act[v] = false;
	return false;
    }
    Matching(const Adj &G_) : G(G_), match(G.size(), -1), ans(0) {
	act = vector<char>(G.size(), 0);
	int N = G.size();
	for (int i=0; i<N; i++) {
	    if (match[i] != -1) continue;
	    use = vector<char>(N, 0);
	    if (dfs(i)) {
		ans++;
//		for (int i=0; i<(int)path.size(); i+=2) {
//		    match[path[i]] = path[i+1];
//		    match[path[i+1]] = path[i];
//		}
	    }
	}
    }
};

int N, M;
pair<int, int> E[1000111];
int cnt;
int T[41][3];
Adj Z, G;

void MAIN() {
    scanf("%d%d", &N, &M);
    Z = Adj(N);
    REP (i, M) {
	int a, b;
	scanf("%d%d", &a, &b);
	a--; b--;
	if (a > b) swap(a, b);
	Z[a].push_back(b);
    }
    REP (i, N) sort(Z[i].begin(), Z[i].end());
//    sort(E, E+M);

    cnt = 0;

    REP (i, N) REP (j, Z[i].size()) {
	int a = i, b = Z[i][j];
	for (int k=j+1; k<(int)Z[i].size(); k++) {
	    int c = Z[i][k];
	    int p = lower_bound(Z[b].begin(), Z[b].end(), c) - Z[b].begin();
	    if (p < (int)Z[b].size() && c == Z[b][p]) {
		T[cnt][0] = a;
		T[cnt][1] = b;
		T[cnt][2] = c;
		cnt++;
	    }
	}
	/*
	int a = E[i].first, b = E[i].second;
	for (int j=i+1; j<M && E[j].first == a; j++) {
	    int c = E[j].second;
	    pair<int, int> key(b, c);
	    int p = lower_bound(E+j, E+M, key) - E;

	    if (p < M && E[p] == key) {
		T[cnt][0] = a;
		T[cnt][1] = b;
		T[cnt][2] = c;
		cnt++;
	    }
	}
	*/
    }


    G = Adj(cnt);
//    Graph Gr(cnt);
    REP (i, cnt) {
	REP (j, i) {
	    bool f = false;
	    REP (a, 3) REP (b, 3) {
		if (T[i][a] == T[j][b]) f = true;
	    }
	    if (f) {
		// (i, j)
		G[i].push_back(j);
		G[j].push_back(i);
//		Gr[i].push_back(Edge(i, j));
//		Gr[j].push_back(Edge(j, i));
	    }
	}
    }

    assert(cnt <= 40);



   int ans = Matching(G).ans;
    //int ans = maximumMatching(G);
    printf("%d\n", cnt - ans);
//    eprintf("%d %d\n", cnt, X.ans);
//    REP (i, cnt) eprintf("%d ", X.match[i]); eprintf("\n");

}

int main() {
    int T;
    scanf("%d", &T);
    REP (i, T) MAIN();


    return 0;
}
