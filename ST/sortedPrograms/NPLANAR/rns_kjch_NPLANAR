#include <bits/stdc++.h>
using namespace std;


bool con[3001][3001];
int to[3000 * 3000], nxt[3000 * 3000];
vector<int> w[6001];

struct dat{
    int x, y, z;
    dat(int x = 0, int y = 0, int z = 0):x(x), y(y), z(z){}
}A[1001];

bool intersect(dat A, dat B){
    if(A.x == B.x || A.x == B.y || A.x == B.z) return 1;
    if(A.y == B.x || A.y == B.y || A.y == B.z) return 1;
    if(A.z == B.x || A.z == B.y || A.z == B.z) return 1;
    return 0;
}

bool operator < (dat A, dat B){
    if(A.x != B.x) return A.x < B.x;
    if(A.y != B.y) return A.y < B.y;
    return A.z < B.z;
}

bool operator == (dat A, dat B){
    if(A.x == B.x && A.y == B.y && A.z == B.z) return 1;
    return 0;
}


#define N 2001


vector <int> CON[N];
bool inq[N], inpath[N], inblo[N];
int n, Match[N];
int start, finish, newbase;
int father[N], base[N];
queue <int> q;

int lca(int u, int v) {
	memset(inpath, 0, sizeof inpath);
	while (1) {
		u = base[u];
		inpath[u] = 1;
		if (u == start)break;
		u = father[Match[u]];
	}
	while (1) {
		v = base[v];
		if (inpath[v]) break;
		v = father[Match[v]];
	}
	return v;
}

void reset_trace(int u) {
	while (base[u] != newbase) {
		int v = Match[u];
		inblo[base[u]] = inblo[base[v]] = 1;
		u = father[v];
		if (base[u] != newbase)father[u] = v;
	}
}

void blossom_CONtract(int u, int v) {
	newbase = lca(u,v);
	memset(inblo, 0, sizeof inblo);
	reset_trace(u);
	reset_trace(v);
	if (base[u] != newbase) father[u] = v;
	if (base[v] != newbase) father[v] = u;
	for (int i = 1; i <= n; i ++) if (inblo[base[i]]) {
		base[i] = newbase;
		if (!inq[i]) q.push(i);
	}
}

void find_augmenting_path() {
	memset(inq, 0, sizeof inq);
	memset(father, 0, sizeof father);
	for (int i = 1; i <= n; i ++) base[i] = i;
	while (!q.empty()) q.pop();
	q.push(start);
	finish = 0;
	while (!q.empty()) {
		int x = q.front(); q.pop();
		for (int j = 0; j < CON[x].size(); j ++) {
			int i = CON[x][j];
			if (base[i] != base[x] && Match[x] != i)
				if (i == start || Match[i] > 0 && father[Match[i]] > 0) blossom_CONtract(x, i);
				else if (!father[i]) {
					father[i] = x;
					if (Match[i] > 0) q.push(Match[i]);
					else {
						finish = i;
						return;
					}
				}
		}
	}
}

void augment() {
	int u = finish;
	while (u > 0) {
		int v = father[u], w = Match[v];
		Match[v] = u;
		Match[u] = v;
		u = w;
	}
}

int Edmonds() {
	memset(Match, 0, sizeof Match);
	for (int k = 1; k <= n; k ++) if (!Match[k]) {
		start = k;
		find_augmenting_path();
		if (finish > 0) augment();
	}
	int k = 0;
	for (int i = 1; i <= n; i ++) k += Match[i] > 0;
	return k >> 1;
}

int vis[3001];

int main() {
    ///freopen("1.in", "r", stdin);
    int T;
    scanf("%d", &T);
    while(T --) {
        int a, b;
        scanf("%d %d", &a, &b);
        for(int i = 1; i <= a; i ++) for(int j = 1; j <= a; j ++) if(i == j) con[i][j] = 1; else con[i][j] = 0;
        for(int i = 1; i <= a; i ++) w[i].clear();
        for(int i = 1; i <= b; i ++) {
            scanf("%d %d", &to[i], &nxt[i]);
            w[to[i]].push_back(nxt[i]);
            w[nxt[i]].push_back(to[i]);
            con[to[i]][nxt[i]] = con[nxt[i]][to[i]] = 1;
        }
        int cnt = 0;
        for(int i = 1; i <= b; i ++) {
            int x = to[i], y = nxt[i];
            if(w[x].size() >= w[y].size()) swap(x, y);
            for(int j = 0; j < w[x].size(); j ++){
                int k = w[x][j];
                if(k == y) continue;
                if(con[k][y]) {
                    int xx = x;
                    int kk = k;
                    int yy = y;
                    if(xx > kk) swap(xx, kk);
                    if(xx > yy) swap(xx, yy);
                    if(kk > yy) swap(kk, yy);
                    A[++cnt] = dat(xx, kk, yy);
                }
            }
        }
        sort(A + 1, A + cnt + 1);
        cnt = unique(A + 1, A + cnt + 1) - A - 1;
        memset(vis, 0, sizeof(vis));
        n = cnt;
        for(int i = 1; i <= cnt; i ++) CON[i].clear();
        for(int i = 1; i <= cnt; i ++) for(int j = 1; j <= cnt; j ++) if(intersect(A[i], A[j])) {
            CON[i].push_back(j);
            CON[j].push_back(i);
        }
        int x = Edmonds();
        printf("%d\n", cnt - x);
    }
}
