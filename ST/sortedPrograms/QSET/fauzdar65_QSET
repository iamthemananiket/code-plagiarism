#include <iostream>
#include <vector>
#define ll long long
#define pp vector<ll>
#define mp make_pair
using namespace std;

inline void scanint(int* x)
{
	register char c = getchar_unlocked();
	*x = 0;
	for(; (c<48)||(c>57);c = getchar_unlocked());
	for(; (c>47)&&(c<58);c = getchar_unlocked())
		*x = (int)((((*x)<<1) + ((*x)<<3)) + c - 48);
}



int A[100005];
ll tree[550000][3],tr[550000][3],tl[550000][3];
int rem[550000];

void build(int node,int a,int b)
{
	if(a>b)return;
	
	if(a==b)
	{
		
		int p=A[a]%3;
		rem[node]=p;
		tree[node][p]=1;tr[node][p]=1; tl[node][p]=1; 
		return;
	}
	
	build(node*2,a,(a+b)/2);
	build(node*2+1,(a+b)/2 +1,b);
	
	rem[node]=(rem[node*2] + rem[node*2+1])%3;
	
	
	
	for(int i=0;i<=2;i++)
	{
	tree[node][i]= tree[node*2][i] + tree[node*2+1][i];
	tl[node][i]=tl[node*2][i];
	tr[node][i]=tr[node*2+1][i];
	}
	
	tree[node][0]+= tr[node*2][0]*tl[node*2+1][0] + tr[node*2][1]*tl[node*2+1][2] + tr[node*2][2]*tl[node*2+1][1];
	tree[node][1]+= tr[node*2][0]*tl[node*2+1][1] + tr[node*2][1]*tl[node*2+1][0]+ tr[node*2][2]*tl[node*2+1][2];
	tree[node][2]+= tr[node*2][0]*tl[node*2+1][2] + tr[node*2][2]*tl[node*2+1][0]+ tr[node*2][1]*tl[node*2+1][1];
	
	if(rem[node*2]==0)
	{
	tl[node][0]+= tl[node*2+1][0];
	tl[node][1]+= tl[node*2+1][1];
	tl[node][2]+= tl[node*2+1][2];
	}
	else if(rem[node*2]==1)
	{
	tl[node][0]+= tl[node*2+1][2];
	tl[node][1]+= tl[node*2+1][0];
	tl[node][2]+= tl[node*2+1][1];
	}
	else
	{
	tl[node][0]+= tl[node*2+1][1];
	tl[node][1]+= tl[node*2+1][2];
	tl[node][2]+= tl[node*2+1][0];
	}
	
	
	if(rem[node*2+1]==0)
	{
	tr[node][0]+= tr[node*2][0];
	tr[node][1]+= tr[node*2][1];
	tr[node][2]+= tr[node*2][2];
	}
	else if(rem[node*2+1]==1)
	{
	tr[node][0]+= tr[node*2][2];
	tr[node][1]+= tr[node*2][0];
	tr[node][2]+= tr[node*2][1];
	}
	else
	{
	tr[node][0]+= tr[node*2][1];
	tr[node][1]+= tr[node*2][2];
	tr[node][2]+= tr[node*2][0];
	}
	
	
}

void update(int node,int a,int b,int i,int d)
{
	if(a>b || a>i || b<i)return;
	
	if(a==b)
	{
		A[a]=d;
		int p=d%3;
		rem[node]=p;
		for(int z=0;z<=2;z++)
		{
		if(z==p){ tree[node][p]=1;tr[node][p]=1; tl[node][p]=1; }
		else {tree[node][z]=0;tr[node][z]=0; tl[node][z]=0;}
		}
		
		
		return;
	}
	
	update(node*2,a,(a+b)/2,i,d);
	update(node*2+1,(a+b)/2 +1,b,i,d);
	
	rem[node]=(rem[node*2] + rem[node*2+1])%3;
	
	for(int z=0;z<=2;z++)
	{
	tree[node][z]= tree[node*2][z] + tree[node*2+1][z];
	tl[node][z]=tl[node*2][z];
	tr[node][z]=tr[node*2+1][z];
	}
	
	tree[node][0]+= tr[node*2][0]*tl[node*2+1][0]+tr[node*2][1]*tl[node*2+1][2]+tr[node*2][2]*tl[node*2+1][1];
	tree[node][1]+= tr[node*2][0]*tl[node*2+1][1]+tr[node*2][1]*tl[node*2+1][0]+tr[node*2][2]*tl[node*2+1][2];
	tree[node][2]+= tr[node*2][0]*tl[node*2+1][2]+tr[node*2][2]*tl[node*2+1][0]+tr[node*2][1]*tl[node*2+1][1];
	
	if(rem[node*2]==0)
	{
	tl[node][0]+= tl[node*2+1][0];
	tl[node][1]+= tl[node*2+1][1];
	tl[node][2]+= tl[node*2+1][2];
	}
	else if(rem[node*2]==1)
	{
	tl[node][0]+= tl[node*2+1][2];
	tl[node][1]+= tl[node*2+1][0];
	tl[node][2]+= tl[node*2+1][1];
	}
	else
	{
	tl[node][0]+= tl[node*2+1][1];
	tl[node][1]+= tl[node*2+1][2];
	tl[node][2]+= tl[node*2+1][0];
	}
	
	
	if(rem[node*2+1]==0)
	{
	tr[node][0]+= tr[node*2][0];
	tr[node][1]+= tr[node*2][1];
	tr[node][2]+= tr[node*2][2];
	}
	else if(rem[node*2+1]==1)
	{
	tr[node][0]+= tr[node*2][2];
	tr[node][1]+= tr[node*2][0];
	tr[node][2]+= tr[node*2][1];
	}
	else
	{
	tr[node][0]+= tr[node*2][1];
	tr[node][1]+= tr[node*2][2];
	tr[node][2]+= tr[node*2][0];
	}
	

	
	
}

pp query(int node,int a,int b,int i,int j)
{
	if(a>b || a>j || b<i )return pp{0,0,0,0,0,0,0,0,0,0};
	
	if(a>=i && b<=j)return pp{tree[node][0],tree[node][1],tree[node][2],tl[node][0],tl[node][1],tl[node][2],tr[node][0],tr[node][1],tr[node][2],rem[node]};
	
	pp r1=query(node*2,a,(a+b)/2,i,j);
	pp r2=query(node*2+1,(a+b)/2 +1,b,i,j);
	
	
	
	ll v[3],v1[3],v2[3],re;
	re=(r1[9]+r2[9])%3;
	
	for(int i=0;i<=2;i++)
	{
	v[i]= r1[i] + r2[i];
	v1[i]=r1[i+3];
	v2[i]=r2[i+6];
	}
	
	v[0]+= r1[6]*r2[3] + r1[7]*r2[5] + r1[8]*r2[4];
	v[1]+= r1[6]*r2[4] + r1[7]*r2[3] + r1[8]*r2[5];
	v[2]+= r1[6]*r2[5] + r1[8]*r2[3] + r1[7]*r2[4];
	
	if(r1[9]==0)
	{
	v1[0]+= r2[3];
	v1[1]+= r2[4];
	v1[2]+= r2[5];
	}
	else if(r1[9]==1)
	{
	v1[0]+= r2[5];
	v1[1]+= r2[3];
	v1[2]+= r2[4];
	}
	else
	{
	v1[0]+= r2[4];
	v1[1]+= r2[5];
	v1[2]+= r2[3];
	}
	
	
	if(r2[9]==0)
	{
	v2[0]+= r1[6];
	v2[1]+= r1[7];
	v2[2]+= r1[8];
	}
	else if(r2[9]==1)
	{
	v2[0]+= r1[8];
	v2[1]+= r1[6];
	v2[2]+= r1[7];
	}
	else
	{
	v2[0]+= r1[7];
	v2[1]+= r1[8];
	v2[2]+= r1[6];
	}
	
	return pp{v[0],v[1],v[2],v1[0],v1[1],v1[2],v2[0],v2[1],v2[2],re};
}

int main() {
	int n,m;
	string s;
	
	scanint(&n);scanint(&m);
	cin>>s;
	
	for(int i=1;i<=n;i++)A[i]=s[i-1]-'0';
	
	build(1,1,n);
	
	//cout<<tree[5][2]<<" ";
	
	int a,b,c;
	
	while(m--)
	{
		scanint(&a); scanint(&b); scanint(&c);
		
		if(a==1)update(1,1,n,b,c);
		else printf("%lld\n",(query(1,1,n,b,c))[0]);
	}
	
//cout<<tree[1][0]<<" ";

	return 0;
}