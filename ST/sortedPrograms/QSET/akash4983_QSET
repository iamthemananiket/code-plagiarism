#include <cstdio>
#include <cmath>
#include <iostream>
#include <set>
#include <algorithm>
#include <vector>
#include <map>
#include <cassert>
#include <string>
#include <cstring>
#include <queue>

using namespace std;

#define rep(i,a,b) for(int i = a; i < b; i++)
#define S(x) scanf("%d",&x)
#define S2(x,y) scanf("%d%d",&x,&y)
#define P(x) printf("%d\n",x)
#define all(v) v.begin(),v.end()
#define sz size()

typedef long long int LL;
typedef pair<int, int > pii;
typedef vector<int > vi;

const int N = 100001;
int A[N];
string s;

struct stNode {
	LL ans; // actual ans
	int sum; // sum of whole chunk
	int L[3], R[3]; // store left and right prefixes for every remainder
};

stNode ST[4*N];

void build(int n, int b, int e) {

	if(b == e) {
		if(!A[b]) ST[n].ans = 1;
		ST[n].sum = A[b];
		ST[n].L[A[b]] = ST[n].R[A[b]] = 1;
		return;
	}

	int m = (b + e) >> 1;
	int l = n << 1;
	int r = l | 1;

	build(l, b, m);
	build(r, m+1, e);

	ST[n].ans = ST[l].ans + ST[r].ans;
	rep(i,0,3) {
		ST[n].ans += ST[l].R[i] * 1LL * ST[r].L[(3-i)%3];
	}

	ST[n].sum = (ST[l].sum + ST[r].sum) % 3;

	int x = ST[l].sum;
	int y = ST[r].sum;

	// if(n == 2) printf("%d %d\n",x,y);

	rep(i,0,3) {
		ST[n].R[i] = ST[r].R[i] + ST[l].R[(3+i-y)%3];
		ST[n].L[i] = ST[l].L[i] + ST[r].L[(3+i-x)%3];
	}

}


void update(int n, int b, int e, int idx, int val) {
	if(b == e) {
		A[b] = val;
		if(!A[b]) ST[n].ans = 1;
		else ST[n].ans = 0;
		ST[n].sum = A[b];
		rep(i,0,3) ST[n].L[i] = ST[n].R[i] = 0;
		ST[n].L[A[b]] = ST[n].R[A[b]] = 1;
		return;
	}

	int m = (b + e) >> 1;
	int l = n << 1;
	int r = l | 1;

	if(idx <= m) {
		update(l, b, m, idx, val);
	} else {
		update(r, m+1, e, idx, val);
	}

	ST[n].ans = ST[l].ans + ST[r].ans;
	rep(i,0,3) {
		ST[n].ans += ST[l].R[i] * 1LL * ST[r].L[(3-i)%3];
	}

	ST[n].sum = (ST[l].sum + ST[r].sum) % 3;

	int x = ST[l].sum;
	int y = ST[r].sum;

	rep(i,0,3) {
		ST[n].R[i] = ST[r].R[i] + ST[l].R[(3+i-y)%3];
		ST[n].L[i] = ST[l].L[i] + ST[r].L[(3+i-x)%3];
	}

}

stNode query(int n, int b, int e, int x, int y) {

	if(b == x && e == y) {
		return ST[n];
	}

	int m = (b + e) >> 1;
	int l = n << 1;
	int r = l | 1;

	if(y <= m) {
		return query(l, b, m, x, y);
	} else if(x > m) {
		return query(r, m+1, e, x, y);
	}

	stNode left = query(l, b, m, x, m);
	stNode right = query(r, m+1, e, m+1, y);

	stNode res;
	res.ans = left.ans + right.ans;
	res.sum = left.sum + right.sum;

	int ls = left.sum;
	int rs = right.sum;

	rep(i,0,3) {
		res.ans += left.R[i] * 1LL * right.L[(3-i)%3];
		res.L[i] = left.L[i] + right.L[(3+i-ls) % 3];
		res.R[i] = right.R[i] + left.R[(3+i-rs) % 3];
	}

	return res;

}


int main() {
	int n,m;
	S2(n,m);
	cin >> s;
	rep(i,0,n) {
		A[i+1] = s[i] - '0';
		A[i+1] %= 3;
	}

	build(1, 1, n);

	// rep(i,1,8) {
	// 	printf("%d %lld %d\n",i, ST[i].ans, ST[i].sum);
	// 	printf("L: "); rep(j,0,3) printf("%d ",ST[i].L[j]);printf("\n");
	// 	printf("R: "); rep(j,0,3) printf("%d ",ST[i].R[j]);printf("\n");
	// }

	while(m--) {
		int type,x,y;
		S(type);
		S2(x,y);

		if(type == 1) {
			update(1, 1, n, x, y % 3);
		} else {
			stNode ans = query(1, 1, n, x, y);
			printf("%lld\n",ans.ans);
		}
	}
	return 0;
}