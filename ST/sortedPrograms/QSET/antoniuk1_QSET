#include <iostream>
#include <vector>
#include <math.h>
#include <algorithm>
#include <set>
#include <queue>
#include <memory.h>

using namespace std;

int a[111111];

struct P {
    int sum;
    int preff[3];
    int suff[3];
    long long ans;
} tree[444444];

P join(P a, P b) {
    P res;
    for(int l = 0; l < 3; ++l) {
        res.preff[l] = a.preff[l];
        res.suff[l] = b.suff[l];
    }
    
    for (int l = 0; l < 3; ++l) {
        res.preff[(l + a.sum) % 3] += b.preff[l];
        res.suff[(l + b.sum) % 3] += a.suff[l];
    }
    
    res.ans = a.ans + b.ans;
    res.ans += b.preff[0] * 1ll * a.suff[0];
    res.ans += b.preff[1] * 1ll * a.suff[2];
    res.ans += b.preff[2] * 1ll * a.suff[1];
    
    res.sum = a.sum + b.sum;
    
    return res;
}

void build(int v, int l, int r) {
    if (l == r) {
        tree[v].preff[a[l-1]] = tree[v].suff[a[l-1]] = 1;
        tree[v].sum = a[l-1];
        if (a[l-1] == 0) tree[v].ans = 1;
    }
    else {
        int md = (l + r) >> 1;
        build(v + v, l, md);
        build(v + v + 1, md + 1, r);
        
        tree[v] = join(tree[v + v], tree[v + v + 1]);
    }
}

void upd(int v, int l, int r, int pos, int val) {
    if (l == r) {
        for (int i = 0; i < 3; ++i)
            tree[v].preff[i] = tree[v].suff[i] = 0;
        
        tree[v].preff[val] = tree[v].suff[val] = 1;
        tree[v].sum = val;
        if (val == 0) tree[v].ans = 1;
        else tree[v].ans = 0;
    }
    else {
        int md = (l + r) >> 1;
        if (pos <= md)
            upd(v + v, l, md, pos, val);
        else
            upd(v + v + 1, md + 1, r, pos, val);
        
        tree[v] = join(tree[v + v], tree[v + v + 1]);
    }
}

P get(int v, int l, int r, int tl, int tr) {
    if (l == tl && r == tr)
        return tree[v];
    
    int md = (l + r) >> 1;
    if (tr <= md)
        return get(v + v, l, md, tl, tr);
    if (tl > md)
        return get(v + v + 1, md + 1, r, tl, tr);
    
    return join(get(v + v, l, md, tl, md),
                get(v + v + 1, md + 1, r, md + 1, tr));
}

int main() {
    ios::sync_with_stdio(0);
    int n, m;
    cin >> n >> m;
    string s; cin >> s;
    for (int i = 0; i < n; ++i)
        a[i] = (s[i] - '0') % 3;
    
    build(1, 1, n);
    
    int type, a, b;
    while (m --> 0) {
        cin >> type >> a >> b;
        if (type == 1)
            upd(1, 1, n, a, b % 3);
        else
            cout << get(1, 1, n, a, b).ans << "\n";
    }
    return 0;
}
