#include<iostream>
#include<cstdio>
#define N 300000
#define ll long long
using namespace std;
ll tree[3][3][N];
ll treecurr[N];
int arr[100001];
struct point
{
	ll a[3][3];
	ll curr;
};
void initialize(int node, int a,int b)
{
	if(a>b)
	{
		return;
	}
	if(a==b)
	{
		tree[1][arr[a]%3][node]=1; //initialize the leaf nodes
		tree[0][arr[a]%3][node]=1;
		tree[2][arr[a]%3][node]=1;
		for(int j=0;j<=2;j++)
		{
			for(int i=0;i<=2;i++)
			{
				if(i!=arr[a]%3)
				{
					tree[j][i][node]=0;
				}
			}
		}
		treecurr[node]=arr[a]%3;
		return;
	}
	initialize(node*2, a,(a+b)/2);
	initialize(node*2+1, (a+b)/2+1,b);
	treecurr[node]=(treecurr[2*node]+treecurr[2*node+1])%3;
	for(int i=0;i<=2;i++)
	{
		tree[2][i][node]=tree[2][i][node*2];
	}
	for(int i=0;i<=2;i++)
	{
		tree[2][i][node]+=tree[2][i][node*2+1];
	}
	for(int i=0;i<=2;i++)
	{
		for(int j=0;j<=2;j++)
		{
			tree[2][(i*10+j)%3][node]+=(tree[1][i][node*2]*tree[0][j][node*2+1]);
		}
	}
	for(int i=0;i<=2;i++)
	{
		tree[0][i][node]=tree[0][i][2*node];
	}
	for(int i=0;i<=2;i++)
	{
		tree[1][i][node]=tree[1][i][2*node+1];
	}
	ll p1=treecurr[2*node];
	ll p2=treecurr[2*node+1];
	for(int i=0;i<=2;i++)
	{
		tree[0][(p1+i)%3][node]+=tree[0][i][2*node+1];
		tree[1][(p2+i)%3][node]+=tree[1][i][2*node];
	}
}
void update(int node,int a,int b,int l,int h,int val)
{
	//cout<<a<<" "<<b<<endl;
	if(a>b || a>h || b<l)
	{
		return;
	}
	if(a==b)
	{
		tree[1][val%3][node]=1; //initialize the leaf nodes
		tree[0][val%3][node]=1;
		tree[2][val%3][node]=1;
		for(int j=0;j<=2;j++)
		{
			for(int i=0;i<=2;i++)
			{
				if(i!=val%3)
				{
					tree[j][i][node]=0;
				}
			}
		}
		treecurr[node]=val%3;
		return;
	}
	update(node*2,a,(a+b)/2,l,h,val);
	update(node*2+1,(a+b)/2+1,b,l,h,val);
	treecurr[node]=(treecurr[2*node]+treecurr[2*node+1])%3;
	for(int i=0;i<=2;i++)
	{
		tree[2][i][node]=tree[2][i][node*2];
	}
	for(int i=0;i<=2;i++)
	{
		tree[2][i][node]+=tree[2][i][node*2+1];
	}
	for(int i=0;i<=2;i++)
	{
		for(int j=0;j<=2;j++)
		{
			tree[2][(i*10+j)%3][node]+=(tree[1][i][node*2]*tree[0][j][node*2+1]);
		}
	}
	for(int i=0;i<=2;i++)
	{
		tree[0][i][node]=tree[0][i][2*node];
	}
	for(int i=0;i<=2;i++)
	{
		tree[1][i][node]=tree[1][i][2*node+1];
	}
	ll p1=treecurr[2*node];
	ll p2=treecurr[2*node+1];
	for(int i=0;i<=2;i++)
	{
		tree[0][(p1+i)%3][node]+=tree[0][i][2*node+1];
		tree[1][(p2+i)%3][node]+=tree[1][i][2*node];
	}
}
int cnt;
point query(int node, int a,int b, int l,int h)
{
	point temp;
//	cout<<a<<" "<<b<<endl;
	//return temp;
	if(a>b || a>h || b<l) 
	{
			for(int i=0;i<3;i++)
			{
				for(int j=0;j<3;j++)
				{
					temp.a[i][j]=0;
				}
			}
		temp.curr=0;
		return temp;
	}
	if(a>=l && b<=h)	
	{
		for(int i=0;i<3;i++)
		{
			for(int j=0;j<3;j++)
			{
				temp.a[i][j]=tree[i][j][node];
			}
		}
		temp.curr=treecurr[node];
		return temp;
	}
	point q1=query(node*2,a,(a+b)/2,l,h);
	point q2=query(node*2+1,(a+b)/2+1,b,l,h);
	temp.curr=(q1.curr+q2.curr)%3;
	for(int i=0;i<=2;i++)
	{
		temp.a[2][i]=q1.a[2][i];
	}
	for(int i=0;i<=2;i++)
	{
		temp.a[2][i]+=q2.a[2][i];
	}

	for(int i=0;i<=2;i++)
	{
		for(int j=0;j<=2;j++)
		{
			temp.a[2][(i*10+j)%3]+=(q1.a[1][i]*q2.a[0][j]);
		}
	}
	//	cout<<temp.a[2][0]<<" ";
	for(int i=0;i<=2;i++)
	{
		temp.a[0][i]=q1.a[0][i];
	}
	for(int i=0;i<=2;i++)
	{
		temp.a[1][i]=q2.a[1][i];
	}
	ll p1=q1.curr;
	ll p2=q2.curr;
	for(int i=0;i<=2;i++)
	{
		temp.a[0][(p1+i)%3]+=q2.a[0][i];
		temp.a[1][(p2+i)%3]+=q1.a[1][i];
	}
	return temp;
}
int main()
{
	string str;
	int n,m,tag,i,x,y;
	scanf("%d %d",&n,&m);
	cin>>str;
	for(i=0;i<str.size();i++)
	{
		arr[i]=str[i]-48;
	}
	initialize(1,0,n-1);
//	query(1,0,n-1,0,n-1);
	for(i=0;i<m;i++)
	{
		scanf("%d",&tag);
		if(tag==1)
		{
			scanf("%d %d",&x,&y);
	//		cout<<x<<" "<<y<<endl;
			update(1,0,n-1,x-1,x-1,y);
		}
		else
		{
			scanf("%d %d",&x,&y);
		//	cout<<x<<" "<<y<<endl;
			cnt=0;
			point temp1=query(1,0,n-1,x-1,y-1);
			printf("%lld\n",temp1.a[2][0]);
		}
	}
	return 0;
}
