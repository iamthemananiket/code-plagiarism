#include<iostream>
#include<cstdio>
#include<cstring>
#include<string>
#include<cctype>
#include<cstdlib>
#include<algorithm>
#include<bitset>
#include<vector>
#include<list>
#include<deque>
#include<queue>
#include<map>
#include<set>
#include<stack>
#include<cmath>
#include<sstream>
#include<fstream>
#include<iomanip>
#include<ctime>
#include<complex>
#include<functional>
#include<climits>
#include<cassert>
#include<iterator>
using namespace std;
#define MAX 100007
int t;
int n;
int m;
char s[MAX];
int a[MAX];
long long int bit_ans[MAX];
long long int bit[4][MAX];
	int bit1[MAX];
	void add1(int i, int x){
		while (i < x){
			bit1[i] += x;
			i += i&-i;
		}
	}
	int sum1(int i){
		int r = 0;
		while (i > 0){
			r += bit1[i];
			i -= i&-i;
		}
		return r;
	}
	int a1[MAX];
	char buf1[MAX];
	int st1 = 0;
	void main1(){
		scanf("%s", buf1);
		st1 = strlen(buf1);
		for (int i = 0; i < st1; i++){
			a1[i + 1] = buf1[i] - '0';
			add1(i + 1, a1[i + 1]);
		}
		while (m--){
			int ty1 = 0;
			scanf("%d", &ty1);
			if (ty1 == 2){
				int c1, d1;
				scanf("%d%d", &c1, &d1);
				long long int countt1 = 0;
				for (int i = c1; i <= d1; i++){
					int dd1 = a1[i];
					for (int j = i; j <= d1; j++){
						if (j != i){
							dd1 += a1[j];
						}
						countt1 += ((dd1) % 3 == 0);
					}
				}
				printf("%lld\n", countt1);
			}
			else{
				int aa1, b1;
				scanf("%d%d", &aa1, &b1);
				add1(aa1, b1 - a1[aa1]);
				a1[aa1] = b1;
			}
		}
		exit(0);
	}

void add(int i,int j, long long int x){
	j++;
	while (j < MAX){
		bit[i][j] += x;
		j += j&-j;
	}
}
long long int sum(int i, long long int j){
	j++;
	long long int r = 0;
	while (j > 0){
		r += bit[i][j];
		j -= j&-j;
	}
	return r;
}
void ans_add(int i, long long int x){
	i++;
	while (i < MAX){
		bit_ans[i] += x;
		i += i&-i;
	}
}
long long int ans_sum(int i){
	i++;
	long long int r = 0;
	while (i > 0){
		r += bit_ans[i];
		i -= i&-i;
	}
	return r;
}
long long int imos[MAX];
int main(){
	scanf("%d%d", &n, &m);
	if (n <= 1000 && m <= 1000){
		main1();
	}
	scanf("%s", s);
	add(0, 0, 1);
	long long int ssum = 0;
	for (int i = 0; i < n; i++){
		a[i+1] = s[i] - '0';
		ssum += a[i + 1];
		ssum %= 3LL;
		ans_add(i + 1, sum(ssum%3,i+1));
		add(ssum % 3, i + 1,1);
		imos[i + 1] = ssum;
	}
	while (m--){
		int ty;
		scanf("%d", &ty);
		if (ty == 2){
			int l, r;
			scanf("%d%d", &l, &r);
			long long int ans = ans_sum(r) - ans_sum(l - 1);
			for (int i = 0; i < 3; i++){
				ans -= (sum(i, r) - sum(i, l - 1))*sum(i, l - 1);
			}
			ans += (sum(imos[l - 1] % 3, r) - sum(imos[l - 1] % 3, l - 1));
			printf("%lld\n", ans);
		}
		else{

		}
	}
	return 0;
}