#include <bits/stdc++.h>
using namespace std;

#define repu(i, a, b) for (int i = (a); i < (b); ++i)
#define repd(i, a, b) for (int i = (a); i > (b); --i)
#define mem(a, x) memset(a, x, sizeof(a))
#define all(a) a.begin(), a.end()
#define uni(a) a.erase(unique(all(a)), a.end())
#define count_bits(x) __builtin_popcount(x)
#define count_bitsll(x) __builtin_popcountll(x)
#define least_bits(x) __builtin_ffs(x)
#define least_bitsll(x) __builtin_ffsll(x)
#define most_bits(x) 32 - __builtin_clz(x)
#define most_bitsll(x) 64 - __builtin_clz(x)

vector<string> split(const string &s, char c) {
	vector<string> v;
	stringstream ss(s);
	string x;
	while (getline(ss, x, c)) v.push_back(x);
	return v;
}

#define error(args...) { vector<string> _v = split(#args, ','); err(_v.begin(), args); }

void err(vector<string>::iterator it) {}

template<typename T, typename... Args>
void err(vector<string>::iterator it, T a, Args... args) {
	cerr << it -> substr((*it)[0] == ' ', it -> length()) << " = " << a << '\n';
	err(++it, args...);
}

typedef long long ll;
const int MOD = 1000000007;

template<class T, class U> inline T tmin(T a, U b) {return (a < b) ? a : b;}
template<class T, class U> inline T tmax(T a, U b) {return (a > b) ? a : b;}
template<class T, class U> inline void amax(T &a, U b) {if (b > a) a = b;}
template<class T, class U> inline void amin(T &a, U b) {if (b < a) a = b;}
template<class T> inline T tabs(T a) {return (a > 0) ? a : -a;}
template<class T> T gcd(T a, T b) {while (b != 0) {T c = a; a = b; b = c % b;} return a;}

const int N = 10000001, LOG = 24;
int A[N], dp[N], deq[N];

int main(int argc, char *argv[]) {
    ios_base::sync_with_stdio(false);
    
	int n, K, Q, a, b, c, d, e, f, r, s, t, m;
	int L1, La, Lc, Lm, D1, Da, Dc, Dm, L, R;
	
	cin >> n >> K >> Q;
	cin >> a >> b >> c >> d >> e >> f >> r >> s >> t >> m >> A[1];
	cin >> L1 >> La >> Lc >> Lm >> D1 >> Da >> Dc >> Dm;
	
	int tx = t;
	for (int i = 2; i <= n; ++i) {
		tx = (int) (tx * 1LL * t % s);
		if (tx <= r) A[i] = (int) ((A[i - 1] * 1LL * ((a * 1LL * A[i - 1] + b) % m) + c) % m);
		else A[i] = (int) ((A[i - 1] * 1LL * ((d * 1LL * A[i - 1] + e) % m) + f) % m);
	}
	
	int ss = 0, tt = 0;
	for (int i = 1; i <= n; ++i) {
		while (ss < tt && A[deq[tt - 1]] >= A[i]) tt--;
		deq[tt++] = i;
		if (i >= K) {
			dp[i - K + 1] = A[deq[ss]];
			if (deq[ss] == i - K + 1) ss++;
		}
	}
	
	ll sum = 0, prod = 1;
	for (int i = 0; i < Q; ++i) {
		L1 = (int) ((La * 1LL * L1 + Lc) % Lm);
		D1 = (int) ((Da * 1LL * D1 + Dc) % Dm);
		L = L1 + 1;
		R = min(L + K - 1 + D1, n);
		int x = min(dp[L], dp[R - K + 1]);
		sum += x;
		prod = prod * x % MOD;
	}
	printf("%lld %lld\n", sum, prod);
	
    return 0;
}
