#include <bits/stdc++.h>
 
using namespace std;
 
#define ll long long int
#define pb push_back
#define mp make_pair
#define INF (ll)(1e18)
#define inf 0x7fffffff
#define inff 100000
#define ff first
#define ss second
#define sz(x) ((int) (x).size())
#define fast cin.sync_with_stdio(0);cin.tie(0)
#define rep(i,N) for(int i = 0;i < N;i++)
#define frep(i,a,b) for(int i = a;i <= b;i++)
#define pii pair<int , int>
#define pll pair<ll , ll>
#define vii vector<int>
#define vpii vector< pii >
#define fill(A,v) memset(A,v,sizeof(A))
#define setbits(x) __builtin_popcountll(x)
#define print(A,j,k) for(int ii=j;ii<k;ii++)cout<<A[ii]<<" ";cout<<"\n"
#define all(x) (x).begin(), (x).end()
#define gcd __gcd
#define SQRT 350
#define CASES int t;cin>>t;while(t--)
#define FILE freopen("inp.txt" , "r" , stdin);
#define ld long double

const int N = 7e5 + 5;
const int MOD = 1e9 + 7;


int gap;
int sa[N] , lcp[N];
int Rank[N] , temp[N];
int n;
string s;

//sufCmp returns 1 if s[i .. n] < s[j .. n]
bool sufCmp(int i , int j) {

	if (Rank[i] != Rank[j]) {		//previously assigned different Ranks
		return Rank[i] < Rank[j];	
	}

	//Rank[i] = Rank[j] ie all letters when compared from start..start + gap are same
	i += gap;
	j += gap;

	if (i < n && j < n) {
		//sorting by 2 * gap letters
		//already sorted by gap letters previously
		//move both suffixes by gap spaces resulting in already Ranked suffixes
		return Rank[i] < Rank[j];
	}
	else {
		//one of the strings has less than gap letters
		//yet both have same Ranks assigned
		//let's assume this is the first time gap is large enough to cross length of one string
		//therefore in previous attemp , entire length of the lower string must have been compared
		//same rank has been given in the previous run 
		//all letters match between the two strings
		//suffix with lesser length comes first then
		return i > j;		
	}
}

void buildLCP() {
	int k = 0;
	//consider all suffixes in the order in which they occur
	for (int i = 0; i < n; i++) {
		
		if (Rank[i] == n - 1) 		//lexicographically largest suffix , hence lcp value does not exist
			continue;

		//consider next entry in the suffix array table , suffix with rank = Rank[i] + 1
		int j = sa[Rank[i] + 1];
		while (s[i + k] == s[j + k])
			++k;

		lcp[Rank[i]] = k;
		if (k)
			k--;
	}
}

int dp[20][N];
int lg[N] , sum[N];

void buildRMQ() {

	lg[1] = 0;
	for(int i = 2;i <= n;i++) {
		lg[i] = lg[i / 2] + 1;
	}

	//built over the suffix array
	for(int i = 0;i < n;i++) {
		//2 length substring
		dp[0][i] = lcp[i];
	}

	for(int j = 1;(1 << j) <= n;j++) {
		for(int i = 0;(i + (1 << j) - 1) < n;i++) {
			int l = i , r = i + (1 << (j - 1));
			dp[j][i] = min(dp[j - 1][l] , dp[j - 1][r]);
		}
	}

}

//RMQ query
int query(int i , int j) {
	// cout << "query " << i << ' ' << j << '\n';	
	if (i > j) {
		assert(false);
	}

	if (i == j) {
		return lcp[i]; 
	}

	int v = lg[j - i + 1];
	int ans = min( dp[v][i] , dp[v][j - (1 << v) + 1] );
	// cout << "ans " << ans << '\n';
	return ans;
}


//takes as input a starting index and the required lcp value
//returns the rightmost index such that lcp[l .. r] >= v
//range [l .. r + 1] is valid range then
int findRight(int s , int v) {

	if (lcp[s] < v) {
		return s - 1;
	}

	int l = s , r = n - 2;
	while (r > l + 1) {
		int mid = (l + r) / 2;
		if (query(s , mid) >= v)
			l = mid;
		else
			r = mid - 1;
	}
	if (l + 1 <= r && query(s , l + 1) >= v)
		return l + 1;
	if (query(s , l) >= v)
		return l;
	return -1;
}

int findLeft(int s , int v) {

	//no previous string exists
	if (lcp[s - 1] < v) {
		return s;
	}

	int l = 0 , r = s - 1;
	while (r > l + 1) {
		int mid = (l + r) / 2;
		if (query(mid , s - 1) >= v)
			r = mid;
		else
			l = mid + 1;
	}
	if (query(l , s - 1) >= v)
		return l;
	if (l + 1 <= r && query(l + 1 , s - 1) >= v)
		return l + 1;
	return -1;
}

string str[N];

int main(int argc, char const *argv[])
{
	fast;

	int cnt;
	cin >> cnt;

	s = "";
	for(int i = 0;i < cnt;i++) {
		string x;
		cin >> x;
		str[i] = x;
		if (s.size() == 0) {
			s = x;
			sum[i + 1] = x.size() + 1;
		}
		else {
			s = s.append("$");
			s.append(x);
			sum[i + 1] = sum[i] + 1 + x.size();
		}
	}

	n = s.size();
	for(int i = 0;i < n;i++) {
		sa[i] = i;
		Rank[i] = s[i];		//initial rank
	}

	for(gap = 1;;gap *= 2) {
		sort(sa , sa + n , sufCmp);
		for(int i = 0;i < n - 1;i++) {
			temp[i + 1] = temp[i] + sufCmp(sa[i] , sa[i + 1]);
		}
		for(int i = 0;i < n;i++) {
			Rank[sa[i]] = temp[i];
		}
		if (temp[n - 1] == n - 1) {
			break;
		}
	}

	// for(int i = 0;i < n;i++) {
	// 	cout << i << ' ';
	// 	for(int j = sa[i];j < n;j++)
	// 		cout << s[j];
	// 	cout << '\n';
	// }

	// cout << "Rank\n";
	// print(Rank , 0 , n);
	//Rank[i] denotes position of the ith suffix of the string in the suffix array

	buildLCP();
	lcp[n] = inf;
	buildRMQ();		//RMQ table over lcp array

	// cout << "LCP\n";
	// print(lcp , 0 , n);


	// cout << "lcp[8] " << lcp[8] << '\n';

	int q;
	cin >> q;

	while (q--) {
		int x , y;
		cin >> x >> y;
		x--;
		y--;
		int l = sum[x];		//rank of the first suffix
		int r = sum[y];
		// cout << "l r " << l << ' ' << r << '\n';
		// cout << "suffixes at position l r " << l << ' ' << r << '\n';
		l = Rank[l];
		r = Rank[r];
		if (l > r)
			swap(l , r);
		
		// cout << "ranks l r " << l << ' ' << r << '\n';

		if (l == r && l == n - 1) {
			// cout << str[x].size() << '\n';
			int lo = findLeft(n - 1 , str[x].size());
			// cout << "lo " << lo << '\n';
			int hi = n - 1;
			cout << hi - lo + 1 << '\n';
			continue;
		}
		
		int v;
		if (l < r) {
			v = query(l , r - 1);
		}
		else {
			v = str[y].size();
		}

		//l < r in this case
		//lcp[l] will be true

		v = min(v , (int) min(str[x].size() , str[y].size()));

		if (v == 0) {
			cout << "0\n";
			continue;
		}

		// cout << "lcp " << v << '\n';


		//r will return a value in the range [l .. n - 2] denoting lcp of
		int hi = findRight(l , v);
		int lo = findLeft(l , v);

		if (hi != -1)
			hi++;

		// cout << "lo hi " << lo << ' ' << hi << '\n'; 

		if (lo == -1) {
			lo = l;
		}
		if (hi == -1) {
			hi = l;
		}

		cout << max(0 , hi - lo + 1) << '\n';
	}


	return 0;
}