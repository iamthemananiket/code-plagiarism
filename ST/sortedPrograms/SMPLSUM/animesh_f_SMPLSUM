#include <bits/stdc++.h>
#define ll long long
#define rf freopen("inp.in","r",stdin)
 
using namespace std;
 
 
inline int scan(){
    int x = 0;
    char c = getchar_unlocked();
    while(c < '0' || c > '9'){
        c = getchar_unlocked();
    }
    while(c >= '0' && c <= '9'){
        x = (x << 3) + (x << 1) + c - '0';
        c = getchar_unlocked();
    }
    return x;
}
 
inline void show(long long N){
    if(N < 10) putchar_unlocked('0' + N);
    else{
        show(N / 10LL);
        putchar_unlocked('0' + (N % 10));
    }
}
 
 
const int MAX = 1e4;
 
bool composite[MAX + 10] , V[MAX + 10];
ll A[MAX + 10];
int T , N;
 
inline void preprocess(){
 
	composite[0] = composite[1] = true;	

	for(int i = 2 ; i * i <= MAX ; i++)
		if( composite[i] == false)
			for(int j = i * i ; j <= MAX ; j += i )
				composite[j] = true;
 
	for(int i = 1 ; i <= MAX ; i++) A[i] = 1;
 
	for(int i = 2 ; i <= MAX ; i++){
		
		if( !composite[i] ){
			
			ll cur = i , pre = 1 , phi = i - 1;
			
			while(1){
				A[cur] = A[pre] + cur * phi;
				V[cur] = true;
				ll foll = cur * i;
				if( foll > MAX ) break;
				pre = cur , cur = foll , phi *= i;
			}
 
		}
 
	}
 
	for(int i = 1 ; i <= MAX ; i++){
		
		if(!composite[i]){
			
			for(int j = i ; j <= MAX ; j += i){
				
				if( V[j] ) continue;
				
				int cur = j;
				int di = 1;
				
				while( cur % i == 0)
					cur /= i , di *= i;
				
				A[j] *= A[di];
			}
 
		}
	}
 
}
 
int main(){
	preprocess();
	T = scan();
	while( T-- ){
		N = scan();
		show( A[N] );
		putchar_unlocked('\n');
	}
} 