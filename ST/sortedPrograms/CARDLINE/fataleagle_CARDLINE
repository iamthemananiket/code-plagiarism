#include <bits/stdc++.h>

using namespace std;

int N;
int A[2001];
int B[2001];
vector<int> adj[2001];
bool seen[2001];
int dp[2001][2001];
int sz[2001];

int dfs(int u)
{
    int ret=1;
    seen[u]=true;
    for(auto& v: adj[u]) if(!seen[v])
        ret+=dfs(v);
    return ret;
}

int brute()
{
    static int P[2000];
    for(int i=0; i<N; i++)
        P[i]=i;
    int ans=0;
    do
    {
        for(int i=0; i<N; i++)
        {
            for(int j=0; j<N; j++)
            {
                int cnt=0;
                for(int k=0; i+k<N && j+k<N && A[P[i+k]]==B[P[j+k]]; k++)
                    cnt++;
                ans=max(ans, cnt);
            }
        }
    }
    while(next_permutation(P, P+N));
    return ans;
}

void _main()
{
    scanf("%d", &N);
    for(int i=0; i<N; i++)
        scanf("%d", A+i);
    for(int i=0; i<N; i++)
        scanf("%d", B+i), adj[i+1].clear(), seen[i+1]=false, sz[i+1]=0;
    int p=0;
    for(int i=0; i<N; i++)
    {
        if(A[i]==B[i])
            p++;
        else
        {
            adj[A[i]].push_back(B[i]);
            adj[B[i]].push_back(A[i]);
        }
    }
    for(int i=1; i<=N; i++) if(!seen[i])
        sz[dfs(i)]++;
    int ans=p;
    for(int i=1; i<=N; i++)
    {
        int sum = 0;
        for(int j=i; j<=N; j++)
            sum += dp[i][j] * sz[j];
        ans = max(ans, sum);
    }
    printf("%d\n", ans);
}

int main()
{
    for(int i=1; i<=2000; i++)
    {
        dp[i][i]=i-1;
        dp[i][i+1]=i;
        for(int j=i; j<2000; j++)
        {
            dp[i][j+1]=max(dp[i][j+1], dp[i][j]);
            if(j+i<=2000)
                dp[i][j+i]=max(dp[i][j+i], dp[i][j]+i-1);
            if(j+i+1<=2000)
                dp[i][j+i+1]=max(dp[i][j+i+1], dp[i][j]+i);
        }
    }
    int TEST;
    scanf("%d", &TEST);
    while(TEST--)
        _main();
    return 0;
}
