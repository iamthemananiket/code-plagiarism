#include <cstdio>
#include <cmath>
#include <iostream>
#include <set>
#include <algorithm>
#include <vector>
#include <map>
#include <cassert>
#include <string>
#include <cstring>
#include <queue>

using namespace std;

#define rep(i,a,b) for(int i = a; i < b; i++)
#define S(x) scanf("%d",&x)
#define S2(x,y) scanf("%d%d",&x,&y)
#define P(x) printf("%d\n",x)
#define all(v) v.begin(),v.end()
#define sz size()

typedef long long int LL;
typedef pair<int, int > pii;
typedef vector<int > vi;

const int N = 100001;
const int M = 1000001;

int F[M];
vector<pii > g[N];
pii idx[N];
pii inp[N];
bool used[N];
int n;
LL ans = 0;
pii dp[N][128];
int _index[N];
map<int, int > ret;

void pre() {
  rep(i,2,M) if(!F[i]) {
    for(int j = i; j < M; j += i) {
      if(!F[j]) F[j] = 1;
      F[j] *= i;
    }
  }
}

void solve(int c, int p, int G) {
  map<int, int > res;
  map<int, int >::iterator it;
  rep(i,0,g[c].size()) {
    int u = g[c][i].first;
    if(u == p) continue;
    solve(u, c, g[c][i].second);
    if(!res.size()) {
    } else {
      for(it = res.begin(); it != res.end(); it++) {
        rep(j,0,_index[u]) {
          int x = __gcd(it->first, dp[u][j].first);
          if(x > 1) {
            ans += it->second * 1LL * dp[u][j].second;
          }
        }
      }
    }
    rep(j,0,_index[u]) {
      ans += dp[u][j].second;
      res[dp[u][j].first] += dp[u][j].second;
    }
  }

  ret.clear();
  if(G) {
    for(it = res.begin(); it != res.end(); it++) {
      int x = __gcd(G, it->first);
      if(x == 1) continue;
      ret[x] += it->second;
    }
    if(G != 1) ret[G] += 1;

    for(it = ret.begin(); it != ret.end(); it++) {
      dp[c][_index[c]].first = it->first;
      dp[c][_index[c]].second = it->second;
      _index[c]++;
    }
  }

}

int main() {
  pre();
  S(n);
  rep(i,0,n-1) {
    int u,v,z;
    scanf("%d%d%d",&u,&v,&z);
    int num = 1;
    // rep(j,0,F[z].size()) num *= F[z][j];
    z = F[z];
    idx[i] = make_pair(g[u].size(), g[v].size());
    inp[i] = make_pair(u,v);
    g[u].push_back(make_pair(v,z));
    g[v].push_back(make_pair(u,z));
  }

  solve(1,-1,0);
  printf("%lld\n",n * 1LL * (n-1) / 2 - ans);

  int q;
  S(q);
  while(q--) {
    int x,z;
    S2(x,z);
    x--;
    int num = 1;
    // rep(j,0,F[z].size()) num *= F[z][j];
    z = F[z];
    g[inp[x].first][idx[x].first].second = z;
    g[inp[x].second][idx[x].second].second = z;
    ans = 0;
    rep(i,1,n+1) _index[i] = 0;
    solve(1,-1,0);
    printf("%lld\n",n * 1LL * (n-1) / 2 - ans);
  }

  return 0;
}