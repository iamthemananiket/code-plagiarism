#include <stdio.h>
#include <bits/stdc++.h>
using namespace std;
#define mod 1000000007
typedef long long ll;
#define pii pair<int,int>
#define pll pair<ll,ll>
#define pdd pair<double,double>
#define FILL(a,x) memset(a,x,sizeof(a))
#define	foreach( gg,ii ) for( typeof(gg.begin()) ii=gg.begin();ii!=gg.end();ii++)
#define	mp make_pair
#define	pb push_back
#define	X first
#define	Y second
#define sz(a) int((a).size())
#define	debug(ccc)	cout << #ccc << " = " << ccc << endl;
typedef long double ld;
#define INF 2000000000
#define maxn 20010
#define REP(i,n) FOR(i,0,n)
#define FOR(i,a,n) for(int i=int(a);i<int(n);i++)

inline ll input(void)
{
	char t;
	ll x=0;
	int neg=0;
	t=getchar();
	while((t<48 || t>57) && t!='-')
		t=getchar();
	if(t=='-')
		{neg=1; t=getchar();}
    while(t>=48 && t<=57)
    {
        x=(x<<3)+(x<<1)+t-48;
        t=getchar();
    }
	if(neg)
		x=-x;
	return x;
}

inline void output(ll x)
{
	char a[20];
	int i=0,j;
	a[0]='0';
	if (x<0) {putchar('-'); x=-x;}
	if (x==0) putchar('0');
	while(x)
	{
		a[i++]=x%10+48;
		x/=10;
	}
	for(j=i-1;j>=0;j--)
	{
		putchar(a[j]);
	}
	putchar('\n');
}

vector < pair <ll, pll> > E;
ll par[maxn],cost,dis[maxn];
vector <pll> G[maxn];

int parent[maxn],ranker[maxn],vis[maxn];

void init(int n){
    REP(i,n) {
        parent[i] = i;
        ranker[i] = 1;
    }
}

int find(int i){
    if(parent[i] == i) return i;
    return parent[i] = find(parent[i]);
}

int join(int i, int j){
    i = find(i), j = find(j);
    if(ranker[i] < ranker[j])
        swap(i,j);
    parent[j] = i;
    ranker[i] += ranker[j];
}

inline void Kruskal(ll n, ll m)
{
	cost=0;
	init(n);
	ll u,v,i,j,w;
	for(i=0;i<n;i++) par[i]=i;
	for(i=0;i<m;i++)
	{
		u=E[i].Y.Y;
		v=E[i].Y.X;
		w=E[i].X;
		if (find(u)!=find(v))
		{
			if (par[u]==u&&par[v]==v) par[v]=u;
			else if (par[u]==u) par[u]=v;
			else par[v]=u;
			cost+=w;
			join(u,v);
		}
	}
}

void djikstra(ll a, ll n)
{
	FILL(vis,0);
	vis[a]=1;
	dis[a]=0;
	set <pll> s;
	ll v,i,len,x,y;
	for(i=0;i<n;i++) par[i]=-1;
	s.insert(mp(0,a));
	while(!s.empty())
	{
		x=(*s.begin()).first;
		y=(*s.begin()).second;
		v=y;
		s.erase(mp(x,y));
		len=G[v].size();
		for(i=0;i<len;i++)
		{
			x=G[v][i].first;
			y=G[v][i].second;
			if (dis[x]>dis[v]+y||!vis[x])
			{
				par[x]=v;
				vis[x]=1;
				s.erase(mp(dis[x],x));
				dis[x]=dis[v]+y;
				s.insert(mp(dis[x],x));
			}
			else if ((dis[x]==dis[v]+y)&&(y<dis[x]-dis[par[x]])) par[x]=v;
		}
	}
}

int main()
{
ll t,n,m,w,i,u,v,ans,flag;
t=input();
while(t--)
{
	n=input();
	m=input();
	E.clear();
	for(i=0;i<n;i++) G[i].clear();
	for(i=0;i<m;i++)
	{
		u=input();
		v=input();
		w=input();
		E.pb(mp(w,mp(u,v)));
		G[u].pb(mp(v,w));
		G[v].pb(mp(u,w));
	}
	ans=0;
	djikstra(0,n);
	flag=0;
	for(i=0;i<n;i++) if (!vis[i]) {printf("NO\n"); flag=1; break;}
	if (flag) continue;
	for(i=1;i<n;i++) ans+=(dis[i]-dis[par[i]]);
	sort(E.begin(),E.end());
	Kruskal(n,m);
	if (ans==cost) printf("YES\n");
	else printf("NO\n");
}
return 0;
}
