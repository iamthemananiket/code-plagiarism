#include <bits/stdc++.h>
#define rep(i,x,y) for (int i = (x); i<=(y); i++)
#define repe(i,x,y) for (int i = (x); i < (y);i++)
#define drep(i,x,y) for (int i = (x); i >= (y); i--)
#define mp make_pair
#define pb emplace_back
#define mt make_tuple
#define gcd __gcd
#define sf(n) scanf("%Lf",&n)
#define prf(n) printf("%.12Lf",n)
#define	s(n) scanf("%d",&n)
#define sl(n) scanf("%lld",&n)
#define pr(n) printf("%d",n)
#define prl(n) printf("%lld",n)
#define endc printf("\n")
#define psp printf(" ")

using namespace std;
typedef long long ll;
typedef long double ld;
typedef pair<int,int> pii;

const int maxn = 1e5 + 7;
const ll md = 1e9 + 7;
const int null = 0;
const int maxk = 12;
char S[maxn];

typedef struct node {
	int A[maxk];
	int lft; int rgt; int parent; int sz; int idx;
	char c;
	bool rev;
} node;

node T[maxn];

inline void printtree(int z,int spc) {
	if (z == null) {
		rep(i,1,spc) cout<<" ";
		cout<<":null:"<<endl; return;
	}
	printtree(T[z].rgt,spc + 10);
	rep(i,1,spc) cout<<" ";
	cout<<z<<" > "<<T[z].parent<<" : "<<T[z].sz<<" : "<<T[z].c<<endl;
	printtree(T[z].lft,spc + 10);
}

node build(char c) {
	node n;
	repe(i,0,maxk) {
		n.A[i] = 0;
	}
	n.sz = 0;
	if (c != 'z') { n.A[c-'a']++; n.sz = 1; }
	n.c = c; n.rev = 0; n.lft = n.rgt = n.parent = null;
	return n;
}

inline void consol(int x) {
	if (T[x].rev == 1) {
		int tmp = T[x].lft; T[x].lft = T[x].rgt; T[x].rgt = tmp;
		if (T[x].lft > 0) T[T[x].lft].rev ^= 1;
		if (T[x].rgt > 0) T[T[x].rgt].rev ^= 1;
		T[x].rev = 0;
	}

	T[x].sz = 1 + ((T[x].lft > 0)?(T[T[x].lft].sz):0) + ((T[x].rgt > 0)?(T[T[x].rgt].sz):0);

	repe(i,0,maxk) {
		T[x].A[i] = ((T[x].lft > 0)?(T[T[x].lft].A[i]):0) + ((T[x].rgt > 0)?(T[T[x].rgt].A[i]):0);
	}

	T[x].A[T[x].c-'a']++;
}

inline void skey(int x,int up) {
	T[x].idx = up + ((T[x].lft > 0)?(T[T[x].lft].sz):0) + 1;
}

inline void rotate(int x) {
	int p = T[x].parent; int g = T[p].parent; int b;
	if (T[p].lft == x) {
		b = T[x].rgt; T[p].lft = b; T[b].parent = p;
		T[x].rgt = p;
	} else {
		b = T[x].lft; T[p].rgt = b; T[b].parent = p;
		T[x].lft = p;
	}
	T[p].parent = x; T[x].parent = g;
	if (g != null) {
		if (T[g].lft == p) { T[g].lft = x; }
		else { T[g].rgt = x; }
	}
}

inline void splay(int x) {
	while (true) {
		int p = T[x].parent;
		if (p == null) break;
		
		int g = T[p].parent;

		if (g == null) {
			consol(p); consol(x);
			rotate(x); consol(p); consol(x); break;
		}

		consol(g); consol(p); consol(x);

		if ( (T[g].lft == p && T[p].rgt == x) || (T[g].rgt == p && T[p].lft == x) ) {
			rotate(x); rotate(x);
		} else {
			rotate(p); rotate(x);
		}

		consol(g); consol(p); consol(x);
	}
}

inline int findv(int v,int x) {
	int up = 0;
	while (true) {
		consol(v); skey(v,up);
		if (T[v].idx == x) return v;
		if (x < T[v].idx) { v = T[v].lft; }
		else { up += T[T[v].lft].sz  + 1; v = T[v].rgt; }
	}
}

inline tuple<int,int> split(int z,int x) {
	if (x == 0) {
		return mt(null,z);
	}
	int v = findv(z,x); splay(v);
	//cout<<"Splay"<<endl;
	//printtree(v,0);
	int w = T[v].rgt; T[v].rgt = null; T[w].parent = null;
	consol(v); return mt(v,w); 
}

inline int join(int x,int y) {
	if (x == null) return y;
	if (y == null) return x;
	int t = findv(x, T[x].sz); 
	//cout<<t<<endl;
	splay(t);
	//cout<<"Spl"<<endl;
	//cout<<"=============="<<endl;
	//printtree(t,0);
	T[t].rgt = y; T[y].parent = t; consol(t);
	return t;
}

int root, N;

ll f[maxn];
ll fi[maxn];

inline ll inv(ll x) {
	ll ex = md - 2, ans = 1;
	while (ex > 0) {
		if (ex%2 == 1) {
			ans = (ans * x)%md;
		}
		x = (x*x)%md;
		ex >>= 1;
	}
	return ans;
}

inline ll compute(int A[]) {
	int no = 0;	int s = 0;
	repe(i,0,maxk) { no += A[i]%2; s+=A[i]/2; }
	if (no > 1) return 0;

	ll cur = f[s];
	repe(i,0,maxk) { cur = (cur * fi[A[i]/2])%md; }
	return cur;
}

int main() {

	int n,m; s(n); s(m);

	f[0] = fi[0] = 1;
	rep(i,1,n) {
		f[i] = (f[i-1]*i)%md; fi[i] = inv(f[i]);
	}
	

	scanf("%s",S);

	T[0] = build('z'); root = 1; T[1] = build(S[0]); N = 1;

	rep(i,2,n) {
		N++; T[N] = build(S[i-1]);
		root = join(root, N);	
	}

	while (m--) {
		int q,l,r; s(q); s(l); s(r);
		if (q == 1) {
			int a,b,c,d;
			tie(a,b) = split(root,r);
			tie(c,d) = split(a,l-1);
			T[d].rev^=1;
			root = join(join(c,d),b);
		} else {
			int a,b,c,d;
			tie(a,b) = split(root,r);

			//cout<<"///////////////"<<endl;

			//printtree(a,0);

			tie(c,d) = split(a,l-1);

			prl(compute(T[d].A)); endc;
			root = join(join(c,d),b);
		}
	}
}
