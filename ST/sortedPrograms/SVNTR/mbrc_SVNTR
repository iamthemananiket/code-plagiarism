#include <cstdio>
#include <iostream>
#include <cmath>
#include <vector>
#include <map>
#include <set>
#include <algorithm>
#include <queue>
#include <stack>
#include <functional>
#define MAX(a,b) (((a)>(b))?(a):(b))
#define MIN(a,b) (((a)<(b))?(a):(b))
#define rep(i,x,y) for (int i = (x);i <= (y); i++)
#define repe(i,x,y) for (int i = (x); i < (y); i++)
#define drep(i,x,y) for (int i = (x); i >=(y); i--)
#define pb push_back
#define mp make_pair
#define s(x) scanf("%d",&x)
#define pr(x) printf("%d",x)
#define psp printf(" ")
#define endc printf("\n")
#define sl(x) scanf("%lld",&x)
#define prl(x) printf("%lld",x)

using namespace std;
typedef long long ll;
typedef long double ld;
typedef pair<ll,int> pii;

const int MAXN = 170;

int n,m;
ll A[MAXN][MAXN];
ll P[MAXN][MAXN];
ll Z[MAXN];
pii Y[MAXN];
int bit[MAXN];
ll S;

void update(int x,int v) {
	while (x < MAXN) {
		bit[x] += v;
		x += x & (-x);
	}
}

int query(int x) {
	int ans = 0;
	while (x > 0) {
		ans+=bit[x]; x-=x&(-x);
	}
	return ans;
}

void solve() {
	s(n); s(m); sl(S);
	rep(i,1,n) {
		P[i][0] = 0;
		rep(j,1,m) {
			sl(A[i][j]);
			P[i][j] = P[i][j-1] + A[i][j]; 
		}
	}
	int ans = 0;
	rep(j,1,m) {
		rep(l,j,m) {
			//cout<<j<<" : "<<l<<endl; 
			Y[0] = mp(0,0);
			Z[0] = 0;
			rep(i,1,n) {
				Z[i] = P[i][l] - P[i][j-1] + Z[i-1];
				Y[i] = mp(Z[i],i);
			}
			repe(i,0,MAXN) bit[i] = 0;
			sort(Y,Y+n+1);
			int k = -1; 
			rep(i,0,n) {
				//cout<<Y[i].first<<" , "<<Y[i].second<<endl;
				while ((k < n) and (Y[k+1].first < Y[i].first - S)) {
					k++;
					update(Y[k].second+1,1);
				}
				ans += query(Y[i].second+1);
				//cout<<" >>> "<<ans<<endl;
			}
		}
	}
	pr(n*(n-1)*m*(m-1)/4 + n*m*(m-1)/2 + m*n*(n-1)/2 + n*m - ans); endc;
}

int main() {
	int t; s(t); 
	while (t--) {
		solve();
	}

}
