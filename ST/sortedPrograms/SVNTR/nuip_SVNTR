#include <string>
#include <vector>
#include<iostream>
#include<cstdio>
#include<cstdlib>
#include<stack>
#include<queue>
#include<cmath>
#include<algorithm>
#include<functional>
#include<list>
#include<deque>
#include<bitset>
#include<set>
#include<map>
#include<unordered_map>
#include<cstring>
#include<sstream>
#include<complex>
#include<iomanip>
#include<numeric>
#define X first
#define Y second
#define pb push_back
#define rep(X,Y) for (int (X) = 0;(X) < (Y);++(X))
#define rrep(X,Y) for (int (X) = (Y)-1;(X) >=0;--(X))
#define repe(X,Y) for ((X) = 0;(X) < (Y);++(X))
#define peat(X,Y) for (;(X) < (Y);++(X))
#define all(X) (X).begin(),(X).end()
#define rall(X) (X).rbegin(),(X).rend()
#define eb emplace_back
#define UNIQUE(X) (X).erase(unique(all(X)),(X).end())

using namespace std;
typedef long long ll;
typedef pair<int,int> pii;
typedef pair<ll,ll> pll;
template<class T> using vv=vector<vector<T>>;
template<class T> ostream& operator<<(ostream &os, const vector<T> &t) {
os<<"{"; rep(i,t.size()) {os<<t[i]<<",";} os<<"}"<<endl; return os;}
template<class S, class T> ostream& operator<<(ostream &os, const pair<S,T> &t) { return os<<"("<<t.first<<","<<t.second<<")";}
const ll MOD=1e9+7;

const int nn=200;
ll bit[nn+1];
ll sumf(int i){
  i=nn-i;
  ll s=0;
  while(i>0){
    s+=bit[i];//ok?
    i-=i&-i;
  }
  return s;
}

void add(int i,int x){
  i=nn-i;
  while(i<=nn){
    bit[i]+=x;
    i+=i&-i;
  }
}

int main(){
  ios_base::sync_with_stdio(false);
  cout<<fixed<<setprecision(0);
  int T;
  cin>>T;
  while(T--){
    ll n,m,s;
    cin>>n>>m>>s;
    ll a[n][m],sum[n+1][m+1];
    ll sm=0;
    fill(sum[0],sum[0]+(n+1)*(m+1),0);
    rep(i,n)rep(j,m){
      cin>>a[i][j];
      sum[i+1][j+1]+=a[i][j];
      sm+=a[i][j];
    }
    rep(i,n)rep(j,m+1)
      sum[i+1][j]+=sum[i][j];
    rep(i,n+1)rep(j,m)
      sum[i][j+1]+=sum[i][j];
    //rep(i,n+1){rep(j,m+1)cout<<sum[i][j]<<",";cout<<endl;}
    ll ub=sm-s,re=0;
    rep(Y,n+1)rep(y,Y){
      fill(bit,bit+nn+1,0);
      vector<ll> v(m+1),w;
      rep(i,m+1) v[i]=sum[Y][i]-sum[y][i];
      w=v;
      sort(all(w));
      //cout<<v;
      rep(i,m+1){
	int t=lower_bound(all(w),v[i]-s)-w.begin();
        re+=sumf(t);
	//cout<<pii(w[t],sumf(t));
	add(lower_bound(all(w),v[i])-w.begin(),1);
      }//cout<<endl;
    }
    cout<<re<<endl;
  }
  return 0;
}
