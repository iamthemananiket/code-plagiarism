#include<iostream>
#include<cstdio>
#include<cstring>
#include<string>
#include<cctype>
#include<cstdlib>
#include<algorithm>
#include<bitset>
#include<vector>
#include<list>
#include<deque>
#include<queue>
#include<map>
#include<set>
#include<stack>
#include<cmath>
#include<sstream>
#include<fstream>
#include<iomanip>
#include<ctime>
#include<complex>
#include<functional>
#include<climits>
#include<cassert>
#include<iterator>
#include<unordered_set>
#include<unordered_map>
using namespace std;
int t;
#define MAX 152
long long int a[MAX][MAX];
vector<long long int> v;
int bit[10000000];
int use[10000000];
int u_s = 0;
int M;
void add(int i,int x) {
	i++;
	while (i < M) {
		if (use[i] != u_s) {
			use[i] = u_s;
			bit[i] = 0;
		}
		bit[i] += x;
		i += i&-i;
	}
}
int sum(int i) {
	int r = 0;
	i++;
	while (i) {
		if (use[i] != u_s) {
			use[i] = u_s;
			bit[i] = 0;
		}
		r += bit[i];
		i -= i&-i;
	}
	return r;
}
int main() {
	scanf("%d", &t);
	while (t--) {
		v.clear();
		int n;
		int m;
		scanf("%d%d", &n, &m);
		long long int s;
		scanf("%lld", &s);
		for (int i = 0;i < n;i++) {
			for (int j = 0;j < m;j++) {
				scanf("%lld", &a[i + 1][j + 1]);
			}
		}
		for (int j = 1;j <= m;j++) {
			for (int i = 1;i <= n;i++) {
				a[i][j] += a[i - 1][j];
			}
		}
		int ans = 0;
		for (int i = 1;i <= n;i++) {
			for (int j = i;j <= n;j++) {
				long long int sum1 = 0;
				v.clear();
				v.push_back(0);
				for (int k = 1;k <= m;k++) {
					sum1 += a[j][k] - a[i - 1][k];
					v.push_back(sum1);
				}
				sort(v.begin(), v.end());
				v.erase(unique(v.begin(), v.end()), v.end());
				M = v.size() + 1;
				long long int summ = 0;
				u_s++;
				add(lower_bound(v.begin(),v.end(),0)-v.begin(), 1);
				for (int k = 1;k <= m;k++) {
					summ += a[j][k] - a[i - 1][k];
					long long int more = summ-(long long int)(s);
					int ind = lower_bound(v.begin(), v.end(), more) - v.begin();
					ans += k-sum(ind - 1);
					int ind2 = lower_bound(v.begin(), v.end(), summ) - v.begin();
					add(ind2, 1);
				}
			}
		}
		printf("%d\n", ans);
	}
	return 0;
}
