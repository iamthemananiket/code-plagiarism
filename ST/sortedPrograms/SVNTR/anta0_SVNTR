#include <string>
#include <vector>
#include <algorithm>
#include <numeric>
#include <set>
#include <map>
#include <queue>
#include <iostream>
#include <sstream>
#include <cstdio>
#include <cmath>
#include <ctime>
#include <cstring>
#include <cctype>
#include <cassert>
#include <limits>
#include <functional>
#define rep(i,n) for(int (i)=0;(i)<(int)(n);++(i))
#define rer(i,l,u) for(int (i)=(int)(l);(i)<=(int)(u);++(i))
#define reu(i,l,u) for(int (i)=(int)(l);(i)<(int)(u);++(i))
#if defined(_MSC_VER) || __cplusplus > 199711L
#define aut(r,v) auto r = (v)
#else
#define aut(r,v) __typeof(v) r = (v)
#endif
#define each(it,o) for(aut(it, (o).begin()); it != (o).end(); ++ it)
#define all(o) (o).begin(), (o).end()
#define pb(x) push_back(x)
#define mp(x,y) make_pair((x),(y))
#define mset(m,v) memset(m,v,sizeof(m))
#define INF 0x3f3f3f3f
#define INFL 0x3f3f3f3f3f3f3f3fLL
using namespace std;
typedef vector<int> vi; typedef pair<int,int> pii; typedef vector<pair<int,int> > vpii; typedef long long ll;
template<typename T, typename U> inline void amin(T &x, U y) { if(y < x) x = y; }
template<typename T, typename U> inline void amax(T &x, U y) { if(x < y) x = y; }

struct FenwickTree {
	typedef int T;
	vector<T> v;
	void init(int n) { v.assign(n, 0); }
	void add(int i, T x) {
		for(; i < (int)v.size(); i |= i+1) v[i] += x;
	}
	T sum(int i) const {	//[0, i)
		T r = 0;
		for(-- i; i >= 0; i = (i & (i+1)) - 1) r += v[i];
		return r;
	}
	T sum(int left, int right) const {	//[left, right)
		return sum(right) - sum(left);
	}
};

int main() {
	int T;
	scanf("%d", &T);
	for(int ii = 0; ii < T; ++ ii) {
		int N, M, S;
		scanf("%d%d%d", &N, &M, &S);
		vector<vi> A(N, vi(M));
		rep(i, N) rep(j, M)
			scanf("%d", &A[i][j]);
		ll ans = 0;
		rep(t, N) {
			vector<ll> v(M, 0), sum(M+1, 0), values;
			FenwickTree ft;
			rer(b, t + 1, N) {
				rep(j, M)
					v[j] += A[b - 1][j];
				rep(j, M)
					sum[j + 1] = sum[j] + v[j];
				values = sum;
				sort(values.begin(), values.end());
				values.erase(unique(values.begin(), values.end()), values.end());
				ft.init(values.size());
				rep(j, M) {
					ft.add(lower_bound(values.begin(), values.end(), sum[j]) - values.begin(), 1);
					int cnt = j + 1 - ft.sum(lower_bound(values.begin(), values.end(), sum[j + 1] - S) - values.begin());
					ans += cnt;
				}
			}
		}
		printf("%lld\n", ans);
	}
	return 0;
}
