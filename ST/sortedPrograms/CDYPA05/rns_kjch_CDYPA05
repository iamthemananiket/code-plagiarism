#include <stack>
#include <stdio.h>
#include <algorithm>
#include <memory.h>
#include <vector>
using namespace std;

#define M 1001001

int ft[M], dt[M];

vector<int> v[M];

int n;

bool vis[M];

int T;

stack<int> stk;
int deg[M];
void dfs(int x) {
    stk.push(1);
    vis[1] = 1;
    memset(deg, -1, sizeof deg);
    int tot = 0;
    while (!stk.empty()) {
        x = stk.top();
        if (deg[x] == -1) {
            dt[x] = ++tot;
        }
        while (++deg[x] < v[x].size()) {
            int y = v[x][deg[x]];
            if (vis[y]) continue;
            vis[y] = 1;
            stk.push(y);
            goto la;
        }
        ft[x] = tot;
        stk.pop();
        la:;
    }
}

bool par(int x, int y) {
    if(dt[x] <= dt[y] && ft[y] <= ft[x]) return 1;
    return 0;
}

int main() {
    //freopen("11.in", "r", stdin);
    scanf("%d", &n);
    for(int i = 1; i < n; i ++) {
        int x, y;
        scanf("%d %d", &x, &y);
        v[x].push_back(y);
        v[y].push_back(x);
    }
    dfs(1);
    int Q;
    scanf("%d", &Q);
    while(Q --) {
        int z, x, y;
        scanf("%d %d %d", &z, &x, &y);
        if(z == 0) swap(x, y);
        if(par(y, x)) puts("YES");
        else puts("NO");
    }
}
