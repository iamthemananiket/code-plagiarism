#include<cstdio>
#include<iostream>
#include<vector>
#include<algorithm>
#include<string>
#include<cstring>
using namespace std;

typedef long long LL;
typedef vector<int> VI;

#define REP(i,n) for(int i=0, i##_len=(n); i<i##_len; ++i)
#define EACH(i,c) for(__typeof((c).begin()) i=(c).begin(),i##_end=(c).end();i!=i##_end;++i)
#define eprintf(s...) fprintf(stderr, s)

template<class T> inline void amin(T &a, const T &b) { if (b<a) a=b; }
template<class T> inline void amax(T &a, const T &b) { if (a<b) a=b; }

typedef vector<VI> Adj;

/*
  preorder_subtree(v) : IN[ett_in[v], ett_in[v]+subtree_size[v])
  postorder_subtree(v) : OUT[ett_out[v]-subtree_size[v]+1, ett_out[v]+1)
  rootpath(v) = IN[0, ett_in(v)+1) - OUT[0, postorder_size[v])
*/
struct TreeDFS {
    vector<int> subtree_size, parent, depth;
    vector<int> preorder, postorder, postorder_size;
    vector<int> ett_in, ett_out;
    TreeDFS(){}
    TreeDFS(const Adj &T, int r=0) {
	int n = T.size();
	subtree_size = parent = depth = vector<int>(n);
	postorder_size = vector<int>(n);
	ett_in = ett_out = vector<int>(n);
	dfs(T, r, -1);
    }
    void dfs(const Adj &T, int v, int p) {
	parent[v] = p;
	ett_in[v] = preorder.size();
	preorder.push_back(v);
	postorder_size[v] = postorder.size();
	subtree_size[v] = 1;
	for (int i=0; i<(int)T[v].size(); i++) {
	    if (T[v][i] == p) continue;
	    depth[T[v][i]] = depth[v]+1;
	    dfs(T, T[v][i], v);
	    subtree_size[v] += subtree_size[T[v][i]];
	}
	ett_out[v] = postorder.size();
	postorder.push_back(v);
    }
};	

template<class T>
struct Fenwick : vector<T> {
    typedef vector<T> S;
    int N;
    Fenwick(int N_=0): S(N_), N(N_) {}
    void add(int i, T x) {
	for (; i<N; i|=i+1) S::operator[](i) += x;
    }
    inline T sum(int r) {
	T s = 0;
	for (; r; r&=r-1) s += S::operator[](r-1);
	return s;
    }
    T sum(int l, int r) {
	return sum(r) - sum(l);
    }
};


template<int MOD>
struct ModInt {
    unsigned x;
    void undef() { x = (unsigned)-1; }
    bool isnan() const { return x == (unsigned)-1; }
    inline int getInt() const { return (int)x; }
    template<class T> T get() const { return (T)x; }
    inline int mod() const { return MOD; }
    ModInt(int y=0) { if (y<0 || MOD<=y) y %= MOD; if (y<0) y += MOD; x=y; }
    ModInt(long long y) { if (y<0 || MOD<=y) y %= MOD; if (y<0) y += MOD; x=y; }
    ModInt(unsigned long long y) { if (MOD<=y) x = y % (unsigned long long)MOD; else x = y; }
    ModInt &operator+=(const ModInt &y) { if ((x += y.x) >= MOD) x -= MOD; return *this; }
    ModInt &operator-=(const ModInt &y) { if ((x += MOD - y.x) >= MOD) x -= MOD; return *this; }
    ModInt &operator*=(const ModInt &y) { x = (unsigned long long)x * y.x % (unsigned long long)MOD; return *this; }
    ModInt &operator/=(const ModInt &y) { x = (unsigned long long)x * y.inv().x % (unsigned long long)MOD; return *this; }
    ModInt operator-() const { return (x ? MOD-x: 0); }
    ModInt inv() const {
	unsigned a = MOD, b = x; int u = 0, v = 1;
	while (b) {
	    int t = a / b;
	    a -= t * b; swap(a, b);
	    u -= t * v; swap(u, v);
	}
	if (u < 0) u += MOD;
	return ModInt(u);
    }
    ModInt pow(long long y) const {
	ModInt b = *this, r = 1;
	if (y < 0) { b = b.inv(); y = -y; }
	for (; y; y>>=1) {
	    if (y&1) r *= b;
	    b *= b;
	}
	return r;
    }
};
const LL MOD = 1000000007;
typedef ModInt<MOD> Mint;
Mint operator+(Mint x, const Mint &y) { if ((x.x += y.x) >= (unsigned)x.mod()) x.x -= x.mod(); return x; }
Mint operator-(Mint x, const Mint &y) { if ((x.x += x.mod() - y.x) >= (unsigned)x.mod()) x.x -= x.mod(); return x; }
Mint operator*(Mint x, const Mint &y) { x.x = (unsigned long long)x.x * y.x % (unsigned long long)x.mod(); return x; }
Mint operator/(Mint x, const Mint &y) { x.x = (unsigned long long)x.x * y.inv().x % (unsigned long long)x.mod(); return x; }
bool operator<(const Mint &x, const Mint &y) { return x.x < y.x; }
bool operator==(const Mint &x, const Mint &y) { return x.x == y.x; }
bool operator!=(const Mint &x, const Mint &y) { return x.x != y.x; }


int N, M;
Adj G;
TreeDFS X;

Mint fib[300011];
Mint fff[300011];

Fenwick<Mint> IN0, IN1, OUT0, OUT1;
void init() {
    IN0 = IN1 = OUT0 = OUT1 = Fenwick<Mint>(N);
}
void add(int x, int k) {
    IN1.add(X.ett_in[x], fib[k]);
    OUT1.add(X.ett_out[x], fib[k]);
    
    IN0.add(X.ett_in[x], fib[k-1]);
    OUT0.add(X.ett_out[x], fib[k-1]);
}
pair<Mint, Mint> sum(int x) {
    return make_pair(
	IN1.sum(X.ett_in[x]+1) - OUT1.sum(X.postorder_size[x]),
	IN0.sum(X.ett_in[x]+1) - OUT0.sum(X.postorder_size[x]));
}

pair<Mint, Mint> dec(pair<Mint, Mint> p, int t) {
    if (t == 0) return p;
    return make_pair(
	fff[t-1] * p.first + fff[t] * p.second,
	fff[t] * p.first + fff[t+1] * p.second);
}

int main() {
    scanf("%d%d", &N, &M);
    G = Adj(N);
    REP (i, N-1) {
	int p;
	scanf("%d", &p);
	p--;
	G[p].push_back(i+1);
    }

    X = TreeDFS(G);
	
    init();
    
    fib[1] = 1;
    for (int i=2; i<=300000; i++) {
	fib[i] = fib[i-1] + fib[i-2];
    }

    fff[1] = 1;
    for (int i=2; i<=300000; i++) {
	fff[i] = fff[i-2] - fff[i-1];
    }


    
    REP ($, M) {
	char op[8];
	scanf("%s", op);
	if (op[0] == 'U') {
	    int x, k;
	    scanf("%d%d", &x, &k);
	    x--;
	    k += N - X.depth[x];
	    add(x, k);
	} else {
	    int x;
	    scanf("%d", &x);
	    x--;
	    pair<Mint, Mint> p = sum(x);

	    p = dec(p, N - X.depth[x]);
	    printf("%d\n", p.first.getInt());
	}
    }
    
    
    return 0;
}
