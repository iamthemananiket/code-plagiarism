#pragma comment(linker, "/STACK:500000000")
#define _CRT_SECURE_NO_WARNINGS
#include <algorithm>
#include <bitset>
#include <functional>
#include <iostream>
#include <list>
#include <map>
#include <math.h>
#include <set>
#include <stack>
#include <stdio.h>
#include <stdlib.h>
#include <string>
#include <string.h>
#include <time.h>
#include <queue>
#include <utility>
#include <vector>
using namespace std;

#define y0 y0ChloeGraceMoretz
#define y1 y1ChloeGraceMoretz
#define ll long long
int nextInt() { int n; scanf("%d", &n); return n; }
ll nextLong() { ll n; scanf("%lld", &n); return n; }
const double PI = acos(-1.0);
const double EPS = 1e-9;
const int INF = (int)2e9;

const int N = (int)1e6;
int a[N + 5], b[N + 5], c[N + 5];
bool d[N + 5];
int ans[N / 2 + 5];
ll minV = (ll)1e18;

int main() {
	//freopen("input.in", "rt", stdin);
	//freopen("output.out", "wt", stdout);
	clock_t startTime = clock();
	int n, m;
	scanf("%d %d", &n, &m);
	for (int i = 0; i < m; ++i) {
		scanf("%d %d %d", &a[i], &b[i], &c[i]);
	}
	int ANS_SIZE = n >> 1;
	for (int i = 0; i < ANS_SIZE; ++i) {
		d[i] = true;
	}
	while (((double)clock() - startTime) / CLOCKS_PER_SEC < 0.9) {
		random_shuffle(d, d + n);
		ll sum = 0;
		for (int i = 0; i < m; ++i) {
			if (d[a[i]] != d[b[i]]) {
				sum += c[i];
			}
		}
		if (sum < minV) {
			minV = sum;
			int pos = 0;
			for (int i = 0; i < n; ++i) {
				if (d[i]) {
					ans[pos] = i;
					++pos;
				}
			}
		}
	}
	for (int i = 0; i < ANS_SIZE - 1; ++i) {
		printf("%d ", ans[i]);
	}
	printf("%d\n", ans[ANS_SIZE - 1]);
	return 0;
}