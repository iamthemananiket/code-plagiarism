#include<cstdio>
#include<iostream>
#include<vector>
#include<algorithm>
#include<string>
#include<cstring>
using namespace std;

typedef long long LL;
typedef vector<int> VI;

#define REP(i,n) for(int i=0, i##_len=(n); i<i##_len; ++i)
#define EACH(i,c) for(__typeof((c).begin()) i=(c).begin(),i##_end=(c).end();i!=i##_end;++i)
#define eprintf(s...)  fprintf(stderr, s)

template<class T> inline void amin(T &x, const T &y) { if (y<x) x=y; }
template<class T> inline void amax(T &x, const T &y) { if (x<y) x=y; }

int N, M;
int X[300111], Y[300111];
LL sumsX[300111], sumsY[300111];
char S[300111];

int main() {
    scanf("%d%d", &N, &M);
    REP (i, N) scanf("%d%d", X+i, Y+i);
    scanf("%s", S);
    sort(X, X+N);
    sort(Y, Y+N);
    REP (i, N) {
	sumsX[i+1] = sumsX[i] + X[i];
	sumsY[i+1] = sumsY[i] + Y[i];
    }

    LL curX = 0, curY = 0;

    REP (t, M) {
	if (false) {;}
	else if (S[t] == 'D') curY--;
	else if (S[t] == 'U') curY++;
	else if (S[t] == 'L') curX--;
	else if (S[t] == 'R') curX++;

	LL ans = 0;
	LL p;
	p = lower_bound(X, X+N, curX) - X;
	ans += p * curX - sumsX[p];
	ans += (sumsX[N] - sumsX[p]) - (N-p) * curX;

	p = lower_bound(Y, Y+N, curY) - Y;
	ans += p * curY - sumsY[p];
	ans += (sumsY[N] - sumsY[p]) - (N-p) * curY;

	printf("%lld\n", ans);
	// eprintf("%d %d\n", (int)curX, (int)curY);
    }


    return 0;
}
