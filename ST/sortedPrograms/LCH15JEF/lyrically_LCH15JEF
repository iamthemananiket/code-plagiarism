#include <cstdio>
#include <cstdlib>
#include <cstring>
#include <cmath>
#include <cassert>
#include <iostream>
#include <sstream>
#include <string>
#include <vector>
#include <queue>
#include <deque>
#include <set>
#include <map>
#include <utility>
#include <numeric>
#include <algorithm>
#include <bitset>
#include <complex>
#include <cstdint>
#include <unordered_set>
#include <unordered_map>

using namespace std;

typedef long long Int;
typedef vector<int> vint;
typedef pair<int, int> pint;
#define mp make_pair

template <typename T1, typename T2> ostream &operator<<(ostream &os, const pair<T1, T2> &a) { return os << "(" << a.first << ", " << a.second << ")"; };
template <typename T> void pv(T a, T b) { for (T i = a; i != b; ++i) cout << *i << " "; cout << endl; }
template <typename T> void chmin(T &t, const T &f) { if (t > f) t = f; }
template <typename T> void chmax(T &t, const T &f) { if (t < f) t = f; }
int in() { int x; scanf("%d", &x); return x; }

inline uint64_t gcd(uint64_t a, uint64_t b) {
	for (; b; ) { const uint64_t t = a % b; a = b; b = t; }
	return a;
}
/*
inline uint64_t multiply(uint64_t a, uint64_t b, uint64_t m) {
	uint64_t q, r;
	asm volatile ("mulq %3; divq %4" : "=a"(q), "=d"(r) : "a"(a), "r"(b), "r"(m));
	return r;
}
*/
inline uint64_t multiply(uint64_t a, uint64_t b, uint64_t m) {
	uint64_t r = 0;
	for (; b; b >>= 1) {
		if (b & 1) {
			if ((r += a) >= m) {
				r -= m;
			}
		}
		if ((a <<= 1) >= m) {
			a -= m;
		}
	}
	return r;
}

const uint64_t MillerRabinBases[] = { 2, 325, 9375, 28178, 450775, 9780504, 1795265022, 0 };
inline bool isPrime(uint64_t n) {
	if (n <= 1 || !(n & 1)) return (n == 2);
	const int ctz = __builtin_ctzll(n - 1);
	const uint64_t odd = (n - 1) >> ctz;
	for (const uint64_t *base = MillerRabinBases; *base; ++base) {
		uint64_t a = *base % n;
		if (!a) continue;
		uint64_t b = 1;
		for (uint64_t e = odd; e; e >>= 1, a = multiply(a, a, n)) if (e & 1) b = multiply(b, a, n);
		if (b == 1 || b == n - 1) continue;
		for (int i = 1; i < ctz; ++i) {
			b = multiply(b, b, n);
			if (b == n - 1) goto passed;
		}
		return false;
	passed:;
	}
	return true;
}

inline uint64_t getDivisor(uint64_t n) {
	if (!(n & 1)) return 2;
	for (uint64_t c = 1; ; ++c) {
		uint64_t x, y, d;
		for (x = y = 2, d = 1; d == 1; ) {
			x = multiply(x, x, n) + c;
			y = multiply(y, y, n) + c;
			y = multiply(y, y, n) + c;
			d = gcd((x < y) ? (y - x) : (x - y), n);
		}
		if (d < n) return d;
	}
}
inline void factorize(uint64_t n, vector<uint64_t> *factors) {
	if (n <= 1) return;
	if (isPrime(n)) {
		factors->push_back(n);
	} else {
		const uint64_t d = getDivisor(n);
		factorize(d, factors);
		factorize(n / d, factors);
	}
}


inline uint64_t power(uint64_t a, uint64_t e, uint64_t m) {
	uint64_t ret = 1;
	for (; e; e >>= 1, a = multiply(a, a, m)) if (e & 1) ret = multiply(ret, a, m);
	return ret;
}

uint64_t M;
char S[10010];

int main() {
	
	
	for (int TC = in(); TC--; ) {
		cin >> M;
		scanf("%s", S);
		vector<uint64_t> factors;
		factorize(M, &factors);
		set<uint64_t> factorSet;
		uint64_t phi = M;
		for (const auto factor : factors) {
			if (factorSet.insert(factor).second) {
				phi = phi / factor * (factor - 1);
			}
		}
// cout<<"phi("<<M<<") = "<<phi<<endl;
		uint64_t ans = 1;
		for (int pos = 0; ; ) {
			uint64_t a = 0;
			for (; isdigit(S[pos]); ++pos) {
				a = (a * 10 + (S[pos] - '0')) % M;
			}
			assert(S[pos] == '*'); ++pos;
			assert(S[pos] == '*'); ++pos;
			uint64_t e = 0;
			for (; isdigit(S[pos]); ++pos) {
				e = e * 10 + (S[pos] - '0');
				if (e >= 64) {
					e = 64 + (e - 64) % phi;
				}
			}
			ans = multiply(ans, power(a, e, M), M);
			if (!S[pos]) {
				break;
			}
			assert(S[pos] == '*'); ++pos;
		}
		cout << ans << endl;
	}
	
	return 0;
}
