#include <bits/stdc++.h>
#include<ext/pb_ds/assoc_container.hpp>
#include<ext/pb_ds/tree_policy.hpp>
// #include <boost/multiprecision/cpp_int.hpp> 

#define gc getchar//_unlocked
#define pc putchar//_unlocked
#define ll long long
#define ld long double
#define pb push_back
#define mp make_pair
#define pp pair<int,int>
#define ppl pair<ll,ll>
#define bigint boost::multiprecision::cpp_int
#define finp ios_base::sync_with_stdio(0);cin.tie(0);
#define bc __builtin_popcountll
#define afor(i,a,b) for(int i=a;i<=b;++i)
#define bfor(i,a,b) for(int i=a;i>=b;--i)
#define vi vector<int>
#define vpp vector<pp>
#define vll vector<ll>

using namespace std;
using namespace __gnu_pbds;

char putnb[20];
void putn(ll n) {if(!n)pc('0');if(n<0)pc('-'),n=0-n;int pi=0;while(n)putnb[pi++]=(n%10)+'0',n/=10;while(pi)pc(putnb[--pi]);}
void sci(int *x) {register char c = gc();*x = 0;for(; (c<48)||(c>57);c = gc());for(; (c>47)&&(c<58);c = gc())*x = (int)((((*x)<<1) + ((*x)<<3)) + c - 48);}
void scll(ll *x)  {register char c = gc();*x = 0;for(; (c<48)||(c>57);c = gc());for(; (c>47)&&(c<58);c = gc())*x =  (ll)((((*x)<<1) + ((*x)<<3)) + c - 48);}
ll fp(ll a,ll b,ll c) {if(b==0)return 1%c; if(b==1)return a%c; ll ret=fp(a,b/2,c); ret=(ret*ret)%c; if(b&1)ret=(ret*a)%c; return ret;}

const ll mod=1e9 +7;
const ll mod2=1999999973;
const ll inf=1e18;
const int infs=1e9 + 1000;
const int N=100000;
const long double PI = acos(-1);

template <typename T>
using ordered_set = tree<T, null_type, less<T>, rb_tree_tag, tree_order_statistics_node_update>;

ll t;
ll n;
ll A[N+5];
bool suf[N+5];
bool pref[N+5];

int main()
{
  finp;
  cin>>t;
  while(t--)
  {
    cin>>n;
    afor(i,1,n)
    {
      cin>>A[i];
    }

    pref[1] = true;
    pref[2] = true;

    afor(i,3,n)
    {
      if(pref[i-1] && (A[i]-A[i-1])==(A[i-1]-A[i-2]))pref[i] = true;
      else pref[i]=false;
    }

    suf[n+1]=false;
    suf[n] = suf[n-1] = true;
    bfor(i,n-2,1)
    {
      if(suf[i+1] && (A[i]-A[i+1])==(A[i+1]-A[i+2]))suf[i] = true;
      else suf[i] = false;
    }

    ll ans = inf;

    if(suf[2])ans = min(ans,A[1]);
    if(pref[n-1])ans = min(ans,A[n]);

    afor(i,2,n-1)
    {
      ll lef,ri;
      if(i==2)lef=-1;
      else lef=A[i-1]-A[i-2];

      if(i==n-1)ri=-1;
      else ri=A[i+2]-A[i+1];

      if(!pref[i-1] || !suf[i+1] )continue;

      if(lef==-1)
      {
        if(ri==-1)ans=min(ans,A[i]);
        else if((A[i+1]-A[i-1]) == ri)ans=min( ans , A[i] );
      }
      else if(ri == -1)
      {
        if((A[i+1]-A[i-1]) == lef)ans=min( ans , A[i] );
      }
      else if(lef==ri && lef==(A[i+1]-A[i-1]))
      {
        ans = min(ans,A[i]);
      }
    }


    if(ans == inf)cout<<"-1\n";
    else cout<<ans<<"\n";
  }
  
return 0;
}