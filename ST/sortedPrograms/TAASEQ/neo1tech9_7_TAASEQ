#include <iostream>
#include <iosfwd>
#include <iomanip>
#include <cstdio>
#include <cstring>
#include <cstdlib>
#include <ctime>
#include <cmath>
#include <cassert>
#include <cctype>
#include <climits>
#include <vector>
#include <bitset>
#include <set>
#include <queue>
#include <stack>
#include <map>
#include <deque>
#include <string>
#include <list>
#include <iterator>
#include <sstream>
#include <complex>
#include <fstream>
#include <functional>
#include <numeric>
#include <utility>
#include <algorithm>
#include <assert.h>
#include <unordered_map>
using namespace std;

typedef long long ll;
typedef unsigned long long ull;
typedef double ld;
typedef vector < long long > vll;
typedef pair <long long, long long> pll;
typedef pair <int, int> pii;
typedef vector < int > vii;
typedef complex < double > Point;

#define csl ios_base::sync_with_stdio(false); cin.tie(NULL)
#define mp make_pair
#define fst first
#define snd second

ll t, n, m, u, v, q, r, ql, qr, k, l, s, w, z, x, y, d, p, c, L, b;
const int N = 1e6 + 500;
const int LN = 21;
const long long mod = 1e9 + 7;
const long long INF = 1LL << 52LL;
ll A[N], diff[N];
int main() {
    csl;
    cin >> t;
    while (t--) {
        cin >> n;
        for (int i = 1; i <= n; ++i) cin >> A[i];
        if (n == 2) {
            cout << min(A[1], A[2]) << "\n";
            continue;
        }
        if (n == 3) {
            cout << min(A[1], min(A[2], A[3])) << '\n';;
            continue;
        }
        for (int i = 1; i <= n - 1; ++i) diff[i] = A[i + 1] - A[i];
        ll sol = INF;
        bool v = true;
        for (int i = 2; i <= n - 2; ++i) {
            if (diff[i] != diff[i + 1]) v = false;
        }
        if (v) sol = min(sol, A[1]);
        v = true;
        for (int i = 1; i <= n - 3; ++i) {
            if (diff[i] != diff[i + 1]) v = false;
        }
        if (v) sol = min(sol, A[n]);
        set <int> pos;
        for (int i = 1; i <= n - 2; ++i) {
            if (diff[i] != diff[i + 1]) {
                pos.insert(i);
                pos.insert(i + 1);
                if (i + 2 <= n) pos.insert(i + 2);
            }
        }
        v = true;
        if (pos.find(n) != pos.end()) pos.erase(pos.find(n));
        if (pos.find(1) != pos.end()) pos.erase(pos.find(1));
        if (pos.size() > 7) v = false;
        else for (auto i = pos.begin(); i != pos.end(); ++i) {
            bool valid = true;
            for (int j = 1; j <= n - 1; ++j) {
                if (j == (*i)) diff[j] = diff[j - 1];
                else if (j + 1 == (*i)) diff[j] = A[j + 2] - A[j];
                else diff[j] = A[j + 1] - A[j];
            }
            /*cout << *i << '\n';
            for (int j = 1; j <= n - 1; ++j) cout << diff[j] << ' ';
            cout << '\n';*/
            for (int j = 1; j <= n - 2; ++j) if (diff[j] != diff[j + 1]) valid = false;
            if (valid) sol = min(sol, A[*i]);
        }
        if (sol == INF) sol = -1;
        cout << sol << '\n';
    }
    return 0;
}








