#pragma comment(linker, "/STACK:500000000")
#define _CRT_SECURE_NO_WARNINGS
#include <algorithm>
#include <assert.h>
#include <bitset>
#include <functional>
#include <iostream>
#include <list>
#include <map>
#include <math.h>
#include <set>
#include <stack>
#include <stdio.h>
#include <stdlib.h>
#include <string>
#include <string.h>
#include <time.h>
#include <queue>
#include <unordered_map>
#include <unordered_set>
#include <utility>
#include <vector>
using namespace std;

#define y0 y0ChloeGraceMoretz
#define y1 y1ChloeGraceMoretz
typedef long long ll;
typedef unsigned long long ull;
int nextInt() { int n; scanf("%d", &n); return n; }
ll nextLong() { ll n; scanf("%lld", &n); return n; }
const double PI = acos(-1.0);
const double EPS = 1e-9;
const int INF = (int)2e9;
const int MOD = (int)1e9 + 7;

int a[(int)1e5 + 9];
int b[(int)1e5 + 9];

int main() {
	//freopen("in.txt", "rt", stdin);
	//freopen("out.txt", "wt", stdout);
	int t;
	scanf("%d", &t);
	while (t--) {
		int n;
		scanf("%d", &n);
		bool isCorrect = true;
		for (int i = 0; i < n; ++i) {
			scanf("%d", &a[i]);
			if (i > 0 && a[i] - a[i - 1] != a[1] - a[0]) {
				isCorrect = false;
			}
		}
		int ans = INF;
		if (isCorrect) {
			ans = min(a[0], a[n - 1]);
		} else if (n <= 500) {
			for (int i = 0; i < n; ++i) {
				int pos = 0;
				for (int j = 0; j < n; ++j) {
					if (i == j) {
						continue;
					}
					b[pos++] = a[j];
				}
				bool ok = true;
				for (int j = 1; j < n - 1; ++j) {
					if (b[j] - b[j - 1] != b[1] - b[0]) {
						ok = false;
						break;
					}
				}
				if (ok) {
					ans = min(a[i], ans);
				}
			}
		} else {
			map<int, int> cnt;
			bool ok = true;
			for (int i = 1; i < n; ++i) {
				++cnt[a[i] - a[i - 1]];
				if (i > 1 && a[i] - a[i - 1] != a[2] - a[1]) {
					ok = false;
				}
			}
			if (ok) {
				ans = min(a[0], ans);
			}
			int diff = INF;
			for (map<int, int>::iterator it = cnt.begin();
				it != cnt.end();
				++it) {
				if ((*it).second > cnt[diff]) {
					diff = (*it).first;
				}
			}
			vector<int> positionsToDelete;
			for (int i = 1; i < n && positionsToDelete.size() < 500; ++i) {
				if (a[i] - a[i - 1] != diff) {
					positionsToDelete.push_back(i);
				}
			}
			for (int i = 0; i < positionsToDelete.size(); ++i) {
				int pos = 0;
				for (int j = 0; j < n; ++j) {
					if (positionsToDelete[i] == j) {
						continue;
					}
					b[pos++] = a[j];
				}
				ok = true;
				for (int j = 1; j < n - 1; ++j) {
					if (b[j] - b[j - 1] != b[1] - b[0]) {
						ok = false;
						break;
					}
				}
				if (ok) {
					ans = min(a[positionsToDelete[i]], ans);
				}
			}
		}
		if (ans == INF) {
			printf("-1\n");
		} else {
			printf("%d\n", ans);
		}
	}
	return 0;
}