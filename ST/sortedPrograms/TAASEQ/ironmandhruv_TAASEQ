#include <bits/stdc++.h>
 
using namespace std;
 
#define ll long long int
#define pb push_back
#define mp make_pair
#define INF (ll)(1e18)
#define inf 0x7fffffff
#define inff 100000
#define ff first
#define ss second
#define sz(x) ((int) (x).size())
#define fast cin.sync_with_stdio(0);cin.tie(0)
#define rep(i,N) for(int i = 0;i < N;i++)
#define frep(i,a,b) for(int i = a;i <= b;i++)
#define pii pair<int , int>
#define pll pair<ll , ll>
#define vii vector<int>
#define vpii vector< pii >
#define fill(A,v) memset(A,v,sizeof(A))
#define setbits(x) __builtin_popcountll(x)
#define print(A,j,k) for(int ii=j;ii<k;ii++)cout<<A[ii]<<" ";cout<<"\n"
#define all(x) (x).begin(), (x).end()
#define gcd __gcd
#define SQRT 350
#define CASES int t;cin>>t;while(t--)
#define FILE freopen("inp.txt" , "r" , stdin);
#define ld long double

const int MOD = 1e9 + 7;
const int N = 1e6 + 5;

ll A[N];

//subarray A[l..r] is AP or not
bool ansve(int l , int r) {
	bool S = true;
	if (l >= r)
		return true;
	// print (A , l , r + 1);
	ll dp = A[l + 1] - A[l];
	for(int i = l + 2;i <= r;i++)
		if (A[i] - A[i - 1] != dp)
			return false;
	return true;
}

void bruteforce(int n) {
	if (n == 2) {
        cout << min(A[1], A[2]) << "\n";
    }
    else if (n == 3) {
        cout << min(A[1], min(A[2], A[3])) << '\n';;
    }
}


ll dp[N];

int main(int argc, char const *argv[])
{
    fast;


    CASES{

    	int n;
        cin >> n;

        frep(i , 1 , n) 
        	cin >> A[i];

        if (n <= 3) {
        	bruteforce(n);
        	continue;
        }

        
        frep(i , 1 , n - 1)
        	dp[i] = A[i + 1] - A[i];

        ll ans = INF;

        bool v = true;
        for (int i = 2; i <= n - 2; ++i) {
            if (dp[i] != dp[i + 1]) 
            	v = false;
        }

        if (v) 
        	ans = min(ans, A[1]);
        v = true;
        
        frep(i , 1 , n - 3) {
            if (dp[i] != dp[i + 1]) 
            	v = false;
        }

        if (v) 
        	ans = min(ans, A[n]);
        
        set <int> S;
        frep(i , 1 , n - 2) {
            if (dp[i] != dp[i + 1]) {
                S.insert(i);
                S.insert(i + 1);
                if (i + 2 <= n) S.insert(i + 2);
            }
        }
        
        v = true;
                
        if (S.find(1) != S.end()) 
        	S.erase(S.find(1));
        if (S.find(n) != S.end()) 
        	S.erase(S.find(n));
        
        if (S.size() > 7) 
        	v = false;
        
        else {
        	for (auto i = S.begin(); i != S.end(); ++i) {
	            bool valid = true;
	            for (int j = 1; j <= n - 1; ++j) {
	                if (j == (*i)) 
	                	dp[j] = dp[j - 1];
	                else if (j + 1 == (*i)) 
	                	dp[j] = A[j + 2] - A[j];
	                else 
	                	dp[j] = A[j + 1] - A[j];
	        	}
	            for (int j = 1; j <= n - 2; ++j) 
	            	if (dp[j] != dp[j + 1]) 
	            		valid = false;
	            
	            if (valid) 
	            	ans = min(ans, A[*i]);
        	}
        }

        if (ans == INF) 
        	ans = -1;
        cout << ans << '\n';
    }
    return 0;
}


