// Program and program template by vvneagleone

#include<cstdio>
#include<iostream>
#include<iomanip>
#include<algorithm>
#include<cmath>
#include<string>
#include<cstring>
#include<climits>
#include<vector>
#include<utility>
#include<queue>
#include<set>
#include<map>
using namespace std;
typedef long long LL;
typedef long double LD;
#define MOD 1000000007LL

#ifdef __GNUC__
    #if ( __GNUC__ >= 4 && __GNUC_MINOR__ >= 7 && __cplusplus > 201100L )
        #include<unordered_set>
        #include<unordered_map>
    #endif
#endif // __GNUC__

#ifdef __WIN32
    #define gx getchar
    #define px putchar
    #define ps putchar(' ')
    #define pn putchar('\n')
#else
    #define gx getchar_unlocked
    #define px putchar_unlocked
    #define ps putchar_unlocked(' ')
    #define pn putchar_unlocked('\n')
#endif // __WIN32

void scan(int &n){int sign=1;n=0;char c=gx();while(c<'0'||c>'9'){if(c=='-')sign=-1;c=gx();}while(c>='0'&&c<='9')n=(n<<3)+(n<<1)+c-'0',c=gx();n=n*sign;}
void lscan(LL &n){int sign=1;n=0;char c=gx();while(c<'0'||c>'9'){if(c=='-')sign=-1;c=gx();}while(c>='0'&&c<='9')n=(n<<3)+(n<<1)+c-'0',c=gx();n=n*(LL)(sign);}
int sscan(char a[]){char c=gx();while(c==' '||c=='\n')c=gx();int i=0;while(c!='\n')a[i++]=c,c=gx();a[i]=0;return i;}
int wscan(char a[]){char c=gx();while(c==' '||c=='\n')c=gx();int i=0;while(c!='\n'&&c!=' ')a[i++]=c,c=gx();a[i]=0;return i;}
void print(int n){if(n<0){n=-n;px('-');}int i=10;char o[10];do{o[--i]=(n%10)+'0';n/=10;}while(n);do{px(o[i]);}while(++i<10);}
void lprint(LL n){if(n<0LL){n=-n;px('-');}int i=21;char o[21];do{o[--i]=(n%10LL)+'0';n/=10LL;}while(n);do{px(o[i]);}while(++i<21);}
void sprint(const char*a){const char*p=a;while(*p)px(*p++);}
LL power(LL b,LL e,LL m=MOD){LL r=1;while(e){if(e&1)r=(r*b)%m;b=(b*b)%m;e>>=1;}return r;}
LL minv(LL a,LL m=MOD){LL c,t,q,x,y;c=m;x=0;y=1;while(a>1){q=a/c;t=c;c=a%c;a=t;t=x;x=y-q*x;y=t;}if(y<0)y+=m;return y;}
LL mmul(LL a,LL b,LL m=MOD){LL x=0,y=a%m;while(b){if(b&1)x=(x+y)%m;y=(y<<1)%m;b>>=1;}return x%m;}
LL absll(LL x){if(x<0)return -x;return x;}

LL t, n, q, i, j, k;

LL chuus( int a, int b ) {
    LL ans = 1;
    for( int i = 0; i < b; ++i ) ans *= a-i;
    for( int i = 1; i <= b; ++i ) ans /= i;
    return ans;
}

void subtask1() {
    unordered_map< string,int > M;
    unordered_map< string,int >::iterator mi;
    while(t--) {
        lscan(n); lscan(q);
        string s, z;
        cin >> s;
        M.clear();
        for( i = 0; i < n; ++i ) {
            for( j = i; j < n; ++j ) {
                z.clear();
                for( k = i; k <= j; ++k ) {
                    z += s[k];
                }
                mi = M.find(z);
                if( mi == M.end() ) M.insert( make_pair(z, 1) );
                else ++mi->second;
            }
        }
        while(q--) {
            LL ans = 0;
            lscan(k);
            for( auto it : M ) {
                if( it.second >= k ) ans += chuus( it.second, k );
            }
            lprint(ans); pn;
        }
    }
}

LL nck[5003][5003];

void pre() {
    for( i = 0; i < 5002; ++i ) nck[i][0] = nck[i][i] = 1;
    for( i = 1; i < 5002; ++i ) {
        for( j = 1; j < i/*min( 5003-i, i)*/; ++j ) {
            nck[i][j] = nck[i-1][j] + nck[i-1][j-1];
            nck[i][j] %= MOD;
        }
    }
}

LL ans[5002];

void subtask2() {
    string s;
    vector<int> v[2][5002];
    int turn, old;
    lscan(n); lscan(q);
    cin >> s;

    LL ct[5003];
    for( int x = 0; x < 5003; ++x ) ct[x] = 0;
    unordered_map< char, int > mm;
    unordered_map< char, int >::iterator mi;

    //length 1
    int x = 0;
    for( i = 0; i < n; ++i ) {
        mi = mm.find(s[i]);
        if( mi == mm.end() ) {
            mm.insert( pair<char,int>(s[i],x) );
            // v[0][x].clear();
            v[0][x].push_back(i);
            ++x;
        }
        else {
            v[0][mi->second].push_back(i);
        }
    }
    //iterate until final x
    for( int i = 0; i < x; ++i ) ++ct[v[0][i].size()];

/*// DISPLAY SECTION
    cout << "LENGTH " << 1 << endl;
    for( int i = 0; i < x; ++i ) {
        for( int j = 0; j < v[0][i].size(); ++j ) cout << v[0][i][j] << " ";
        cout << endl;
    }
    cout << endl << endl;
// END DISPLAY*/


    turn = 0; old = 1; int y; char cx;
    vector<int> * vec;
    // length > 1
    for( i = 1; i < n; ++i ) { // length + 1
        y = x;
        x = 0;
        turn = 1-turn;
        old = 1-old;
        bool flag = 0;
        for( j = 0; j < y; ++j ) {
            mm.clear();
            vec = &(v[old][j]);
            for( k = 0; k < (*vec).size(); ++k ) {
                if( (*vec)[k] + i >= n ) continue;
                cx = s[(*vec)[k] + i];
                mi = mm.find(cx);
                if( mi == mm.end() ) {
                    mm.insert( pair<char,int>(cx,x) );
                    v[turn][x].clear();
                    v[turn][x].push_back( (*vec)[k] );
                    ++x;
                }
                else {
                    v[turn][mi->second].push_back( (*vec)[k] );
                    flag = 1;
                }
            }
        }
        //iterate until final x
        for( int i = 0; i < x; ++i ) ++ct[v[turn][i].size()];

        /*// DISPLAY SECTION
            cout << "LENGTH " << i+1 << endl;
            for( int i = 0; i < x; ++i ) {
                for( int j = 0; j < v[turn][i].size(); ++j ) cout << v[turn][i][j] << " ";
                cout << endl;
            }
            cout << endl << endl;
        // END DISPLAY*/

        if( flag == 0 ) {
            for( j = i+1; j < n; ++j ) {
                ct[1] += n-j;
            }
            break;
        }
    }

    pre();
    for( k = 1; k <= n; ++k ) {
        LL ax = 0;
        for( i = k; i <= n; ++i ) {
            ax += nck[i][k] * ct[i];
            ax %= MOD;
        }
        ans[k] = ax;
    }

    while(q--) {
        lscan(k);
        if( k > n ) sprint("0\n");
        else {
            lprint(ans[k]); pn;
        }
    }
}

#include<sys/time.h>
int main() {
    //clock_t tim = clock();
    lscan(t);
    if( t == 1 ) subtask2();
    else subtask1();
    //cout << (double)(clock() - tim) / (double)(CLOCKS_PER_SEC) << endl;
    return 0;
}
