#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <cstring>
#include <cinttypes>
#include <cstdint>
#include <cassert>
#include <iostream>
#include <iomanip>
#include <fstream>
#include <sstream>
#include <algorithm>
#include <vector>
#include <map>
#include <set>
#include <queue>
#include <stack>
#include <deque>
#include <bitset>
#include <complex>
#include <functional>
#include <numeric>
#include <limits>
#include <utility>
 
#include <array>
#include <unordered_map>
#include <unordered_set>
#include <tuple>
 
using namespace std;
 
#define endl '\n'
typedef long long ll;

const int B = 4;
const ll BS[] = {1, 7, 49, 343, 2401, 16807, 117649, 823543, 5764801};

//   0 1 2 3 4 5 6
// 0 0 x x x x x x
// 1 0 1 2 3 4 5 6
// 2 0 4 1 5 2 6 3
// 3 0 5 3 1 6 4 2
// 4 0 2 4 6 1 3 5
// 5 0 3 6 2 5 1 4
// 6 0 6 5 4 3 2 1

const int tbl[7][7] = {
  {0, 0, 0, 0, 0, 0, 0},
  {0, 1, 2, 3, 4, 5, 6},
  {0, 4, 1, 5, 2, 6, 3},
  {0, 5, 3, 1, 6, 4, 2},
  {0, 2, 4, 6, 1, 3, 5},
  {0, 3, 6, 2, 5, 1, 4},
  {0, 6, 5, 4, 3, 2, 1}
};

char buf[1 << 21];

int main() {
  int T;
  scanf("%d", &T);
  while (T--) {
    scanf("%s", buf);
    string s(buf);
    scanf("%s", buf);
    string t(buf);
    while (t.back() == '0') {
      t.pop_back();
      s.pop_back();
    }
    reverse(s.begin(), s.end());
    reverse(t.begin(), t.end());
    int n, m;
    n = s.size();
    m = t.size();
    int l;
    scanf("%d", &l);
    int nn = (n - 1) / B + 1, mm = (m - 1) / B + 1;
    vector<ll> a(max(n, l) + 1), b(m), c(l);
    for (int i = 0; i < n / B; i++) {
      for (int j = 0; j < B; j++) {
	a[i] += BS[j] * (s[i * B + j] - '0');
      }
    }
    for (int j = 0; j < n % B; j++) {
      a[n / B] += BS[j] * (s[n / B * B + j] - '0');
    }
    
    for (int i = 0; i < m / B; i++) {
      for (int j = 0; j < B; j++) {
	b[i] += BS[j] * (t[i * B + j] - '0');
      }
    }
    for (int j = 0; j < m % B; j++) {
      b[m / B] += BS[j] * (t[m / B * B + j] - '0');
    }
    ll tmp = 0;
    for (int i = 0; i < l; i++) {
      ll base = BS[i % B];
      if (a[i / B] < 0) {
	ll x = abs(a[i / B]);
	x = (x - 1) / BS[B] + 1;
	a[i / B] += BS[B] * x;
	a[i / B + 1] -= x;
      }
      ll ta = a[i / B] / base % 7;
      c[i] = tbl[b[0] % 7][ta];
      ll t = c[i] * base * b[0];
      a[i / B] -= t % BS[B];
      a[i / B + 1] -= t / BS[B];
      tmp += base * c[i];
      if (i % B == B - 1) {
	for (int j = 1; j < mm && (i - (B - 1)) + j * B < l; j++) {
	  a[i / B + j] -= tmp * b[j];
	}
	tmp = 0;
      }
    }
    reverse(c.begin(), c.end());
    int p = 0;
    while (p < l && c[p] == 0) p++;
    if (p == l) p--;
    while (p < l) putchar(c[p++] + '0');
    putchar('\n');
  }
}
