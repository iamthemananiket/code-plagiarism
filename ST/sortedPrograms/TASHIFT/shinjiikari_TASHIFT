#include <stdio.h>
#include <bits/stdc++.h>
using namespace std;
#define mod 1000000007
typedef long long ll;
#define pii pair<int,int>
#define pll pair<ll,ll>
#define pdd pair<double,double>
#define FILL(a,x) memset(a,x,sizeof(a))
#define	foreach( gg,ii ) for( typeof(gg.begin()) ii=gg.begin();ii!=gg.end();ii++)
#define	mp make_pair
#define	pb push_back
#define sz(a) int((a).size())
#define	debug(ccc)	cout << #ccc << " = " << ccc << endl;
typedef long double ld;

inline ll input(void)
{
	char t;
	ll x=0;
	int neg=0;
	t=getchar();
	while((t<48 || t>57) && t!='-')
		t=getchar();
	if(t=='-')
		{neg=1; t=getchar();}
    while(t>=48 && t<=57)
    {
        x=(x<<3)+(x<<1)+t-48;
        t=getchar();
    }
	if(neg)
		x=-x;
	return x;
}

inline void output(ll x)
{
	char a[20];
	int i=0,j;
	a[0]='0';
	if (x<0) {putchar('-'); x=-x;}
	if (x==0) putchar('0');
	while(x)
	{
		a[i++]=x%10+48;
		x/=10;
	}
	for(j=i-1;j>=0;j--)
	{
		putchar(a[j]);
	}
	putchar('\n');
}

ll n,i,j,F[1000001],ans,best,num;
char s[1000001],b[2000001];

void build()
{
	int m=strlen(s),i,j;
	F[0]=-1;
	for(i=1;i<m;i++)
	{
		j=F[i-1];
		while(1)
		{
			if(s[j+1]==s[i])
			{
				F[i]=j+1;
				break;
			}
			if (j==-1)
			{
				F[i]=-1;
				break;
			}
			j=F[j];
		}
	}
}

/*
void Knuth_Morris_Pratt(char text[],char pattern[])
{
	int m=strlen(pattern),n=strlen(text),i,j;
	int F[m+1];
	build_failure_function(pattern[], F[]); 
	i = 0;
	j = 0;
	for( ; ; )
	{
		if (j==n) break;
		if (text[j] == pattern[i])
		{
	  		i++;
	  		j++;
	  		if (i == m) 
		}
		else if(i > 0) i = F[i];
		else j++;
	}
}
*/

int main()
{
n=input();
scanf("%s",s);
scanf("%s",b);
for(i=0;i<n;i++) b[n+i]=b[i];
b[2*n]='\0';
build();
i=-1;
j=0;
ans=0;
num=0;
best=0;
while(1)
{
	//printf("%lld %lld\n",i,j);
	if (j==2*n) break;
	if (b[j]==s[i+1])
	{
		i++;
		j++;
		num++;
		if (num>best)
		{
			best=num;
			ans=j-num;
			//printf("%lld %lld\n",best,j-num);
		}
		if (i==n-1) break;
	}
	else if (i!=-1)
	{
		i=F[i];
		num=i+1;
	}
	else
	{
		j++;
		num=0;
	}
	//printf("%lld %lld\n",i,j);
}
output(ans);
return 0;
}
