#include<bits/stdc++.h>
using namespace std;
#define CONS 100009
#define B 10019
#define MOD 1000000007
using namespace std;
typedef long long int ll;
typedef struct x
{
    ll dir;
    ll val;
    int color;
    ll node_hash;
}Vertices;
Vertices vertices1[CONS];
vector<int>vec1[CONS];
bool root1[CONS];
Vertices vertices2[CONS];
vector<int>vec2[CONS];
bool root2[CONS];
set<ll>hashed;
void DFS1(int v)
{
   vertices1[v].color=1;
   ll cur=vertices1[v].val;
   for(int i=0;i<vec1[v].size();i++)
   {
      if(vertices1[vec1[v][i]].color==0)
      {
         DFS1(vec1[v][i]);
         cur+=vertices1[vec1[v][i]].node_hash*vertices1[vec1[v][i]].dir*B;
         cur%=MOD;
      }
   }
   vertices1[v].color=2;
   vertices1[v].node_hash=cur;
   hashed.insert(vertices1[v].node_hash);
}
void DFS2(int v)
{
   vertices2[v].color=1;
   ll cur=vertices2[v].val;
   for(int i=0;i<vec2[v].size();i++)
   {
      if(vertices2[vec2[v][i]].color==0)
      {
         DFS2(vec2[v][i]);
         cur+=vertices2[vec2[v][i]].node_hash*vertices2[vec2[v][i]].dir*B;
         cur%=MOD;
      }
   }
   vertices2[v].color=2;
   vertices2[v].node_hash=cur;
}
int main()
{
      int n;
      scanf("%d",&n);
      for(int i=0;i<n;i++)
      {
          vertices1[i].dir=-1;
          vertices1[i].color=0;
          vec1[i].clear();
      }
      for(int i=0;i<n;i++)
      {
          ll p;
          scanf("%lld",&p);
          vertices1[i].val=p;
      }
      int edges=n-1;
      for(int i=0;i<edges;i++)
      {
         int u,v;
         char q[5];
         scanf("%d%d%s",&u,&v,q);
         vec1[u-1].push_back(v-1);
         root1[v-1]=true;
         if(q[0]=='M')
            vertices1[v-1].dir=1019LL;
         else
            vertices1[v-1].dir=1013LL;
      }
      for(int i=0;i<n;i++)
      {
         if(!root1[i])
            DFS1(i);
      }
      int queries;
      scanf("%d",&queries);
      while(queries--)
      {
          int m;
          scanf("%d",&m);
          for(int i=0;i<m;i++)
          {
               vertices2[i].dir=-1;
               vertices2[i].color=0;
               vec2[i].clear();
               root2[i]=false;
          }
          for(int i=0;i<m;i++)
          {
               ll p;
               scanf("%lld",&p);
               vertices2[i].val=p;
          }
          int edges=m-1;
          for(int i=0;i<edges;i++)
          {
               int u,v;
               char q[5];
               scanf("%d%d%s",&u,&v,q);
               vec2[u-1].push_back(v-1);
               root2[v-1]=true;
               if(q[0]=='M')
                   vertices2[v-1].dir=1019LL;
               else
                   vertices2[v-1].dir=1013LL;
          }
          int ind;
          for(int i=0;i<m;i++)
          {
               if(!root2[i])
               {
                   ind=i;
                   DFS2(i);
               }
          }
          if(hashed.find(vertices2[ind].node_hash)!=hashed.end())
              printf("YES\n");
          else
            printf("NO\n");
      }
      return 0 ;
}
