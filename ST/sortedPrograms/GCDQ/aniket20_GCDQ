#include<bits/stdc++.h>
#define N 300000
using namespace std;
#define ll long long
int tree[N];
int arr[N];
void initialize(int node, int a,int b)
{
	if(a>b)
	{
		return;
	}
//	cout<<a<<" "<<b<<endl;
	if(a==b)
	{
		tree[node]=arr[a]; //initialize the leaf nodes
		return;
	}
	initialize(node*2, a,(a+b)/2);
	initialize(node*2+1, (a+b)/2+1,b);
	tree[node]=__gcd(tree[node*2],tree[node*2+1]); //the property that you want to store
}
int query(int node, int a,int b, int i,int j)
{
//	cout<<a<<" "<<b<<endl;
	if(a>b || a>j || b<i) // seg id not in range
	{
		return 0;
	}
	if(a>=i && b<=j)	//seg is totally in range
	{
		return tree[node]; 
	}
	int q1=query(node*2,a,(a+b)/2,i,j);
	int q2=query(node*2+1,(a+b)/2+1,b,i,j);
//	cout<<q1<<" "<<q2<<endl;
	return __gcd(q1,q2);	// return according to property
}
int main()
{
	//ios_base::sync_with_stdio(false);
	int t,n,i,k,l,r,q1,q2;
	scanf("%d",&t);
	ll val;
//	cout<<__gcd(0,5)<<endl;
	while(t--)
	{
		scanf("%d%d",&n,&k);
	//	memset(tree,sizeof(tree),0);
		for(i=0;i<n;i++)
		{
			scanf("%d",&arr[i]);
		}
		initialize(1,0,n-1);
		for(i=0;i<k;i++)
		{
			scanf("%d %d",&l,&r);
			if(l-2>=0)
			{
				q1=query(1,0,n-1,0,l-2);
			}
			else
			{
				q1=0;
			}
			if(r<=n-1)
			{
				q2=query(1,0,n-1,r,n-1);
			//	cout<<q2<<"-1\n";
			}
			else
			{
				q2=0;
			}
		//	cout<<q1<<" "<<q2<<endl;
			int ans=__gcd(q1,q2);
			printf("%d\n",ans);
		}
	}
	return 0;
}
