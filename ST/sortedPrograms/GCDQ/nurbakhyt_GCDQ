#include <bits/stdc++.h>

const int N = (int)1e5 + 123;

using namespace std;

int n, k;
int a[N];
int l, r;
int t[4 * N];

void build(int v = 1, int tl = 1, int tr = n) {
	if (tl == tr) {
		t[v] = a[tl];
		return;
	}
	int tm = (tl + tr) / 2;
	build(v * 2, tl, tm);
	build(v * 2 + 1, tm + 1, tr);
	t[v] = __gcd(t[v * 2], t[v * 2 + 1]);
}

int get(int l, int r, int v = 1, int tl = 1, int tr = n) {
	if (tl >= l && tr <= r)
		return t[v];
	if (tl > r || l > tr)
		return 0;
	int tm = (tl + tr) / 2;
	return __gcd(get(l, r, v * 2, tl, tm), get(l, r, v * 2 + 1, tm + 1, tr));
}

void solve() {
	scanf("%d%d", &n, &k);	
	for (int i = 1; i <= n; i++)
		scanf("%d", &a[i]);
	build();
	for (int i = 1; i <= k; i++) {
		scanf("%d%d", &l, &r);		
		int now = 0;
		if (l > 1)
			now = get(1, l - 1);
		if (r < n)		
			now = __gcd(now, get(r + 1, n));
		printf("%d\n", now);
	}
}

int test;

int main() {
    scanf("%d", &test);
    while(test--)
    	solve();
	return 0;
}
