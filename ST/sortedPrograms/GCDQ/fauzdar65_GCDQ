#include <iostream>
#define ll long long
using namespace std;

inline void scanint(int* x)
{
	register char c = getchar_unlocked();
	*x = 0;
	for(; (c<48)||(c>57);c = getchar_unlocked());
	for(; (c>47)&&(c<58);c = getchar_unlocked())
		*x = (int)((((*x)<<1) + ((*x)<<3)) + c - 48);
}

int gcd(int a,int b)
{
if(b==0)return a;

return gcd(b,a%b);
}	

int A[100005],tree[500000];

void build(int node,int a,int b)
{
	if(a>b)return;
	
	if(a==b)
	{
		tree[node]=A[a];
		return;
	}
	
	build(node*2,a,(a+b)/2);
	build(node*2+1,(a+b)/2 +1,b);
	
	tree[node]=gcd(tree[node*2],tree[node*2+1]);
	
}

int query(int node,int a,int b,int i,int j)
{
	if(a>b || a>j || b<i )return -1;
	
	if(a>=i && b<=j)return tree[node];
	
	int r1=query(node*2,a,(a+b)/2,i,j);
	int r2=query(node*2+1,(a+b)/2 +1,b,i,j);
	
	if(r1==-1)return r2;
	if(r2==-1)return r1;
	
	return gcd(r1,r2);
}

int main() {
	int t,n,q;
	
	scanint(&t);
	
	while(t--)
	{
		scanint(&n); scanint(&q);
		
		for(int i=1;i<=n;i++)
		{
			scanint(&A[i]);
		}
		build(1,1,n);
		int l,r;
		int v1,v2;
		while(q--)
		{
			scanint(&l); scanint(&r);
			v1=query(1,1,n,1,l-1);
			v2=query(1,1,n,r+1,n);
			
			if(v1==-1)printf("%d\n",v2);
			else if(v2==-1)printf("%d\n",v1);
			else printf("%d\n",gcd(v1,v2));
		}
	}

	return 0;
}