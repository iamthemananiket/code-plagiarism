#include <bits/stdc++.h>

using namespace std;

class Reader
{
public:

    Reader( FILE *_stream, const int _size = ( 1 << 20 ) )
    {
        stream = _stream;
        buffer = new char[_size];
        size = _size;
        pointer = 0;

        fread( buffer, size, 1, stream );
    }

    template <class T>
    T nextValue()
    {
        T value = 0;
        bool negative = false;

        while ( !isdigit( buffer[pointer] ) )
                nextPosition();

        if ( buffer[pointer] == '-' )
        {
            negative = true;
            nextPosition();
        }

        while ( isdigit( buffer[pointer] ) )
        {
            value = value * 10 + buffer[pointer] - '0';
            nextPosition();
        }

        if ( negative )
            value = -value;

        return value;
    }

    template <class T>
    Reader& operator >> ( T &value )
    {
        value = nextValue<T>();
        return *this;
    }

private:

    void nextPosition()
    {
        if ( ++pointer == size )
        {
            fread( buffer, size, 1, stream );
            pointer = 0;
        }
    }

    char *buffer;
    FILE *stream;
    int pointer, size;
};

const int Nmax = 1e5 + 1;

int A[4 * Nmax];
int v[Nmax];
int T, N, Q;

void build( int nod, int st, int dr )
{
    if ( st == dr )
    {
        A[nod] = v[st];
    }
    else
    {
        int m = ( st + dr ) / 2;

        build( 2 * nod, st, m );
        build( 2 * nod + 1, m + 1, dr );

        A[nod] = __gcd( A[2 * nod], A[2 * nod + 1] );
    }
}

int query( int nod, int st, int dr, int st_q, int dr_q )
{
    if ( st_q <= st && dr <= dr_q )
    {
        return A[nod];
    }
    else
    {
        int m = ( st + dr ) / 2;
        int sol = 0;

        if ( st_q <= m )
            sol = __gcd( sol, query( 2 * nod, st, m, st_q, dr_q ) );

        if ( m < dr_q )
            sol = __gcd( sol, query( 2 * nod + 1, m + 1, dr, st_q, dr_q ) );

        return sol;
    }
}

int main()
{
    Reader in( stdin );

    in >> T;

    while ( T-- )
    {
        in >> N >> Q;

        for ( int i = 1; i <= N; ++i )
            in >> v[i];

        build( 1, 1, N );

        while ( Q-- )
        {
            int L, R;

            in >> L >> R;

            int sol = 0;

            if ( 1 <= L - 1 )
                sol = __gcd( sol, query( 1, 1, N, 1, L - 1 ) );

            if ( R + 1 <= N )
                sol = __gcd( sol, query( 1, 1, N, R + 1, N ) );

            cout << sol << "\n";
        }
    }

    return 0;
}
