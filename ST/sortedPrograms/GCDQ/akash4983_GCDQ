#include <cstdio>
#include <cmath>
#include <iostream>
#include <set>
#include <algorithm>
#include <vector>
#include <map>
#include <cassert>
#include <string>
#include <cstring>
#include <queue>

using namespace std;

#define rep(i,a,b) for(int i = a; i < b; i++)
#define S(x) scanf("%d",&x)
#define S2(x,y) scanf("%d%d",&x,&y)
#define P(x) printf("%d\n",x)
#define all(v) v.begin(),v.end()
#define sz size()

typedef long long int LL;
typedef pair<int, int > pii;
typedef vector<int > vi;

const int N = 100001;
int A[2*N];
int ST[10*N];

void build(int n, int b, int e) {

	if(b == e) {
		ST[n] = A[b];
		return;
	}

	int m = (b + e) >> 1;
	build(n<<1, b, m);
	build((n<<1)|1, m+1, e);

	ST[n] = __gcd(ST[n<<1], ST[(n<<1)|1]);
}

int query(int n, int b, int e, int l, int r) {

	if(b == l && e == r) {
		return ST[n];
	}

	int m = (b + e) >> 1;

	if(r <= m) {
		return query(n<<1, b, m, l, r);
	} else if(l > m) {
		return query((n<<1)|1, m+1, e, l, r);
	}
	return __gcd(query(n<<1, b, m, l, m),
		query((n<<1)|1, m+1, e, m+1, r));

}

int main() {
	int t;
	S(t);
	while(t--) {
		int n,q;
		S2(n,q);
		rep(i,1,n+1) {
			S(A[i]);
			A[n+i] = A[i];
		}

		build(1, 1, 2*n);
		while(q--) {
			int l,r;
			S2(l,r);

			r++;
			l += n-1;
			P(query(1, 1, 2*n, r, l));
		}

	}
	return 0;
}