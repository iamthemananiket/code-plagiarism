#include <bits/stdc++.h>

#define pb push_back
#define f first
#define s second
#define mp make_pair
#define sz(a) int((a).size())
#ifdef _WIN32
#  define I64 "%I64d"
#else
#  define I64 "%lld"
#endif
#define fname "."
#define pi pair < int, int >
#define pp pop_back

typedef long long ll;
typedef long double ld;
typedef unsigned long long ull;

const int MAX_N = (int)1e5 + 123;
const double eps = 1e-6;
const int inf = (int)1e9 + 123;

using namespace std;


inline unsigned long long readULong()
{
  int c = getc(stdin);
  unsigned long long x = 0;
  while (c <= 32)
    c = getc(stdin);
  while ('0' <= c && c <= '9')
    x = x * 10 + c - '0', c = getc(stdin);
  return x;
}

inline unsigned int readUInt()
{
  int c = getc(stdin);
  unsigned int x = 0;
  while (c <= 32)
    c = getc(stdin);
  while ('0' <= c && c <= '9')
    x = x * 10 + c - '0', c = getc(stdin);
  return x;
}

inline void writeULong( unsigned long long x )
{
  char s[30];
  int n = 0;
  while (x || !n)
    s[n++] = '0' + x % 10, x /= 10;
  while (n--)
    putc(s[n], stdout);
}

inline void writeUInt( unsigned int x )
{
  char s[15];
  int n = 0;
  while (x || !n)
    s[n++] = '0' + x % 10, x /= 10;
  while (n--)
    putc(s[n], stdout);
}

/***
 * Signed
 */

inline int readInt()
{
  int s = 1, x = 0, c = getc(stdin);
  while (c <= 32)
    c = getc(stdin);
  if (c == '-')
    s = -1, c = getc(stdin);
  while ('0' <= c && c <= '9')
    x = x * 10 + c - '0', c = getc(stdin);
  return x * s;
}

inline void writeInt( int x )
{
  if (x < 0)
    putc('-', stdout), x = -x;

  char s[20];
  int n = 0;
  while (x || !n)
    s[n++] = '0' + x % 10, x /= 10;
  while (n--)
    putc(s[n], stdout);
	putchar('\n');
}

int n, q;

struct tree {
	int cnt[3], add;
	tree() {
		memset(cnt, 0, sizeof cnt);
		add = 0;
	}
	inline tree operator + (const tree &b) {
		tree res;
		for (int i = 0; i < 3; i++)
			res.cnt[i] = cnt[i] + b.cnt[i];
		return res;
	}
} t[4 * MAX_N];

inline void push(int v, int tl, int tr) {
	if (!t[v].add)
		return;
	int q[3] = {0, 0, 0};
	for (int i = 0; i < 3; i++)
		q[(i + t[v].add) % 3] += t[v].cnt[i];
	for (int i = 0; i < 3; i++)
		t[v].cnt[i] = q[i];
	if (tl != tr)
		t[v * 2].add += t[v].add, t[v * 2 + 1].add += t[v].add;
	t[v].add = 0;
}

void update(int l, int r, int add, int v = 1, int tl = 0, int tr = n - 1) {
	push(v, tl, tr);
	if (tl > r || l > tr)
		return;
	if (tl >= l && tr <= r) {
  	t[v].add += add;
  	push(v, tl, tr);
  	return;
  }
  int tm = (tl + tr) / 2;
  update(l, r, add, v * 2, tl, tm), update(l, r, add, v * 2 + 1, tm + 1, tr);
  t[v] = t[v * 2] + t[v * 2 + 1];
}

int get(int l, int r, int v = 1, int tl = 0, int tr = n - 1) {
	push(v, tl, tr);
	if (tl > r || l > tr)
		return 0;
	if (tl >= l && tr <= r)
		return t[v].cnt[0];
	int tm = (tl + tr) / 2;
	return get(l, r, v * 2, tl, tm) + get(l, r, v * 2 + 1, tm + 1, tr);
}

void build(int v = 1, int tl = 0, int tr = n - 1) {
	t[v].cnt[0] = tr - tl + 1;
	if (tl == tr)
		return;
	int tm = (tl + tr) / 2;
	build(v * 2, tl, tm), build(v * 2 + 1, tm + 1, tr);
}

int main() {
	#ifdef Nick
	freopen(fname"in", "r", stdin);
	freopen(fname"out", "w", stdout);
	#endif
	n = readInt(), q = readInt();
	build();
	for (int i = 0, tp, l, r, h; i < q; i++) {
		tp = readInt(), l = readInt(), r = readInt();
		if (!tp)
			update(l, r, 1);
		else
			writeInt(get(l, r));
	}
	return 0;
}