#include<queue>
#include<set>
#include<stack>
#include<stdio.h>
#include<iostream>
#include<vector>
#include<algorithm>
#include<string>
#include<string.h>
using namespace std;

typedef long long LL;
typedef vector<int> VI;

#define REP(i,n) for(int i=0, i##_len=(n); i<i##_len; ++i)
#define EACH(i,c) for(__typeof((c).begin()) i=(c).begin(),i##_end=(c).end();i!=i##_end;++i)
#define eprintf(s...)  fprintf(stderr, s)

template<class T> inline void amin(T &x, const T &y) { if (y<x) x=y; }
template<class T> inline void amax(T &x, const T &y) { if (x<y) x=y; }



int N, M;
int A[200111], B[200111], C[200111];

int par[100111];
int dep[100111];

int pp[20][100111];
LL D[20][100111];


struct Edge {
    int to;
    LL cst;
    bool operator<(const Edge &y) const {
	return y.cst < cst;
    }
};

LL dist[100111];
int color[100111];

vector<Edge> G[100111];

set<pair<int, int> > in_tree;

int lca(int x, int y) {
    if (dep[x] > dep[y]) swap(x, y);

    REP (t, 20) if ((dep[y] - dep[x]) & (1 << t)) y = pp[t][y];
    if (x == y) return x;

    for (int t=20; t--; ) {
	if (pp[t][x] != pp[t][y]) {
	    x = pp[t][x];
	    y = pp[t][y];
	}
    }
    return pp[0][x];
}

// LL dist_up(int x, int z) {
//     LL ret = 0;
//     for (int t=20; t--; ) {
// 	if (dep[z] >= dep[pp[t][x]]) {
// 	    ret += D[t][x];
// 	    x = pp[t][x];
// 	}
//     }
// 
//     return ret;
// }

int entrance(int x, int z) {
    if (color[x] == color[z]) return x;
    for (int t=20; t--;) {
	int p = pp[t][x];
	if (dep[p] > dep[z] && color[p] != color[z]) {
	    x = pp[t][x];
	}
    }
    return pp[0][x];
}

int main() {

    scanf("%d%d", &N, &M);

    REP (i, M) {
	scanf("%d%d%d", A+i, B+i, C+i);
	A[i]--; B[i]--;
	if (A[i] > B[i]) swap(A[i], B[i]);

	G[A[i]].push_back((Edge){ B[i], C[i] });
	G[B[i]].push_back((Edge){ A[i], C[i] });
    }

    
    memset(dist, 0x3f, sizeof dist);
    dist[0] = 0;
    priority_queue<Edge> Q;
    Q.push((Edge){ 0, 0 });

    while (!Q.empty()) {
	Edge e =  Q.top(); Q.pop();
	if (e.cst > dist[e.to]) continue;

	EACH (g, G[e.to]) {
	    if (dist[g->to] > e.cst + g->cst) {
		dist[g->to] = e.cst + g->cst;
		Q.push((Edge){ g->to, dist[g->to] });
		par[g->to] = e.to;
		dep[g->to] = dep[e.to] + 1;
		D[0][g->to] = g->cst;
	    }
	}
    }

    // LCA
    REP (i, N) pp[0][i] = par[i];
    REP (t, 19) REP (i, N) pp[t+1][i] = pp[t][pp[t][i]];

    REP (t, 19) REP (i, N) D[t+1][i] = D[t][i] + D[t][pp[t][i]];


    for (int i=1; i<N; i++) {
	int a = i, b = par[i];
	if (a > b) swap(a, b);
	in_tree.insert(make_pair(a, b));
    }


    memset(color, -1, sizeof color);

    REP (i, M) {
	if (in_tree.count(make_pair(A[i], B[i])) == 0) {
	    int a = A[i], b = B[i];
	    color[a] = color[b] = i;
	    while (a != b) {
		if (dep[a] < dep[b]) {
		    b = par[b];
		} else {
		    a = par[a];
		}
		color[a] = color[b] = i;
	    }
	}
    }


    int T;
    scanf("%d", &T);
    REP ($, T) {
	int x, y;
	scanf("%d%d", &x, &y);
	x--; y--;
	int z = lca(x, y);


	LL ans = 0;
	if (color[z] == -1) {
	    ans = dist[x] + dist[y] - 2 * dist[z];
	} else {
	    int xx = entrance(x, z);
	    int yy = entrance(y, z);
	    int a = A[color[z]], b = B[color[z]];
	    LL cycle = dist[a] + dist[b] - 2 * dist[z] + C[color[z]];

	    LL tmp = dist[xx] + dist[yy] - 2 * dist[z];
	    ans = min(tmp, cycle - tmp) + dist[x] - dist[xx] + dist[y] - dist[yy];;
	}

	printf("%lld\n", ans);

    }


    return 0;
}

