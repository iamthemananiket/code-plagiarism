#include <cstdio>
#include <cmath>
#include <algorithm>
#include <vector>
using namespace std;

const double EPS=1e-9;
const int maxn = 10;
int h[maxn], m[maxn];
vector<int> t;
int n;

double determineX(int i, int j)
{
  return (h[i]-h[j]) * 1.0 / (m[j]-m[i]);
}

bool check(int x)
{
  static long long y[maxn];
  bool check1 = true, check2 = true;
  for(int i = 0; i < n; i++)
  {
    y[i] = h[i]+1LL*x*m[i];
    if(i == 0) continue;
    if(i % 2 == 0)
    {
      check1 &= y[i]>y[i-1];
      check2 &= y[i]<y[i-1];
    }
    else
    {
      check1 &= y[i]<y[i-1];
      check2 &= y[i]>y[i-1];
    }
  }
  return check1 || check2;
}

int main()
{
  int T; scanf("%d", &T);
  while(T--)
  {
    t.clear();
    scanf("%d", &n);
    for(int i = 0; i < n; i++)
      scanf("%d%d", h+i, m+i);
    for(int i = 0; i < n; i++)
      for(int j = i + 1; j < n; j++)
        if(m[i] != m[j])
        {
          double x = determineX(i, j);
          if(x < 0.0) continue;
          if(fabs(x-floor(x))<EPS)
          {
            t.push_back(floor(x)-1);
            t.push_back(floor(x));
            t.push_back(floor(x)+1);
          }
          else
          {
            t.push_back(floor(x));
            t.push_back(ceil(x));
          }
        }
    t.push_back(0);
    sort(t.begin(), t.end());
    t.resize(unique(t.begin(), t.end()) - t.begin());

    vector< pair<int, int> > intervals;
    for(int i = 0; i < (int) t.size(); i++)
    {
      if(t[i] < 0) continue;
      // printf("i=%d t[i]=%d\n", i, t[i]);
      if(check(t[i]))
      {
        if(intervals.empty() || intervals.back().second != -1)
          intervals.push_back(make_pair(t[i], -1));
      }
      else
      {
        if(!intervals.empty() && intervals.back().second == -1)
          intervals.back().second = t[i] - 1;
      }
    }
    printf("%d\n", intervals.size());
    for(int i = 0; i < intervals.size(); i++)
    {
      printf("%d ", intervals[i].first);
      if(intervals[i].second == -1)
        printf("Inf\n");
      else
        printf("%d\n", intervals[i].second);
    }
  }
  return 0;
}

