#include<bits/stdc++.h>
using namespace std;
#ifdef ONLINE_JUDGE
	#define GETCHAR getchar_unlocked	
	#define PUTCHAR putchar_unlocked
#endif
#ifndef ONLINE_JUDGE
	#define GETCHAR getchar
	#define PUTCHAR putchar
#endif

inline int readlong() 
{
	int flag=1;
    int n = 0;
    char c;
    int sign=1;
    while (1)
    { 		
		c=GETCHAR();
    	if(c=='-')	sign=-1;
        else if(c>='0'&&c<='9') {n = n * 10 + c - '0';flag=0;}
        else if(flag!=1) break; 
   }
    return sign*n;
}

inline void writeInt(int x) 
{
     int i = 10;
     char buf[11];
     // buf[10] = 0;
     buf[10] = '\n';

     do 
     {
        buf[--i] = x % 10 + '0';
        x/= 10;
     }while(x);
     do 
     {
        PUTCHAR(buf[i]);
     } while (buf[i++] != '\n');
}

vector<vector<int> >G(110);

int distances[110];

int findMinpath(int source,int target,int totalnode,int totaledge)
{
    queue<int> q;
    q.push(source);
    distances[source] = 0;
    while(!q.empty())
    {
        int node=q.front();
        q.pop();
        if(node==target)
        {
            return distances[node];
        }
        for(int i=0;i<G[node].size();++i){
            if(distances[node] + 1 <= distances[ G[node][i] ]){
                distances[ G[node][i] ] = distances[node] + 1;
                q.push(G[node][i]);
         	}
		}
	}
    return 1;
}
int main()
{
    int T;
    T=readlong();
    while(T--)
    {
    	for(int i=0;i<110;i++){
    		distances[i]=INT_MAX;
    	}
    	for(int i=0;i<110;i++){
    		G[i].clear();
    	}
    	int N,S,E;
    	N=readlong();
    	S=readlong();
    	E=readlong();
        for(int i=1;i<=N-1;++i)
        {
        	int u,v;
        	u=readlong();
        	v=readlong();
            G[u].push_back(v);
            G[v].push_back(u);
        }
       writeInt(findMinpath(S,E,N,N-1));
    }
}