#include<cstdio>
#include<iostream>
#include<vector>
#include<algorithm>
#include<string>
#include<cstring>
using namespace std;

typedef long long LL;
typedef vector<int> VI;

#define REP(i,n) for(int i=0, i##_len=(n); i<i##_len; ++i)
#define EACH(i,c) for(__typeof((c).begin()) i=(c).begin(),i##_end=(c).end();i!=i##_end;++i)
#define eprintf(s...)  fprintf(stderr, s)

template<class T> inline void amin(T &x, const T &y) { if (y<x) x=y; }
template<class T> inline void amax(T &x, const T &y) { if (x<y) x=y; }

// MOD 2^64
typedef unsigned long long ULL;
struct RollingHash {
    static const ULL BASE = 2e9 + 11; // 3e9+19, 4e9+7 
    static const int MAX_LEN = 1000000;
    static const vector<ULL>powB;
    static const vector<ULL>buildB();
    vector<char> S;
    vector<ULL> H; // H[i] := hash(S[0 .. i])
    RollingHash(){}
    RollingHash(const string &str) {
	init(str);
    }
    void init(const string &str) {
	S.clear(); H.assign(1, 0ULL);
	for (int i=0; i<(int)str.size(); i++) {
	    S.push_back(str[i]);
	    H.push_back(H.back() * BASE + str[i]);
	}
    }
    ULL get(int l, int r) { // hash(S[l .. r-1])
	return H[r] - H[l] * powB[r-l];
    }
    void push(char c) {
	S.push_back(c);
	H.push_back(H.back() * BASE + c);
    }
    void pop() {
	S.pop_back();
	H.pop_back();
    }
};
const vector<ULL>RollingHash::buildB() {
    vector<ULL>h(MAX_LEN);
    h[0] = 1;
    for (int i=1; i<MAX_LEN; i++) h[i] = h[i-1]*BASE;
    return h;
}
const vector<ULL>RollingHash::powB = RollingHash::buildB();

int N, K;
char buf[100111];
string S, R;
RollingHash Sh, Rh;


int expand(int x, int y) {
    int lo = 0, hi = min(x+1, N-y);
    while (hi - lo > 1) {
	int m = (lo + hi) / 2;
	if (Sh.get(x-m, x) == Rh.get(N-1-y-m, N-1-y)) lo = m;
	else hi = m;
    }
    return hi;
}
void MAIN() {
    scanf("%d%d", &N, &K);
    scanf("%s", buf);
    S = R = buf;
    reverse(R.begin(), R.end());

    Sh = RollingHash(S);
    Rh = RollingHash(R);

    //
    LL ans = 0;
    REP (i, N) {
	int l = 0;
	REP (j, K+1) {
	    int t = expand(i-l, i+l);
	    l += t;

	    if (i-l == -1 || i+l == N) break;
	}
	// eprintf("%d %d\n", i, l);
	// 1 + 3 + 5 + ... + 2l-1
	ans += (LL)l*l;

	if (i+1 < N) {
	    l = 0;
	    REP (j, K+1) {
		int t = expand(i+1-l, i+l);
		l += t;
		if (i+1-l == -1 || i+l == N) break;
	    }

	    l--;
	    // 2 + 4 + ... + 2l
	    ans += (LL)l*(l+1);
	}
    }
    printf("%lld\n", ans);
}

int main() {
    int T;
    scanf("%d", &T);
    REP (i, T) MAIN();


    return 0;
}
