#include <cstdio>
#include <iostream>
#include <cstdlib>
#include <string>
#include <cstring>
#include <set>
#include <map>
#include <queue>
#include <deque>
#include <stack>
#include <vector>
#include <ctime>
#include <cassert>
#include <cmath>
#include <iomanip>
#include <algorithm>
#include <iomanip>
#include <fstream>
#include <unordered_map>
using namespace std;
#define fname ""
#define F first
#define S second
#define pb push_back
#define mp make_pair
#define ll long long
#define ull unsigned long long
#define inf 1000000000
#define INF 1000000000000000000ll
const int N = 100500;
struct tree {
	unordered_map <int, int> a;
	int vv;
}t[4 * N];

int n, nn = 1, a[N], m;

void build(int id, int v = 1, int tl = 1, int tr = nn) {
	t[v].a[a[id]]++;
	if (t[v].a[a[id]] > (tr - tl) / 2) {
		t[v].vv = a[id];
	}
	if (tl == tr) {
		return;
	}
	int mid = (tl + tr) >> 1;
	if (id <= mid) build(id, v + v, tl, mid);
	else build(id, v + v + 1, mid + 1, tr);
}

void upd(int id, int x, int v = 1, int tl = 1, int tr = nn) {
	t[v].a[a[id]]--;
	t[v].a[x]++;
	if (t[v].a[x] > (tr - tl) / 2) {
		t[v].vv = x;
	}
	if (tl == tr) {
		return;
	}
	int mid = (tl + tr) >> 1;
	if (id <= mid) upd(id, x, v + v, tl, mid);
	else upd(id, x, v + v + 1, mid + 1, tr);
}

int all[N], sz = 0;
int ss[N];

void calc(int l, int r, int v = 1, int tl = 1, int tr = nn) {
	if (l > r || l > tr || tl > r) return;
	if (l <= tl && tr <= r) {
		all[++sz] = v;
		return;
	}
	int mid = (tl + tr) >> 1;
	calc(l, r, v + v, tl, mid);
	calc(l, r, v + v + 1, mid + 1, tr);
}

int main() {
	#ifndef ONLINE_JUDGE
    freopen(fname"in", "r", stdin);
    freopen(fname"out", "w", stdout);
	#endif
	srand(time(0));

	scanf("%d%d", &n, &m);

	while (nn < n) nn <<= 1;

	for (int i = 1; i <= n; ++ i) {
		scanf("%d", &a[i]);
		build(i);
	}

	for (int i = 1; i <= m; ++ i) {
		int type, l, r;
		scanf("%d%d%d", &type, &l, &r);
		if (type == 1) {
			upd(l, r);
			a[l] = r;
		}
		else {
			sz = 0;
			ss[0] = 0;
			calc(l, r);

			for (int i = 1; i <= sz; ++ i) {
				if (t[all[i]].vv) ss[++ss[0]] = t[all[i]].vv;
			}
			sort(ss + 1, ss + 1 + ss[0]);
			ss[0] = unique(ss + 1, ss + 1 + ss[0]) - ss - 1;
			bool ok = 0;
			for (int i = 1; i <= ss[0]; ++ i) {
				int sum = 0;
				for (int j = 1; j <= sz; ++ j) {
					sum += t[all[j]].a[ss[i]];
				}
				if (sum > (r - l + 1) / 2) {
					ok = 1;
					break;
				}
			}

			if (ok) puts("Yes");
			else puts("No");
		}
	}

    return 0;
}
