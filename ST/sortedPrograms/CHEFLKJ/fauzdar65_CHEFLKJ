#include <bits/stdc++.h>
#include<ext/pb_ds/assoc_container.hpp>
#include<ext/pb_ds/tree_policy.hpp>
// #include <boost/multiprecision/cpp_int.hpp> 

#define gc getchar//_unlocked
#define pc putchar//_unlocked
#define ll long long
#define ld long double
#define pb push_back
#define mp make_pair
#define pp pair<int,int>
#define bigint boost::multiprecision::cpp_int
#define finp ios_base::sync_with_stdio(0);cin.tie(0);
#define bc __builtin_popcountll
#define afor(i,a,b) for(int i=a;i<=b;++i)
#define bfor(i,a,b) for(int i=a;i>=b;--i)
#define vi vector<int>
#define vpp vector<pp>
#define vll vector<ll>

using namespace std;
using namespace __gnu_pbds;

char putnb[20];
void putn(ll n) {if(!n)pc('0');if(n<0)pc('-'),n=0-n;int pi=0;while(n)putnb[pi++]=(n%10)+'0',n/=10;while(pi)pc(putnb[--pi]);}
void sci(int *x) {register char c = gc();*x = 0;for(; (c<48)||(c>57);c = gc());for(; (c>47)&&(c<58);c = gc())*x = (int)((((*x)<<1) + ((*x)<<3)) + c - 48);}
void scll(ll *x)  {register char c = gc();*x = 0;for(; (c<48)||(c>57);c = gc());for(; (c>47)&&(c<58);c = gc())*x =  (ll)((((*x)<<1) + ((*x)<<3)) + c - 48);}
ll fp(ll a,ll b,ll c) {if(b==0)return 1%c; if(b==1)return a%c; ll ret=fp(a,b/2,c); ret=(ret*ret)%c; if(b&1)ret=(ret*a)%c; return ret;}

const ll mod=1e9 +7;
const ll mod2=1999999973;
const ll inf=1e18;
const int infs=1e9 + 1000;
const int N=100000;
const long double PI = acos(-1);

template <typename T>
using ordered_set = tree<T, null_type, less<T>, rb_tree_tag, tree_order_statistics_node_update>;

map<int,ordered_set<int>> m;

int n,q;


bool isdom[N*5 + 5];
int dominator[N*5 + 5];

int A[N+5];

int freq(int val,int l,int r)
{
  return m[val].order_of_key(r+1) - m[val].order_of_key(l);
}

void build(int node,int a,int b)
{
  if(a>b)return;
  if(a == b)
  {
    isdom[node]=true;
    dominator[node]=A[a];
    return;
  }

  int mid = (a + b)/2;

  build(node*2 ,a,mid);
  build(node*2 + 1,mid+1,b);

  isdom[node]=false;

  if(isdom[node*2])
  {
    int fr = freq(dominator[node*2],a,b);

    if(fr > (b-a+1)/2)
    {
      isdom[node]=true;
      dominator[node]=dominator[node*2];
    }
  }

  if(isdom[node*2 + 1])
  {
    int fr = freq(dominator[node*2 + 1],a,b);

    if(fr > (b-a+1)/2)
    {
      isdom[node]=true;
      dominator[node]=dominator[node*2 + 1];
    }
  }
}


void update(int node,int a,int b,int i,int val)
{
  if(a>b || a>i || b<i)return;

  if(a==b)
  {
    dominator[node]=val;
    return;
  }

   int mid = (a + b)/2;

  update(node*2 ,a,mid,i,val);
  update(node*2 + 1,mid+1,b,i,val);

  isdom[node]=false;

  if(isdom[node*2])
  {
    int fr = freq(dominator[node*2],a,b);

    if(fr > (b-a+1)/2)
    {
      isdom[node]=true;
      dominator[node]=dominator[node*2];
    }
  }

  if(isdom[node*2 + 1])
  {
    int fr = freq(dominator[node*2 + 1],a,b);

    if(fr > (b-a+1)/2)
    {
      isdom[node]=true;
      dominator[node]=dominator[node*2 + 1];
    }
  }

}


pair<bool,int> query(int node,int a,int b,int i,int j)
{
  if(a>b || i>j || a>j || b<i)return {false,-1};

  if(a>=i && b<=j)
  {
    return {isdom[node],dominator[node]};
  }

  int mid = (a + b)/2;

  pair<bool,int> r1 = query(node*2,a,mid,i,j);
  pair<bool,int> r2 = query(node*2 + 1,mid+1,b,i,j);

  int x,y;
  x= max(a,i);
  y = min(j,b);
  if(r1.first)
  {
    int fr = freq(r1.second,x,y);
    if(fr > (y-x+1)/2)
    {
      return {true,r1.second};
    }
  }

  if(r2.first)
  {
    int fr = freq(r2.second,x,y);
    if(fr > (y-x+1)/2)
    {
      return {true,r2.second};
    }
  }


  return {false,-1};
}
int main()
{
  finp;
  cin>>n>>q;
  afor(i,1,n)
  {
    cin>>A[i];
    m[A[i]].insert(i);
  }
  build(1,1,n);

  while(q--)
  {
    int type,x,y;
    cin>>type>>x>>y;

    if(type == 1)
    {
      m[A[x]].erase(x);
      m[y].insert(x);
      A[x]=y;

      update(1,1,n,x,y);
    }
    else
    {
      bool ans = query(1,1,n,x,y).first;

      if(ans)cout<<"Yes\n";
      else cout<<"No\n";
    }
  }
  
return 0;
}