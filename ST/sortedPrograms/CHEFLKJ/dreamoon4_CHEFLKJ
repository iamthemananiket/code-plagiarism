#include <bits/stdc++.h>
#include <bits/extc++.h>
#define SZ(X) ((int)(X).size())
#define ALL(X) (X).begin(), (X).end()
#define REP(I, N) for (int I = 0; I < (N); ++I)
#define REPP(I, A, B) for (int I = (A); I < (B); ++I)
#define RI(X) scanf("%d", &(X))
#define RII(X, Y) scanf("%d%d", &(X), &(Y))
#define RIII(X, Y, Z) scanf("%d%d%d", &(X), &(Y), &(Z))
#define DRI(X) int (X); scanf("%d", &X)
#define DRII(X, Y) int X, Y; scanf("%d%d", &X, &Y)
#define DRIII(X, Y, Z) int X, Y, Z; scanf("%d%d%d", &X, &Y, &Z)
#define RS(X) scanf("%s", (X))
#define CASET int ___T, case_n = 1; scanf("%d ", &___T); while (___T-- > 0)
#define MP make_pair
#define PB push_back
#define MS0(X) memset((X), 0, sizeof((X)))
#define MS1(X) memset((X), -1, sizeof((X)))
#define LEN(X) strlen(X)
#define PII pair<int,int>
#define VI vector<int>
#define VPII vector<pair<int,int> >
#define PLL pair<long long,long long>
#define VPLL vector<pair<long long,long long> >
#define F first
#define S second
typedef long long LL;
using namespace std;
const int MOD = 1e9+7;
const int SIZE = 1e5+10;
using namespace __gnu_pbds;
typedef tree<int,null_type,less<int>,rb_tree_tag,tree_order_statistics_node_update> set_t;
set_t s[SIZE];
int a[SIZE],d[SIZE*2],dn;
int get(int x){
    return lower_bound(d,d+dn,x)-d;
}
bool check(int x,int l,int r){
    int v1=s[x].order_of_key(l);
    int v2=s[x].order_of_key(r+1);
    return (v2-v1)*2>(r-l+1);
}
int input[SIZE][3];
int main(){
    DRII(N,Q);
    REP(i,N){
        RI(a[i]);
        d[dn++]=a[i];
    }
    REP(i,Q){
        REP(j,3)RI(input[i][j]);
        if(input[i][0]==1)d[dn++]=input[i][2];
    }
    sort(d,d+dn);
    dn=unique(d,d+dn)-d;
    REP(i,N){
        a[i]=get(a[i]);
        s[a[i]].insert(i);
    }
    REP(i,Q){
        int ty=input[i][0];
        int x=input[i][1],y=input[i][2];
        if(ty==1){
            y=get(y);
            x--;
            s[a[x]].erase(x);
            a[x]=y;
            s[a[x]].insert(x);
        }
        else{
            x--;y--;
            VI d;
            REP(i,60)
                d.PB(a[rand()%(y-x+1)+x]);
            sort(ALL(d));
            VPII gg;
            for(int i=0,j;i<SZ(d);i=j){
                for(j=i+1;j<SZ(d)&&d[j]==d[i];j++);
                gg.PB(MP(j-i,d[i]));
            }
            sort(ALL(gg));
            reverse(ALL(gg));
            if(check(gg[0].S,x,y)||(SZ(gg)>1&&check(gg[1].S,x,y))
            ||(SZ(gg)>2&&check(gg[2].S,x,y))){
                puts("Yes");
            }
            else puts("No");
        }
    }
    return 0;
}
