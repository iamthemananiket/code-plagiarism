#include "bits/stdc++.h"
#define mp make_pair
using namespace std;

const int N = 200000 + 20;

int n, q, ptr;
int arr[N], qt[N], l[N], r[N], tmp[N], result[N], bit[N];
map < int , int > compress;
vector < int > positions[N];
vector < pair < int , int > > aux[N];
pair < int , int > tree[N * 4];
vector < int > indices;


inline pair < int , int > combine(pair < int , int > l , pair < int , int > r){
	if(l.first == r.first) return mp(l.first, l.second + r.second);
	if(l.second < r.second) return mp(r.first, r.second - l.second);
	else return mp(l.first, l.second - r.second);
}

inline void build(int l , int r , int node){
	if(l == r) tree[node] = mp(arr[l], 1);
	else{
		int mid = (l + r) >> 1;
		build(l , mid , node + node);
		build(mid + 1 , r , node + node + 1);
		tree[node] = combine(tree[node + node] , tree[node + node + 1]);
	}
}

inline pair < int , int > query(int l , int r , int node , int qs , int qe){
	if(l > qe || r < qs) return mp(-1, 0);
	if(l >= qs && r <= qe) return tree[node];
	int mid = (l + r) >> 1;
	return combine(query(l , mid , node + node , qs , qe) , query(mid + 1 , r , node + node + 1 , qs , qe));
}

void update(int l , int r , int node , int idx , int val){
	if(l == r) tree[node] = mp(val, 1);
	else{
		int mid = (l + r) >> 1;
		if(idx <= mid) update(l , mid , node + node , idx , val);
		else update(mid + 1 , r , node + node + 1 , idx , val);
		tree[node] = combine(tree[node + node] , tree[node + node + 1]);
	}
}

inline void update(int idx , int val){
	for(int i = idx; i <= n; i += i & -i)
		bit[i] += val;	
}

inline int query(int idx){
	int res = 0;
	for(int i = idx; i > 0; i -= i & -i)
		res += bit[i];
	return res;
}

inline void clear(int idx){
	for(int i = idx; i <= n; i += i & -i)
		bit[i] = 0;	
}


int main(){
	//freopen("ioi.in", "r", stdin);
	ios :: sync_with_stdio(false);
	cin >> n >> q;
	
	compress.clear();
	for(int i = 1 ; i <= n ; i++){
		cin >> arr[i];
		compress[arr[i]];
	}

	for(int i = 1 ; i <= q ; i++){
		cin >> qt[i] >> l[i] >> r[i];
		compress[r[i]];
	}

	ptr = 0;
	for(auto &it : compress) it.second = ++ptr;
	
	for(int i = 1 ; i <= n ; i++) arr[i] = compress[arr[i]];
	for(int i = 1 ; i <= q ; i++) if(qt[i] == 1) r[i] = compress[r[i]];
	

	build(1, n, 1);

	for(int i = 1 ; i <= n ; i++){
		tmp[i] = arr[i];
		positions[arr[i]].emplace_back(i);
	}

	for(int i = 1; i <= q; i++){
		if(qt[i] == 1){
			aux[tmp[l[i]]].emplace_back(make_pair(l[i] , -1));
			aux[r[i]].emplace_back(make_pair(l[i] , 1));
			update(1, n, 1, l[i], r[i]);
			tmp[l[i]] = r[i];
		}
		else{
			auto it = query(1, n, 1, l[i], r[i]);
			aux[it.first].emplace_back(make_pair(i , 0));
		}
	}

	for(int i = 1; i <= ptr; i++){
		for(int idx : positions[i]){
			update(idx, 1);
			indices.emplace_back(idx);
		}
		for(auto it : aux[i]){
			if(it.second == 0) result[it.first] = query(r[it.first]) - query(l[it.first] - 1);
			else{
				update(it.first , it.second);
				indices.emplace_back(it.first);
			}
		}
		for(int idx : indices) clear(idx);
		indices.clear();
	}

	for(int i = 1 ; i <= q ; i++){
		if(qt[i] == 2){
			if(result[i] >= ((r[i] - l[i] + 1) >> 1) + 1) puts("Yes");
			else puts("No");
		}
	}
}