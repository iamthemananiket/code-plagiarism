#include <cstdio>
#include <cmath>
#include <iostream>
#include <set>
#include <algorithm>
#include <vector>
#include <map>
#include <unordered_map>
#include <cassert>
#include <string>
#include <cstring>
#include <queue>

using namespace std;

#define rep(i,a,b) for(int i = a; i < b; i++)
#define S(x) scanf("%d",&x)
#define S2(x,y) scanf("%d%d",&x,&y)
#define P(x) printf("%d\n",x)
#define all(v) v.begin(),v.end()
#define FF first
#define SS second

typedef long long int LL;
typedef pair<int, int > pii;
typedef vector<int > vi;

const int N = 100005;
int A[N];

struct node {
  unordered_map<int, int > M;
  int x;
};

node ST[5*N];

void build(int n, int b, int e) {
  ST[n].x = -1;
  int x = (e - b + 1) / 2;
  x++;
  rep(i,b,e+1) {
    ST[n].M[A[i]]++;
    if(ST[n].M[A[i]] >= x) {
      ST[n].x = A[i];
    }
  }
  if(b == e) return;
  int m = (b + e) >> 1;
  build(2 * n, b, m);
  build(2 * n + 1, m + 1, e);
}

void update(int n, int b, int e, int x, int y) {
  int xx = (e - b + 1) / 2;
  xx++;
  if(ST[n].M[A[x]] == xx) {
    ST[n].x = -1;
  }
  ST[n].M[A[x]]--;
  ST[n].M[y]++;
  if(ST[n].M[y] >= xx) {
    ST[n].x = y;
  }

  if(b == e) return;
  int m = (b + e) >> 1;
  if(x <= m) {
    update(2 * n, b, m, x, y);
  } else {
    update(2 * n + 1, m + 1, e, x, y);
  }
}

vi v;
void q1(int n, int b, int e, int x, int y) {
  if(b == x && e == y) {
    if(ST[n].x != -1) v.push_back(ST[n].x);
    return;
  }
  int m = (b + e) >> 1;
  if(y <= m) {
    q1(2 * n, b, m, x, y);
  } else if(x > m) {
    q1(2 * n + 1, m + 1, e, x, y);
  } else {
    q1(2 * n, b, m, x, m);
    q1(2 * n + 1, m + 1, e, m + 1, y);
  }
}

int q2(int n, int b, int e, int x, int y, int val) {
  if(b == x && e == y) {
    return ST[n].M[val];
  }
  int m = (b + e) >> 1;
  if(y <= m) {
    return q2(2 * n, b, m, x, y, val);
  } else if(x > m) {
    return q2(2 * n + 1, m + 1, e, x, y, val);
  } else {
    return q2(2 * n, b, m, x, m, val) +
    q2(2 * n + 1, m + 1, e, m + 1, y, val);
  }
}

int main() {
  int n,q;
  S2(n,q);
  rep(i,1,n+1) {
    S(A[i]);
  }
  build(1,1,n);
  while(q--) {
    int type;
    S(type);
    if(type == 1) {
      int x,y;
      S2(x,y);
      update(1, 1, n, x, y);
      A[x] = y;
    } else {
      int l,r;
      S2(l,r);
      v.clear();
      q1(1, 1, n, l, r);
      int x = (r - l + 1) / 2;
      x++;
      bool ok = false;
      rep(i,0,v.size()) {
        int cnt = q2(1, 1, n, l, r, v[i]);
        if(cnt >= x) {
          ok = true;
          break;
        }
      }
      if(ok) printf("Yes\n");
      else printf("No\n");
    }
  }
  return 0;
}