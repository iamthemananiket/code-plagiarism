#include <cstdio>
#include <cstdlib>
#include <cstring>
#include <cmath>
#include <cassert>
#include <iostream>
#include <sstream>
#include <string>
#include <vector>
#include <queue>
#include <deque>
#include <set>
#include <map>
#include <utility>
#include <numeric>
#include <algorithm>
#include <bitset>
#include <complex>
#include <cstdint>
#include <unordered_set>
#include <unordered_map>

using namespace std;

typedef long long Int;
typedef vector<int> vint;
typedef pair<int, int> pint;
#define mp make_pair

template <typename T1, typename T2> ostream &operator<<(ostream &os, const pair<T1, T2> &a) { return os << "(" << a.first << ", " << a.second << ")"; };
template <typename T> void pv(T a, T b) { for (T i = a; i != b; ++i) cout << *i << " "; cout << endl; }
template <typename T> void chmin(T &t, const T &f) { if (t > f) t = f; }
template <typename T> void chmax(T &t, const T &f) { if (t < f) t = f; }
int in() { int x; scanf("%d", &x); return x; }

const Int INF = 1001001001001001001LL;

int D, X;
int XX[110];

Int dp[70010];

int main() {
	int a[20];
	
	for (int TC = in(); TC--; ) {
		D = in();
		X = in();
		XX[0] = 1;
		for (int d = 1; d <= D; ++d) {
			XX[d] = XX[d - 1] * X;
		}
		fill(dp, dp + XX[D], INF);
		dp[0] = 0;
		for (int u = 1; u < XX[D]; ++u) {
			for (int d = 0; d < D; ++d) {
				a[d] = u / XX[d] % X;
			}
			for (int d = 0; d < D; ++d) if (a[d] > 0) {
				chmin(dp[u], dp[u - XX[d]]);
			}
			Int hereXor = 0;
			Int hereSum = 0;
			for (int d = 0; d < D; ++d) {
				hereXor ^= a[d];
				hereSum += a[d];
			}
			dp[u] += hereXor * hereSum;
		}
		printf("%lld\n", dp[XX[D] - 1]);
	}
	
	return 0;
}

