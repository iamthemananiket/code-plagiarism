#include<iostream>
#include<cstdio>
#include<cstring>
#include<string>
#include<cctype>
#include<cstdlib>
#include<algorithm>
#include<bitset>
#include<vector>
#include<list>
#include<deque>
#include<queue>
#include<map>
#include<set>
#include<stack>
#include<cmath>
#include<sstream>
#include<fstream>
#include<iomanip>
#include<ctime>
#include<complex>
#include<functional>
#include<climits>
#include<cassert>
#include<iterator>
#include<unordered_set>
#include<unordered_map>
using namespace std;
#define MAX 100002
char buf[MAX];
string s;
string t;
vector<string> v;
int KMP[MAX];
void calc(string &a) {
	int i = 0;
	int j = -1;
	KMP[0] = -1;
	while (i < a.size()) {
		while (j >= 0 && a[j] != a[i]) {
			j = KMP[j];
		}
		j++;
		i++;
		KMP[i] = j;
	}
}
vector<int> ich;
void ex(string &a,string &b) {  //search from a mat
	int i = 0;
	int j = 0;
	ich.clear();
	while (i < a.size()) {
		while (j >= 0 && a[i] != b[j]) {
			j = KMP[j];
		}
		i++;
		j++;
		if (j == b.size()) {
			ich.push_back(i - b.size());
			j = KMP[j];
		}
	}
}
vector<vector<int> > V;
int use[MAX][502];
int u_s;
int dp[MAX][502];
inline int dfs(int a, int b) {
	if (b == V.size()) {
		return a-1;
	}
	if (a == t.size()) {
		return INT_MAX;
	}
	if (use[a][b] == u_s) {
		return dp[a][b];
	}
	use[a][b] = u_s;
	dp[a][b] = INT_MAX;
	int ind = lower_bound(V[b].begin(), V[b].end(), a) - V[b].begin();
	if (ind == V[b].size()) {
		return INT_MAX;
	}
	dp[a][b] = dfs(V[b][ind] + v[b].size(), b + 1);
	return dp[a][b];
}
int main() {
	int tt;
	scanf("%d", &tt);
	while (tt-- ) {
		v.clear();
		V.clear();
		scanf("%s", buf);
		s = buf;
		scanf("%s", buf);
		t = buf;
		v.push_back(string());
		for (int i = 0;i < s.size();i++) {
			if (s[i] == '*') {
				if (v.back().size() == 0) {

				}
				else {
					v.push_back(string());
				}
			}
			else {
				v.back().push_back(s[i]);
			}
		}
		if (v.back().size() == 0) {
			v.pop_back();
		}
		for (int i = 0;i < v.size();i++) {
			calc(v[i]);
			ex(t, v[i]);
			V.push_back(ich);
		}
		if (v.size() == 0) {
			for (int i = 0;i < t.size();i++) {
				if (i) {
					printf(" ");
				}
				printf("%d",i+1);
			}
			puts("");
			continue;
		}
		u_s++;
		for (int i = 0;i < t.size();i++) {
			int ans = dfs(i, 0);
			if (i) {
				printf(" ");
			}
			if (ans == INT_MAX) {
				ans = -2;
			}
			printf("%d", ans+1);
		}
		puts("");
	}
	return 0;
}