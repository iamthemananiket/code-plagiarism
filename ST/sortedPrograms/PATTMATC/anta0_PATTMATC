#include <string>
#include <vector>
#include <algorithm>
#include <numeric>
#include <set>
#include <map>
#include <queue>
#include <iostream>
#include <sstream>
#include <cstdio>
#include <cmath>
#include <ctime>
#include <cstring>
#include <cctype>
#include <cassert>
#include <limits>
#include <functional>
#define rep(i,n) for(int (i)=0;(i)<(int)(n);++(i))
#define rer(i,l,u) for(int (i)=(int)(l);(i)<=(int)(u);++(i))
#define reu(i,l,u) for(int (i)=(int)(l);(i)<(int)(u);++(i))
#if defined(_MSC_VER) || __cplusplus > 199711L
#define aut(r,v) auto r = (v)
#else
#define aut(r,v) __typeof(v) r = (v)
#endif
#define each(it,o) for(aut(it, (o).begin()); it != (o).end(); ++ it)
#define all(o) (o).begin(), (o).end()
#define pb(x) push_back(x)
#define mp(x,y) make_pair((x),(y))
#define mset(m,v) memset(m,v,sizeof(m))
#define INF 0x3f3f3f3f
#define INFL 0x3f3f3f3f3f3f3f3fLL
using namespace std;
typedef vector<int> vi; typedef pair<int,int> pii; typedef vector<pair<int,int> > vpii; typedef long long ll;
template<typename T, typename U> inline void amin(T &x, U y) { if(y < x) x = y; }
template<typename T, typename U> inline void amax(T &x, U y) { if(x < y) x = y; }

template<typename Char, typename Index>
void buildKMPTable(const Char p[/*m*/], int m, Index fail[/*m+1*/]) {
	fail[0] = -1;
	for(int j = 0, t = -1; j < m; ) {
		while(t >= 0 && p[j] != p[t])
			t = fail[t];
		++ t, ++ j;
		fail[j] = j < m && p[j] == p[t] ? fail[t] : t;
	}
}

void kmp_match(const char *s, int n, const char *p, int m, const int *fail, vi &res) {
	res.clear();
	for(int i = 0, k = 0; i < n; i ++) {
		while(k >= 0 && p[k] != s[i]) k = fail[k];
		if(++ k == m) {
			res.push_back(i - m + 1);
			k = fail[k];
		}
	}
}


int main() {
	int T;
	scanf("%d", &T);
	char *P = new char[100001], *S = new char[100001];
	rep(ii, T) {
		scanf("%s", P);
		scanf("%s", S);
		int n = strlen(S);
		vector<string> patterns;
		{
			string cur;
			for(const char *p = P; *p; ++ p) {
				if(*p == '*') {
					patterns.push_back(cur);
					cur.clear();
				} else {
					cur += *p;
				}
			}
			patterns.push_back(cur);
		}
		int A = patterns.size();
		vi fail, matches;
		vi dp, ndp(n+1);
		rer(i, 0, n) ndp[i] = i;
		for(int i = A-1; i >= 0; -- i) {
			dp.swap(ndp);
			ndp.assign(n+1, INF);
			const string &p = patterns[i];
			if(p.empty()) {
				ndp = dp;
				continue;
			}
			fail.resize(p.size() + 1);
			buildKMPTable(p.c_str(), p.size(), &fail[0]);
			kmp_match(S, n, p.c_str(), p.size(), &fail[0], matches);
			int k = 0;
			rer(j, 0, n) {
				for(; k < (int)matches.size() && matches[k] < j; ++ k);
				if(k == matches.size()) break;
				ndp[j] = dp[matches[k] + p.size()];
			}
		}
		for(int i = 0; i < n; ++ i) {
			if(i != 0) putchar(' ');
			printf("%d", ndp[i] == INF ? -1 : max(i+1, ndp[i]));
		}
		puts("");
	}
	return 0;
}
