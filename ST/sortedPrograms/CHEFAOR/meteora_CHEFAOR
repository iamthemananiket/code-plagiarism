#include <cstdio>
#include <algorithm>
#include <cstring>
#include <iostream>


#define NMAX 5010

using namespace std;

int N,K;

long long dp[NMAX][2];

int best[NMAX];
int A[NMAX];

int ors[NMAX][NMAX];

void compute(int s, int e, int k, int l, int r){
	if(e < s) return;

	int m,i;

	m= (s+e)/2;

	dp[m][k] = A[m] + dp[m+1][k^1];
	best[m] = m;


	for(i = max(l,m+1); i <= r; ++i){
		if(ors[m][i]+dp[i+1][k^1] > dp[m][k]){
			dp[m][k] = ors[m][i]+dp[i+1][k^1];
			best[m] = i;
		}
	}

	compute(s,m-1,k,l,best[m]);
	compute(m+1,e,k,best[m],r);
}

int main(){
	int i;

	int t;

	scanf("%d",&t);

	int k;
	while(t--){
		scanf("%d%d",&N,&K);
		for(i = 0; i < N; ++i) scanf("%d",&A[i]);

		for(i = 0; i < N; ++i){
			dp[i][0] = -(1LL<<60);
		}

		for(i = 0; i < N; ++i) ors[i][i] = A[i];
		for(k = 0; k < 2; ++k) dp[N][k] = 0;

		for(i = 0; i < N; ++i){
			for(int j = i+1; j < N; ++j){
				ors[i][j] = ors[i][j-1]|A[j];
			}
		}

		for(k = 1; k <= K; ++k){
			compute(0,N-1,k&1,0,N-1);
		}

		printf("%lld\n",dp[0][K&1]);
	}


	return 0;
}
