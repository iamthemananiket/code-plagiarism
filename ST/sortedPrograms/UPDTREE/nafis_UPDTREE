/*********************************************************************\
   |--\        ---       /\        |-----------| -----   /-------|    |
   |   \        |       /  \       |               |    /             |
   |    \       |      /    \      |               |   |              |
   |     \      |     /      \     |               |   |----|         |
   |      \     |    / ------ \    |-------|       |        |-----|   |
   |       \    |   /          \   |               |              |   |
   |        \   |  /            \  |               |              /   |
  ---        -------            ------           ----- |---------/    |
                                                                      |
    codeforces = nfssdq  ||  topcoder = nafis007                      |
    mail = nafis_sadique@yahoo.com || nfssdq@gmail.com                |
    IIT,Jahangirnagar University(41)                                  |
                                                                      |
**********************************************************************/

#include <bits/stdc++.h>

using namespace std;

#define xx         first
#define yy         second
#define pb         push_back
#define mp         make_pair
#define LL         long long
#define inf        INT_MAX/3
#define mod        1000000007ll
#define PI         acos(-1.0)
#define linf       (1ll<<60)-1
#define FOR(I,A,B) for(int I = (A); I < (B); ++I)
#define REP(I,N)   FOR(I,0,N)
#define ALL(A)     ((A).begin(), (A).end())
#define set0(ar)   memset(ar,0,sizeof ar)
#define vsort(v)   sort(v.begin(),v.end())
#define setinf(ar) memset(ar,126,sizeof ar)

//cout << fixed << setprecision(20) << p << endl;

template <class T> inline T bigmod(T p,T e,T M){
    LL ret = 1;
    for(; e > 0; e >>= 1){
        if(e & 1) ret = (ret * p) % M;
        p = (p * p) % M;
    } return (T)ret;
}
template <class T> inline T gcd(T a,T b){if(b==0)return a;return gcd(b,a%b);}
template <class T> inline T modinverse(T a,T M){return bigmod(a,M-2,M);}


vector < int > adj[100001];
int t = 0, numChild[100001], pre[100001];
int lvl[100001], start[100001], endt[100001];
int dfs(int node, int pnt, int dis){
    int child = 1;
    lvl[node] = dis;
    start[node] = ++t;
    pre[node] = pnt;
    REP(i, adj[node].size()){
        if(adj[node][i] == pnt)continue;
        child += dfs(adj[node][i], node, dis + 1);
    }
    endt[node] = ++t;
    return numChild[node] = child;
}

vector < int > group[100001];
int cnt = 0, position[100001];
int grp[100001], parent[100001];
void hld(int node, int pnt, int pos){
    position[node] = pos;
    parent[node] = pnt;
    grp[node] = cnt;
    group[cnt].push_back(node);
    int maxVal = 0, child = 0;
    REP(i, adj[node].size()){
        if(adj[node][i] == pnt)continue;
        if(numChild[ adj[node][i] ] > maxVal){
            maxVal = numChild[ adj[node][i] ];
            child = adj[node][i];
        }
    }
    if(child != 0) hld(child, node, pos + 1);
    REP(i, adj[node].size()){
        if(adj[node][i] == pnt || adj[node][i] == child)continue;
        cnt++; hld(adj[node][i], node, 0);
    }
}


vector< LL > seg[100001];

void insert(int ii, int p, int v){
    seg[ii][p] += v;
}
LL query(int ii,int p){
    return seg[ii][p];
}
void dfsin(int node,int pnt,int v){
    if(node == pre[pnt])return;
    int a=grp[node];
    if(grp[pnt] == a)
        insert(a,position[node],v);
    else {
        insert(a,position[node],v),
        dfsin(parent[ group[a][0] ], pnt,v);
    }
}
LL dfsqu(int node,int pnt){
    if(node == parent[pnt])return 0;
    int a=grp[node];
    if(grp[pnt] == a)
        return query(a,position[node]);
    else return (query(a,position[node])+dfsqu(parent[ group[a][0] ], pnt));
}



int P[100001][22];
void pre_process(int N){
    memset(P,-1,sizeof P);
    for(int i = 1; i <= N; i++)P[i][0] = pre[i];
    for(int j = 1; (1<<j) <= N; j++){
        for(int i = 1; i <= N; i++){
            if(P[i][j - 1] != -1) P[i][j] = P[ P[i][j - 1] ][j - 1];
        }
    }
}
int LCA(int p, int q){
    if(lvl[p] < lvl[q])swap(p,q);
    int log;
    for(log = 1; (1<<log) <= lvl[p]; log++);
    log--;
    for(int i = log; i >= 0; i--){
        if(lvl[p] - (1<<i) >= lvl[q])p = P[p][i];
    }
    if(p == q)return p;
    for(int i = log; i >= 0; i--){
        if(P[p][i] != -1 && P[p][i] != P[q][i]){
            p = P[p][i];
            q = P[q][i];
        }
    }
    return pre[p];
}



int main() {
//    ios_base::sync_with_stdio(0); cin.tie(0);
    int a,b = 0,c,d = 0,e,f = 0,g,h = 0,x,y,z = 0;
    scanf("%d %d %d", &a, &b, &c);
    REP(i, a - 1){
        scanf("%d %d", &d, &e);
        adj[d].pb(e);
        adj[e].pb(d);
    }
    dfs(1, 0, 1);
    hld(1, 0, 0);
    pre_process(a);

    REP(i, cnt + 1)REP(j, group[i].size()){
        seg[i].push_back(0);
    }

    REP(i, b){
        scanf("%d %d %d %d", &d, &e, &f, &g);
        x = LCA(e, d);
        if(LCA(x, g) != x) g = x;
        if(LCA(e, g) != x) g = LCA(g, e);
        else g = LCA(d, g);

        if(LCA(x, f) != x) f = x;
        if(LCA(e, f) != x) f = LCA(e, f);
        else f = LCA(d, f);


        dfsin(e, 1, 1);
        dfsin(d, 1, 1);
        dfsin(x, 1, -2);


        dfsin(g, 1, -1);
        dfsin(f, 1, -1);
        dfsin(LCA(g,f), 1, 2);

    }

    REP(i, cnt + 1){
        for(int j = group[i].size() - 2; j >= 0; j--){
            seg[i][j] += seg[i][j + 1];
        }
    }

    REP(i, cnt + 1){
        FOR(j, 1, group[i].size()) seg[i][j] += seg[i][j - 1];
    }

    REP(i, c){
        scanf("%d %d", &d, &e);
        x = LCA(d, e);
        printf("%lld\n", dfsqu(d, 1) + dfsqu(e, 1) - 2*dfsqu(x, 1));
    }

}
