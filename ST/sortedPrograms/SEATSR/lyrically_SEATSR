#include <cstdio>
#include <cstdlib>
#include <cstring>
#include <cmath>
#include <cassert>
#include <iostream>
#include <sstream>
#include <string>
#include <vector>
#include <queue>
#include <deque>
#include <set>
#include <map>
#include <utility>
#include <numeric>
#include <algorithm>
#include <bitset>
#include <complex>
#include <unordered_set>
#include <unordered_map>

using namespace std;

typedef unsigned uint;
typedef long long Int;
typedef vector<int> vint;
typedef pair<int,int> pint;
#define mp make_pair

template<typename T> void pv(T a, T b) { for (T i = a; i != b; ++i) cout << *i << " "; cout << endl; }
template<typename T> void chmin(T &t, const T &f) { if (t > f) t = f; }
template<typename T> void chmax(T &t, const T &f) { if (t < f) t = f; }
int in() { int x; scanf("%d", &x); return x; }

const int ZERO = 106;
const int LIM = 103;
const int INF = 1001001001;

int M, N;
char S[100010], T[100010];
int A, B, K;

int dp[100010][220];

int main() {
	
	
	for (int TC = in(); TC--; ) {
		scanf("%s%s", S, T);
		M = strlen(S);
		N = strlen(T);
		A = in();
		B = in();
		K = in();
		if (A == 0) {
			printf("%d\n", 0);
		} else {
			if (abs(M - N) > LIM) {
				puts("-1");
			} else {
				for (int i = 0; i <= M; ++i) {
					fill(dp[i] + ZERO - LIM, dp[i] + ZERO + LIM + 1, INF);
				}
				dp[0][ZERO + 0 - 0] = 0;
				for (int i = 0; i <= M; ++i) {
					for (int j = i - LIM; j <= i + LIM; ++j) if (0 <= j && j <= N) {
						const int &c = dp[i][ZERO + j - i];
						if (c < INF) {
							if (i < M) {
								chmin(dp[i + 1][ZERO + j - (i + 1)], c + A);
							}
							if (j < N) {
								chmin(dp[i][ZERO + (j + 1) - i], c + A);
							}
							if (i < M && j < N) {
								chmin(dp[i + 1][ZERO + (j + 1) - (i + 1)], c + ((S[i] != T[j]) ? B : 0));
							}
						}
					}
				}
				const int ans = dp[M][ZERO + N - M];
				if (ans <= K) {
					printf("%d\n", ans);
				} else {
					puts("-1");
				}
			}
		}
	}
	
	return 0;
}

