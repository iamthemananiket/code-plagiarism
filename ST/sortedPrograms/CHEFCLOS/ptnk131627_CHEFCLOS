#include <bits/stdc++.h>

using namespace std;


typedef long long ll;

const int N=1e2+10;
const int MOD=1e9+7;

int n,m,k;
int C[N][N];
int h[N];
int b[N][N];
int DP(int cur,int add,int alrea){
	if (add>k) return 0;
	if (cur>m) 
		return C[alrea+k-1][alrea+add-1];
	bool canadd=1;
	for(int i=1;i<cur&&canadd;i++) if (h[i]&&!h[b[i][cur]]) canadd=0;
	if (canadd) {
		if (h[cur]) return DP(cur+1,add,alrea+1);
		int ans=DP(cur+1,add,alrea);
		if (add<k){
			h[cur]=1;
			ans=(ans+DP(cur+1,add+1,alrea))%MOD;
			h[cur]=0;
		}
		return ans;
	}else {
		if (h[cur]) return 0;
		return DP(cur+1,add,alrea);
	}
}
void allprepare(){
	for(int i=0;i<N;i++){
		C[i][0]=1;
		for(int j=1;j<=i;j++) C[i][j]=(C[i-1][j]+C[i-1][j-1])%MOD;
	}
	for(int i=1;i<=27;i++)
		for(int j=1;j<=27;j++) b[i][j]=__gcd(i,j);
}
int main(){
	allprepare();
	int test;
	cin>>test;
	while (test--){
		cin>>n>>k>>m;
		memset(h,0,sizeof(h));
		while (n--){
			int x;
			cin>>x;
			h[x]=1;
		}
		for(int i=1;i<=m;i++) if (h[i])
			for(int j=i-1;j>=1;j--) if (h[j]&&!h[b[i][j]]){
				h[b[i][j]]=1;
				k--;
			}
		cout<<DP(1,0,0)<<'\n';
	}
}