#include <cstdio>
#include <cmath>
#include <iostream>
#include <set>
#include <algorithm>
#include <vector>
#include <map>
#include <cassert>
#include <string>
#include <cstring>
#include <queue>

using namespace std;

#define rep(i,a,b) for(int i = a; i < b; i++)
#define S(x) scanf("%d",&x)
#define S2(x,y) scanf("%d%d",&x,&y)
#define P(x) printf("%d\n",x)
#define all(v) v.begin(),v.end()
#define FF first
#define SS second

typedef long long int LL;
typedef pair<int, int > pii;
typedef vector<int > vi;

const int N = 26;
const int mod = 1000000007;

bool dp[1<<N];
int C[2*N][2*N];
int G[2*N][2*N];

int primes[9] = {2,3,5,7,11,13,17,19,23};

void pre() {

  C[0][0] = 1;
  rep(i,1,2*N) {
    C[i][0] = C[i][i] = 1;
    rep(j,1,i) {
      C[i][j] = C[i-1][j] + C[i-1][j-1];
      if(C[i][j] >= mod) C[i][j] -= mod;
    }
  }

  rep(i,1,2*N) rep(j,1,2*N) {
    G[i][j] = __gcd(i,j);
  }

  int cnt = 0;
  rep(i,0,1<<N) {
     if((i>>9)&1) {
      dp[i] = dp[i^(1<<9)];
      continue;
    }
     if((i>>11)&1) {
      dp[i] = dp[i^(1<<11)];
      continue;
    }
    if((i>>15)&1) {
      dp[i] = dp[i^(1<<15)];
      continue;
    }
    if((i>>17)&1) {
      dp[i] = dp[i^(1<<17)];
      continue;
    }
    if((i>>21)&1) {
      dp[i] = dp[i^(1<<21)];
      if(dp[i])
      continue;
    }
    dp[i] = true;
    rep(j,0,N) if((i>>j)&1) {
      if(!dp[i]) break;
      rep(k,j+2,N) if((i>>k)&1) {
        int g = G[j + 2][k + 2];
        if(g != 1 && !((i>>(g-2))&1)) {
          dp[i] = false;
          break;
        }
      }
    }
    if(!dp[i]) cnt++;
  }
  // P(cnt);
}

int main() {
  pre();
  int t;
  S(t);
  while(t--) {
    int n,k,l;
    scanf("%d%d%d",&n,&k,&l);
    int mask = 0;
    rep(i,0,n) {
      int x;
      S(x);
      if(x != 1) {
        mask |= 1<<(x-2);
      }
    }
    l--;
    int ans = 0;
    int y = __builtin_popcount(mask);
    rep(i,0,1<<l) if(dp[i] && (mask & i) == mask) {
      int x = __builtin_popcount(i);
      int r = x + 1;
      if(k >= x - y) {
        ans += C[k - (x - y) + r - 1][r - 1];
        if(ans >= mod) ans -= mod;
      }
    }
    P(ans);
  }
  return 0;
}