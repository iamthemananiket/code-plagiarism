//Program: addmul
//Author: gary
//Date: 03/07/2015
#include <cstdio>
#include <cstring>
#include <cmath>
#include <cassert>
#include <iostream>
#include <vector>
#include <set>
#include <map>
#include <queue>
#include <stack>
#include <string>
#include <algorithm>
using namespace std;
#define SZ(x) ( (int) (x).size() )
#define CNT(s, x) ( (s).find(x) != (s).end() )
#define ALL(x) (x).begin(), (x).end()
#define dbg(x) cerr << #x << " = " << x << endl;
#define mp make_pair
#define pb push_back
#define fi first
#define se second
typedef long long ll;
typedef pair<int, int> pii;
// const int INF = 1e9;
const int MAXN = 1e5 + 10;
const int mod = 1e9 + 7;

void madd(int& a, int b){
    a += b;
    if(a >= mod) a -= mod;
}
int mul(int a, int b){
    return ((ll)a*b)%mod;
}

int mpow(int a, int n){
    int r = 1;
    while(n > 0){
        if(n & 1)
            r = mul(r, a);
        a = mul(a, a);
        n >>= 1;
    }
    return r;
}
int N, Q;
int A[MAXN];

int T[MAXN * 4];
int ladd[MAXN * 4];
int lmul[MAXN * 4];
int lset[MAXN * 4];

const int OPADD = 1;
const int OPMUL = 2;
const int OPSET = 3;

void push(int cur, int size)
{
    if(lset[cur])
    {
        T[cur] = mul(size, lset[cur]);
        if(size > 1)
            for(int i = 0; i < 2; i++)
            {
                lset[cur * 2 + i] = lset[cur];
                lmul[cur * 2 + i] = 1;
                ladd[cur * 2 + i] = 0;
            }
        lset[cur] = 0;
    }

    if(lmul[cur] > 1)
    {
        T[cur] = mul(T[cur], lmul[cur]);
        if(size > 1)
            for(int i = 0; i < 2; i++)
            {
                lmul[cur * 2 + i] = mul(lmul[cur * 2 + i], lmul[cur]);
                ladd[cur * 2 + i] = mul(ladd[cur * 2 + i], lmul[cur]);
            }
        lmul[cur] = 1;
    }

    if(ladd[cur])
    {
        madd(T[cur], mul(size, ladd[cur]));
        if(size > 1)
            for(int i = 0; i < 2; i++)
            {
                madd(ladd[cur * 2 + i], ladd[cur]);
            }
        ladd[cur] = 0;
    }
}

void update(int cur, int L, int R, int i, int j, int x, int t)
{
    push(cur, R - L + 1);
    if(j < L || R < i)
        return;

    if(i <= L && R <= j)
    {
        if(t == OPADD) ladd[cur] = x;
        if(t == OPMUL) lmul[cur] = x;
        if(t == OPSET) lset[cur] = x;
        push(cur, R - L + 1);
    }
    else
    {
        int M = (L + R) / 2;
        update(cur * 2, L, M, i, j, x, t);
        update(cur * 2 + 1, M + 1, R, i, j, x, t);
        T[cur] = (T[cur * 2] + T[cur * 2 + 1]) % mod;
    }
}

int query(int cur, int L, int R, int i, int j)
{
    if(j < L || R < i)
        return 0;

    push(cur, R - L + 1);

    if(i <= L && R <= j)
        return T[cur];

    int res = 0, M = (L + R) / 2;
    madd(res, query(cur * 2, L, M, i, j));
    madd(res, query(cur * 2 + 1, M + 1, R, i, j));
    return res;
}

void update(int i, int j, int x, int t)
{
    update(1, 1, N, i, j, x, t);
}

int query(int i, int j)
{
    return query(1, 1, N, i, j);
}

int main()
{
    scanf("%d%d", &N, &Q);
    fill(lmul, lmul + 4 * MAXN, 1);
    for(int i = 1; i <= N; i++)
    {
        scanf("%d", A + i);
        update(i, i, A[i], OPADD);
    }

    while(Q--)
    {
        int t, x, y, v;
        scanf("%d%d%d", &t, &x, &y);
        if(t <= 3)
        {
            scanf("%d", &v);
            update(x, y, v, t);
        }
        if(t == 4)
        {
            printf("%d\n", query(x, y));
        }
    }

    return 0;
}
