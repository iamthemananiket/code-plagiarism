#include "bits/stdc++.h"
using namespace std;
inline int scan(){
    char c = getchar_unlocked();
    int x = 0;
    while(c < '0' || c > '9'){
        c = getchar_unlocked();
    }
    while(c >= '0' && c <= '9'){
        x = (x<<1) + (x<<3) + c - '0';
        c = getchar_unlocked();
    }
    return x;
}
const int N = 2000001;
const int mod = 1e9 + 7;
typedef long long ll;
ll power(ll a , ll b){
    ll res = 1;
    while(b > 0){
        if(b & 1){
            res *= a;
            if(res >= mod){
                res %= mod;
            }
        }
        a *= a;
        if(a >= mod){
            a %= mod;
        }
        b >>= 1;
    }
    return res;
}
ll fact[N];
ll invfact[N];
void pre(){
    fact[0]=1;
    for(int i = 1 ; i < N ; i++){
        fact[i] = 1LL * fact[i-1] * i;
        if(fact[i] >= mod)
            fact[i] %= mod;
    }
}
ll inv(ll a , ll b){
    return (a * power(b , mod -2LL))%mod;
}
void pre2(){
    invfact[N - 1]=inv(1,fact[N - 1]);
    for(ll i= N - 2; i >= 0; i--){
        invfact[i] = (invfact[i + 1] * (i + 1));
        if(invfact[i] >= mod){
            invfact[i] %= mod;
        }
    }
}
int t , n , k;
int main(){
    pre();
    pre2();
    t = scan();
    while(t--){
        n = scan() , k = scan();
        ll ans = 0;
        ll cur = 1;
        for(int i = 0 ; i < n ; ++i){
            ll temp = cur;
            temp *= invfact[i];
            if(temp >= mod){
                temp %= mod;
            }
            temp *= n - i;
            if(i){
                temp *= 2;
            }
            if(temp >= mod){
                temp %= mod;
            }
            cur *= k + i + 1;
            if(cur >= mod){
                cur %= mod;
            }
            ans += temp;
            if(ans >= mod){
                ans -= mod;
            }
        }
        printf("%lld\n",ans);
    }
}