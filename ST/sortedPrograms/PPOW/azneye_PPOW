/*
 *
 * File: stuff.cpp
 * Author: Andy Y.F. Huang (azneye)
 * Created on Aug 23, 2014, 11:50:25 PM
 */

#include <bits/stdc++.h>

using namespace std;

namespace stuff {
typedef unsigned long long ll;
int res[11][4444];

void solve(int test_num) {
  static int dig[4444];
  for (int a = 1; a <= 9; a++) {
    int N = 1;
    dig[0] = 1;
    res[a][0] = 1;
    for (int b = 1; b <= 4000; b++) {
      int carry = 0;
      for (int i = 0; i < N; i++) {
        const int mult = a * dig[i] + carry;
        dig[i] = mult % 10;
        carry = mult / 10;
      }
      if (carry > 0)
        dig[N++] = carry;
      res[a][b] = accumulate(dig, dig + N, 0);
    }
  }
  int T;
  cin >> T;
  for (int t = 1; t <= T; t++) {
    int A, B;
    cin >> A >> B;
    cout << "Case " << t << ": " << res[A][B] << endl;
  }
}

void solve() {
#ifdef AZN
  freopen("input.txt", "r", stdin);
  freopen("output.txt", "w", stdout);
//freopen("azn.txt", "w", stderr);
  double start_t = clock();
#endif
  ios::sync_with_stdio(false);
  cin.tie(NULL);
  int T = 1;
//cin >> T;
  for (int t = 1; t <= T; t++)
    solve(t);
#ifdef AZN
  pln("Took:", (clock() - start_t) / CLOCKS_PER_SEC);
#endif
}
}

int main() {
  stuff::solve();
  return 0;
}
