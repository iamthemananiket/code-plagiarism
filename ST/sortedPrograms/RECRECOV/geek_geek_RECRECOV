#include<iostream>
#include<algorithm>
#include<cstdio>
#include<cmath>
#include<cstring>
#include<vector>
#include<iomanip>
#include<queue>
#include<map>
#define fl(i,s,n) for(i=s;i<n;i++)
#define flr(i,s,n) for(i=s;i>n;i--)
#define ls(i,s) for(i=0;s[i]!='\0';i++)
#define gi(x) cin>>x
#define pi(x) printf("%d",x)
#define checkline(x) while(x!='\0' && x!='\n')
#define pn printf('\n')
#define ps printf(' ')
#define f_in freopen("input.txt","r",stdin)
#define f_out freopen("output.txt","w",stdout)
#define in(i,j,k) ((j<=i) && (i<k))
#define ull unsigned long long int
#define lli long long int
#define ceil(x,n) (x+n-1)/n
using namespace std;
vector < lli > points[200];
lli *came,*l,*r;
lli apply(lli u,lli v)
{
    r[v]=u;
    l[u]=v;
    return 1;
}
lli traverse(lli vertex)
{
    lli i,j,k,v,x,y,z;
    if(came[vertex]==1)
        return 0;
    came[vertex] = 1;
     fl(i,0,points[vertex].size())
        {
            v = points[vertex][i];
            if(r[v]==-1)
                return apply(vertex,v);
        }
    fl(i,0,points[vertex].size())
        {
            v = points[vertex][i];
            if(traverse(r[v])==1)
                return apply(vertex,v);
        }
    return 0;
}

void match(lli sz) {
    lli i,flag;
    l = new lli [200];
    r = new lli [200];
    came = new lli [200];
    fl(i,0,200)
        l[i]=r[i]=-1;
    while(1)
        {
            flag = 1;
            fl(i,0,200)
                came[i]=0;
            fl(i,0,200)
                if((l[i]==-1) && (traverse(i)==1))
                    flag = 0;
            if(flag==1)
                break;
            }
    fl(i,0,200)
        if(l[i]!=-1)
            sz--;
    cout<<sz<<endl;
}
int prog()
{
    lli i,j,k,n,m,x,y,z,a,b,c;
    fl(i,0,200)
      points[i].clear();
    gi(n);gi(m);
    fl(i,0,m)
        {
            gi(a);gi(b);
            points[a].push_back(b);
        }
    match(n);
    return 0;
}
int main()
{
    //f_in;
    ios_base::sync_with_stdio(false);
    lli t;
    gi(t);
    while(t--)
        prog();
    return 0;
}
