/*********************************************************************\
   |--\        ---       /\        |-----------| -----   /-------|    |
   |   \        |       /  \       |               |    /             |
   |    \       |      /    \      |               |   |              |
   |     \      |     /      \     |               |   |----|         |
   |      \     |    / ------ \    |-------|       |        |-----|   |
   |       \    |   /          \   |               |              |   |
   |        \   |  /            \  |               |              /   |
  ---        -------            ------           ----- |---------/    |
                                                                      |
    codeforces = nfssdq  ||  topcoder = nafis007                      |
    mail = nafis_sadique@yahoo.com || nfssdq@gmail.com                |
    IIT,Jahangirnagar University(41)                                  |
                                                                      |
**********************************************************************/

#include <bits/stdc++.h>

using namespace std;

#define xx         first
#define yy         second
#define pb         push_back
#define mp         make_pair
#define LL         long long
#define inf        INT_MAX/3
#define mod        1000000007ll
#define PI         2.0*acos(0.0)
#define linf       (1ll<<60)-1
#define FOR(I,A,B) for(int I = (A); I < (B); ++I)
#define REP(I,N)   FOR(I,0,N)
#define ALL(A)     ((A).begin(), (A).end())
#define set0(ar)   memset(ar,0,sizeof ar)
#define vsort(v)   sort(v.begin(),v.end())
#define setinf(ar) memset(ar,126,sizeof ar)

//cout << fixed << setprecision(20) << p << endl;

template <class T> inline T bigmod(T p,T e,T M){
    LL ret = 1;
    for(; e > 0; e >>= 1){
        if(e & 1) ret = (ret * p) % M;
        p = (p * p) % M;
    } return (T)ret;
}
template <class T> inline T gcd(T a,T b){if(b==0)return a;return gcd(b,a%b);}
template <class T> inline T modinverse(T a,T M){return bigmod(a,M-2,M);}


char pp[51][51];
int ar[55][55];
int up[55], lft[55], rgt[55];
pair < int, int > P[17];
vector < pair < int, int > > enemy;
main() {
//    ios_base::sync_with_stdio(0); cin.tie(0);
    int a,b,c,d = 0,e,f = 0,g,h = 0,x,y,z;
    scanf("%d", &a);
    REP(i, a){
        scanf("%d %d", &b, &c);
        d = 0;
        REP(i, b){
            scanf("%s", pp[i]);
            REP(j, c){
                if(pp[i][j] == 'L') {
                    P[d++] = mp(i, j);
                }
            }
        }
        enemy.clear();
        REP(i, b){
            REP(j, c){
                if(pp[i][j] == 'E'){
                    enemy.pb(mp(i, j));
                    f = 0;
                    REP(k, b){
                        if(pp[k][j] == 'L') f++;
                    }
                    REP(k, c) if(pp[i][k] == 'L') f++;
                    if(f == 0){
                        cout << "Impossible" << endl;
                        goto done;
                    }
                }
            }
        }
//        cout << enemy.size() << endl;
        REP(i, 1<<d){
            memset(rgt, -1, sizeof rgt); memset(up, -1, sizeof up); setinf(lft);
            REP(j, d){
                if((i & 1<<j) == 0) continue;
                up[P[j].yy] = max(up[P[j].yy], P[j].xx);
            }
            REP(k, enemy.size()){
                x = enemy[k].xx;
                y = enemy[k].yy;
                if(up[y] > x) continue;
                lft[x] = min(lft[x], y);
                rgt[x] = max(rgt[x], y);
            }
            REP(j, d){
                if(i & 1<<j) continue;
                if(lft[P[j].xx] > c){
                    rgt[P[j].xx] = -1;
                    continue;
                }
                if(lft[P[j].xx] > P[j].yy || rgt[P[j].xx] < P[j].yy) {
                    lft[P[j].xx] = inf;
                    rgt[P[j].xx] = -1;
                } else {
                    lft[P[j].xx] = inf;
                }
            }
            g = 0;
            REP(j, b){
                if(lft[j] < c || rgt[j] >= 0) g = 1;
            }
            if(g == 0){
                cout << "Possible" << endl;
                goto done;
            }
        }
        cout << "Impossible" << endl;
        done:;
    }
}
/*
1
3 3
E.E
L..
E.L
*/
