#include <iostream>
#include <algorithm>
#include <queue>

using namespace std;

const int N = 110;

queue< pair< pair< int, int >, int > > que;

int pass[2][N][N];

int arr[N][N];
int n, m, k1, k2;

void enqueue( int id, int x, int y, int l ) {
	if ( x < 0 or y < 0 or x >= n or y >= m ) return;
	if ( pass[id][x][y] != -1 or arr[x][y] ) return;
	pass[id][x][y] = l;
	que.push( { { x, y }, l } );
}

void solve( void ) {

	cin >> n >> m >> k1 >> k2;
	for ( int i = 0 ; i < n ; i++ ) {
		for ( int j = 0 ; j < m ; j++ ) {
			cin >> arr[i][j];
			pass[0][i][j] = -1;
			pass[1][i][j] = -1;
		}
	}

	que.push( { { 0, 0 }, 0 } );
	pass[0][0][0] = 0;
	while ( !que.empty() ) {
		
		int x = que.front().first.first;
		int y = que.front().first.second;
		int l = que.front().second;
		
		que.pop();

		for ( int dx = 0 ; dx <= k1 ; dx++ ) {
			for ( int dy = 0 ; dx + dy <= k1 ; dy++ ) {
				enqueue( 0, x + dx, y + dy, l+1 );
				enqueue( 0, x + dx, y - dy, l+1 );
				enqueue( 0, x - dx, y + dy, l+1 );
				enqueue( 0, x - dx, y - dy, l+1 );
			}
		}
	}

	que.push( { { 0, m-1 }, 0 } );
	pass[1][0][m-1] = 0;
	while ( !que.empty() ) {

		int x = que.front().first.first;
		int y = que.front().first.second;
		int l = que.front().second;
		
		que.pop();

		for ( int dx = 0 ; dx <= k2 ; dx++ ) {
			for ( int dy = 0 ; dx + dy <= k2 ; dy++ ) {
				enqueue( 1, x + dx, y + dy, l+1 );
				enqueue( 1, x + dx, y - dy, l+1 );
				enqueue( 1, x - dx, y + dy, l+1 );
				enqueue( 1, x - dx, y - dy, l+1 );
			}
		}
	}

	int ans = -1;
	for ( int i = 0 ; i < n ; i++ ) {
		for ( int j = 0 ; j < m ; j++ ) {
			if ( pass[0][i][j] != -1 and pass[1][i][j] != -1 ) {
				int val = max( pass[0][i][j], pass[1][i][j] );
				if ( ans == -1 or val < ans ) {
					ans = val;
				}
			}
		}
	}

	cout << ans << endl;
}
int main() {

	ios::sync_with_stdio( false );

	int test_num;
	cin >> test_num;
	while( test_num-- ) {
		solve();
	}

	return 0;
}