#include <stdio.h>
#include <vector>

using namespace std;

const int N = 100010;
const int T = 1000010;
const long long mod = 1000000007ll;

vector<int> fac[N];
vector<int> prime;
int idx[N], tmp[N];

long long buff_ans[N];
int c[T], d[T];

long long solve(int n, int k) {
  int a = n - k + 1, b = n;
  int fs = -1;
  if(a <= (b + 1) / 2) {
    return buff_ans[n];
  }
  long long ans = 1ll;
  for(int i = 0;i < prime.size();i++) {
    long long p = prime[i];
    long long val = p;
    if(val > k and val > n) {
      fs = i;
      break;
    }
    while((a-1) / val < b / val) {
      val *= p;
    }
    ans = (ans * (val / p)) % mod;
  }
  if(prime[fs] <= b) {
    int lo = fs, hi = (int) prime.size() - 1;
    while(lo < hi) {
      int mid = (lo + hi) / 2 + 1;
      if(prime[mid] <= b) {
        lo = mid;
      }else {
        hi = mid - 1;
      }
    }

  }
  return ans;
}
void init(void) {
  // compute prime number
  for(int i = 0;i < N;i++) {
    if(i > 1 and fac[i].empty()) {
      prime.emplace_back(i);
      idx[i] = (int) prime.size() - 1;
      for(int j = i;j < N;j += i) {
        fac[j].push_back(idx[i]);
      }
    }else {
      idx[i] = -1;
    }
  }
  // compute buffer number
  long long ans = 1ll;
  for(int i = 0;i < prime.size();i++) {
    tmp[i] = 0;
  }
  for(int i = 1;i < N;i++) {
    int val = i;
    for(int id : fac[i]) {
      int p = prime[id];
      int cnt = 0;
      while(val % p == 0) {
        val /= p;
        cnt++;
      }
      if(cnt > tmp[id]) {
        for(int i = 0;i < cnt - tmp[id];i++) {
          ans = (ans * p) % mod;
        }
        tmp[id] = cnt;
      }
    }
    buff_ans[i] = ans;
  }
}
int main() {
  int t, n, k, a, b, m;
  scanf("%d", &t);
  scanf("%d%d", &n, &k);
  scanf("%d%d%d", &a, &b, &m);
  for(int i = 0;i < t-1;i++) {
    scanf("%d", &c[i]);
  }
  for(int i = 0;i < t-1;i++) {
    scanf("%d", &d[i]);
  }
  init();
  long long ans = solve(n, k);
  printf("%lld\n", ans);
  for(int i = 0;i < t-1;i++) {
    n = 1 + (a * ans + c[i]) % m;
    k = 1 + (b * ans + d[i]) % n;
    printf("%lld\n", ans = solve(n, k));
  }
  return 0;
}
/*
F(N, 1) = N
F(N, K) = F(N, K-1) * F(N-1, K-1) / (F(N, K-1) - F(N-1, K-1))

F(N, 2) = F(N, 1) * F(N-1, 1) / (F(N, 1) - F(N-1, 1))
F(N, 2) = N * (N-1) / (N - (N-1))
F(N, 2) = N * (N-1)

F(N, 3) = F(N, 2) * F(N-1, 2) / (F(N, 2) - F(N-1, 2))
F(N, 3) = N * (N-1) * (N-1) * (N-2) / (N * (N-1) - (N-1) * (N-2))
F(N, 3) = N * (N-1) * (N-2) / 2

F(N, 4) = F(N, 3) * F(N-1, 3) / (F(N, 3) - F(N-1, 3))
F(N, 4) = N * (N-1) * (N-2) / 2 * (N-1) * (N-2) * (N-3) / 2 / 
  (N * (N-1) * (N-2) / 2 - (N-1) * (N-2) * (N-3) / 2)
F(N, 4) = N * (N-1) * (N-2) * (N-3) / (2 * 3)

...

F(N, K) = N! / (N-K)! / (K-1)! 
F(N, K) = C(N, K) * K
F(N, K) = N! / (N-(K-1))! * (N-K+1) / (K-2)! / (K-1)
F(N, K) = F(N, K-1) * (N-k) / (K-1)

After some long observation
LCM(F(1, K) ... F(N, K)) = LCM(N-K+1, N-K+2, ... N)
*/
