#include <cmath>
#include <cstdio>
#include <vector>
#include <iostream>
#include <algorithm>
#include <climits>
using namespace std;
typedef unsigned long long ull;
const ull mod=1000000007;
ull A[100009];
int c[1000001],d[1000001];
/*Euclidean GCD*/
ull fact[1001][1001];
ull gcdd[1001][1001],lcmm[1001][1001];
// To compute x raised to power y under modulo m
ull power(ull  x, ull y, ull m);
 
// Function to find modular inverse of a under modulo m
// Assumption: m is prime
ull modInverse(ull a, ull m)
{
 
 
    {
        // If a and m are relatively prime, then modulo inverse
        // is a^(m-2) mode m
      
             return power(a, m-2, m);
    }
}
ull power(ull x, ull y, ull m)
{
    if (y == 0)
        return 1;
    ull p = power(x, y/2, m) % m;
    p = (p * p) % m;
 
    return (y%2 == 0)? p : (x * p) % m;
}
ull gcd(ull a, ull b)
{
    ull t;
    if(a>b){
        t=b;
        b=a;
        a=t;
    }
    if(a<=1000&&b<=1000&&gcdd[b][a]!=-1)
        return gcdd[b][a];
    if (a == 0)
     {
      if(a<=1000&&b<=1000) return gcdd[b][a]=b;
    else return b;
    }
  if(a<=1000&&b<=1000) return gcdd[b][a]=gcd(b%a, a);
    else return gcd(b%a, a);
}
ull lcm(ull a, ull b) 
{ 
    ull p;
    p=((a%mod)*(b%mod))%mod;
	return ((modInverse(gcd(a,b),mod)%mod)*(p))%mod;
}
ull lcms(ull  l)
{
	int     i;
	ull result,t;
	result = 1;
	for (i = 0; i < l; i++){ 
        if(result<A[i]){
        t=result;
        result=A[i];
       A[i]=t;
    }
        if(result<=1000&&A[i]<=1000)
            result = lcmm[result][ A[i]]%mod;
            else
         result = lcm(result, A[i])%mod;
    }
	return result;
}
int main() {
    /* Enter your code here. Read input from STDIN. Print output to STDOUT */ 
     std::ios::sync_with_stdio(false);
    int t;
    ull  p,n,m,a,b,k,q;
       cin>>t;
    for(int i=1;i<=1000;i++)
        for(int j=0;j<=i;j++)
           {
          if(i==j)
              fact[i][j]=1;
           else if(j==0)
               fact[i][j]=1;
              else   
        fact[i][j]=(fact[i-1][j]+fact[i-1][j-1])%mod;
    }
     for(int i=1;i<=1000;i++)
        for(int j=0;j<=i;j++)
         gcdd[i][j]=-1;
    for(int i=1;i<=1000;i++)
        for(int j=1;j<=i;j++){
        
        lcmm[i][j]=lcm(i,j);
    }
    
    
        cin>>n>>k;
        cin>>a>>b>>m;
    for(int i=0;i<t-1;i++)
        cin>>c[i];
      for(int i=0;i<t-1;i++)
        cin>>d[i];
    int j=0;
    while(t--){
       //cout<<n<<" "<<k<<" "<<m<<" "<<c[0]<<" "<<d[0]<<endl;
        for(int i=0;i<k;i++){
           A[i]=(((i+1)%mod)*(fact[n][i+1]))%mod;
        }
        p=lcms(k)%mod;
        printf("%lld \n",p);
        q=c[j];
        n=1+(a*p+q)%m;
        q=d[j];
        k=1+(b*p+q)%n;
        j++;
    }
        
} 
