#include <bits/stdc++.h>
using namespace std;

typedef long long ll;
typedef vector<int> vi;
typedef pair<int, int> pi;
const int MOD = 1000000007;

#define repu(i, a, b) for (int i = (a); i < (b); ++i)
#define foru(i, a, b) for (int i = (a); i <= (b); ++i)
#define repd(i, a, b) for (int i = (a); i > (b); --i)
#define ford(i, a, b) for (int i = (a); i >= (b); --i)
#define sz(a) ((int) a.size())
#define pb(a) push_back(a)
#define mp(a, b) make_pair(a, b)
#define mem(a) memset(a, 0, sizeof(a))

template<class T> inline T tmin(T a, T b) {return (a < b) ? a : b;}
template<class T> inline T tmax(T a, T b) {return (a > b) ? a : b;}
template<class T> inline void add_max(T &a, T b) {if (b > a) a = b;}
template<class T> inline void add_min(T &a, T b) {if (b < a) a = b;}
template<class T> inline T tabs(T a) {return (a > 0) ? a : -a;}
template<class T> T gcd(T a, T b) {if (b == 0) return a; return gcd(b, a % b);}

#define N 524288

static const int bits[32] = {
    0,  9,  1, 10, 13, 21,  2, 29, 11, 14, 16, 18, 22, 25,  3, 30,
    8, 12, 20, 28, 15, 17, 24,  7, 19, 27, 23,  6, 26,  5,  4, 31
};

char pb[20];
template<class T> inline void read_num(T &n) {
    n = 0;
    int c = getchar_unlocked(), f = 1;
    while (c != '-' && (c < '0' || c > '9'))
        c = getchar_unlocked();
    if (c == '-') {
        f = -1; c = getchar_unlocked();
    }
    while (c >= '0' && c <= '9') {
        n = (n << 3) + (n << 1) + c - '0';
        c = getchar_unlocked();
    }
    n *= f;
}

template<class T> inline void put_num(T n, char d) {
    if (!n) putchar_unlocked('0');
    if (n < 0) {
        putchar_unlocked('-');
        n = 0 - n;
    }
    int pi = 0;
    while (n) {
        pb[pi++] = (n % 10) + '0';
        n /= 10;
    }
    while (pi) {
        putchar_unlocked(pb[--pi]);
    }
    putchar_unlocked(d);
}

struct node {
    int cnt;
    node *left, *right;

    node(int cnt, node *left, node *right): cnt(cnt), left(left), right(right) {}
    node* insert(int l, int r, int w);
};
node *root[N];
node *null = new node(0, NULL, NULL);

node *node::insert(int l, int r, int w) {
    if(l <= w && w < r) {
        if(l + 1 == r) return new node(this->cnt + 1, null, null);
        int m = (l + r) >> 1;
        return new node(this->cnt + 1, this->left->insert(l, m, w), this->right->insert(m, r, w));
    }
    return this;
}

int query_kth(node *a, node *b, int l, int r, int k) {
    if(l + 1 == r) return l;
    int m = (l + r) >> 1;
    int cnt = a->left->cnt - b->left->cnt;
    if (cnt >= k) return query_kth(a->left, b->left, l, m, k);
    return query_kth(a->right, b->right, m, r, k - cnt);
}

int query_less(node *a, node *b, int l, int r, int x) {
    if (r <= x) return a->cnt - b->cnt;
    if (l >= x) return 0;
    int m = (l + r) >> 1;
    return query_less(a->left, b->left, l, m, x) + query_less(a->right, b->right, m, r, x);
}

inline int most_bit(int x) {
    x |= x >> 1;
    x |= x >> 2;
    x |= x >> 4;
    x |= x >> 8;
    x |= x >> 16;
    return bits[(x * 0x07C4ACDDu) >> 27];
}

int query_xor(node *a, node *b, int l, int r, int x) {
    if (l + 1 == r) return l;
    int m = (l + r) >> 1;
    int ind = most_bit((r - 1) ^ l);
    if (x >> ind & 1) {
        if (a->left->cnt > b->left->cnt) return query_xor(a->left, b->left, l, m, x);
        else return query_xor(a->right, b->right, m, r, x);
    }
    else {
        if (a->right->cnt > b->right->cnt) return query_xor(a->right, b->right, m, r, x);
        else return query_xor(a->left, b->left, l, m, x);
    }
}

int main(int argc, char *argv[]) {
    ios_base::sync_with_stdio(false);
    int n, m, op, l, r, x;
    n = 0;
    null->left = null->right = null;
    read_num(m);
    repu(i, 0, m) {
        read_num(op);
        if (op == 0) {
            read_num(x);
            root[n] = (n == 0 ? null : root[n - 1])->insert(0, N, x);
            ++n;
        }
        else if (op == 1) {
            read_num(l); read_num(r); read_num(x);
            --l, --r;
            printf("%d\n", query_xor(root[r], (l == 0 ? null : root[l - 1]), 0, N, x));
        }
        else if (op == 2) {
            read_num(x); n -= x;
        }
        else if (op == 3) {
            read_num(l); read_num(r); read_num(x);
            --l, --r, ++x;
            printf("%d\n", query_less(root[r], (l == 0 ? null : root[l - 1]), 0, N, x));
        }
        else {
            read_num(l); read_num(r); read_num(x);
            --l, --r;
            printf("%d\n", query_kth(root[r], (l == 0 ? null : root[l - 1]), 0, N, x));
        }
    }

    return 0;
}