//g++ -std=c++0x your_file.cpp -o your_program
#include<iostream>
#include<fstream>
#include<string>
#include<algorithm>
#include<math.h>
#include<vector>
#include<cstring>
#include<cstdio>
#include<cstdlib>
#include<queue>
#include<map>
#include<set>
#define fname ""
#define mp make_pair
#define F first
#define pb push_back
#define S second
#define ub upper_bound
#define lb lower_bound
#define inf 2000000000
#define INF 2000000000000000000ll
using namespace std;

const int N = (1 << 19);

//const int maxn = 20000000;

struct SegmentTree
{
	int val, l, r;
}a[N * 22];

struct Trie
{
	int val, nx[2];
}t[N * 22];

int STsz, Triesz;

vector <int> STroot, Trieroot;

void AddST(int x, int CurV, int PrevV, int tl = 0, int tr = N - 1)
{
	if (tl == tr)
	{
		a[CurV].val = a[PrevV].val + 1;
		return ;
	}
	int tm = (tl + tr) >> 1;
	if (x <= tm)
	{
		STsz++;
		a[CurV].l = STsz;
		a[CurV].r = a[PrevV].r;
		AddST(x, STsz, a[PrevV].l, tl, tm);
		a[CurV].val = a[a[CurV].l].val + a[a[CurV].r].val;
	}
	else
	{
		STsz++;
		a[CurV].l = a[PrevV].l;
		a[CurV].r = STsz;
		AddST(x, STsz, a[PrevV].r, tm + 1, tr);
		a[CurV].val = a[a[CurV].l].val + a[a[CurV].r].val;
	}
}

void AddTrie(int x, int CurV, int PrevV, int st = 19)
{
	if (st < 0)
	{
		t[CurV].val = t[PrevV].val + 1;
		return ;
	}
	int Type = 0;
	if (x & (1 << st))
		Type = 1;
	Triesz++;
	t[CurV].nx[Type] = Triesz;
	t[CurV].nx[(Type ^ 1)] = t[PrevV].nx[(Type ^ 1)];
	AddTrie(x, t[CurV].nx[Type], t[PrevV].nx[Type], st - 1);
	t[CurV].val = t[t[CurV].nx[0]].val + t[t[CurV].nx[1]].val;
}

int GetMax(int x, int Lv, int Rv, int st = 19)
{
	if (st < 0)
		return 0;	
	int tp = 1;
	if (x & (1 << st))
		tp = 0;
	if (t[t[Rv].nx[tp]].val - t[t[Lv].nx[tp]].val > 0)
		return GetMax(x, t[Lv].nx[tp], t[Rv].nx[tp], st - 1) + tp * (1 << st);
	return GetMax(x, t[Lv].nx[(tp ^ 1)], t[Rv].nx[(tp ^ 1)], st - 1) + (tp ^ 1) * (1 << st);
}

int GetSum(int l, int r, int v, int tl = 0, int tr = N - 1)
{
	if (l > r || tl > r || l > tr || !v)
		return 0;
	if (l <= tl && tr <= r)
		return a[v].val;
	int tm = (tl + tr) >> 1;
	return GetSum(l, r, a[v].l, tl, tm) + GetSum(l, r, a[v].r, tm + 1, tr);
}

int GetKth(int k, int Lv, int Rv, int tl = 0, int tr = N - 1)
{
	if (tl == tr)
		return tl;
	int tm = (tl + tr) >> 1;
	if (a[a[Rv].l].val - a[a[Lv].l].val >= k)
		return GetKth(k, a[Lv].l, a[Rv].l, tl, tm);
	else
		return GetKth(k - (a[a[Rv].l].val - a[a[Lv].l].val), a[Lv].r, a[Rv].r, tm + 1, tr);
}

int main()
{
	#ifndef ONLINE_JUDGE
	freopen (fname".in", "r", stdin);
	freopen (fname".out", "w", stdout);
	#endif
	int sz = 1;
	STroot.pb(0);
	Trieroot.pb(0);
	int tp, x, L, R, k;
	int Q;
	cin >> Q;
	while (Q--)
	{
		scanf("%d", &tp);
		if (!tp)
		{
			scanf("%d", &x);
			STsz++;
			STroot.pb(STsz);
			AddST(x, STsz, STroot[sz - 1]);
			Triesz++;
			Trieroot.pb(Triesz);
			AddTrie(x, Triesz, Trieroot[sz - 1]);
			sz++;
		}
		else if (tp == 1)
		{
			scanf("%d%d%d", &L, &R, &x);
			printf("%d\n", GetMax(x, Trieroot[L - 1], Trieroot[R]));
		}
		else if (tp == 2)
		{
			scanf("%d", &k);
			while (k--)
			{
				sz--;
				STroot.pop_back();
				Trieroot.pop_back();
			}
		}
		else if (tp == 3)
		{
			scanf("%d%d%d", &L, &R, &x);
			printf("%d\n", GetSum(1, x, STroot[R]) - GetSum(1, x, STroot[L - 1]));
		}
		else if (tp == 4)
		{
			scanf("%d%d%d", &L, &R, &k);
			printf("%d\n", GetKth(k, STroot[L - 1], STroot[R]));
		}
	}
	return 0;
}
