#include <cstdio>
#include <cstring>
#include <cmath>
#include <iostream>
#include <vector>
#include <set>
#include <map>
#include <queue>
#include <stack>
#include <string>
#include <algorithm>
using namespace std;
#define SZ(x) ( (int) (x).size() )
#define dbg(x) cerr << #x << " = " << x << endl;
#define mp make_pair
#define pb push_back
#define fi first
#define se second
typedef long long ll;
typedef pair<int, int> pii;
// const int INF = 1e9;
const int MAX_N = 5e5 + 10;
const int LOG = 19;
const int ST_SIZE = 2 << LOG;

struct ps_node {
  int count;
  ps_node *c[2];
};

ps_node ps_pool[ST_SIZE + MAX_N * LOG], *ps_ptr = ps_pool;
ps_node *roots[MAX_N];

int size;

inline ps_node* ps_new_node(ps_node* n){
  ps_node* m = ps_ptr++;
  if(n) *m = *n;
  return m;
}

int get_count(ps_node* p){  return p == NULL ? 0 : p->count; }
ps_node* get_left(ps_node* p) {return p == NULL ? NULL : p->c[0]; }
ps_node* get_right(ps_node* p) {return p == NULL ? NULL : p->c[1]; }
ps_node* get_child(ps_node* p, int i) {return p == NULL ? NULL : p->c[i]; }

void update(ps_node* &n, int a, int i = LOG - 1){
  n = ps_new_node(n);
  n->count ++;
  if(i >= 0)
    update(n->c[(a >> i) & 1], a, i - 1);
}

int find_kth(ps_node* p, ps_node* q, int k, int i = LOG - 1){
  if(i == -1) return 0;
  int c = get_count(get_left(q)) - get_count(get_left(p));
  if(c >= k)
    return find_kth(get_left(p), get_left(q), k, i - 1);
  return (1 << i) | find_kth(get_right(p), get_right(q), k - c, i - 1);
}

int find_count(ps_node* p, ps_node* q, int x, int i = LOG - 1){
  if(i == -1) return get_count(q) - get_count(p);
  if((x >> i) & 1) 
    return get_count(get_left(q)) - get_count(get_left(p)) + find_count(get_right(p), get_right(q), x, i - 1);
  return find_count(get_left(p), get_left(q), x, i - 1);
}

int find_xor(ps_node* p, ps_node* q, int y, int i = LOG - 1){
  if(i == -1) return 0;
  int par = (y >> i) & 1;
  if(get_count(get_child(q, 1 - par)) - get_count(get_child(p, 1 - par)) >= 1)
    return ((1 - par) << i) | find_xor(get_child(p, 1 - par), get_child(q, 1 - par), y, i - 1);
  return (par << i) | find_xor(get_child(p, par), get_child(q, par), y, i - 1);
}

void append(int a){
  ++size;
  roots[size] = roots[size - 1];
  update(roots[size], a);
}

void pop_back(){
  size --;
}

// Wrapper methods !!!

int count_query(int L, int R, int x){
  return find_count(roots[L - 1], roots[R], x);
}

int kth_query(int L, int R, int k){
  return find_kth(roots[L - 1], roots[R], k);
}

int xor_query(int L, int R, int y){
  return find_xor(roots[L - 1], roots[R], y);
}

int main(){
  int Q, t, a, b, c;
  scanf("%d", &Q);
  while(Q--){
    scanf("%d", &t);
    if(t == 0){
      scanf("%d", &a);
      append(a);
    } else if(t == 1){
      scanf("%d%d%d", &a, &b, &c);
      printf("%d\n", xor_query(a, b, c));
    } else if(t == 2){
      scanf("%d", &a);
      for(int i = 0; i < a; i++)
	pop_back();
    } else if(t == 3){
      scanf("%d%d%d", &a, &b, &c);
      printf("%d\n", count_query(a, b, c));
    } else if(t == 4){
      scanf("%d%d%d", &a, &b, &c);
      printf("%d\n", kth_query(a, b, c));
    }
  }
  return 0;
}
