#pragma comment(linker, "/STACK:500000000")
#include <algorithm>
#include <functional>
#include <iostream>
#include <list>
#include <map>
#include <math.h>
#include <set>
#include <stdio.h>
#include <stdlib.h>
#include <string>
#include <string.h>
#include <time.h>
#include <queue>
#include <utility>
#include <vector>
using namespace std;
 
#define y0 y123
#define y1 y1234
#define ll long long
const double PI = acos(-1.0);
const double EPS = 1e-9;
const int INF = 2147483647;
 
int gcd(int a, int b) { return (!b) ? a : gcd(b, a % b); }
int lcm(int a, int b) { return a / gcd(a, b) * b; }
 
struct node {
	node * l;
	node * r;
	int sum;
	node () : sum(0), l(NULL), r(NULL) {};
	node (int sum) : sum(sum), l(NULL), r(NULL) {};
	node (node * l, node * r) : l(l), r(r) {
		sum = l -> sum + r -> sum;
	}
	node (int sum, node * l, node * r) : sum(sum), l(l), r(r) {};
};
 
node * build(int l, int r) {
	if (l == r) {
		return new node();
	}
	int mid = (l + r) >> 1;
	return new node(build(l, mid), build(mid + 1, r));
}
 
node * update(node * x, int l, int r, int pos, int y) {
	if (l == r) {
		return new node(x -> sum + y, x -> l, x -> r);
	}
	int mid = (l + r) >> 1;
	if (pos <= mid) {
		return new node(update(x -> l, l, mid, pos, y), x -> r);
	} else {
		return new node(x -> l, update(x -> r, mid + 1, r, pos, y));
	}
}
 
int querySum(node * x, int l, int r, int i, int j) {
	if (i > j) {
		return 0;
	}
	if (l == i && r == j) {
		return x -> sum;
	}
	int mid = (l + r) >> 1;
	return querySum(x -> l, l, mid, i, min(j, mid)) + 
		   querySum(x -> r, mid + 1, r, max(i, mid + 1), j);
}
 
int queryKthMin(node * x, node * y, int l, int r, int i, int j, int k) {
	if (l == r) {
		return l;
	}
	int mid = (l + r) >> 1;
	if (k <= (x -> l -> sum) - (y -> l -> sum)) {
		return queryKthMin(x -> l, y -> l, l, mid, i, min(j, mid), k);
	} else {
		return queryKthMin(x -> r, y -> r, mid + 1, r, max(i, mid + 1), j, k - ((x -> l -> sum) - (y -> l -> sum)));
	}
}
 
const int K = 19;
const int N = 500000;
int a[N + 5];
node * roots[N + 5];
vector<int> v[K + 1][N + 5];
int sum[K + 1][N + 5];

bool binsearch(int k, int y, int left, int right) {
	if (v[k][y].empty()) {
		return false;
	}
	int l = 0;
	int r = v[k][y].size() - 1;
	if (v[k][y][l] > right || v[k][y][r] < left) {
		return false;
	}
	/*for (int xx = 0; xx < 7; ++xx) {
		int m = abs(rand()) % v[k][y].size();
		if (v[k][y][m] >= left && v[k][y][m] <= right) {
			return true;
		}
	}*/
	while (l <= r) {		
		int m = (l + r) >> 1;
		if (v[k][y][m] >= left) {
			if (v[k][y][m] <= right) {
				return true;
			}
			r = m - 1;
		} else {
			l = m + 1;
		}
	}
	return false;
}
 
int main() {
	roots[0] = build(1, N);
	int cur = 0;
	int m;
	scanf("%d", &m);
	while (m--) {
		int t;
		scanf("%d", &t);
		if (t == 0) {
			++cur;
			scanf("%d", &a[cur]);
			roots[cur] = update(roots[cur - 1], 1, N, a[cur], 1);
			for (int k = 0; k < K; ++k) {
				sum[k][cur] = sum[k][cur - 1];
				if (a[cur] & (1 << k)) {
					++sum[k][cur];
				}
				v[K - k][a[cur] >> k].push_back(cur);
			}
		} else if (t == 1) {
			int l, r, x;
			scanf("%d %d %d", &l, &r, &x);
			int y = 0;
			for (int k = 1; k <= K; ++k) {
				bool b = (x & (1 << (K - k)));
				y = (y << 1) + !b;
				int cnt = sum[K - k][r] - sum[K - k][l - 1];
				if ((!b && cnt == 0) || (b && cnt == r - l + 1) || !binsearch(k, y, l, r)) {
					y ^= 1;
				}
			}
			printf("%d\n", y);
		} else if (t == 2) {
			int k;
			scanf("%d", &k);
			for (int i = 0; i < k; ++i) {
				for (int j = 0; j < K; ++j) {
					v[K - j][a[cur] >> j].pop_back();
				}
				--cur;
			}
		} else if (t == 3) {
			int l, r, x;
			scanf("%d %d %d", &l, &r, &x);
			printf("%d\n", querySum(roots[r], 1, N, 1, x) - querySum(roots[l - 1], 1, N, 1, x));
		} else {
			int l, r, k;
			scanf("%d %d %d", &l, &r, &k);
			printf("%d\n", queryKthMin(roots[r], roots[l - 1], 1, N, 1, N, k));
		}
	}
	return 0;
}