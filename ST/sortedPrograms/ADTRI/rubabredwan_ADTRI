/*
__________           .___                       
\______   \ ____   __| _/_  _  _______    ____  
  |      _// __ \ / __ |\ \/ \/ /\__  \  /    \ 
  |   |   \  ___// /_/ | \     /  / __ \|   |  \
  ____|_  /\___  >____ |  \/\_/  (____  /___|  /
        \/     \/     \/              \/     \/ 
        
handle	: rubabredwan (Codeforces/CodeChef/HackerRank)
task 	: ...............

*/

#include <bits/stdc++.h>

#define READ(x)		freopen(x,"r",stdin)
#define WRITE(x)	freopen(z,"w",stdout)

#define REP(i,n)	for(int i=0;i<n;i++)
#define REPN(i,n)	for(int i=1;i<=n;i++)
#define FOR(i,a,b)	for(int i=a;i<b;i++)
#define SET(i,n)	memset(i,n,sizeof(i))

#define MAX			6000010
#define INF			1e9
#define EPS			1e-9
#define in			insert
#define pb			push_back
#define cl			clear
#define sz			size
#define xx 			first
#define yy	 		second

using namespace std;

typedef long long int 	ll;
typedef vector<int>		vi;
typedef pair<ll,ll>		pii;
typedef double			db;

//template ends here

bool prime[6000050];

int p[1000000], idx = 0;

bool canbe(int x){
	if(x >= 2 && !prime[x]) return x % 4 != 1 ? false : true;
	int sq = sqrt(x);
	for(int i=0;p[i] <= sq && i < idx;i++){
		if(x % p[i] == 0){
//			cout << x << " " << p[i] << endl;
			while(x % p[i] == 0) x /= p[i];
			if(p[i] % 4 == 1) return true;
		//	sq =sqrt(x);
		}
	}
	if(x > 1) if(x % 4==1) return true;
	return false;
}

void seive(){
	int sq = sqrt(MAX);
	//cout << sq << endl;
	for(int i=2;i<=sq;i++){
		if(!prime[i]){
			p[idx++] = i;
			for(int j = i * i;j<MAX;j+=i){
				prime[j] = 1;
			}
		}
	}
/*	for(int i=sq;i<MAX;i+=2){
		if(!prime[i]) p[idx++] = i;
	}*/
}

int main()
{
	seive();
	int tc, n; 
	scanf("%d", &tc);
	//for(ll n=1;n<50;n++){
		//scanf("%lld", &n);
	while(tc--){
		scanf("%d", &n);
		if(canbe(n)) printf("YES\n");
		else printf("NO\n");
	}
	/*	ll side =  n * n, newval = n, flag = 0;
		if(newval % 2 != 0) newval++; 
		newval /= 2;
		if(newval % 2 != 0 && n % 2 == 0) newval++; 
		if(n % 2 != 0 && newval % 2 == 0) newval++;
		//cout << n << " " << newval << endl;
		for(ll i=newval;i<n;i++){
			ll ss = side - i * i;
			if(isSquare(ss)){ 
				flag = 1; 
				break; 
			}
		}
		if(flag);// printf("YES\n");
		else printf("%lld\n", n);
	}*/
	return 0;
}