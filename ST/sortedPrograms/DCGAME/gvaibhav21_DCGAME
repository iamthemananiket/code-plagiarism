#include<cstdio>
#include<algorithm>
#include<vector>
#include<cstring>
#include<cmath>
#include<stack>
#include<queue>
#include<string>
#include<iostream>
#include<map>
using namespace std;
 
#define sd(a) scanf("%d",&a)
#define pd(a) printf("%d\n",(a))
#define LL long long
#define F first
#define S second
#define MP make_pair
#define PB push_back
using std::string;
 
static struct IO {
    char tmp[1 << 10];
 
	// fast input routines
	char cur;
 
//#define nextChar() (cur = getc_unlocked(stdin))
//#define peekChar() (cur)
	inline char nextChar() { return cur = getc_unlocked(stdin); }
	inline char peekChar() { return cur; }
 
	inline operator bool() { return peekChar(); }
	inline static bool isBlank(char c) { return (c < '-' && c); }
	inline bool skipBlanks() { while (isBlank(nextChar())); return peekChar() != 0; }
 
	inline IO& operator >> (char & c) { c = nextChar(); return *this; }
 
	inline IO& operator >> (char * buf) {
		if (skipBlanks()) {
			if (peekChar()) {
				*(buf++) = peekChar();
				while (!isBlank(nextChar())) *(buf++) = peekChar();
			} *(buf++) = 0; } return *this; }
 
	inline IO& operator >> (string & s) {
		if (skipBlanks()) {	s.clear(); s += peekChar();
			while (!isBlank(nextChar())) s += peekChar(); }
		return *this; }
 
	inline IO& operator >> (double & d) { if ((*this) >> tmp) sscanf(tmp, "%lf", &d); return *this;	}
 
#define defineInFor(intType) \
	inline IO& operator >>(intType & n) { \
		if (skipBlanks()) { \
			int sign = +1; \
			if (peekChar() == '-') { \
				sign = -1; \
				n = nextChar() - '0'; \
			} else \
				n = peekChar() - '0'; \
			while (!isBlank(nextChar())) { \
				n += n + (n << 3) + peekChar() - 48; \
			} \
			n *= sign; \
		} \
		return *this; \
	}
 
defineInFor(int)
defineInFor(unsigned int)
defineInFor(long long)
 
	// fast output routines
 
//#define putChar(c) putc_unlocked((c), stdout)
	inline void putChar(char c) { putc_unlocked(c, stdout); }
	inline IO& operator << (char c) { putChar(c); return *this; }
	inline IO& operator << (const char * s) { while (*s) putChar(*s++); return *this; }
 
	inline IO& operator << (const string & s) { for (int i = 0; i < (int)s.size(); ++i) putChar(s[i]); return *this; }
 
	char * toString(double d) { sprintf(tmp, "%lf%c", d, '\0'); return tmp; }
	inline IO& operator << (double d) { return (*this) << toString(d); }
 
 
#define defineOutFor(intType) \
	inline char * toString(intType n) { \
		char * p = (tmp + 30); \
		if (n) { \
			bool isNeg = 0; \
			if (n < 0) isNeg = 1, n = -n; \
			while (n) \
				*--p = (n % 10) + '0', n /= 10; \
			if (isNeg) *--p = '-'; \
		} else *--p = '0'; \
		return p; \
	} \
	inline IO& operator << (intType n) { return (*this) << toString(n); }
 
defineOutFor(int)
defineOutFor(long long)
 
#define endl ('\n')
#define cout __io__
#define cin __io__
} __io__;
int l[1000010],r[1000010];
stack<int> st;
int a[1000010];
vector<pair<int,int> > v;
int pre[1000010];
int post[1000010];
int c;
map<int,int> pos;
char out[1000010];
int main()
{
	int n,m,i,k;
	char ch,pl;
	cin>>n>>m;
	for(i=0;i<n;++i)
		cin>>a[i];
	l[0]=0;
	st.push(0);
	for(i=1;i<n;++i)
	{
		while(!st.empty())
		{
			if(a[st.top()]<=a[i])
			{
				r[st.top()]=i-1;
				st.pop();
			}
			else
				break;
		}
		if(st.empty())
			l[i]=0;
		else
			l[i]=st.top()+1;
		st.push(i);
	}
	while(!st.empty())
	{
		r[st.top()]=n-1;
		st.pop();
	}
	c=0;
	for(i=0;i<n;++i)
	{
		if(!pos[a[i]])
		{
			pos[a[i]]=++c;
			v.PB(MP(a[i],0));
		}
		int l1=((i-l[i]+1)&1);
		int l2=((r[i]-i+1)&1);
		v[pos[a[i]]-1].S=v[pos[a[i]]-1].S+l1*l2;
		//cout<<len*(len+1)/2<<'\n';
	}
	sort(v.begin(),v.end());
	pre[0]=v[0].S;
	for(i=1;i<v.size();++i)
		pre[i]=pre[i-1]+v[i].S;
	post[v.size()-1]=v[v.size()-1].S;
	for(i=v.size()-2;i>=0;--i)
		post[i]=post[i+1]+v[i].S;
	for(i=0;i<m;++i)
	{
		if(i)
			cin>>ch;
		cin>>ch;
		cin>>k;
		cin>>pl;
		//cout<<ch<<' '<<k<<' '<<pl<<'\n';
		/*scanf("%c",&ch);scanf("%c",&ch);
		sd(k);
		scanf("%c",&pl);scanf("%c",&pl);
		*/
		int pos=upper_bound(v.begin(),v.end(),MP(k,-1))-v.begin();
		int val=0;
		if(ch=='<')
		{
			--pos;
			if(pos>=0)
				val=pre[pos];
		}
		else if(ch=='=')
		{
			if(pos<n)
			if(v[pos].F==k)
				val=v[pos].S;
			//cout<<val<<'\n';
		}
		else
		{
			if(pos<n)
				if(v[pos].F==k)
					++pos;
			if(pos<n)
				val=post[pos];
		}
		if(val%2==1)
			out[i]=pl;
		else if(pl=='D')
			out[i]='C';
		else
			out[i]='D';
	}
	out[m]='\0';
	puts(out);
}