#include <bits/stdc++.h>
using namespace std;

#define repu(i, a, b) for (int i = (a); i < (b); ++i)
#define repd(i, a, b) for (int i = (a); i > (b); --i)
#define mem(a, x) memset(a, x, sizeof(a))
#define all(a) a.begin(), a.end()
#define uni(a) a.erase(unique(all(a)), a.end())
#define count_bits(x) __builtin_popcount(x)
#define count_bitsll(x) __builtin_popcountll(x)
#define least_bits(x) __builtin_ffs(x)
#define least_bitsll(x) __builtin_ffsll(x)
#define most_bits(x) 32 - __builtin_clz(x)
#define most_bitsll(x) 64 - __builtin_clz(x)

vector<string> split(const string &s, char c) {
	vector<string> v;
	stringstream ss(s);
	string x;
	while (getline(ss, x, c)) v.push_back(x);
	return v;
}

#define error(args...) { vector<string> _v = split(#args, ','); err(_v.begin(), args); }

void err(vector<string>::iterator it) {}

template<typename T, typename... Args>
void err(vector<string>::iterator it, T a, Args... args) {
	cerr << it -> substr((*it)[0] == ' ', it -> length()) << " = " << a << '\n';
	err(++it, args...);
}

typedef long long ll;
const int MOD = 1000000007;

template<class T, class U> inline T tmin(T a, U b) {return (a < b) ? a : b;}
template<class T, class U> inline T tmax(T a, U b) {return (a > b) ? a : b;}
template<class T, class U> inline void amax(T &a, U b) {if (b > a) a = b;}
template<class T, class U> inline void amin(T &a, U b) {if (b < a) a = b;}
template<class T> inline T tabs(T a) {return (a > 0) ? a : -a;}
template<class T> T gcd(T a, T b) {while (b != 0) {T c = a; a = b; b = c % b;} return a;}

const int MAXN = 105;
ll dp[MAXN];

int N, K, K2, K3;
ll KM, KP, IK1, IK2, KN1, KN2;

ll mod_pow(ll x, ll y) {
    ll res = 1, a = x;
    while (y > 0) {
        if (y & 1) res = res * a % MOD;
        a = a * a % MOD;
        y >>= 1;
    }
    return res;
}

inline ll SnX(ll n, ll x) {
	if (n < 0) return 0;
	if (x == 1) return n;
	ll ret = mod_pow(x, n) - 1;
	ret = (ret * mod_pow(x - 1, MOD - 2)) % MOD * x % MOD;
	return ret;
}

inline void amod(ll &x, ll add) {
	x += add;
	if (x < 0) x += MOD;
}


ll calc_1() {
	ll ret = (SnX(N, K3) - 3 * SnX(N, K2) + 2 * SnX(N, K)) % MOD;
	return ret;
}


ll calc_2() {
	ll ret = ((3 + KN1) * SnX(N - 1, K2) + 2 * (N - 1) * KN1) % MOD;
	ret = (ret - (2 + 3 * KN1) * SnX(N - 1, K) - SnX(N - 1, K3)) % MOD;
	ret = (ret * 3 * K) % MOD * KM % MOD;
	amod(ret, 0);
	return ret;
}


ll calc_3() {
	ll ret = ((KN2 - 1) * SnX(N - 1, K) + 2 * SnX(N - 1, K2) + KN2 * SnX(N - 1, IK1)) % MOD;
	ret = (ret - SnX(N - 1, K3) - 2 * (N - 1) * KN2) % MOD;
	ret = (ret * 3 * K2) % MOD;
	ret = (ret * KM) % MOD * KP % MOD;
	amod(ret, 0);
	return ret;
}


ll calc_4() {
	ll ret = ((N - 1) * KN1 - (KN1 + 1) * SnX(N - 1, K) + SnX(N - 1, K2)) % MOD;
	ret = (ret * 3 * K) % MOD * KM % MOD;
	amod(ret, 0);
	return ret;
}


ll calc_5() {
	if (N <= 2) return 0;
	ll KN21 = mod_pow(K, N + N - 1);
	ll ret = (KN21 + 2 * KN1 + mod_pow(K, N - 1) + 1) * SnX(N - 2, K) % MOD;
	ret = (ret - (1 + KN1) * SnX(N - 2, K2) + KN21 * SnX(N - 2, IK1)) % MOD;
	ret = (ret - (N - 2) * (2 * KN21 + KN1 + mod_pow(K, N - 1))) % MOD;
	ret = (ret * K2 * 6) % MOD;
	ret = (ret * KM) % MOD * KM % MOD;
	amod(ret, 0);
	return ret;
}


ll calc_6() {
	if (N <= 2) return 0;
	ll ret = (K2 * SnX(N - 2, K3) + 2 * (N - 2) * KN2) % MOD;
	ret = (ret - (KN2 - K2) * SnX(N - 2, K) - 2 * K2 * SnX(N - 2, K2) - KN2 * SnX(N - 2, IK1)) % MOD;
	ret = (ret * 6 * K) % MOD * KP % MOD;
	ret = (ret * KM) % MOD * KM % MOD;
	amod(ret, 0);
	return ret;
}

ll calc_7() {
	if (N <= 2) return 0;
	ll ret = ((N - 1) * 1LL * (N - 2)) / 2 % MOD - 1;
	ll tmp = (KM * KM) % MOD;
	tmp = tmp * (((N - 1) * KN1 - N * mod_pow(K, N - 1) + 1) % MOD) % MOD;
	ret = (ret - N * SnX(N - 2, K) + tmp) % MOD;
	ret = (ret * KM) % MOD * 6 % MOD;
	ret = (ret * KN1) % MOD * K % MOD;
	amod(ret, 0);
	return ret;
}

ll solve_small() {
	dp[0] = 1;
	repu(i, 1, MAXN) dp[i] = (K * dp[i - 1]) % MOD;
	ll ret = 0;
	
	repu(i, 1, N + 1) {
		ret += (dp[i] * (dp[i] - 1) % MOD * (dp[i] - 2) % MOD);
		ret %= MOD;
	}
	
	repu(i, 1, N + 1) {
		repu(k, i + 1, N + 1) {
			ret += (3 * dp[i] * (dp[i] - 1) % MOD * (dp[k] - 2 * dp[k - i]) % MOD);
			ret %= MOD;
			
			ret += (3 * dp[i] * (dp[k] - dp[k - i]) % MOD * (dp[k] - dp[k - i] - 1) % MOD);
			ret %= MOD;
		}
	}

	repu(i, 1, N + 1) repu(j, i + 1, N + 1) repu(k, j + 1, N + 1) {
		ret += (6 * dp[k] * (dp[i] - 1) % MOD * (dp[j] - dp[j - i] - 1) % MOD);
		ret %= MOD;
	}
	
	amod(ret, 0);
	
	return ret;
}


int main(int argc, char *argv[]) {
    ios_base::sync_with_stdio(false);
    
	int ntest;
	
	cin >> ntest;
	while (ntest--) {
		cin >> N >> K;
		if (K == 1) {
			printf("0\n"); continue;
		}
		/*
		if (N < 105) {
			printf("%lld\n", solve_small());
			//continue;
		}
		*/
		K2 = K * K, K3 = K2 * K;
		KM = mod_pow(K - 1, MOD - 2);
		KP = mod_pow(K + 1, MOD - 2);
		KN1 = mod_pow(K, N);
		KN2 = (KN1 * KN1) % MOD;
		IK1 = mod_pow(K, MOD - 2);
		IK2 = (IK1 * IK1) % MOD;
		
		ll ans = (calc_1() + calc_2() + calc_3() + calc_4()) % MOD;
		ans = (ans + calc_5() + calc_6() + calc_7()) % MOD;
		amod(ans, 0);
		printf("%lld\n", ans);
		
	}
	
    return 0;
}
