#include<bits/stdc++.h>
using namespace std;

vector<vector<int > > graph;

bool dp[101][101][150]={{{0}}};

vector<pair<pair<int,int> , int> > edges;
int n,m;
void eval(int src)
 {
 	int godSrc = src;
 	int visited[402][150] = {{0}};
 /*	for(int i=0;i<402;i++)
 	{
 		for(int j=0;j<=128;j++)
		  {
		  	visited[i][j]=0;	
		  }	
	 }
   */ queue<pair<int,int> > q;
	for(int i=0;i<graph[src].size();i++) 
	{
		q.push({graph[src][i],0});
		visited[graph[src][i]][0] = 1;
		int dest  = edges[graph[src][i]].first.second;
		dp[src][dest][0] = 1;	
		
	}	
	while(!q.empty())
	 {
	 	pair<int,int> head = q.front();
	 	q.pop();
	 	int edgeId = head.first;
	 	int currentXor = head.second;
	 
	 	//cout<<"going to "<<edgeId<<" with "<<currentXor<<endl;	
		 int src = edges[edgeId].first.second;
	 	int oldAnd = edges[edgeId].second;
	 	for(int i=0;i<graph[src].size();i++)
	 	 {
	 	 	int edgeIdNew = graph[src][i];
	 	 	int dest = edges[edgeIdNew].first.second;
	 	 	int newAnd = edges[edgeIdNew].second;
	 	 	int newXor = currentXor ^ (newAnd & oldAnd);
	 	 	if(visited[edgeIdNew][newXor])
	 	 		continue;
	 	 	visited[edgeIdNew][newXor] = 1;
	 	 	dp[godSrc][dest][newXor] = 1;
	 	 	q.push({edgeIdNew, newXor});
		  }
	 }
 }

int main()
{
	int x,y,val;
	cin>>n>>m;
	graph.resize(n);
	int id=0;
	for(int i=0;i<m;i++)
	{
		cin>>x>>y>>val;
		x--;
		y--;
		edges.push_back({{x,y},val});
		edges.push_back({{y,x},val});
		graph[x].push_back(id++);
		graph[y].push_back(id++);
	}
	for(int src = 0;src<n;src++)
	{
		eval(src);
	}
	int mx=0;
	for(int i=0;i<n;i++)
	{
		for(int j=0;j<n;j++)
		{
			for(int cf=0;cf<=127;cf++)
				if(dp[i][j][cf] && cf>mx)
					mx=cf;
		}
	}
	cout<<mx<<endl;
}