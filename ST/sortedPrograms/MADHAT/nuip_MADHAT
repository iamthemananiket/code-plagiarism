#include <string>
#include <vector>
#include<iostream>
#include<cstdio>
#include<cstdlib>
#include<stack>
#include<queue>
#include<cmath>
#include<algorithm>
#include<functional>
#include<list>
#include<deque>
#include<bitset>
#include<set>
#include<map>
#include<unordered_map>
#include<cstring>
#include<sstream>
#include<complex>
#include<iomanip>
#include<numeric>
#include<cassert>
#define X first
#define Y second
#define pb push_back
#define rep(X,Y) for (int (X) = 0;(X) < (Y);++(X))
#define reps(X,S,Y) for (int (X) = S;(X) < (Y);++(X))
#define rrep(X,Y) for (int (X) = (Y)-1;(X) >=0;--(X))
#define repe(X,Y) for ((X) = 0;(X) < (Y);++(X))
#define peat(X,Y) for (;(X) < (Y);++(X))
#define all(X) (X).begin(),(X).end()
#define rall(X) (X).rbegin(),(X).rend()
#define eb emplace_back
#define UNIQUE(X) (X).erase(unique(all(X)),(X).end())

using namespace std;
typedef long long ll;
typedef pair<int,int> pii;
typedef pair<ll,ll> pll;
template<class T> using vv=vector<vector<T>>;
template<class T> ostream& operator<<(ostream &os, const vector<T> &t) {
os<<"{"; rep(i,t.size()) {os<<t[i]<<",";} os<<"}"<<endl; return os;}
template<class S, class T> ostream& operator<<(ostream &os, const pair<S,T> &t) { return os<<"("<<t.first<<","<<t.second<<")";}
template<class T> inline bool MX(T &l,const T &r){return l<r?l=r,1:0;}
template<class T> inline bool MN(T &l,const T &r){return l>r?l=r,1:0;}
const ll MOD=1e9+7;
ll modpow(ll r,ll n,ll m=MOD){
  ll re=1,d=r%m;
  if(n<0)(n%=MOD-1)+=MOD-1;
  for(;n;n/=2){
    if(n&1)(re*=d)%=m;
    (d*=d)%=m;
  }
  return re;
}
vector<ll> fact,finv,inv;
ll comb(ll n,ll r){
  if(n<r||r<0)return 0;
  return fact[n]*finv[n-r]%MOD*finv[r]%MOD;
}
class Doralion{
  void Modinvs(vector<ll> &re,int n){
    re.resize(n+1); re[1]=1;
    for(int i=2;i<=n;++i)re[i]=re[MOD%i]*(MOD-MOD/i)%MOD;
  }
  void Facts(vector<ll> &re,int n){
    re.resize(n+1); re[0]=1;
    rep(i,n)re[i+1]=re[i]*(i+1)%MOD;
  }
  void Factinvs(vector<ll> &re,const vector<ll> &inv,int n){
    re.resize(n+1); re[0]=1;
    rep(i,n)re[i+1]=re[i]*inv[i+1]%MOD;
  }
public:
  Doralion(int n){
    Modinvs(inv,n);
    Facts(fact,n);
    Factinvs(finv,inv,n);
  }
} doralion(212345);

ll solve(const vector<int> &a){
  int n=a.size();
  vv<int> wall(3*n);
  rep(i,n) wall[a[i]+i+1].pb(i);
  reps(i,n+1,3*n) if(wall[i].size()){
    return 0;
  }
  stack<int> st;
  rep(i,n+1){
    reverse(all(wall[i]));
    for(int x:wall[i]){
      if(st.empty() || st.top()!=x) return 0;
      st.pop();
    }
    st.push(i);
  }
  vector<ll> dp(n+1,1);
  vector<ll> sz(n+1,0);
  rep(i,n+1){
    //cout<<i<<":"<<endl;
    int cnt=0;
    for(int x:wall[i]){
      ++cnt;
      sz[i]+=sz[x];
      (dp[i]*=dp[x]*comb(sz[i]-1,sz[x]-1)%MOD)%=MOD;
      //cout<<"c"<<pii(sz[i]-1,sz[x]-1)<<endl;
    }
    ++sz[i];
  }
  //cout<<dp<<sz;
  return dp[n];
}

ll bf(const vector<int> a){
  ll re=0;
  int n=a.size();
  vector<int> s(n);
  iota(all(s),0);
  do{
    auto v=s; v.pb(n);
    int f=0;
    rep(i,n){
      rep(j,a[i]+1) if(v[i]<v[i+j]) {f=1;break;}
      if(i+a[i]+1>n || v[i]>v[i+a[i]+1]) f=1;
      if(f) break;
    }
    if(!f) ++re;
    //if(!f) cout<<a<<v;
  }while(next_permutation(all(s)));
  return re%MOD;
}

int main(){
  // srand(time(0));
  // const int N=7;
  // rep(hoge,10000){
  //   vector<int> a(N);
  //   rep(i,N) a[i]=rand()%(N-i);
  //   int ans=bf(a);
  //   int res=solve(a);
  //   if(ans!=res){
  //     cout<<pii(ans,res)<<endl;
  //     cout<<a;
  //   }
  // }
  //ios_base::sync_with_stdio(false);
  //cout<<fixed<<setprecision(0);
  int T;
  scanf("%d",&T);
  while(T--){
    int n;
    scanf("%d",&n);
    vector<int> a(n);
    rep(i,n) scanf("%d",&a[i]);
    printf("%lld\n",solve(a));
  }
  return 0;
}
