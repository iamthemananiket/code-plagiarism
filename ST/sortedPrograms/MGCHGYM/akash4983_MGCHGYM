#include <cstdio>
#include <cmath>
#include <iostream>
#include <set>
#include <algorithm>
#include <vector>
#include <map>
#include <cassert>
#include <string>
#include <cstring>
#include <queue>

using namespace std;

#define rep(i,a,b) for(int i = a; i < b; i++)
#define S(x) scanf("%d",&x)
#define S2(x,y) scanf("%d%d",&x,&y)
#define P(x) printf("%d\n",x)
#define all(v) v.begin(),v.end()
#define FF first
#define SS second

typedef long long int LL;
typedef pair<int, int > pii;
typedef vector<int > vi;

const int N = 100001;
const int K = 10;

int w[N];
char weightIndex[N];
int W[K];
bool dp[N];
bool dp1[N];

int CP[K];
bool dpCopy[N];

int ones[N];
int vis[N];

// Treap

struct node {
  int heapValue, value;
  int size;
  int cnt[K];
  bool reverse;
  struct node *l, *r;
};

typedef struct node* pnode;

int size(pnode t) {
  return t ? t->size : 0;
}

void lazyPush(pnode t) {
  if(!t || !t->reverse) return;

  pnode tmp = t->l;
  if(t->l) t->l->reverse ^= 1;
  if(t->r) t->r->reverse ^= 1;
  t->reverse = 0;
  t->l = t->r;
  t->r = tmp;
}

void updateValues(pnode t) {
  if(!t) return;

  t->size = size(t->l) + 1 + size(t->r);
  lazyPush(t);
  rep(i,0,K) {
    t->cnt[i] = (t->l ? t->l->cnt[i] : 0) + (t->r ? t->r->cnt[i] : 0);
  }
  t->cnt[weightIndex[t->value]]++;

}

void split(pnode t, pnode &l, pnode &r, int pos, int small) {
  if(!t) {
    l = r = NULL;
    return;
  }
  lazyPush(t);
  int currentPos = small + size(t->l) + 1;
  if(currentPos <= pos) {
    l = t;
    split(t->r, t->r, r, pos, currentPos);
  } else {
    r = t;
    split(t->l, l, t->l, pos, small);
  }
  updateValues(t);
}

void merge(pnode &t, pnode l, pnode r) {
  lazyPush(l); lazyPush(r);
  if(!l) {
    t = r;
  } else if(!r) {
    t = l;
  } else {
    if(l->heapValue > r->heapValue) {
      t = l;
      merge(l->r, l->r, r);
    } else {
      t = r;
      merge(r->l, l, r->l);
    }
  }
  updateValues(t);
}

pnode newNode(int value) {
  pnode res = new node();
  res->value = value;
  res->cnt[weightIndex[value]]++;
  res->heapValue = rand();
  return res;
}

pnode t1, t2;

int _count;
void solve(int A[], int wt) {

  LL sum = 0;
  rep(i,0,K) if(A[i]) {
    if(wt % W[i] == 0 && wt / W[i] <= A[i]) {
      printf("Yes\n");
      return;
    }
    sum += A[i] * W[i];
  }

  if(sum < wt) {
    printf("No\n");
    return;
  }

  int cnt = 0, a, b;
  rep(i,0,K) if(A[i]) {
    if(!cnt) a = i;
    if(cnt == 1) b = i;
    cnt++;
  }
  if(cnt == 1) {
    if(wt % W[a] == 0 && wt / W[a] <= A[a]) {
      printf("Yes\n");
    } else {
      printf("No\n");
    }
    return;
  }

  if(cnt == 2) {
    rep(i,0,A[a]+1) {
      int x = wt - i * W[a];
      if(x < 0) break;
      if(x % W[b] == 0 && x / W[b] <= A[b]) {
        printf("Yes\n");
        return;
      }
    }
    printf("No\n");
    return;
  }

  int id = -1, mn = N;
  rep(i,0,K) if(A[i] && W[i] < wt) {
    int tmp = min(A[i], wt / W[i]);
    if(tmp < mn) {
      mn = tmp;
      id = i;
    }
  }

  rep(i,0,K) if(W[i] == 2) {
    id = i;
    break;
  }

  rep(i,0,wt+1) dp[i] = 0;
  bool flag = false;
  dp[0] = 1;

  int indx = 0;
  ones[indx++] = 0;

  int c, d;
  a = b = c = d = -1;
  rep(i,0,K) if(A[i] > 3) {
    if(W[i] == 3) a = i;
    if(W[i] == 6) b = i;
    if(W[i] == 2) c = i;
    if(W[i] == 5) d = i;
  }

  int sm = -1;

  if(a != -1 && b != -1 && c != -1 && d != -1) {
    sm = 3 * A[a] + 6 * A[b] + 2 * A[c] + 5 * A[d] - 2;
    if(wt <= sm) {
      if(wt == 1) printf("No\n");
      else printf("Yes\n");
      return;
    }

    if(sm + 2 == wt) {
      printf("Yes\n");
      return;
    }
    dp1[wt - (sm + 2)] = 1;
    A[a] = A[b] = 0;
    A[c] = A[d] = 0;

    // rep(i,0,K) if(A[i]) {
    //   id = i;
    //   break;
    // }
  } else if(a != -1 && b != -1 && c != -1) {
    sm = 3 * A[a] + 6 * A[b] + 2 * A[c] - 2;
    if(wt <= sm) {
      if(wt == 1) printf("No\n");
      else printf("Yes\n");
      return;
    }

    if(sm + 2 == wt) {
      printf("Yes\n");
      return;
    }
    A[a] = A[b] = 0;
    A[c] = 0;

    // rep(i,0,K) if(A[i]) {
    //   id = i;
    //   break;
    // }
  }

  for(int i = K-1; i >= 0; i--) if(i != id) {
    if(W[i] > wt) continue;
    if (A[i]) {
      int tmp = indx;
      _count++;
      rep(j,0,indx) {
        int x = ones[j];
        int y = x;
        y += W[i];
        int cc = 0;
        while(vis[y] != _count && y <= wt) {
          cc++;
          if(cc > A[i]) break;
          vis[y] = _count;
          if(!dp[y]) {
            dp[y] = 1;
            if(sm != -1 && ((wt-y) == sm + 2 || (((wt - y) <= sm) && (wt-y) != 1))) {
              printf("Yes\n");
              return;
            }
            ones[tmp++] = y;
          } else {
            cc = 0;
          }
          y += W[i];
        }
        if(dp[wt]) {
          printf("Yes\n");
          return;
        }
      }
      indx = tmp;
    }
  }

  rep(i,0,A[id]+1) {
    if(i*W[id] > wt) break;
    if(dp[wt - i*W[id]]) {
      printf("Yes\n");
      return;
    }
  }

  printf("No\n");
}

int main() {
  srand(time(NULL));

  int n,q;
  S2(n,q);
  pnode head = NULL;

  rep(i,0,N) {
    weightIndex[i] = -1;
  }

  int idx = 0;

  rep(i,1,n+1) {
    S(w[i]);
    if(weightIndex[w[i]] == -1) {
      W[idx] = w[i];
      weightIndex[w[i]] = idx++;
    }
    merge(head, head, newNode(w[i]));
  }

  while(q--) {
    int type;
    S(type);
    if(type == 1) {
      int id, val;
      S2(id, val);
      if(weightIndex[val] == -1) {
        W[idx] = val;
        weightIndex[val] = idx++;
      }
      t1 = t2 = NULL;
      split(head, head, t1, id-1, 0);
      split(t1, t1, t2, 1, 0);
      merge(head, head, newNode(val));
      free(t1);
      merge(head, head, t2);
    } else if(type == 2) {
      int l,r;
      S2(l,r);
      t1 = t2 = NULL;
      split(head, head, t1, l-1, 0);
      split(t1, t1, t2, r-l+1, 0);
      if(t1) t1->reverse ^= 1;
      merge(head, head, t1);
      merge(head, head, t2);
    } else {
      int l,r,wt;
      scanf("%d%d%d",&l,&r,&wt);
      t1 = t2 = NULL;
      split(head, head, t1, l-1, 0);
      split(t1, t1, t2, r-l+1, 0);
      assert(t1);
      solve(t1->cnt, wt);
      merge(head, head, t1);
      merge(head, head, t2);
    }
  }

  return 0;
}