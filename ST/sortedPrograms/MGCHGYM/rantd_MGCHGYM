#include <bits/stdc++.h>
using namespace std;

#define repu(i, a, b) for (int i = (a); i < (b); ++i)
#define repd(i, a, b) for (int i = (a); i > (b); --i)
#define mem(a, x) memset(a, x, sizeof(a))
#define all(a) a.begin(), a.end()
#define uni(a) a.erase(unique(all(a)), a.end())

typedef long long ll;
const int MOD = 1000000007;

template<class T, class U> inline T tmin(T a, U b) {return (a < b) ? a : b;}
template<class T, class U> inline T tmax(T a, U b) {return (a > b) ? a : b;}
template<class T, class U> inline void amax(T &a, U b) {if (b > a) a = b;}
template<class T, class U> inline void amin(T &a, U b) {if (b < a) a = b;}
template<class T> inline T tabs(T a) {return (a > 0) ? a : -a;}
template<class T> T gcd(T a, T b) {while (b != 0) {T c = a; a = b; b = c % b;} return a;}

typedef pair<int, int> P;
#define X first
#define Y second

// Treap
struct node {
    int prior, cnt, val;
    bool rev;
    node *l, *r;
    node(int t = 0) : l(NULL), r(NULL), cnt(1), val(t), rev(false) {
        prior = ((rand()) << 15) + rand();
    }
};

typedef node * pnode;
pnode root, t[4];

inline int cnt(pnode t) {
    return t ? t->cnt : 0;
}

void update(pnode t) {
	if (t->rev) {
		if (t->l) t->l->rev ^= 1;
		if (t->r) t->r->rev ^= 1;
		swap(t->l, t->r);
		t->rev = 0;
	}
    t->cnt = cnt(t->l) + 1 + cnt(t->r);
}

// split [l, r] : split(root, l - 1), split(root, r - l + 1)
void split(pnode t, int key, pnode &l, pnode &r, int add = 0) {
    if (!t) return void(l = r = NULL);
    update(t);
    int cur_key = add + cnt(t->l);
    if (key <= cur_key) split(t->l, key, l, t->l, add), r = t;
    else split(t->r, key, t->r, r, add + 1 + cnt(t->l)), l = t;
    update(t);
}

void merge(pnode &t, pnode l, pnode r) {
    if (l) update(l);
    if (r) update(r);
    if(!l || !r) t = l ? l : r;
    else if (l->prior > r->prior) merge(l->r, l->r, r), t = l;
    else merge(r->l, l, r->l), t = r;
    update(t);
}

void access(pnode t, vector<int> &p) {
    if (t->rev) {
		if (t->l) t->l->rev ^= 1;
		if (t->r) t->r->rev ^= 1;
		swap(t->l, t->r);
		t->rev = 0;
	}
    if (t->l) access(t->l, p);
    p.push_back(t->val);
    if (t->r) access(t->r, p);
}

bool dfs(int cur, vector<P> &tt, ll wei, int W) {
	//printf("dfs: cur = %d, wei = %lld, W = %d, tt.size() = %d\n", cur, wei, W, tt.size());
	if (wei == W) return true;
	if (wei > W || cur == tt.size()) return false;
	ll tot = wei;
	repu(i, cur, tt.size()) {
		tot += tt[i].X * 1LL * tt[i].Y;
	}
	if (tot < W) return false;
	if (cur < tt.size() && wei + tt[cur].X > W) return false;
	repu(i, 0, tt[cur].Y + 1) {
		if (dfs(cur + 1, tt, wei + i * 1LL * tt[cur].X, W)) return true;
	}
	return false;
}

bool solve(int w, vector<int> &p) {
	sort(all(p));
	vector<P> tt;
	int cnt = 1;
	repu(i, 1, p.size()) {
		if (p[i] != p[i - 1]) {
			tt.push_back({p[i - 1], cnt});
			cnt = 1;
		}
		else cnt++;
	}
	tt.push_back({p.back(), cnt});
	return dfs(0, tt, 0, w);
}

int main(int argc, char *argv[]) {
	ios_base::sync_with_stdio(false);
	
	int n, q, w, id, l, r, x;
	vector<int> a;
	
	cin >> n >> q;
	
	repu(i, 0, n) {
		cin >> w;
		merge(root, root, new node(w));
	}
	
	repu(i, 0, q) {
		cin >> id;
		if (id == 1) {
			cin >> l >> x;
			split(root, l - 1, t[0], t[1]);
			split(t[1], 1, t[2], t[3]);
			t[2]->val = x;
			merge(t[1], t[2], t[3]);
			merge(root, t[0], t[1]);
		}
		else if (id == 2) {
			cin >> l >> r;
			split(root, l - 1, t[0], t[1]);
			split(t[1], r - l + 1, t[2], t[3]);
			t[2]->rev ^= 1;
			merge(t[1], t[2], t[3]);
			merge(root, t[0], t[1]);
		}
		else {
			a.clear();
			cin >> l >> r >> w;
			split(root, l - 1, t[0], t[1]);
			split(t[1], r - l + 1, t[2], t[3]);
			access(t[2], a);
			merge(t[1], t[2], t[3]);
			merge(root, t[0], t[1]);
			//repu(i, 0, a.size()) printf("%d%c", a[i], i == a.size() - 1 ? '\n' : ' ');
			printf("%s\n", solve(w, a) ? "Yes" : "No");
		}
	}
	
	return 0;
}
