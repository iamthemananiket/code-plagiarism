#include <bits/stdc++.h>

#define all(a) (a).begin(), (a).end()
#define sz(a) (int)(a).size()
#define mp make_pair
#define pb push_back
 
using namespace std;

typedef long long ll;

vector<vector<vector<int> > > dp;
int n;

bool is(int pos, int mask, int val)
{
    for (int x : dp[pos][mask]) {
        if (x == val) {
            return true;
        }
    }
    return false;
}

bool bit(int mask, int pos)
{
    return (mask >> pos) & 1;
}

int main()
{
 
    int tt;
    scanf("%d", &tt);
    
    while (tt--) {
        scanf("%d", &n);
        vector<int> a(n), b(n);
        for (int i = 0; i < n; ++i) {
            scanf("%d", &b[i]);
        }
        for (int i = 0; i < n; ++i) {
            scanf("%d", &a[i]);
        }
        if (n == 1) {
            printf("%d\n", a[0] + b[0]);
            continue;
        }
        dp.resize(n);
        for (int i = 0; i < n; ++i) {
            dp[i].resize(4);
            for (int mask = 0; mask < 4; ++mask) {
                dp[i][mask].assign(4, -1);
            }
        }
        dp[n - 1][0][0] = a[n - 1];
        dp[n - 1][1][0] = a[n - 1] + b[n - 2];
        dp[n - 1][2][0] = a[n - 1] + b[n - 1];
        dp[n - 1][3][0] = a[n - 1] + b[n - 1] + b[n - 2];
        for (int i = n - 2; i >= 0; --i) {
            for (int mask = 0; mask < 4; ++mask) {
                int pos = 0;
                if (i == 0 && bit(mask, 0)) {
                    continue;
                }
                for (int take = 0; take < 8; ++take) {
                    if (bit(mask, 0) && !bit(take, 0)) {
                        continue;
                    }
                    if (bit(take, 0) && !bit(mask, 0)) {
                        continue;
                    }
                    if (bit(take, 1) && !bit(mask, 1)) {
                        continue;
                    }
                    int val = a[i];
                    for (int j = 0; j < 3; ++j) {
                        if (bit(take, j)) {
                            val += b[i - 1 + j];
                        }
                    }
                    int nmask = 0;
                    if (bit(mask, 1) && !bit(take, 1)) {
                        nmask |= 1;
                    }
                    if (!bit(take, 2)) {
                        nmask |= 2;
                    }
                    if (is(i + 1, nmask, val)) {
                        dp[i][mask][pos++] = val;
                    }
                }
            }
        }
        int ans = -1;
        for (int pos = 0; pos < 4; ++pos) {
            ans = max(ans, dp[0][2][pos]);
        }
        printf("%d\n", ans);
    }

}