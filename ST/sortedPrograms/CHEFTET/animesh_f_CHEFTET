#include "bits/stdc++.h"
using namespace std;
const int N = 1e4 + 4;

int t, n, a[N], b[N];
int target;
int dp[N][3][3];

inline bool solve(int pos,  int uske_bhi_pehle, int pichla){
    if(pos > n){
      if(pichla > 0) return 0; 
      int val = a[pos - 1] + ((pichla == 0) ? b[pos - 1] : 0) + ((uske_bhi_pehle == 1) ? b[pos - 2] : 0);
      return (val == target);
    }
    if(dp[pos][uske_bhi_pehle + 1][pichla + 1] != -1) 
      return dp[pos][uske_bhi_pehle + 1][pichla + 1];
    int &res = dp[pos][uske_bhi_pehle + 1][pichla + 1];
    res = 0;
    int prev_val = a[pos - 1] + ((pichla == 0) ? b[pos - 1] : 0) + ((uske_bhi_pehle == 1) ? b[pos - 2] : 0);
    int cur_val  = a[pos] + ((pichla == 1) ? b[pos - 1] : 0);
    if(prev_val == target){
      res |= solve(pos + 1, pichla, 0);
      res |= solve(pos + 1, pichla, 1);
    }
    else if(prev_val + b[pos] == target){
       res |= solve(pos + 1, pichla, -1);
    }
    return res;
}

int main(){
  scanf("%d", &t);
  while(t--){
    scanf("%d", &n);
    long long sum = 0;
    for(int i = 1 ; i <= n ; i++){
      scanf("%d", b + i);
      sum += b[i];
    }
    for(int i = 1 ; i <= n ; i++){
      scanf("%d", a + i);
      sum += a[i];
    }
    if(sum % n){
      printf("-1\n");
      continue;
    }
    target = (sum / n);
    if(n == 1){
      printf("%d\n", target);
      continue;
    }
    memset(dp, -1, sizeof dp);
    bool ans = false;
    if(a[1] == target){
      ans |= solve(3, 1, 0);
      ans |= solve(3, 1, 1);
    }
    else if(a[1] + b[2] == target){
      ans |= solve(3 , 1 , -1); 
    }
    else if(a[1] + b[1] == target){
       ans |= solve(3, 0, 0);
       ans |= solve(3, 0, 1);
    }
    else if(a[1] + b[1] + b[2] == target){
      ans |= solve(3, 0, -1);
    }
    if(ans) printf("%d\n", target);
    else printf("-1\n");
  }
}