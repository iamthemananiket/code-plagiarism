#include <cstdio>
#include <cstdlib>
#include <cstring>
#include <cmath>
#include <cassert>
#include <iostream>
#include <sstream>
#include <string>
#include <vector>
#include <queue>
#include <deque>
#include <set>
#include <map>
#include <utility>
#include <numeric>
#include <algorithm>
#include <bitset>
#include <complex>
#include <unordered_set>
#include <unordered_map>

using namespace std;

typedef unsigned uint;
typedef long long Int;
typedef vector<int> vint;
typedef pair<int,int> pint;
#define mp make_pair

template<typename T> void pv(T a, T b) { for (T i = a; i != b; ++i) cout << *i << " "; cout << endl; }
template<typename T> void chmin(T &t, const T &f) { if (t > f) t = f; }
template<typename T> void chmax(T &t, const T &f) { if (t < f) t = f; }
int in() { int x; scanf("%d", &x); return x; }

uint xrand() {
	static uint x = 314159265, y = 358979323, z = 846264338, w = 327950288;
	uint t = x ^ x << 11; x = y; y = z; z = w; return w = w ^ w >> 19 ^ t ^ t >> 8;
}

int ansLen;
pint ans[200010];

char BOARD[20][20] = {
"..o..x..o",
"xoooxxxoo",
"..o..x..o",
"xoooxxxoo",
"..o..x..o",
"xoooxxxoo",
"..o..x..o",
"xoooxxxo.",
"..o..x..o",
};
const int NUM_KOUS = 13;
pint KOU[][20] = {
	{ mp(0, 1), mp(4, 1), mp(8, 1), mp(0, 3), mp(2, 3), mp(4, 3), mp(6, 3), mp(8, 3), mp(0, 7), mp(2, 7), mp(4, 7), mp(6, 7), mp(8, 7) }, 
	{ mp(0, 0), mp(4, 0), mp(8, 0), mp(0, 4), mp(2, 4), mp(4, 4), mp(6, 4), mp(8, 4), mp(0, 6), mp(2, 6), mp(4, 6), mp(6, 6), mp(8, 6) }, 
};

int psLen[3];
pint ps[3][110];

int main() {
	for (int k = 0; k < NUM_KOUS; ++k) {
		const int kk = xrand() % (k + 1);
		for (int s = 0; s < 2; ++s) {
			swap(KOU[s][kk], KOU[s][k]);
		}
	}
	
	for (int x = 0; x < 9; ++x) for (int y = 0; y < 9; ++y) {
		const int s = string("xo.").find(BOARD[x][y]);
		ps[s][psLen[s]++] = mp(x, y);
	}
	for (int i = 0; i < psLen[0] || i < psLen[1]; ++i) {
		for (int s = 0; s < 2; ++s) {
			ans[ansLen++] = (i < psLen[s]) ? ps[s][i] : mp(-1, -1);
		}
	}
	int turn = 0;
	int gray = 0;
	for (int p = 1; p < 1 << NUM_KOUS; ++p) {
		const int pos = __builtin_ctz(p);
		const int s = (gray >> pos) & 1;
		if (turn != s) {
			ans[ansLen++] = mp(-1, -1);
		}
		ans[ansLen++] = KOU[s][pos];
		turn = s ^ 1;
		gray ^= 1 << pos;
	}
	
	int n = in();
	assert(n <= ansLen);
	for (int i = 0; i < n; ++i) {
		printf("%d %d\n", ans[i].first + 1, ans[i].second + 1);
	}
	
	return 0;
}

