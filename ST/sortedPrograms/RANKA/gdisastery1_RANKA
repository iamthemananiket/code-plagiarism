#include <cstdio>
#include <cstring>
#include <cmath>
#include <cassert>
#include <iostream>
#include <vector>
#include <set>
#include <map>
#include <queue>
#include <stack>
#include <string>
#include <algorithm>
using namespace std;
#define SZ(x) ( (int) (x).size() )
#define dbg(x) cerr << #x << " = " << x << endl;
#define mp make_pair
#define pb push_back
#define fi first
#define se second
typedef long long ll;
typedef pair<int, int> pii;
// const int INF = 1e9;
// const int MAX_N = ;
const int M = 15;

string S[9] = {
  "010101010",
  "020202020",
  "222222222",
  "020202020",
  "010101010",
  "111111111",
  "010101010",
  "020202020",
  "222222222",
};

pii find_pos(int i, int b){
  int row = (i / 5) * 3;
  int col = (i % 5) * 2;
  if(b == 0){ // 1
    if(row != 3)
      row ++;
  } else { // 2
    if(row == 3)
      row ++;
  }
  return mp(row, col);
}

#define b(x, i) (((x)>>(i)) & 1)

int good(int x){
  for(int i = 0; i + 1 < 5; i++)
    if(b(x, i) == 1 && b(x, i + 1) == 1)
      return 0;
  int c = 0;
  for(int i = 0; i < 10; i++)
    c += b(x, i) == 0;
  if(c == 10)
    return 0;
  c = 0;
  for(int i = 5; i < 15; i++)
    c += b(x, i) == 1;
  if(c == 10)
    return 0;
  c = 0;
  for(int i = 10; i < 15; i++)
    c += b(x, i) == 0;
  if(c == 5)
    return 0;
  return 1;
}

int N;
int vis[1 << M];
int path[1 << M], m;
int last;

int find_path(int n){
  path[m++] = n;
  vis[n] ++;
  for(int i = 0; i < M; i++)
    if(good(n ^ (1 << i)) && !vis[n ^ (1 << i)])
      return 1 + find_path(n ^ (1 << i));
  return 0;
}

int output(int i, int j){
  printf("%d %d\n", i + 1, j + 1);
  return --N == 0;
}

int place_move(int i, int j, int player, int set_it = 1){
  if(player == last)
    if(output(-1, -1))
      return 1;
  last = player;

  if(set_it){
    S[i][j] = '1' + player;
    if(player == 0){
      if(i != 3)
	S[i - 1][j] = '0';
      else
	S[i + 1][j] = '0';
    } else {
      if(i == 4)
	S[i - 1][j] = '0';
      else
	S[i + 1][j] = '0';
    }
  }
  return output(i, j);
}

// #define DEBUG

void print(){
#ifdef DEBUG
  for(int i = 0; i < 9; i++){
    for(int j = 0; j < 9; j++){
      printf("%c", S[i][j]);
    }
    puts("");
  }
  puts("***********");
#endif
}

int place_move(pii x, int player){
  return place_move(x.first, x.second, player);
}

int init(){
  for(int i = 0; i < 9; i++){
    for(int j = 0; j < 9; j++){
      int p = S[i][j] - '1';
      if(p >= 0 && place_move(i, j, p, 0))
	return 1;
    }
  }
  for(int i = 0; i < 15; i++)
    if(place_move(find_pos(i, (path[0] >> i) & 1), (path[0] >> i) & 1))
      return 1;
  return 0;
}

int process(){
  int x, j, p;
  for(int i = 1; i <= m; i++){
#ifdef DEBUG
    printf("i = %d\n", i);
#endif
    print();
    x = path[i] ^ path[i - 1];
    for(j = 0; j < M; j++)
      if((x >> j) & 1)
	break;
    p = (path[i] >> j) & 1;
    if(place_move(find_pos(j, p), p))
      return 1;
  }
  return 0;
}

int main(){
  int x = 0;
  for(int i = 0; i < 15; i += 2)
    x |= (1 << i);
  assert(good(x));
  assert(find_path(x) >= 10000);
  
  scanf("%d", &N);
#ifndef ONLINE_JUDGE
  printf("%d\n", N);
#endif
  if(!init()){
    assert(process());
  }
  return 0;
}
