#include <bits/stdc++.h>
#define rep(i,x,y) for (int i = (x); i<=(y); i++)
#define repe(i,x,y) for (int i = (x); i < (y);i++)
#define drep(i,x,y) for (int i = (x); i >= (y); i--)
#define mp make_pair
#define pb push_back
#define MAX(a,b) (((a)>(b))?(a):(b))
#define MIN(a,b) (((a)<(b))?(a):(b))
#define MAXN 100100
#define sf(n) scanf("%Lf",&n)
#define prf(n) printf("%Lf",n)
#define	s(n) scanf("%d",&n)
#define sl(n) scanf("%lld",&n)
#define pr(n) printf("%d",n)
#define prl(n) printf("%lld",n)
#define endc printf("\n")
#define psp printf(" ")

using namespace std;
typedef long long ll;
typedef long double ld;
typedef pair<int,int> pii;

ll dp[300][300][300];
ll A[300];

void solve() {
	int n; ll m; int K; int D; s(n); s(K); s(D); sl(m);
	rep(i,1,n) sl(A[i]);
	repe(i,0,300) repe(j,0,300) { dp[i][j][n+1] = 0; if (i != 0) dp[i][j][n+1] = -1e17; }
	drep(i,n,1) {
		//cout<<i<<" ***** "<<endl;
		rep(k,0,K) {
			rep(d,1,n) {
				if (d <= D) { dp[k][d][i] = dp[k][d+1][i+1] + m*A[i]; }
				else { dp[k][d][i] = dp[k][d][i+1] + A[i]; }
				if (k > 0) { dp[k][d][i] = MAX(dp[k][d][i], dp[k-1][1][i+1]); }
				//cout<<k<<" , "<<d<<" : "<<dp[k][d][i]<<endl;
			}
		}
	}
	prl(dp[K][D+1][1]); endc;
}

int main() {
	int t; s(t); while (t--) solve();
}
