#include<complex>
#include<cstdio>
#include<iostream>
#include<vector>
#include<algorithm>
#include<string>
#include<cstring>
using namespace std;

typedef long long LL;
typedef vector<int> VI;

#define REP(i,n) for(int i=0, i##_len=(n); i<i##_len; ++i)
#define EACH(i,c) for(__typeof((c).begin()) i=(c).begin(),i##_end=(c).end();i!=i##_end;++i)
#define eprintf(s...)  fprintf(stderr, s)

template<class T> inline void amin(T &x, const T &y) { if (y<x) x=y; }
template<class T> inline void amax(T &x, const T &y) { if (x<y) x=y; }

typedef LL Double;
// const Double EPS = 1e-8; // 0 ~~ [-EPS, EPS]
const LL EPS = 0;
//const Double INF = 1e12;
const Double PI = acos((Double)-1);

typedef complex<Double> Point;
const Point I(0, 1);

// abs(P a) ::= sqrt(a.x^2 + a.y^2);
// norm(P a) ::= a.x^2 + a.y^2;
// Point polar(rho, theta=0)

int sign(Double x) {
    if (x < -EPS) return -1;
    if (EPS < x) return 1;
    return 0;
}

namespace std {
    bool operator<(const Point &x, const Point &y) {
	return real(x) != real(y)? real(x) < real(y): imag(x) < imag(y);
    }
}

Double cross(const Point &x, const Point &y) {
    return imag(conj(x)*y);
}
Double dot(const Point &x, const Point &y) {
    return real(conj(x)*y);
}
Point normal(const Point &a) { return a / abs(a); }

int ccw(Point a, Point b, Point c) {
    b-=a; c-=a;
    if (cross(b, c) > EPS) return 1; // counter clockwise
    if (cross(b, c) < -EPS) return -1; // clockwise
    if (dot(b, c) < -EPS) return 2; // c--a--b on line
    if (norm(b) < norm(c)) return -2; // a--b--c on line
    return 0;
}



int N, M, Q, K;
const int BASE = 10011;
const int MAX = BASE * 2 + 1;
VI bi[MAX];
VI bx;
Point bla[3011];
Point red[101];
int contain[101][101][101];
int con(int a, int b, int c) {
    if (b > c) swap(b, c);
    if (a > b) swap(a, b);
    if (b > c) swap(b, c);
    return contain[a][b][c];
}

int rec(int a, int b, int c) {
    if (b > c) swap(b, c);
    if (a > b) swap(a, b);
    if (b > c) swap(b, c);
    int &cnt = contain[a][b][c];
    if (cnt != -1) return cnt;

    REP (d, N) {
	if (a != d && b != d && c != d) {
	    int t = ccw(red[a], red[b], red[d]);
	    if (t == ccw(red[b], red[c], red[d]) && t == ccw(red[c], red[a], red[d])) {
		cnt = 0;
		cnt += rec(a, b, d);
		cnt += rec(b, c, d);
		cnt += rec(c, a, d);
		return cnt;
	    }
	}
    }

    {
	Point L, C, R;
	L = R = red[a];
	amin(L, red[b]); amin(L, red[c]);
	amax(R, red[b]); amax(R, red[c]);
	if (L != red[a] && R != red[a]) C = red[a];
	if (L != red[b] && R != red[b]) C = red[b];
	if (L != red[c] && R != red[c]) C = red[c];

// 	cerr << L <<" " << C << " " << R << endl;

	cnt = 0;
	int p = lower_bound(bx.begin(), bx.end(), (int)L.real()) - bx.begin();

	if (ccw(L, R, C) == 1) {// ^
	    for (; p<(int)bx.size() && bx[p] < R.real(); p++) {
		bool f = false;
		for (int i=0; i<(int)bi[bx[p]].size(); i++) {
		    Point z(bx[p], bi[bx[p]][i]);
		    if (ccw(L, z, C) != 1) break;
		    if (ccw(C, z, R) != 1) break;
		    if (f || ccw(L, R, z) == 1) { f = true; cnt++; }
		}
	    }
	} else {
	    for (; p<(int)bx.size() && bx[p] < R.real(); p++) {
		bool f = false, g = false;
		for (int i=0; i<(int)bi[bx[p]].size(); i++) {
		    Point z(bx[p], bi[bx[p]][i]);
		    if (ccw(L, z, R) != 1) break;
		    if (f || ccw(L, C, z) == 1) {
			f = true;
			if (g || ccw(C, R, z) == 1) {
			    cnt++;
			    g = true;
			}
		    }
		}
	    }
	}
    }

    return cnt;
}

int ps[101];

int main() {
    scanf("%d%d", &N, &M);
    REP (i, N) {
	int x, y;
	scanf("%d%d", &x, &y);
	x += BASE; y += BASE;
	red[i] = Point(x, y);
    }
    REP (i, M) {
	int x, y;
	scanf("%d%d", &x, &y);
	x += BASE; y += BASE;
	bla[i] = Point(x, y);
	bx.push_back(x);
	bi[x].push_back(y);
    }

    sort(bx.begin(), bx.end());
    bx.erase(unique(bx.begin(), bx.end()), bx.end());
    REP (x, MAX) {
	sort(bi[x].begin(), bi[x].end());
    }

    memset(contain, -1, sizeof contain);

//    REP (c, N) REP (b, c) REP (a, b) {
//
//
//	contain[a][b][c] = cnt;
//    }
//
    scanf("%d", &Q);
    REP ($, Q) {
	scanf("%d", &K);
	REP (i, K) {
	    int a;
	    scanf("%d", &a);
	    a--;
	    ps[i] = a;
	}
//	reverse(ps.begin(), ps.end());


	int ans = 0;
	for (int i=1; i<K-1; i++) {
//	    ans += con(ps[0], ps[i], ps[i+1]);
	    ans += rec(ps[0], ps[i], ps[i+1]);
	}

	printf("%d\n", ans);
    }




    return 0;
}
