#include <bits/stdc++.h>

using namespace std;

///---------------------------------------------------
const int BUFFER_SIZE = (1 << 16);
char buffer[BUFFER_SIZE];
int position = BUFFER_SIZE;

inline char getChar()
{
    if ( position == BUFFER_SIZE )
    {
        position = 0;
        fread(buffer, BUFFER_SIZE, 1, stdin);
    }

    return buffer[position++];
}

inline int getInt()
{
    register int a = 0;
    char ch;
    int sgn = 1;

    do
    {
        ch = getChar();

    } while ( !isdigit(ch) && ch != '-' );

    if ( ch == '-' )
    {
        sgn = -1;
        ch = getChar();
    }

    do
    {
        a = (a << 3) + (a << 1) + ch - '0';
        ch = getChar();

    } while ( isdigit(ch) );

    return a * sgn;
}
///---------------------------------------------------

struct Point
{
    int x;
    int y;
    int color;

    bool operator < (const Point &P) const
    {
        if (x != P.x)
            return x < P.x;
        else
            return y < P.y;
    }
};

/**
    < 0 for counter-clockwise (trigonometric)
    = 0 for collinear
    > 0 for clockwise (anti-trigonometric)
**/
int CCW(Point A, Point B, Point P)
{
    return (P.x - A.x) * (B.y - A.y) - (P.y - A.y) * (B.x - A.x);
}

/// Points in the result will be listed in counter-clockwise order.
vector<Point> convexHull(vector<Point> &Points)
{
    /// basic case
    if (Points.size() <= 3)
        return Points;

    /// sort Points after x (and after y in case of equality)
    sort(Points.begin(), Points.end());

    vector<Point> U, L; /// upper and lower hulls

    for (int i = 0; i < (int)Points.size(); ++i)
    {
        while (U.size() >= 2 && CCW(U[U.size() - 2], U[U.size() - 1], Points[i]) >= 0) ///clockwise turn
            U.pop_back();

        U.push_back(Points[i]);
    }

    for (int i = (int)Points.size() - 1; i >= 0; --i)
    {
        while (L.size() >= 2 && CCW(L[L.size() - 2], L[L.size() - 1], Points[i]) >= 0) ///clockwise turn
            L.pop_back();

        L.push_back(Points[i]);
    }

    /// Remove the last Point of each list (it's the same as the first Point of the other list).
    U.pop_back();
    L.pop_back();

    /// convex Hull = U + L
    for (int i = 0; i < (int)L.size(); ++i)
        U.push_back(L[i]);

    return U;
}

int N, M;
vector<Point> red;
vector<Point> black;

bool testPoint(const Point &P, const vector<Point> &poly)
{
    int n = poly.size();

  int i, j, polygon = 0;
  for (i = 0, j = n-1; i < n; j = i++) {
    if ( ((poly[i].y>P.y) != (poly[j].y>P.y)) &&
	 (P.x < (poly[j].x-poly[i].x) * (P.y-poly[i].y) / (poly[j].y-poly[i].y) + poly[i].x) )
       polygon = !polygon;
  }

    return polygon;
}

typedef unsigned long long ULL;

ULL query;
map<ULL, int> Map;

int area(const Point &a, const Point &b, const Point &c) {
    return (a.x * (b.y - c.y) + b.x * (c.y - a.y) + c.x * (a.y - b.y));
}

bool testSmart(const Point p, const vector<Point> &polygon) {

    N = polygon.size();
    int start = 1, last = N - 1;

    while(last - start > 1)
    {
        int mid = (start + last) >> 1;

        if(area(polygon[0], polygon[mid], p) < 0)
            last = mid;
        else
            start = mid;
    }

    int r0 = abs(area(polygon[0], polygon[start], polygon[last]));

    int r1 = abs(area(polygon[0], polygon[start], p));
    int r2 = abs(area(polygon[0], polygon[last], p));
    int r3 = abs(area(polygon[start], polygon[last], p));

    int r4 = area(polygon[0], polygon[1], p);
    int r5 = area(polygon[0], polygon[N - 1], p);

    return (r0 == (r1 + r2 + r3) && r3 != 0 && r4 != 0 && r5 != 0);
}

int main()
{
    #ifndef ONLINE_JUDGE
        freopen("data.in", "r", stdin);
    #endif // ONLINE_JUDGE

    N = getInt();
    M = getInt();

    for (int i = 1; i <= N; ++i)
    {
        Point P;
        P.x = getInt();
        P.y = getInt();
        P.color = 1;

        red.push_back(P);
    }

    for (int i = 1; i <= M; ++i)
    {
        Point P;
        P.x = getInt();
        P.y = getInt();
        P.color = 2;

        black.push_back(P);
    }

    int Q = getInt();

    while (Q--)
    {
        int number = getInt();
        vector<Point> Points;

        ULL code = number;

        vector<int> v;

        for (int i = 0; i < number; ++i)
        {
            int x = getInt();
            x--;
            v.push_back(x);
        }

        sort(v.begin(), v.end());

        for (int x : v)
        {
            Points.push_back(red[x]);
            code = code * 137 + (x + 1);
        }

        if (N == 3 && Map.count(code))
        {
            cout << Map[code] << "\n";
            continue;
        }

        vector<Point> hull = convexHull(Points);

        if (hull.size() < 3)
        {
            cout << "0\n";
            continue;
        }

        int cnt = 0;

        for (Point P : black)
            cnt += testSmart(P, hull);

        cout << cnt << "\n";

        if (N == 3)
            Map.insert({code, cnt});
    }

    return 0;
}
