#include <bits/stdc++.h>
using namespace std;

#define jjs(i, s, x) for (int i = (s); i < int(x); ++i)
#define jjl(i, x) jjs(i, 0, x)
#define ji(x) jjl(i, x)
#define jj(x) jjl(j, x)
#define jk(x) jjl(k, x)
#define jij(a, b) ji(a) jj(b)
#define jij2d(v) jij((v).size(), (v)[i].size())
#define jjdescent(i, s, e) for (int i = (s)-1; i >= int(e); --i)
#define jjrev(i, s) jjdescent(i, s, 0)
#define foreach(x, C) for (auto& x : (C))
#define INF ((int) 1e9+10)
#define LINF ((long long) 1e16)
#define pb push_back
#define mp make_pair

#define rint readInteger
template<typename T>
bool readInteger(T& x)
{
	char c, r = 0, n = 0;
	x = 0;
	while (true)
	{
		c = getchar();
		if (c < 0 && !r)
			return 0;
		else if (c == '-' && !r)
			n = 1;
		else if (c >= '0' && c <= '9')
			x = x * 10 + c - '0', r = 1;
		else if (r)
			break;
	}
	if (n)
		x = -x;
	return 1;
}

template<typename T>
vector<T> readIntegral(int n)
{
	vector<T> ret(n);
	for (int i = 0; i < n; i++)
		readInteger(ret[i]);
	return ret;
}

auto readInts = readIntegral<int>;
auto readLongs = readIntegral<long long>;

template<typename T>
vector<vector<T>> make2d(size_t r, size_t c)
{
	return vector<vector<T>>(r, vector<T>(c));
}

template<typename T>
vector<vector<T>> make2d(size_t r, size_t c, const T& def)
{
	return vector<vector<T>>(r, vector<T>(c, def));
}

template <typename T, T MOD>
struct ModInt
{
	T value;
	ModInt() : value(0)
	{}
	ModInt(T x)
	{
		x %= MOD;
		if (x < 0)
			x += MOD;
		value = x;
	}

public:
	ModInt& operator += (ModInt x)
	{
		value += x.value;
		if (value >= MOD)
			value -= MOD;
		return *this;
	}
	ModInt& operator -= (ModInt x)
	{
		value -= x.value;
		if (value < 0)
			value += MOD;
		return *this;
	}
	ModInt& operator *= (ModInt x)
	{
		value *= x.value;
		value %= MOD;
		return *this;
	}
	ModInt& operator /= (ModInt x)
	{
		x.invert();
		return *this *= x;
	}

	ModInt operator + (ModInt x) const
	{
		ModInt o = *this;
		o += x;
		return o;
	}
	ModInt operator - (ModInt x) const
	{
		ModInt o = *this;
		o -= x;
		return o;
	}
	ModInt operator * (ModInt x) const
	{
		ModInt o = *this;
		o *= x;
		return o;
	}
	ModInt operator / (ModInt x) const
	{
		ModInt o = *this;
		o /= x;
		return o;
	}
	bool operator == (ModInt x) const
	{
		return value == x.value;
	}
	bool operator != (ModInt x) const
	{
		return !(*this == x);
	}

	ModInt operator - () const
	{
		return ModInt(0) - *this;
	}

	ModInt operator ^ (long long x) const
	{
		ModInt ret = 1 % MOD;
		ModInt mul = *this;
		while (x)
		{
			if (x & 1)
				ret *= mul;
			mul *= mul;
			x >>= 1;
		}
		return ret;
	}
	ModInt& operator ^= (long long x)
	{
		return *this = *this ^ x;
	}

private:
	void invert()
	{
		*this ^= MOD-2;
	}
public:
	friend ostream& operator << (ostream& out, const ModInt& x)
	{
		return out << x.value;
	}
	bool operator< (const ModInt& other) const
	{
		return value<other.value;
	}
};

template<typename T>
using v2d = vector<vector<T>>;

typedef ModInt<long long, 1000000007> mint;
typedef long long ll;
typedef pair<int, int> PII;
typedef vector<PII> VPII;
typedef vector<int> VI;
typedef v2d<int> VVI;
typedef vector<ll> VLL;
typedef v2d<ll> VVLL;
typedef vector<char> VCH;
typedef v2d<char> VVCH;

int M, Q;
int A[500001];
mint pi[500001];
mint ans[300001];

struct query
{
	int l, r, n, k, i;
	bool operator< (const query& other) const
	{
		return make_pair(n, k)<make_pair(other.n, other.k);
	}
	bool operator== (const query& other) const
	{
		return make_pair(n, k)==make_pair(other.n, other.k);
	}
};

mint fact[100100];
mint ifact[100100];

mint C(int n, int k)
{
	return fact[n]*ifact[n-k];
}

const int MOD=1000000007;

int main()
{
	rint(M); rint(Q);
	assert(1 <= M && M <= 500000);
	assert(1 <= Q && Q <= 300000);
	fact[0]=1;
	for(int i=1; i<100100; i++)
		fact[i]=fact[i-1]*i;
	for(int i=0; i<100100; i++)
		ifact[i]=fact[i]^(MOD-2);
    long long SA = 0;
    vector<pair<int, int>> v;
    pi[0]=1;
	for(int i=1; i<=M; i++)
	{
	    rint(A[i]);
	    pi[i]=pi[i-1]*A[i];
	    assert(1 <= A[i] && A[i] <= 100000);
	    SA += A[i];
		v.push_back({A[i], i});
	}
	assert(SA <= 3000000);
	sort(v.rbegin(), v.rend());
	vector<query> queries;
	for(int i=0; i<Q; i++)
	{
		query q;
		rint(q.l);
		rint(q.r);
		rint(q.n);
		rint(q.k);
		assert(0 <= q.l && q.l <= q.r && q.r < M);
		assert(0 <= q.n && q.n <= 100000);
		assert(1 <= q.k && q.k <= 100000);
		q.i=i;
		q.l++, q.r++;
		queries.push_back(q);
	}
	sort(queries.begin(), queries.end());
	vector<pair<int, mint>> z;
	int t=0;
	for(int i=0, j; i<Q; i=j)
	{
		for(j=i; j<Q && queries[i]==queries[j]; j++);
		int n=queries[i].n;
		int k=queries[i].k;
		if(n==0)
        {
            for(int x=i; x<j; x++)
                ans[queries[x].i]=1;
            continue;
        }
        if(n==1)
        {
            for(int x=i; x<j; x++)
                ans[queries[x].i]=pi[queries[x].r]*(pi[queries[x].l-1]^(MOD-2));
            continue;
        }
		z.clear();
		for(int x=0; x<M; x++)
		{
			if(v[x].first<1LL*(n-1)*(k-1)+n)
				break;
			z.push_back({v[x].second, C(v[x].first-(n-1)*(k-1), n)});
		}
		sort(z.begin(), z.end());
		for(int x=1; x<(int)z.size(); x++)
			z[x].second*=z[x-1].second;
        t += z.size();
		for(int x=i; x<j; x++)
		{
			int l=queries[x].l;
			int r=queries[x].r;
			int idx=queries[x].i;
			ans[idx]=ifact[n];
			auto nit=lower_bound(z.begin(), z.end(), make_pair(r+1, mint(0)));
			if(nit==z.begin())
                ans[idx]=0;
            else
            {
                auto pit=lower_bound(z.begin(), z.end(), make_pair(l, mint(0)));
                if(nit-pit!=r-l+1)
                    ans[idx]=0;
                else
                {
                    ans[idx]*=(--nit)->second;
                    if(pit!=z.begin())
                        ans[idx]*=((--pit)->second)^(MOD-2);
                }
            }
		}
	}
	for(int i=0; i<Q; i++)
		printf("%lld\n", ans[i].value);
}
