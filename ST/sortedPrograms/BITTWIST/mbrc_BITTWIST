#include <bits/stdc++.h>
#define rep(i,x,y) for (int i = (x); i<=(y); i++)
#define repe(i,x,y) for (int i = (x); i < (y);i++)
#define drep(i,x,y) for (int i = (x); i >= (y); i--)
#define mp make_pair
#define pb emplace_back
#define mt make_tuple
#define gcd __gcd
#define sf(n) scanf("%Lf",&n)
#define su(n) scanf("%u",&n);
#define pru(n) printf("%u",n);
#define prf(n) printf("%.12Lf",n)
#define	s(n) scanf("%d",&n)
#define sl(n) scanf("%lld",&n)
#define pr(n) printf("%d",n)
#define prl(n) printf("%lld",n)
#define endc printf("\n")
#define psp printf(" ")

using namespace std;
typedef long long ll;
typedef long double ld;
typedef pair<int,int> pii;

const int maxn = 1e5 + 7;
const ll md = 1e9 + 7;
const int inf = 1e9;

int depth[maxn];
int tin[maxn];
int tout[maxn];
vector<int> G[maxn];
ll A[maxn];

ll f(ll x,ll y) {
	x ^= x >> 11ll;	
	x ^= (x << 7ll) & 2636928640ll;
	x ^= (x << 15ll) & 4022730752ll;
	x ^= (x >> 18ll);
	return (1812433253ll * (x ^ (x >> 30ll)) + y) & 4294967295ll;
}

int clk;

void dfs(int x,int pi,int d) {
	depth[x] = d; 
	clk++; tin[x] = clk;

	for (int y : G[x]) {
		if (y == pi) continue;
		dfs(y,x,d+1);
	}
	
	clk++; tout[x] = clk;
}

map<pii,ll> M;

vector<int> dv[maxn];

inline bool ordsort(int x,int y) {
	return tin[x] < tin[y];
}

void solve() {
	M.clear();	

	int n,q;
	s(n); s(q);

	clk = 0;
	
	rep(i,1,n) {
		sl(A[i]);
		tin[i] = -1; tout[i] = -1;
		dv[i].clear();
		G[i].clear();
	}

	rep(i,2,n) {
		int x;
		s(x);
		G[x].pb(i); G[i].pb(x);
	}

	rep(i,1,n) {
		sort(G[i].begin(),G[i].end());
	}
	
	dfs(1,-1,1);

	rep(i,1,n) {
		dv[depth[i]].pb(i);
	}

	rep(i,1,n) {
		sort(dv[i].begin(),dv[i].end(),ordsort);
	}

	while (q--) {

		int x,d; s(x); s(d);

		int k = depth[x] + d;

		int l = 0, r = dv[k].size()-1;


		while (l < r) {
			
			int mid = (l+r-1)/2;
			int v = dv[k][mid];

			if (tin[v] < tin[x]) {
				l = mid+1;
			} else if (tout[v] > tout[x]) {
				r = mid-1;
			} else {
				r = mid;
			}
		}

		int lft = dv[k][l]; int pos = l; l = 0, r = dv[k].size() - 1;

		while (l < r) {
			
			int mid = (l+r+1)/2;
			int v = dv[k][mid];

			if (tin[v] < tin[x]) {
				l = mid+1;
			} else if (tout[v] > tout[x]) {
				r = mid-1;
			} else {
				l = mid;
			}
		}

		int rgt = dv[k][l]; auto p = mp(lft,rgt);

		if (M.count(p) > 0) {
			prl(M[p]); endc; continue;
		}
		
		int z = lft;

		assert(l <= r);
		
		ll ans = A[z]; 

		while (true) {
			if (pos == dv[k].size()-1) break;
			pos++; int v = dv[k][pos];
			if (tin[v] > tout[x]) break;

			//cout<<pos<<" : "<<v<<endl;

			ans = f(ans,A[v]);
		}

		M[p] = ans;
		prl(M[p]); endc;
	}
	
}

int main() {
	int t; 	s(t); 
	while (t--) solve();
}
