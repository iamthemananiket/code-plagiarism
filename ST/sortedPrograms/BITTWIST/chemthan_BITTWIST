#include <bits/stdc++.h>
using namespace std;
 
#define ms(s, n) memset(s, n, sizeof(s))
#define FOR(i, a, b) for (int i = (a); i < (b); i++)
#define FORd(i, a, b) for (int i = (a) - 1; i >= (b); i--)
#define FORall(it, a) for (__typeof((a).begin()) it = (a).begin(); it != (a).end(); it++)
#define sz(a) int((a).size())
#define present(t, x) (t.find(x) != t.end())
#define all(a) (a).begin(), (a).end()
#define uni(a) (a).erase(unique(all(a)), (a).end())
#define pb push_back
#define pf push_front
#define mp make_pair
#define fi first
#define se second
#define prec(n) fixed<<setprecision(n)
#define bit(n, i) (((n) >> (i)) & 1)
#define bitcount(n) __builtin_popcountll(n)
typedef long long ll;
typedef unsigned long long ull;
typedef long double ld;
typedef pair<int, int> pi;
typedef vector<int> vi;
typedef vector<pi> vii;
const int MOD = (int) 1e9 + 7;
const int INF = (int) 1e9;
const ll LINF = (ll) 1e18;
const ld PI = acos((ld) -1);
const ld EPS = 1e-9;
inline ll gcd(ll a, ll b) {ll r; while (b) {r = a % b; a = b; b = r;} return a;}
inline ll lcm(ll a, ll b) {return a / gcd(a, b) * b;}
inline ll fpow(ll n, ll k, int p = MOD) {ll r = 1; for (; k; k >>= 1) {if (k & 1) r = r * n % p; n = n * n % p;} return r;}
template<class T> inline int chkmin(T& a, const T& val) {return a > val ? a = val, 1 : 0;}
template<class T> inline int chkmax(T& a, const T& val) {return a < val ? a = val, 1 : 0;}
inline ll isqrt(ll k) {ll r = sqrt(k) + 1; while (r * r > k) r--; return r;}
inline ll icbrt(ll k) {ll r = cbrt(k) + 1; while (r * r * r > k) r--; return r;}
inline void addmod(int& a, int val, int p = MOD) {if ((a = (a + val)) >= p) a -= p;}
inline void submod(int& a, int val, int p = MOD) {if ((a = (a - val)) < 0) a += p;}
inline int mult(int a, int b, int p = MOD) {return (ll) a * b % p;}
inline int inv(int a, int p = MOD) {return fpow(a, p - 2, p);}
 
const int maxn = 100010;
const int maxe = 18;
int n, q;
ll a[maxn];
vi adj[maxn];
int lev[maxn];
int dep[maxn];
int chd[maxn][maxe];
int tin[maxn];
int tou[maxn];
int tms;
struct pshash {
    int operator() (const pi a) const {
        return (a.fi << 16) + a.se;
    }
};
unordered_map<pi, ll, pshash> tb;
vi g[maxn];
 
ll bitTwister(ll x, ll y) {
	x ^= x >> 11;
	x ^= (x << 7) & 2636928640LL;
	x ^= (x << 15) & 4022730752LL;
	x ^= (x >> 18);
	return (1812433253LL * (x ^ (x >> 30)) + y) & 4294967295LL;
}
 
void dfs(int u) {
	g[lev[u]].pb(u);
	dep[u] = lev[u];
	tin[u] = ++tms;
	FOR(i, 0, sz(adj[u])) {
		int v = adj[u][i];
		lev[v] = lev[u] + 1;
		dfs(v);
		if (dep[v] > dep[chd[u][0]]) {
			chd[u][0] = v;
		}
		chkmax(dep[u], dep[v]);
	}
	FOR(i, 1, maxe) {
		chd[u][i] = chd[chd[u][i - 1]][i - 1];
	}
	tou[u] = tms;
}
 
int isparent(int u, int v) {
	return tin[u] <= tin[v] && tou[u] >= tou[v];
}
 
int fall(int u, int k) {
	FORd(i, maxe, 0) {
		if (bit(k, i)) {
			u = chd[u][i];
		}
	}
	return u;
}
 
int geti(int k, int v) {
	int l = 0, r = sz(g[k]) - 1;
	while (l < r) {
		int m = l + r >> 1;
		if (tin[g[k][m]] < tin[v]) l = m + 1; else r = m;
	}
	return l;
}
 
int getl(int u, int k, int v) {
	int l = 0, r = v;
	while (l < r) {
		int m = l + r >> 1;
		if (!isparent(u, g[k][m])) l = m + 1; else r = m;
	}
	return l;
}
 
int getr(int u, int k, int v) {
	int l = v, r = sz(g[k]) - 1;
	while (l < r) {
		int m = l + r + 1 >> 1;
		if (isparent(u, g[k][m])) l = m; else r = m - 1;
	}
	return r;
}
 
ll query(int l, int r, int k) {
	ll res = 0;
	FOR(i, l, r + 1) {
		res = bitTwister(res, a[g[k][i]]);
	}
	return res;
}
 
void solve() {
	int T; cin>>T;
	while (T--) {
		tb.clear(); tms = 0;
		cin>>n>>q;
		FOR(i, 0, n) cin>>a[i], adj[i].clear(), g[i].clear();
		FOR(i, 0, n - 1) {
			int u; cin>>u; u--;
			adj[u].pb(i + 1);
		}
		FOR(i, 0, n) sort(all(adj[i]));
		FOR(i, 0, n + 1) FOR(j, 0, maxe) chd[i][j] = n;
		dfs(0);
		while (q--) {
			int u, k; cin>>u>>k; u--;
			int v = fall(u, k);
			if (v == n) {
				cout<<0<<"\n";
			}
			else {
				k += lev[u];
				int idx = geti(k, v);
				int x = getl(u, k, idx);
				int y = getr(u, k, idx);
				int l = g[k][x], r = g[k][y];
				if (tb.count(mp(l, r))) {
					cout<<tb[mp(l, r)]<<"\n";
					continue;
				}
				cout<<(tb[mp(l, r)] = query(x, y, k))<<"\n";
			}
		}
	}
}
 
int main() {
	ios_base::sync_with_stdio(0); cin.tie(0);
#ifdef _LOCAL_
	freopen("in.txt", "r", stdin); //freopen("out.txt", "w", stdout);
#endif
	solve();
#ifdef _LOCAL_
	//printf("\nTime elapsed: %dms", 1000 * clock() / CLOCKS_PER_SEC);
#endif
	return 0;
}