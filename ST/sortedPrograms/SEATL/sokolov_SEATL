#pragma comment(linker, "/STACK:500000000")
#define _CRT_SECURE_NO_WARNINGS
#include <algorithm>
#include <assert.h>
#include <bitset>
#include <functional>
#include <iostream>
#include <list>
#include <map>
#include <math.h>
#include <set>
#include <stack>
#include <stdio.h>
#include <stdlib.h>
#include <string>
#include <string.h>
#include <time.h>
#include <queue>
#include <utility>
#include <vector>
using namespace std;

#define y0 y0ChloeGraceMoretz
#define y1 y1ChloeGraceMoretz
#define ll long long
int nextInt() { int n; scanf("%d", &n); return n; }
ll nextLong() { ll n; scanf("%lld", &n); return n; }
const double PI = acos(-1.0);
const double EPS = 1e-9;
const int INF = (int)1e9;
const int MAX_V = (int)1e6;

set<int> positions[MAX_V + 1];
vector<set<int> > posInRows[MAX_V + 1];
vector<int> maxColumns[MAX_V + 1];
int cnt[MAX_V + 1];
int maxCntRows[MAX_V + 1];
int maxCntColumns[MAX_V + 1];

int main() {
	//freopen("in.txt", "rt", stdin);
	//freopen("out.txt", "wt", stdout);
	int t;
	scanf("%d", &t);
	while (t--) {
	//while (true) {
		int n, m;
		scanf("%d %d", &n, &m);
 
		//n = abs(rand()) % 10 + 1;
		//m = abs(rand()) % 10 + 1;
 
		vector<vector<int> > a(n, vector<int>(m));
		
		//printf("%d %d\n", n, m);
 
		for (int i = 0; i < n; ++i) {
			for (int j = 0; j < m; ++j) {
				scanf("%d", &a[i][j]);
 
				//a[i][j] = abs(rand()) % (int)1e6 + 1;
				//printf("%d ", a[i][j]);
			}
			//printf("\n");
		}
 
		/*int ans = 0;
		for (int i = 0; i < n; ++i) {
			for (int j = 0; j < m; ++j) {
				map<int,int> c;
				for (int k = 0; k < n; ++k)  {
					if (k != i) {
						++c[a[k][j]];
					}
				}
				for (int k = 0; k < m; ++k)  {
					++c[a[i][k]];
				}
				for (map<int,int>::iterator it = c.begin();
					it != c.end();
					++it) {
					ans = max((*it).second, ans);
				}
			}
		}
		printf("%d\n", ans);*/
 
		for (int i = 0; i < n; ++i) {
			for (int j = 0; j < m; ++j) {
				positions[a[i][j]].insert(j);
			}
			for (int j = 0; j < m; ++j) {
				if (!positions[a[i][j]].empty()) {
					if (positions[a[i][j]].size() > maxCntRows[a[i][j]]) {
						maxCntRows[a[i][j]] = positions[a[i][j]].size();
						posInRows[a[i][j]].clear();
						posInRows[a[i][j]].push_back(positions[a[i][j]]);
					} else if (positions[a[i][j]].size() == maxCntRows[a[i][j]]) {
						posInRows[a[i][j]].push_back(positions[a[i][j]]);
					}
					positions[a[i][j]].clear();
				}
			}
		}
		for (int j = 0; j < m; ++j) {
			for (int i = 0; i < n; ++i) {
				++cnt[a[i][j]];
			}
			for (int i = 0; i < n; ++i) {
				if (cnt[a[i][j]] > 0) {
					if (cnt[a[i][j]] > maxCntColumns[a[i][j]]) {
						maxCntColumns[a[i][j]] = cnt[a[i][j]];
						maxColumns[a[i][j]].clear();
						maxColumns[a[i][j]].push_back(j);
					} else if (cnt[a[i][j]] == maxCntColumns[a[i][j]]) {
						maxColumns[a[i][j]].push_back(j);
					}
					cnt[a[i][j]] = 0;
				}
			}
		}
		int res = 0;
		for (int i = 0; i < n; ++i) {
			for (int j = 0; j < m; ++j) {
				if (!maxColumns[a[i][j]].empty()) {
					res = max(maxCntRows[a[i][j]] + maxCntColumns[a[i][j]] - 1, res);
					//if (maxCntRows[a[i][j]] + maxCntColumns[a[i][j]] > res) {
						for (int it1 = 0; it1 < maxColumns[a[i][j]].size(); ++it1) {
							for (int it2 = 0; it2 < posInRows[a[i][j]].size(); ++it2) {
								if (posInRows[a[i][j]][it2].find(maxColumns[a[i][j]][it1]) == posInRows[a[i][j]][it2].end()) {
									res = max(maxCntRows[a[i][j]] + maxCntColumns[a[i][j]], res);
									it1 = maxColumns[a[i][j]].size();
									break;
								}
							}
						}
					//}
					maxColumns[a[i][j]].clear();
					posInRows[a[i][j]].clear();
					maxCntRows[a[i][j]] = 0;
					maxCntColumns[a[i][j]] = 0;
				}
			}
		}
 
		/*if (ans != res) {
			return 0;
		}*/

		printf("%d\n", res);
	}
	return 0;
}