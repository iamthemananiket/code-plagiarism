#include <cstdio>
#include <algorithm>
#include <vector>
#include <set>
#include <unordered_map>

using namespace std;

#define all(a) (a).begin(),(a).end()
#define pb push_back
#define sz(a) ((int)(a).size())
#define mp make_pair
#define fi first
#define se second

typedef pair<int,int> pint;
typedef long long ll;
typedef vector<int> vi;


#define MAX_V 1000001

int n,m;
vi a[MAX_V];
multiset<int> cnt[MAX_V];
unordered_map<int,int> here[MAX_V];
int there[MAX_V],val[MAX_V];
multiset<int>::iterator killMe[MAX_V];

int main()
{
	int tc;
	scanf("%d",&tc);
	while (tc--)
	{
		scanf("%d %d",&n,&m);
		for (int i=1; i<=n; i++)
		{
			a[i].resize(m+1);
			for (int j=1; j<=m; j++)
			{
				scanf("%d",&a[i][j]);
				cnt[a[i][j]].clear();
			}
		}
		for (int j=1; j<=m; j++)
		{
			for (int i=1; i<=n; i++)
			{
				int v=a[i][j];
				there[v]++;
			}
			here[j].clear();
			for (int i=1; i<=n; i++)
			{
				int v=a[i][j];
				if (there[v]>0)
				{
					here[j].insert(mp(v,there[v]));
					cnt[v].insert(there[v]);
					there[v]=0;
				}
			}
		}
		int ans=0;
		for (int i=1; i<=n; i++)
		{
			for (int j=1; j<=m; j++)
			{
				int v=a[i][j];
				int v2=here[j][v];
				val[j]=v2;
				cnt[v].erase(cnt[v].find(v2));
				killMe[j]=cnt[v].insert(v2-1);
				there[v]++;
			}
			for (int j=1; j<=m; j++)
			{
				int v=a[i][j];
				ans=max(ans,(*cnt[v].rbegin())+there[v]);
			}
			for (int j=1; j<=m; j++)
			{
				int v=a[i][j];
				int v2=val[j];
				cnt[v].erase(killMe[j]);
				cnt[v].insert(v2);
				there[v]--;
			}
		}
		printf("%d\n",ans);
	}
	return 0;
}
