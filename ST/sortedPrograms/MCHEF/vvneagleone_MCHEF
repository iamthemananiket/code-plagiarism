// Template and program by vvneagleone

#include<cstdio>
#include<cstdlib>
#include<iostream>
#include<iomanip>
#include<algorithm>
#include<cmath>
#include<string>
#include<cstring>
#include<climits>
#include<vector>
#include<utility>
#include<queue>
#include<set>
#include<map>
using namespace std;
typedef long long LL;
typedef long double LD;
#define MOD 1000000007LL

#ifdef __GNUC__
    #if ( __GNUC__ >= 4 && __GNUC_MINOR__ >= 7 && __cplusplus > 201100L )
        #include<unordered_set>
        #include<unordered_map>
    #endif
#endif // __GNUC__

#ifdef __WIN32
    #define gx getchar
    #define px putchar
    #define ps putchar(' ')
    #define pn putchar('\n')
#else
    #define gx getchar_unlocked
    #define px putchar_unlocked
    #define ps putchar_unlocked(' ')
    #define pn putchar_unlocked('\n')
#endif // __WIN32

void scan(int &n){int sign=1;n=0;char c=gx();while(c<'0'||c>'9'){if(c=='-')sign=-1;c=gx();}while(c>='0'&&c<='9')n=(n<<3)+(n<<1)+c-'0',c=gx();n=n*sign;}
void lscan(LL &n){int sign=1;n=0;char c=gx();while(c<'0'||c>'9'){if(c=='-')sign=-1;c=gx();}while(c>='0'&&c<='9')n=(n<<3)+(n<<1)+c-'0',c=gx();n=n*(LL)(sign);}
int sscan(char a[]){char c=gx();while(c==' '||c=='\n')c=gx();int i=0;while(c!='\n')a[i++]=c,c=gx();a[i]=0;return i;}
int wscan(char a[]){char c=gx();while(c==' '||c=='\n')c=gx();int i=0;while(c!='\n'&&c!=' ')a[i++]=c,c=gx();a[i]=0;return i;}
void print(int n){if(n<0){n=-n;px('-');}int i=10;char o[10];do{o[--i]=(n%10)+'0';n/=10;}while(n);do{px(o[i]);}while(++i<10);}
void lprint(LL n){if(n<0LL){n=-n;px('-');}int i=21;char o[21];do{o[--i]=(n%10LL)+'0';n/=10LL;}while(n);do{px(o[i]);}while(++i<21);}
void sprint(const char*a){const char*p=a;while(*p)px(*p++);}
LL power(LL b,LL e,LL m=MOD){LL r=1;while(e){if(e&1)r=(r*b)%m;b=(b*b)%m;e>>=1;}return r;}
LL minvp(LL n, LL m=MOD){return power(n,m-2,m);}
LL minv(LL a,LL m=MOD){LL c,t,q,x,y;c=m;x=0;y=1;while(a>1){q=a/c;t=c;c=a%c;a=t;t=x;x=y-q*x;y=t;}if(y<0)y+=m;return y;}
LL mmul(LL a,LL b,LL m=MOD){LL x=0,y=a%m;while(b){if(b&1)x=(x+y)%m;y=(y<<1)%m;b>>=1;}return x%m;}
LL absll(LL x){if(x<0)return -x;return x;}

LL n, m, k;
LL val[100004];
vector<LL> lef[100004];
vector<LL> rig[100004];
LL cost[100004];
int co[202];
int mn;
LL dp[100004][504];
LL*cur;
LL*pre;
int main() {
    LL t, i, j, l, r, c, v, sum;
    lscan(t);
    while(t--) {
        lscan(n); lscan(k); lscan(m);
        sum = 0;
        for( i = 1; i <= n; ++i ) {
            lscan(j);
            sum += j;
            val[i] = -j;
        }
        for( i = 0; i <= n+1; ++i ) {
            lef[i].clear();
            rig[i].clear();
        }
        for( i = 1; i <= m; ++i ) {
            lscan(l); lscan(r); lscan(c);
            lef[l].push_back(c);
            rig[r].push_back(c);
        }

        for( i = 0; i < 202; ++i ) co[i] = 0;
        mn = INT_MAX;

        for( i = 1; i <= n; ++i ) {
            for( j = 0; j < lef[i].size(); ++j ) {
                c = lef[i][j];
                ++co[c];
                if( co[c] == 1 && c < mn ) mn = c;
            }
            cost[i] = mn;
            for( j = 0; j < rig[i].size(); ++j ) {
                c = rig[i][j];
                --co[c];
                if( co[c] == 0 && mn == c ) {
                    l = mn+1; while( l <= 200 && co[l] == 0 ) ++l;
                    if( l > 200 ) l = INT_MAX;
                    mn = l;
                }
            }
        }

        //for( i = 1; i <= n; ++i ) cout << cost[i] << " "; cout << endl;

        for( i = 0; i <= 502; ++i ) dp[0][i] = 0;
        for( i = 1; i <= n+1; ++i ) dp[i][0] = 0;

        pre = dp[0];
        for( i = 1; i < n; ++i ) {
            cur = dp[i];
            v = val[i];
            if( v <= 0 ) continue;
            c = cost[i];
            r = min(c,k+1);
            for( j = 1; j < r; ++j ) cur[j] = pre[j];
            for( j = c; j <= k; ++j ) cur[j] = max( pre[j], pre[j-c] + v );
            pre = cur;
        }
        cur = dp[n];
        v = val[n];
        c = cost[n];
        r = min(c,k+1);
        for( j = 1; j < r; ++j ) cur[j] = pre[j];
        for( j = c; j <= k; ++j ) cur[j] = max( pre[j], pre[j-c] + v );

        /*for( i = 1; i <= n; ++i ) {
            for( j = 1; j <= k; ++j ) {
                dp[i][j] = dp[i-1][j];
                if( val[i] <= 0 ) continue;
                if( cost[i] <= j ) {
                    dp[i][j] = max( dp[i][j], dp[i-1][j-cost[i]] + val[i] );
                }
            }
        }*/
        lprint( sum + dp[n][k] ); pn;

    }

    return 0;
}
