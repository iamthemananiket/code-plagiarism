#include <bits/stdc++.h>
using namespace std;

#define REPU(i, a, b) for (int i = (a); i < (b); ++i)
#define REPD(i, a, b) for (int i = (a); i > (b); --i)
#define MEM(a, x) memset(a, x, sizeof(a))
#define ALL(a) a.begin(), a.end()
#define UNIQUE(a) a.erase(unique(ALL(a)), a.end())

typedef long long ll;
const int MOD = 1000000007;

template<class T> inline T tmin(T a, T b) { return (a < b) ? a : b; }
template<class T> inline T tmax(T a, T b) { return (a > b) ? a : b; }
template<class T> inline void amax(T &a, T b) { if (b > a) a = b; }
template<class T> inline void amin(T &a, T b) { if (b < a) a = b; }
template<class T> inline T tabs(T a) { return (a > 0) ? a : -a; }
template<class T> T gcd(T a, T b) { while (b != 0) { T c = a; a = b; b = c % b; } return a; }

const int N = 1 << 10, M = 100005;
int cnt[N];
ll dp[N][2], pw[M];

int main(int argc, char *argv[]) {
	ios_base::sync_with_stdio(false);
	
	int ntest, n, score, x, id;
	string s;
	
	pw[0] = 1;
	REPU(i, 1, M) pw[i] = (pw[i - 1] << 1) % MOD;
	
	cin >> ntest;
	while (ntest--) {
		cin >> s;
		score = 0;
		REPU(i, 0, s.size()) {
			if (s[i] == 'w') score |= 1 << i;
		}
		cin >> n;
		REPU(i, 0, n) {
			cin >> s;
			x = 0;
			REPU(j, 0, s.size()) if (s[j] == '+') {
				x |= 1 << j;
			}
			cnt[x]++;
		}
		id = 0, dp[0][0] = 1;
		REPU(it, 0, N) if (cnt[it]) {
			REPU(i, 0, N) dp[i][id ^ 1] = dp[i][id];
			REPU(i, 0, N) if (dp[i][id]) {
				(dp[i][id ^ 1] += (pw[cnt[it] - 1] - 1) * dp[i][id]) %= MOD;
				(dp[i ^ it][id ^ 1] += pw[cnt[it] - 1] * dp[i][id]) %= MOD;
			}
			id ^= 1;
		}
		printf("%lld\n", dp[score][id]);
		REPU(i, 0, N) cnt[i] = dp[i][0] = dp[i][1] = 0;
	}
	
	return 0;
}
