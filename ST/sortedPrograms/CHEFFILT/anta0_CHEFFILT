#include <string>
#include <vector>
#include <algorithm>
#include <numeric>
#include <set>
#include <map>
#include <queue>
#include <iostream>
#include <sstream>
#include <cstdio>
#include <cmath>
#include <ctime>
#include <cstring>
#include <cctype>
#include <cassert>
#include <limits>
#include <functional>
#define rep(i,n) for(int (i)=0;(i)<(int)(n);++(i))
#define rer(i,l,u) for(int (i)=(int)(l);(i)<=(int)(u);++(i))
#define reu(i,l,u) for(int (i)=(int)(l);(i)<(int)(u);++(i))
#if defined(_MSC_VER) || __cplusplus > 199711L
#define aut(r,v) auto r = (v)
#else
#define aut(r,v) __typeof(v) r = (v)
#endif
#define each(it,o) for(aut(it, (o).begin()); it != (o).end(); ++ it)
#define all(o) (o).begin(), (o).end()
#define pb(x) push_back(x)
#define mp(x,y) make_pair((x),(y))
#define mset(m,v) memset(m,v,sizeof(m))
#define INF 0x3f3f3f3f
#define INFL 0x3f3f3f3f3f3f3f3fLL
using namespace std;
typedef vector<int> vi; typedef pair<int,int> pii; typedef vector<pair<int,int> > vpii; typedef long long ll;
template<typename T, typename U> inline void amin(T &x, U y) { if(y < x) x = y; }
template<typename T, typename U> inline void amax(T &x, U y) { if(x < y) x = y; }

template<int MOD>
struct ModInt {
	static const int Mod = MOD;
	unsigned x;
	ModInt() : x(0) {}
	ModInt(signed sig) { int sigt = sig % MOD; if(sigt < 0) sigt += MOD; x = sigt; }
	ModInt(signed long long sig) { int sigt = sig % MOD; if(sigt < 0) sigt += MOD; x = sigt; }
	int get() const { return (int)x; }

	ModInt &operator+=(ModInt that) { if((x += that.x) >= MOD) x -= MOD; return *this; }
	ModInt &operator-=(ModInt that) { if((x += MOD - that.x) >= MOD) x -= MOD; return *this; }
	ModInt &operator*=(ModInt that) { x = (unsigned long long)x * that.x % MOD; return *this; }

	ModInt operator+(ModInt that) const { return ModInt(*this) += that; }
	ModInt operator-(ModInt that) const { return ModInt(*this) -= that; }
	ModInt operator*(ModInt that) const { return ModInt(*this) *= that; }
};
typedef ModInt<1000000007> mint;

int matrix_rank(vector<vector<bool> > A, vector<bool> b) {
	int n = A.size(), m = A[0].size();
	int ans = 0;
	vector<char> used(n, 0);
	rep(j, m) {
		int i = 0;
		while(i < n && (used[i] || !A[i][j]))
			i ++;
		if(i == n) continue;
		ans ++;
		used[i] = true;
		rep(k, n) if(!used[k]) {
			if(A[k][j]) {
				rep(l, m)
					A[k][l] = A[k][l] != A[i][l];
				b[k] = b[k] != b[i];
			}
		}
	}
	rep(i, n) if(!used[i] && b[i]) return -1;
	return ans;
}

int main() {
	int T;
	scanf("%d", &T);
	for(int ii = 0; ii < T; ++ ii) {
		const int K = 10;
		char S[11];
		scanf("%s", S);
		vector<bool> b(K);
		rep(i, K) b[i] = S[i] == 'w';
		int N;
		scanf("%d", &N);
		vector<vector<bool> > A(K, vector<bool>(N));
		rep(i, N) {
			char F[11];
			scanf("%s", F);
			rep(j, K)
				A[j][i] = F[j] == '+';
		}
		int rank = matrix_rank(A, b);
		mint ans = 1;
		if(rank == -1) {
			ans = 0;
		} else {
			rep(i, N - rank)
				ans *= 2;
		}
		printf("%d\n", ans.get());
	}
	return 0;
}
