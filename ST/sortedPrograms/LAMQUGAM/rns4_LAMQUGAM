#include <bits/stdc++.h>
using namespace std;
#define N 200000
#define M 210000
int vis[M], A[M];
bool Vis[M * 20];
typedef pair<int, int> pi;
map<pi, int> mp;
vector<int> v[M * 4];

void add(int x, int y, int st, int en, int id) {
    v[id].push_back(y);
    if(st == en) return ;
    int mid = (st + en) >> 1;
    if(mid >= x) add(x, y, st, mid, id * 2);
    else add(x, y, mid + 1, en, id * 2 + 1);
}

void inse(int x, int y) {
    add(x, y, 1, N, 1);
}

int calc(int x, int x1, int y, int y1, int st, int en, int id) {
    if(x > en || x1 < st) return 0;
    if(x <= st && en <= x1) {
        int a = lower_bound(v[id].begin(), v[id].end(), y) - v[id].begin();
        int b = upper_bound(v[id].begin(), v[id].end(), y1) - v[id].begin();
        return b - a;
    }
    int mid = (st + en) >> 1;
    return calc(x, x1, y, y1, st, mid, id * 2) + calc(x, x1, y, y1, mid + 1, en, id * 2 + 1);
}
typedef long long ll;
ll gcd(ll a, ll b) {
    return b? gcd(b, a % b):a;
}

int deg[M];
int main() {
    //freopen("2.in", "r", stdin);
    //freopen("out.txt", "w", stdout);
    int d, T;
    scanf("%d%d", &d, &T);
    for(int i = 1; i <= N; i ++) vis[i] = 0;
    for(int i = 1; i <= N; i ++) A[i] = 0;
    for(int i = 1; i <= N * 4; i ++) v[i].clear();
    int st = 0;
    for(int i = 1; i <= N; i ++) if(!vis[i]){
        int xx = i % d;
        for(int y = st + i; y <= N; y ++) {
            if(!vis[y] && (((deg[y - i]) >> xx) & 1) == 0) {
                vis[y] = 1;
                A[i] = y;
                deg[y - i] |= (1 << xx);
                while(deg[st] == ((1 << d) - 1) && st <= N) st ++;
                break;
            }
        }
    }
    for(int i = 1; i <= N; i ++) if(A[i]) {
        inse(i, A[i]);
        if(i != A[i]) inse(A[i], i);
    }
    //return 0;
    for(int i = 1; i <= N * 4; i ++) sort(v[i].begin(), v[i].end());
    while(T --) {
        int x, x1, y, y1;
        scanf("%d%d%d%d", &x, &y, &x1, &y1);
        int ga = calc(x, x1, y, y1, 1, N, 1);
        ll su = 1ll * (x1 - x + 1) * (y1 - y + 1);
        ll g = gcd(ga, su);
        printf("%lld/%lld\n", ga / g, su / g);
    }
    return 0;
}
