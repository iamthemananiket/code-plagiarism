#include <stdio.h>
#include <vector>

using namespace std;

const long long mod = 1000000007ll;
const long long a = 10007ll;
const int N = 100010;

struct Edge {
  int u, v, c;
  void read(void) { scanf("%d%d%d", &u, &v, &c); }
  int next(int x) { return u ^ v ^ x; }
} edge[N];

long long pw[N];
int ans = 0;

vector<int> adj[N];
int n;

void dfs(int u, int p, int l, long long h1, long long h2) {
  if(h1 == h2) {
    ans = max(ans, l + 1);
  }
  for(int id : adj[u]) {
    int v = edge[id].next(u);
    if(v == p) continue;
    long long nx_h1 = ((h1 * a) + edge[id].c) % mod;
    long long nx_h2 = (h2 + pw[l] * edge[id].c) % mod;
    dfs(v, u, l+1, nx_h1, nx_h2);
  }
}
void evaluate(void) {
  scanf("%d", &n);
  for(int i = 1;i <= n;i++) adj[i].clear();
  for(int i = 0;i < n;i++) pw[i] = (i == 0 ? 1 : (a * pw[i-1])) % mod;
  for(int i = 0;i < n-1;i++) {
    edge[i].read();
    adj[edge[i].u].push_back(i);
    adj[edge[i].v].push_back(i);
  }
  ans = 0;
  for(int i = 1;i <= n;i++) {
    dfs(i, -1, 0, 0, 0);
  }
  printf("%d\n", ans);
}
int main() {
  int t;
  scanf("%d", &t);
  while(t--) {
    evaluate();
  }
  return 0;
}
