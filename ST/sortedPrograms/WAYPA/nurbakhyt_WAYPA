#include <bits/stdc++.h>

#define pb push_back
#define pp pop_back
#define f first
#define s second
#define mp make_pair
#define sz(a) int((a).size())
#ifdef _WIN32
#  define I64 "%I64d"
#else
#  define I64 "%lld"
#endif
#define fname "."

typedef long long ll;
typedef unsigned long long ull;

const int MAX_N = (int)1e5 + 123;
const double eps = 1e-6;
const int mod = (int)1e9 + 7;
const int P = 123457;

using namespace std;

int n;
vector < pair < int, int > > g[MAX_N];
int pw[MAX_N];

struct Vertex {
	int lvl, hash, _hash;
	Vertex() : lvl(0), hash(0), _hash(0) {}
	Vertex(int lvl, int hash, int _hash) : lvl(lvl), hash(hash), _hash(_hash) {}
	void upd(Vertex &pr, int add) {
	    lvl = pr.lvl + 1;
	    hash = (1ll * pr.hash * P % mod + add) % mod;
	    _hash = (1ll * add * pw[pr.lvl] % mod + pr._hash) % mod;
	}
} a[MAX_N];

inline pair < int, int > get_hash(int v, int pr) {
    pair < int, int > res = mp(a[v].hash - 1ll * a[pr].hash * pw[a[v].lvl - a[pr].lvl] % mod, a[v]._hash - 1ll * a[pr]._hash * pw[a[v].lvl - a[pr].lvl] % mod);
    if (res.f < 0)
    	res.f += mod;
	if (res.s < 0)
		res.s += mod;
	return res;
}

unordered_map < int, bool > used;
bool ban[MAX_N];
int st[MAX_N];

bool goThrough(int v, int len, int pr, int root) {
	st[++st[0]] = v;
	if (len >= a[v].lvl && a[v].lvl >= len - a[v].lvl) {
//		cout << "sz is " << st[0] << endl;
//		cout << v << " up " << len - a[v].lvl << " is " << st[st[0] - (len - a[v].lvl)] << endl;
		pair < int, int > h = get_hash(st[st[0] - (len - a[v].lvl)], st[st[0] - (len - a[v].lvl) - (2 * a[v].lvl - len)]);
		if (h.f == h.s) {
			h = get_hash(v, st[st[0] - (len - a[v].lvl)]);
//			cout << "hey " << v << " and " << h.f << endl;
			if (a[v].lvl == len || used[h.f])
				return 1;
		}
	}
	for (auto to : g[v])
		if (to.f != pr && !ban[to.f])
			if (goThrough(to.f, len, v, root)) {
			    st[0]--;
				return 1;
			}
	st[0]--;
	return 0;
}

void update(int v, int pr, int root) {
	used[get_hash(v, root).f] = 1;
//	cout << "from " << root << " to " << v << " is " << get_hash(v, root).f << endl;
	for (auto to : g[v])
		if (to.f != pr && !ban[to.f])
			update(to.f, v, root);
}

bool CanWeFind(int v, int len) {
	used.clear();
	st[1] = v;
	st[0] = 1;
	for (auto to : g[v]) {
		if (ban[to.f])
			continue;
		if (goThrough(to.f, len, v, v))
			return 1;
		update(to.f, v, v);
	}
	return 0;
}

void dfs(int v, int pr = -1, int last = -1) {
	if (pr == -1)
		a[v] = Vertex(0, 0, 0);
	else
		a[v].upd(a[pr], last + '0');
//	cout << v << " level is " << a[v].lvl << endl;
	for (auto to : g[v])
		if (to.f != pr && !ban[to.f])
			dfs(to.f, v, to.s);
}

int cnt[MAX_N];

int init(int v, int pr = -1) {
	cnt[v] = 1;
	for (auto to : g[v])
		if (to.f != pr && !ban[to.f])
			cnt[v] += init(to.f, v);
	return cnt[v];
}

int nn;

int Find(int v, int pr = -1) {
    bool good = (nn - cnt[v] <= nn / 2);
	for (auto to : g[v])
		if (to.f != pr && !ban[to.f]) {
			int nw = Find(to.f, v);
			if (nw != -1)
				return nw;
			if (cnt[to.f] > nn / 2)
				good = 0;
		}
	return (!good ? -1 : v);
}

void out(int v, int pr = -1) {
	cout << v << " | ";
	for (auto to : g[v])
		if (to.f != pr && !ban[to.f])
			out(to.f, v);
}

bool centroid(int len, int v = 1) {
    if (len == 1)
    	return 1;
	
	nn = init(v);
	int root = Find(v);

	bool ok = 0;
	dfs(root);

//	out(root);
//	cout << endl;
	
	ok = CanWeFind(root, len);
//	cout << ok << endl;
//	exit(0);
	if (ok) {
//		out(root);
//		cout << "h" << endl;
		return 1;
	}

	reverse(g[root].begin(), g[root].end());
	ok = CanWeFind(root, len);
	if (ok) {
//		out(root);
//		cout << endl;
//		exit(0);
		return 1;
	}

	for (auto to : g[root]) {
		if (ban[to.f])
			continue;

		ban[root] = 1;
		ok = centroid(len, to.f);
		ban[root] = 0;
		if (ok)
			return 1;
	}
	return 0;
}

int ans;

void solve() {
	scanf("%d", &n);
	if (n == 1) {
		printf("1\n");
		return;
	}
	for (int i = 1; i <= n; i++)
		g[i].clear();
	for (int i = 1, u, v, c; i < n; i++) {
		scanf("%d%d%d", &u, &v, &c);
		g[u].pb(mp(v, c)), g[v].pb(mp(u, c));
	}

//	if (centroid(4)) {
//		cout << "Ohoa\n";
//		exit(0);
//	}

//	exit(0);

	ans = 0;
	int l = 0, r = n / 2 - 1, mid = -1;
	while(l <= r) {
		mid = (l + r) / 2;
		if (centroid(mid * 2 + 1)) {
			ans = max(ans, mid * 2 + 1);
			l = mid + 1;
		}
		else {
			r = mid - 1;
		}
	}
	l = 1, r = (n - 1) / 2, mid = -1;
	while(l <= r) {
		mid = (l + r) / 2;
		if (centroid(mid * 2)) {
			ans = max(ans, mid * 2);
			l = mid + 1;
		}
		else
			r = mid - 1;
	}
	printf("%d\n", ans + 1);
}

int main() {
	#ifdef Nick
	freopen(fname"in","r",stdin);
	freopen(fname"out","w",stdout);
	#endif
	pw[0] = 1;
	for (int i = 1; i <= (int)1e5; i++)
		pw[i] = 1ll * pw[i - 1] * P % mod;
	int t;
	scanf("%d", &t);
	while(t--)
		solve();
	return 0;
}
