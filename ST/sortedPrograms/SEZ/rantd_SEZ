#include <bits/stdc++.h>
using namespace std;

#define repu(i, a, b) for (int i = (a); i < (b); ++i)
#define repd(i, a, b) for (int i = (a); i > (b); --i)
#define mem(a, x) memset(a, x, sizeof(a))
#define all(a) a.begin(), a.end()
#define uni(a) a.erase(unique(all(a)), a.end())
#define count_bits(x) __builtin_popcount(x)
#define count_bitsll(x) __builtin_popcountll(x)
#define least_bits(x) __builtin_ffs(x)
#define least_bitsll(x) __builtin_ffsll(x)
#define most_bits(x) 32 - __builtin_clz(x)
#define most_bitsll(x) 64 - __builtin_clz(x)

vector<string> split(const string &s, char c) {
	vector<string> v;
	stringstream ss(s);
	string x;
	while (getline(ss, x, c)) v.push_back(x);
	return v;
}

#define error(args...) { vector<string> _v = split(#args, ','); err(_v.begin(), args); }

void err(vector<string>::iterator it) {}

template<typename T, typename... Args>
void err(vector<string>::iterator it, T a, Args... args) {
	cerr << it -> substr((*it)[0] == ' ', it -> length()) << " = " << a << '\n';
	err(++it, args...);
}

typedef long long ll;
const int MOD = 1000000007;

template<class T, class U> inline T tmin(T a, U b) {return (a < b) ? a : b;}
template<class T, class U> inline T tmax(T a, U b) {return (a > b) ? a : b;}
template<class T, class U> inline void amax(T &a, U b) {if (b > a) a = b;}
template<class T, class U> inline void amin(T &a, U b) {if (b < a) a = b;}
template<class T> inline T tabs(T a) {return (a > 0) ? a : -a;}
template<class T> T gcd(T a, T b) {while (b != 0) {T c = a; a = b; b = c % b;} return a;}

const int N = 205;
int n, m;
int deg[N];
bool del[N], edge[N][N];

int main(int argc, char *argv[]) {
    ios_base::sync_with_stdio(false);
    int u, v;
	
	cin >> n >> m;
	mem(deg, 0); mem(edge, 0); mem(del, 0);
	repu(i, 0, m) {
		cin >> u >> v;
		edge[u][v] = edge[v][u] = 1;
		deg[u]++; deg[v]++;
	}
	int ans = 0;
	repu(i, 1, n + 1) {
		if (deg[i] == 0) ans++, del[i] = 1;
	}
	
	while (true) {
		v = 0;
		repu(i, 1, n + 1) {
			if (deg[i] == 1 && !del[i]) {
				v = i; break;
			}
		}
		if (v == 0) break;
		ans++;
		deg[v] = 0, del[v] = 1;
		repu(i, 1, n + 1) if (edge[v][i]) {
			ans--;
			edge[v][i] = edge[i][v] = 0;
			deg[v]--; deg[i]--;
			del[i] = 1;
			repu(j, 1, n + 1) {
				if (edge[i][j]) {
					edge[i][j] = edge[j][i] = 0;
					deg[i]--; deg[j]--;
				}
			}
		}
	}
	
	repu(i, 1, n + 1) if (!del[i] && deg[i] == 0) ans++;
	
	amax(ans, 0);
	
	cout << ans << endl;
	
    return 0;
}
