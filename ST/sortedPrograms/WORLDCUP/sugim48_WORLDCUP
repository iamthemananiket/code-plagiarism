#define _USE_MATH_DEFINES
#include <algorithm>
#include <cstdio>
#include <functional>
#include <iostream>
#include <cfloat>
#include <climits>
#include <cstring>
#include <cmath>
#include <map>
#include <queue>
#include <set>
#include <sstream>
#include <stack>
#include <string>
#include <time.h>
#include <vector>
using namespace std;

typedef long long ll;
typedef unsigned long long ull;
typedef pair<int, int> i_i;
typedef pair<ll, int> ll_i;
typedef pair<double, int> d_i;
typedef pair<ll, ll> ll_ll;
typedef pair<double, double> d_d;
struct edge { int u, v, w; };

ll MOD = 1000000007;
ll _MOD = 1000000009;
double EPS = 1e-10;
int INF = INT_MAX / 2;

ll dp[301][1000][10];

int main() {
	dp[0][0][0] = 1;
	for (int i = 0; i < 300; i++) {
		for (int j = 0; j < 1000; j++)
			for (int k = 0; k < 10; k++)
				dp[i + 1][j][k] = (dp[i + 1][j][k] + dp[i][j][k]) % MOD;
		for (int j = 0; j + 2 < 1000; j++)
			for (int k = 0; k < 10; k++)
				dp[i + 1][j + 2][k] = (dp[i + 1][j + 2][k] + dp[i][j][k]) % MOD;
		for (int j = 0; j + 3 < 1000; j++)
			for (int k = 0; k < 10; k++)
				dp[i + 1][j + 3][k] = (dp[i + 1][j + 3][k] + dp[i][j][k]) % MOD;
		for (int j = 0; j < 1000; j++)
			for (int k = 0; k + 1 < 10; k++)
				dp[i + 1][j][k + 1] = (dp[i + 1][j][k + 1] + dp[i][j][k]) % MOD;
	}
	int T; cin >> T;
	while (T--) {
		int R, B, L;
		scanf("%d%d%d", &R, &B, &L);
		if (R % 2) {
			cout << 0 << endl;
			continue;
		}
		R /= 2;
		if (R >= 1000) {
			cout << 0 << endl;
			continue;
		}
		ll sum = 0;
		for (int k = 0; k <= L; k++)
			sum = (sum + dp[B][R][k]) % MOD;
		cout << sum << endl;
	}
}