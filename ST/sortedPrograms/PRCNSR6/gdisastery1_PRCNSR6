#include <cstdio>
#include <cstdio>
#include <cstring>
#include <cmath>
#include <cassert>
#include <iostream>
#include <vector>
#include <set>
#include <map>
#include <queue>
#include <stack>
#include <string>
#include <algorithm>
using namespace std;
#define SZ(x) ( (int) (x).size() )
#define CNT(s, x) ( (s).find(x) != (s).end() )
#define ALL(x) (x).begin(), (x).end()
#define dbg(x) cerr << #x << " = " << x << endl;
#define mp make_pair
#define pb push_back
#define fi first
#define se second
typedef long long ll;
typedef pair<int, int> pii;
// const int INF = 1e9;
const int MAXN = 1e5 + 10;
const int SQRT = 500;

int N, Q, K;
int a[MAXN];
int ql[MAXN], qr[MAXN];
int p[MAXN];

ll out[MAXN];
ll res;

int bucket(int x)
{
    return x / SQRT;
}

int ft[MAXN];
void update(int i, int x)
{
    for(; i < MAXN; i += i & -i)
        ft[i] += x;
}

int query(int i)
{
    int s = 0;
    for(; i > 0; i -= i & -i)
        s += ft[i];
    return s;
}

int rquery(int i, int j)
{
    i = max(i, 1);
    j = min(j, MAXN - 1);
    return query(j) - query(i - 1);
}

void add(int x, int p)
{
    if(p == -1) update(x, p);
    res += p * rquery(x - K, x + K);
    if(p == +1) update(x, p);
}

int cmp(int i, int j)
{
    int bi = bucket(ql[i]);
    int bj = bucket(ql[j]);
    if(bi != bj)
        return bi < bj;
    return qr[i] < qr[j];
}

void reset()
{
    for(int i = 0; i < MAXN; i++)
        ft[i] = 0;
    res = 0;
}
int main()
{
    scanf("%d%d%d", &N, &Q, &K);
    for(int i = 0; i < N; i++)
        scanf("%d", a + i);

    for(int i = 0; i < Q; i++)
    {
        scanf("%d%d", ql + i, qr + i);
        ql[i] --, qr[i]--;
        p[i] = i;
    }
    
    sort(p, p + Q, cmp);

    for(int pi = 0, pj = 0; pi < Q;)
    {
        for(pj = pi; pj < Q && bucket(ql[p[pi]]) == bucket(ql[p[pj]]); pj++);
        reset();
        for(int l = 0, r = 0; pi < pj; pi++)
        {
            // printf("%d %d\n", ql[p[pi]], qr[p[pi]]);
            while(r <= qr[p[pi]])
                add(a[r++], +1);
            while(l < ql[p[pi]])
                add(a[l++], -1);
            while(l > ql[p[pi]])
                add(a[--l], +1);
            out[p[pi]] = res;
        }
    }

    for(int i = 0; i < Q; i++)
        printf("%lld\n", out[i]);

    return 0;
}
