#include <algorithm>
#include <iostream>
#include <cassert>
#include <cstdio>

#define NMAX 100010
#define RT 350


typedef long long lli;

using namespace std;

pair<int,int> srt[RT][RT];
int n[RT];

int block[NMAX];
int H[NMAX];

lli ss[NMAX][RT];
lli bls[RT][RT];

int st[RT];


int B,N,K;

void dec(){
	int i;

	for(i = 0; i < N; ++i){
		block[i] = B;
		srt[B][n[B]++] = make_pair(H[i],i);
		if(i == N-1 || n[B]*n[B] >= N) st[++B] = i+1;
	}

	for(i = 0; i < B; ++i) sort(srt[i],srt[i]+n[i]);
}

void init(){

	int i,j1,j2,b1,b2;

	for(b1 = 0; b1 < B; ++b1){
		for(b2 =0 ; b2 < B; ++b2){

			j1 = j2 = 0;;

			for(i = 0; i < n[b1]; ++i){
				while(j1 < n[b2] && srt[b2][j1].first+K < srt[b1][i].first) ++j1;
				while(j2 < n[b2] && srt[b2][j2].first <= srt[b1][i].first+K) ++j2;
				ss[srt[b1][i].second][b2] = j2-j1;
			}
		}
	}

	for(i = N-1; i >= 0; --i){
		if(i == st[block[i]+1]-1) continue;
		for(b2 = block[i]; b2 < B; ++b2){
			ss[i][b2] += ss[i+1][b2];
		}
	}

	for(i  =0 ; i < N; ++i){
		if(i == st[block[i]]) continue;
		for(b2 = 0; b2 < block[i]; ++b2){
			ss[i][b2] += ss[i-1][b2];
		}
	}

	for(i = 0; i < N; ++i){
		for(b2 = block[i]+2; b2 < B; ++b2){
			ss[i][b2] += ss[i][b2-1];
		}
		for(b2 = block[i]-2; b2 >= 0; --b2){
			ss[i][b2] += ss[i][b2+1];
		}
		if(i == st[block[i]]){
			ss[i][block[i]] -= n[block[i]];
			ss[i][block[i]]/=2;
		}
	}

	for(b1 = 0; b1 < B; ++b1){
		bls[b1][b1] = ss[st[b1]][b1];
	}

	int n;

	for(n = 1; n <= B; ++n){
		for(b1 = 0; b1+n < B; ++b1){
			b2 = b1+n;
			bls[b1][b2] = ss[st[b1]][b2] + bls[b1+1][b2] + bls[b1][b1];
			bls[b2][b1] = bls[b1][b2];
		}
	}
}

int Q;

lli query(int l, int r){
	int bl,br;
	bl = block[l], br = block[r];

	lli sl = 0;

	if(bl+1 < br){
		sl += bls[bl+1][br-1] + ss[l][br-1] + ss[r][bl+1];
	}

	int i,j1,j2,s;

	s = 0;

	j1 = j2 = 0;;

	if(bl != br){
		for(i = 0; i < n[bl]; ++i){
			while(j1 < n[br] && srt[br][j1].first+K < srt[bl][i].first){
				s -= (srt[br][j1].second <= r);
				++j1;
			}
			while(j2 < n[br] && srt[br][j2].first <= srt[bl][i].first+K) {
				s += (srt[br][j2].second <= r);
				++j2;
			}
			if(srt[bl][i].second >= l) sl += s;
		}
	}


	j1 = 0;
	s = 0;
	for(i = 0; i < n[bl]; ++i){
		while(j1 < n[bl] && srt[bl][j1].first+K < srt[bl][i].first){
			s-= srt[bl][j1].second >= l && srt[bl][j1].second <= r;
			++j1;
		}
		if(srt[bl][i].second < l || srt[bl][i].second > r) continue;
		sl += s;
		s ++;
	}

	if(bl != br){
		j1 = 0;
		s = 0;
		for(i = 0; i < n[br]; ++i){
			while(j1 < n[br] && srt[br][j1].first+K < srt[br][i].first){
				s -= srt[br][j1].second <= r;
				++j1;
			}
			if(srt[br][i].second > r) continue;
			sl += s;
			s++;
		}
	}

	s =0;

	return sl;
}

int main(){
	int i;
	scanf("%d%d%d",&N,&Q,&K);

	for(i = 0; i < N; ++i) scanf("%d",&H[i]);

	dec();
	init();


	int j;
	while(Q--){
		scanf("%d%d",&i,&j);
		--i,--j;
		printf("%lld\n",query(i,j));
	}
	return 0;
}
