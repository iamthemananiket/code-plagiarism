#include <cstdio>
#include <iostream>
#include <cstdlib>
#include <string>
#include <cstring>
#include <set>
#include <map>
#include <queue>
#include <deque>
#include <stack>
#include <vector>
#include <ctime>
#include <cassert>
#include <cmath>
#include <iomanip>
#include <algorithm>
#include <iomanip>
#include <fstream>
using namespace std;
#define fname ""
#define F first
#define S second
#define pb push_back
#define mp make_pair
#define ll long long
#define ull unsigned long long
#define inf 1000000000
#define INF 1000000000000000000ll
const int N = 520050;
int BlockSz;
int fup[N], in[N], timer = 0;
int n, m;
int Color[N], CutPoint[N], was[N], wh[N];
vector <int> a[N], here[N], g[N];
int cutPos[N];
int Count[N];
int cutPoints[N], szCutPoints = 0;
int vn = 0;
int sz = 0;
int cntColor[N], cnt[N];
int maxColor = 0;
ll Current = 0;
ll without = 0;
ll ans[N];
int qq = 0;
int L[N], R[N];
int all[N], szAll = 0, pre[N];

ll MyValue1[N], MyValue2[N];

inline void Force(const int &id, const int &val) {
    if (val == 1) {
        Current += cnt[id]++;
    }
    else {
        Current -= (--cnt[id]);
    }
}

inline void upd(const int &id, const int &val) {
    if (all[id] <= szCutPoints) {
        Force(Color[cutPoints[all[id]]], val);
    }
    else {
        int index = all[id] - szCutPoints;
        for (int ss = 0; ss < (int)here[index].size(); ++ ss) {
            Force(Color[here[index][ss]], val);
        }
    }
}

pair <int, int> st[2 * N];
int h = 0;

inline void dfs(const int &v, const int &p = -1) {
    all[++szAll] = v;
    Force(Color[v], 1);
    wh[v] = sz;
    was[v] = 1;
    in[v] = fup[v] = ++timer;
    int child = 0;
    for (int i = 0; i < (int)a[v].size(); ++ i) {
        int to = a[v][i];
        if (to == p) continue;
        
        if (!was[to]) {
            st[++h] = mp(v, to);
            dfs(to, v);
            if (fup[to] >= in[v]) {
                int color = maxColor++;
                while (h && st[h] != mp(v, to) && st[h] != mp(to, v)) {
                    here[color].pb(st[h].F);
                    here[color].pb(st[h].S);
                    --h;
                }
                here[color].pb(v);
                here[color].pb(to);
                --h;
            }
            fup[v] = min(fup[v], fup[to]);
            if (fup[to] >= in[v] && p != -1) {
                CutPoint[v] = 1;
            }
            child++;
        }
        else if (in[to] < in[v]) {
            st[++h] = mp(v, to);
        }
        else if (in[to] < fup[v]) {
            fup[v] = fup[to];
        }
        if (was[to]) {
            fup[v] = min(fup[v], in[to]);
        }
    }
    if (p == -1 && child > 1) CutPoint[v] = 1;
}

inline void addEdge(const int &x, const int &y) {
    g[x].pb(y);
    g[y].pb(x);
}

struct Query {
    int l, r, id, sign;
    Query(){}
    Query(int l, int r, int id, int sign) : l(l), r(r), id(id), sign(sign) {}
    bool operator < (Query T) const {
        if (l / BlockSz == T.l / BlockSz) return r < T.r;
        return l / BlockSz < T.l / BlockSz;
    }
}q[N];

inline void calc(const int &v, const int &p = 0) {
    was[v] = 1;
    pre[v] = p;
    all[++szAll] = v;
	upd(szAll, 1);
    L[v] = szAll;
    for (int i = 0; i < (int)g[v].size(); ++ i) {
        int to = g[v][i];
        if (to != p) calc(to, v);
    }
    R[v] = szAll;
}

inline void reCalculate(const int &root) {
    szAll = 0;
    qq = 0;
    calc(cutPos[root]);
	ll today = Current;

//	cout << "order = ";
    for (int i = 1; i <= szAll; ++ i) {
//		cout << all[i] << " ";

		upd(i, -1);
        if (all[i] <= szCutPoints) {
            for (int j = 0; j < (int)g[all[i]].size(); ++ j) {
                int to = g[all[i]][j];
                if (to != pre[all[i]]) {
                    q[++qq] = Query(L[to], R[to], cutPoints[all[i]], -1);
                }
            }
            if (pre[all[i]]) {
  	 	    	q[++qq] = Query(R[all[i]] + 1, L[all[i]] + szAll - 1, cutPoints[all[i]], -1);
            }
        }
    }

	for (int i = szAll + 1; i <= szAll * 2; ++ i) all[i] = all[i - szAll];
    szAll <<= 1;
    
    BlockSz = (int)sqrt(szAll + .0) + 1;
    
    sort(q + 1, q + 1 + qq);
    int L = 1, R = 0;
    Current = 0;
    
    for (int i = 1; i <= qq; ++ i) {
        while (R < q[i].r) {
            ++R;
            upd(R, 1);
        }
        while (L > q[i].l) {
            --L;
            upd(L, 1);
        }
        while (R > q[i].r) {
            upd(R, -1);
            --R;
        }
        while (L < q[i].l) {
            upd(L, -1);
            ++L;
        }
		if (q[i].sign == 1) ans[q[i].id] += Current;
		else ans[q[i].id] -= Current;
    }
    while (L <= R) upd(L++, -1);
}

vector <int> vvv;

int main() {
	#ifndef ONLINE_JUDGE
    freopen(fname"in", "r", stdin);
    freopen(fname"out", "w", stdout);
	#endif
    
    scanf("%d%d", &n, &m);
    
    for (int i = 1; i <= n; ++ i) {
        scanf("%d", &Color[i]);
        vvv.pb(Color[i]);
    }
    
    sort(vvv.begin(), vvv.end());
    
    for (int i = 1; i <= n; ++ i) {
        Color[i] = lower_bound(vvv.begin(), vvv.end(), Color[i]) - vvv.begin() + 1;
        cntColor[Color[i]]++;
    }
    
    for (int i = 1; i <= 200000; ++ i) without += (ll)cntColor[i] * (cntColor[i] - 1) / 2;
    
    for (int i = 1; i <= m; ++ i) {
        int x, y;
        scanf("%d%d", &x, &y);
        a[x].pb(y);
        a[y].pb(x);
    }
    
    for (int i = 1; i <= n; ++ i) {
        if (!was[i]) {
            maxColor++;
            ++sz;
            szAll = 0;
            dfs(i);
            without -= Current;
            for (int j = 1; j <= szAll; ++ j) {
                Count[all[j]] = cnt[Color[all[j]]];
                ans[all[j]] += Current;
            }
            for (int j = 1; j <= szAll; ++ j) {
                Force(Color[all[j]], -1);
            }
        }
    }
    for (int i = 1; i <= n; ++ i) {
        if (CutPoint[i]) {
            cutPoints[++szCutPoints] = i;
            cutPos[i] = szCutPoints;
            ++vn;
        }
    }
    for (int i = 1; i <= n; ++ i) {
        if (!CutPoint[i]) {
            ans[i] = without + Count[i] - 1;
        }
        else {
            ans[i] += without;
        }
    }
    
    for (int i = 1; i <= maxColor; ++ i) {
        sort(here[i].begin(), here[i].end());
        here[i].resize((unique(here[i].begin(), here[i].end()) - here[i].begin()));
        
        vector <int> reInform;
        ++vn;
        for (int j = 0; j < (int)here[i].size(); ++ j) {
            int Vertex = here[i][j];
            if (CutPoint[Vertex]) {
                addEdge(vn, cutPos[Vertex]);
            }
            else {
                reInform.pb(here[i][j]);
            }
        }
        swap(here[i], reInform);
    }
/*
	cout << "vn = " << vn << endl;

	for (int i = 1; i <= vn; ++ i) {
		cout << i << " -> ";
		for (int j = 0; j < (int)g[i].size(); ++ j) cout << g[i][j] << " ";
		cout << endl;
	}

	cout << endl;

	for (int i = 1; i <= vn; ++ i) {
		cout << i << " ==>> ";
		if (i <= szCutPoints) {
			cout << cutPoints[i] << " ";
		}
		else {
			int id = i - szCutPoints;
			for (int j = 0; j < (int)here[id].size(); ++ j) cout << here[id][j] << " ";
		}
		cout << endl;
	}

	cout << endl << endl;
*/
    memset(was, 0, sizeof was);
    for (int i = 1; i <= szCutPoints; ++ i) {
        if (!was[cutPos[cutPoints[i]]]) {
            reCalculate(cutPoints[i]);
        }
    }
    
    for (int i = 1; i <= n; ++ i) {
        printf("%lld\n", ans[i]);
    }
    
    return 0;
}
