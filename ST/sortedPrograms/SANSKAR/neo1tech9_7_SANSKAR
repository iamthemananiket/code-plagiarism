#include <bits/stdc++.h>

using namespace std;

typedef long long ll;
typedef vector < long long > vll;
typedef pair < long long, long long > pll;
typedef pair < int, int > pii;
typedef vector < int > vii;

#define rep(i,n) for(long long i = 0; i < n; i++)
#define reps(i,a,n) for(int i = a; i < n; i++)
#define s(n) cin >> n
#define csl ios_base::sync_with_stdio(false); cin.tie(NULL)
#define rsz(x,n) x.clear(); x.resize(n)
#define rrsz(x,a,n) x.clear(); x.resize(n,a)
#define wt while(true)
#define all(x) x.begin(),x.end()
#define pb push_back
#define ls(x) ((2*(x)) + 1)
#define rs(x) ((ls(x)) + 1)
#define md(a,b) (((a) + (b))/2)
#define INF (1e9 + 7)

ll t, n, k;
vll a, x, g;
ll u, q, l, r, val;
bool seen[1 << 21][22];
bool mk[1 << 21][22];
bool rec(int mask, int gd, int pos){
	if(seen[mask][pos])
		return mk[mask][pos];
	if(pos == k){
		if(mask == (1 << n) - 1)
			return true;
		else return false;
	}
		bool pt = false;
		seen[mask][pos] = true;
		for(int i = gd; i < g.size(); ++i){
			if((g[i] & mask) == 0){
				pt = rec(mask|g[i], i + 1, pos + 1);
			}
			if(pt)
				return mk[mask][pos] = true;
		}
	return mk[mask][pos] = false;
}
int main(){
	csl;
	cin >> t;
	while(t--){
		cin >> n >> k;
		x.clear();
		x.resize(n);
		g.clear();
		ll sum = 0;
		rep(i,n){
			cin >> x[i];
			sum += x[i];
		}
		ll u_mask = (1 << n) - 1;
		if(sum % k != 0){
			cout << "no\n";
			continue;
		}
		if(sum == 0){
			if(n >= k)
				cout << "yes\n";
			else cout << "no\n";
			continue;
		}
		ll tt = (sum / k);
		ll cursum;
		rep(i, u_mask + 1LL){
			cursum = 0;
			rep(j, n){
				if((1 << j) & i)
					cursum += x[j];
			}
			if(cursum == tt)
				g.push_back(i);
		}
		for(int i = 0; i < (1 << n); ++i)
			for(int j = 0; j <= k; ++j)
				mk[i][j] = seen[i][j] = false;
		if(rec(0, 0, 0))
			cout << "yes\n";
		else cout << "no\n";
	}
	return 0;
}

