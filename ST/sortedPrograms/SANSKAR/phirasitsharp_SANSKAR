#include <stdio.h>
#include <stdlib.h>
#include <time.h>

#include <algorithm>
#include <vector>

#define N 22
#define K 8
#define LL long long

using namespace std;

vector<int> pos, x[1 << N];

LL val[1 << N];
int dp[1 << N];
LL arr[N], sum, mx;
int n, k;

void dfs_insert(int p, int e, int v) {
	if((1<<p) > v) {
		return;
	}
	if(((1<<p) & e) == 0) {
		dfs_insert(p+1, e | (1 << p), v);
		x[e | (1 << p)].push_back(v);
	}
	dfs_insert(p+1, e, v);
}
void evaluate() {
    scanf("%d%d", &n, &k);
    sum = 0;
    mx = 0;
    for(int i = 0;i < n;i++) {
        scanf("%lld", &arr[i]);
        sum += arr[i];
        if(arr[i] > mx) {
        	mx = arr[i];
        }
    }
    LL v = sum / k;
    if(v * k != sum || k > n) {
        printf("no\n");
        return;
    }
    int ls = 0;
    val[0] = 0;
    pos.clear();
	for(int i = 1;i < (1 << n);i++) {
        if(i >= (1 << (ls+1))) {
            ls++;
        }
        val[i] = val[i ^ (1 << ls)] + arr[ls]; 
        if(val[i] == v) {
            pos.push_back(i);
        }
    }    	    
	int ans = 0;
    for(int i = 0;i < pos.size();i++) {
    	ans |= pos[i];
    }
    if(ans != (1 << n) - 1) {
    	printf("no\n");
    	return;
    }
    if(pos.size() < 1000) {
	    for(int i = 0;i < (1 << n);i++) {
	        x[i].clear();
	        dp[i] = 0;
	    }
	    for(int i = 0;i < pos.size();i++) {
			dfs_insert(0, pos[i], pos[i]);
			x[pos[i]].push_back(pos[i]);
	    }
	    for(int i = 0;i < (1 << n);i++) {
	        if(i == 0) {
	            dp[i] = 1;
	        }else {
	            dp[i] = 0;
	            for(int j = 0;j < x[i].size();j++) {
	                if(dp[i - x[i][j]]) {
	                    dp[i] = 1;
	                    break;
	                }   
	            }
	        }
	    }
	    printf("%s\n", dp[(1 << n) - 1] ? "yes" : "no");
	}else {
		printf("yes\n");
	}
}
int main() {
	srand(time(NULL));
    int t;
    scanf("%d", &t);
    while(t--) {
        evaluate();
    }
    return 0;
}