#include <bits/stdc++.h>
using namespace std;

const int N = 205;
const int M = 205;

int t, n, m, k, c;
int cost[N][M];

// Dinic's Algorithm to compute Maximum Flow

const int INF = 1000000000;

struct Edge {
	int from, to, cap, flow, index;
	Edge(int from, int to, int cap, int flow, int index) :
	from(from), to(to), cap(cap), flow(flow), index(index) {}
};

struct Dinic{
	int N;
	vector < vector < Edge > > G;
	vector < Edge * > dad;
	vector < int > Q;

	Dinic(int N) : N(N), G(N), dad(N), Q(N) {}

	void AddEdge(int from, int to, int cap){
		G[from].push_back(Edge(from, to, cap, 0, G[to].size()));
		if (from == to) G[from].back().index++;
		G[to].push_back(Edge(to, from, 0, 0, G[from].size() - 1));
	}

	long long BlockingFlow(int s, int t){
		fill(dad.begin(), dad.end(), (Edge *) NULL);
		dad[s] = &G[0][0] - 1;

		int head = 0, tail = 0;
		Q[tail++] = s;
	
		while(head < tail){
			int x = Q[head++];
			for (int i = 0; i < G[x].size(); i++){
				Edge &e = G[x][i];
				if(!dad[e.to] && e.cap - e.flow > 0){
					dad[e.to] = &G[x][i];
					Q[tail++] = e.to;
				}
			}
		}
		if (!dad[t]) return 0;

		long long totflow = 0;
		for (int i = 0; i < G[t].size(); i++){
			Edge *start = &G[G[t][i].to][G[t][i].index];
			int amt = INF;
			for (Edge *e = start; amt && e != dad[s]; e = dad[e->from]){
				if (!e) { amt = 0; break; }
				amt = min(amt, e->cap - e->flow);
			}
			if (amt == 0) continue;
			for (Edge *e = start; amt && e != dad[s]; e = dad[e->from]) {
				e->flow += amt;
				G[e->to][e->index].flow -= amt;
			}
			totflow += amt;
		}
		return totflow;
	}

	long long GetMaxFlow(int s, int t){
		long long totflow = 0;
		while (long long flow = BlockingFlow(s, t)) totflow += flow;
		return totflow;
	}
};

// End of Maximum Flow Template

inline bool solve(int x){
	Dinic mf(n + m + m + 5);
	for(int i = 1; i <= n; i++) mf.AddEdge(0, i, 1);
	for(int i = 1; i <= n; i++){
		for(int j = 1; j <= m; j++){
			if(cost[i][j] <= x) mf.AddEdge(i, n + j, 1);
			if(cost[i][j] + c <= x) mf.AddEdge(i, n + m + j, 1);
		}
	}
	for(int i = n + 1; i <= n + m + m; i++) mf.AddEdge(i, n + m + m + 1, 1);
	return (mf.GetMaxFlow(0, n + m + m + 1) >= k);
}

int main(){
	scanf("%d\n", &t);
	while(t--){
		scanf("%d %d %d %d\n", &n, &m, &k, &c);
		for(int i = 1; i <= n; i++)
			for(int j = 1; j <= m; j++)
				scanf("%d", &cost[i][j]);
		int l = 1, r = 100000000;
		int ans = -1;
		while(l <= r){
			int mid = (l + r) >> 1;
			if(solve(mid)) ans = mid, r = mid - 1;
			else l = mid + 1;
		}
		printf("%d\n", ans);
	}
}