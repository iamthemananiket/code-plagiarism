#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <cstring>
#include <cassert>
#include <iostream>
#include <iomanip>
#include <sstream>
#include <algorithm>
#include <vector>
#include <map>
#include <set>
#include <queue>
#include <stack>
#include <deque>
#include <bitset>
#include <complex>
#include <functional>
#include <numeric>
#include <limits>
#include <utility>

#include <array>
#include <unordered_map>
#include <unordered_set>
#include <tuple>

using namespace std;

typedef long long ll;
typedef pair<int, int> pii;
typedef pair<int, pii> val;

const int MAX_N = 1100;
const int MOD = 1000000007;

int n, k;
int a[MAX_N];
val s[MAX_N * MAX_N];
int g[MAX_N];

struct UnionFind {
  int n;
  vector<int> par, rnk;
  UnionFind(int n) : n(n), par(n), rnk(n) {
    for (int i = 0; i < n; i++) par[i] = i;
  }
  int find(int x) {
    return x == par[x] ? x : (par[x] = find(par[x]));
  }
  void unite(int x, int y) {
    x = find(x);
    y = find(y);
    if (x == y) return;
    if (rnk[x] < rnk[y]) {
      par[x] = y;
    } else {
      par[y] = x;
      if (rnk[x] == rnk[y]) rnk[x]++;
    }
  }
  bool same(int x, int y) {
    return find(x) == find(y);
  }
};


int mod_pow(int x, int y) {
  int r = 1;
  while (y > 0) {
    if (y & 1) r = (ll)r * x % MOD;
    x = (ll)x * x % MOD;
    y >>= 1;
  }
  return r;
}

bool check(int mid) {
  UnionFind uf(2 * n);
  for (int i = 0; i < k; i++) {
    int v;
    pii p;
    tie(v, p) = s[i];
    int x, y;
    tie(x, y) = p;
    if (s[i].first <= mid) break;
    uf.unite(x, y + n);
    uf.unite(x + n, y);
  }
  for (int i = 0; i < n; i++) {
    if (uf.same(i, i + n)) return false;
  }
  return true;
}

int main() {
  int T;
  scanf("%d", &T);
  while (T--) {
    scanf("%d", &n);
    for (int i = 0; i < n; i++) {
      scanf("%d", &a[i]);
    }
    k = 0;
    for (int i = 0; i < n; i++) {
      for (int j = 0; j < i; j++) {
        int v;
        v = min(mod_pow(a[i], a[j]), mod_pow(a[j], a[i]));
        s[k] = val(v, pii(i, j));
        k++;
      }
    }
    sort(s, s + k, greater<val>());
    int ub = MOD, lb = -1;
    while (ub - lb > 1) {
      int mid = (ub + lb) / 2;
      if (check(mid)) {
        ub = mid;
      } else {
        lb = mid;
      }
    }
    printf("%d\n", ub);
  }
}
