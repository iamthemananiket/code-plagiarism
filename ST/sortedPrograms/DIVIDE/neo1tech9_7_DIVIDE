#include <bits/stdc++.h>

using namespace std;

typedef long long ll;
typedef vector < long long > vll;
typedef pair < long long, long long > pll;

#define rep(i,n) for(int i = 0; i < n; i++)
#define reps(i,a,n) for(int i = a; i < n; i++)
#define s(n) cin >> n
#define csl ios_base::sync_with_stdio(false); cin.tie(NULL)
#define rsz(x,n) x.clear(); x.resize(n)
#define rrsz(x,a,n) x.clear(); x.resize(n,a)
#define wt while(true)
#define all(x) x.begin(),x.end()
#define pb push_back
#define ls(x) (2*(x) + 1)
#define rs(x) (2*(x) + 2)
#define md(x,y) (((x) + (y))/2)

ll u, n, t, v, c, d, e, f, b, m, k;
string ss, s1, s2, s3;
vector < long long > x;
const long long mod = 1e9 + 7;
long long mat[1006][1006];
int done = 0;
long long Power(long long base, long long exp){
	if(exp == 1)
		return base % mod;
	if(exp == 0)
		return 1;
	else if(exp & 1){
		return (base*Power((base*base)%mod,(exp-1)/2))%mod;
	}
	else return Power((base*base)%mod, exp/2) % mod;
}
vll uv;
vll au,av;
int main(){
	csl;
	cin >> t;
	while(t--){
		cin >> n;
		uv.clear();
		uv.resize(n);
		for(int i = 0; i < n; ++i)
			cin >> uv[i];
		for(int i = 0; i < n; ++i)
			for(int j = 0; j < n; ++j)
				mat[i][j] = min(Power(uv[i],uv[j]), Power(uv[j], uv[i]));
		int b_mask = 0;
		long long ans = mod;
		long long mx1,mx2;
		for(b_mask; b_mask < (1 << n); ++b_mask){
			au.clear(), av.clear();
			mx1 = -1*mod;
			mx2 = -1*mod;
			for(int i = 0; i < n; ++i)
				if(b_mask&(1 << i))
					au.push_back(i);
				else av.push_back(i);
			for(int i = 0; i < au.size(); ++i)
				for(int j = i + 1; j < au.size(); ++j)
					 mx1 = max(mat[au[i]][au[j]], mx1);
			for(int i = 0; i < av.size(); ++i)
				for(int j = i + 1; j < av.size(); ++j)
					mx2 = max(mat[av[i]][av[j]], mx2);
			ans = min(max(mx1,mx2),ans);
		}
		cout << ans << '\n';
	}
	return 0;

}