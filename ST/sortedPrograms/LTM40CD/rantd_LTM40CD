#include <bits/stdc++.h>
using namespace std;

#define FORE(i, a) for (auto i = a.begin(); i != a.end(); ++i)
#define REPU(i, a, b) for (int i = (a); i < (b); ++i)
#define REPD(i, a, b) for (int i = (a); i > (b); --i)
#define MEM(a, x) memset(a, x, sizeof(a))
#define ALL(a) a.begin(), a.end()
#define UNIQUE(a) a.erase(unique(ALL(a)), a.end())

vector<string> split(const string &s, char c) {
	vector<string> v;
	stringstream ss(s);
	string x;
	while (getline(ss, x, c)) v.push_back(x);
	return v;
}

#define DEBUG(args...) { vector<string> _v = split(#args, ','); err(_v.begin(), args); }

void err(vector<string>::iterator it) {}

template<typename T, typename... Args>
void err(vector<string>::iterator it, T a, Args... args) {
	cerr << "[DEBUG] " << it -> substr((*it)[0] == ' ', it -> length()) << " = " << a << '\n';
	err(++it, args...);
}

typedef long long ll;
const int MOD = 1000000007;

template<class T, class U> inline T tmin(T a, U b) { return (a < b) ? a : b; }
template<class T, class U> inline T tmax(T a, U b) { return (a > b) ? a : b; }
template<class T, class U> inline void amax(T &a, U b) { if (b > a) a = b; }
template<class T, class U> inline void amin(T &a, U b) { if (b < a) a = b; }
template<class T> inline T tabs(T a) { return (a > 0) ? a : -a; }
template<class T> T gcd(T a, T b) { while (b != 0) { T c = a; a = b; b = c % b; } return a; }

struct T {
	int a, b, c;
};

bool comp(const T& t1, const T& t2) {
	if (t1.a != t2.a) return t1.a < t2.a;
	if (t1.b != t2.b) return t1.b < t2.b;
	return t1.c < t2.c;
}

int main(int argc, char *argv[]) {
	ios_base::sync_with_stdio(false);

	int R;

	cin >> R;
	int r = 4 * R * R;
	vector<T> st;
	REPU(x, 0, 20000) {
		int x2 = x * x;
		for (int y = x + 2; y <= 20000; y += 2) {
			int d = y * y - x2;
			if (d <= r) continue;
			ll z = (d + r) * 1LL * y;
			if (z % (d - r) == 0) z /= (d - r);
			else continue;
			if (z > y && (z + y) % 2 == 0 && x + z <= y + y) {
				st.push_back((T) {(z - x) / 2, (z + x) / 2, y});
			}
		}
	}
	sort(ALL(st), comp);
	printf("%d\n", st.size());
	REPU(i, 0, st.size()) printf("%d %d %d\n", st[i].a, st[i].b, st[i].c);

	return 0;
}
