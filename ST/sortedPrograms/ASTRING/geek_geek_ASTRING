#include<iostream>
#include<algorithm>
#include<cstdio>
#include<cmath>
#include<string>
#include<cstring>
#include<vector>
#include<set>
#include<iomanip>
#include<queue>
#include<map>
#include<list>
#include<stack>
#define fl(i,s,n) for(i=s;i<n;i++)
#define flr(i,s,n) for(i=s;i>n;i--)
#define ls(i,s) for(i=0;s[i]!='\0';i++)
#define gi(x) cin>>x
#define pi(x) printf("%d",x)
#define checkline(x) while(x!='\0' && x!='\n')
#define pt(s) printf(s)
#define PI acos(-1)
#define f_in freopen("input.txt","r",stdin)
#define f_out freopen("output.txt","w",stdout)
#define in(i,j,k) ((j<=i) && (i<k))
#define ull unsigned long long int
#define lli long long int
#define ld long double
#define sd(x) scanf("%d",&x)
#define sd2(x,y) scanf("%d%d",&x,&y)
#define sd3(x,y,z) scanf("%d%d%d",&x,&y,&z)
#define fi first
#define se second
#define pb(x) push_back(x)
#define mp(x,y) make_pair(x,y)
#define r0 return 0
#define mod 1000000007
using namespace std;
lli * tree,*lazy,*A;
lli * tree1;
void build(int node, int start, int end)
{
    if(start == end)
    {
        tree[node] = A[start];
        tree1[node]=start;
    }
    else
    {
        int mid = (start + end) / 2;
        build(2*node, start, mid);
        build(2*node+1, mid+1, end);
        tree[node] = tree[2*node] + tree[2*node+1];
        if(tree[2*node] < tree[2*node+1])
        {
            tree[node] = tree[2*node] ;
            tree1[node] = tree1[2*node] ;
        }
        else if(tree[2*node] > tree[2*node+1])
        {
            tree[node] = tree[2*node+1] ;
            tree1[node] = tree1[2*node+1] ;
        }
        else{
                        tree[node] = tree[2*node+1] ;
                        tree1[node] = min(tree1[2*node+1],tree1[2*node]  );

        }
    }
}
void update(int node, int start, int end, int idx, int val)
{
    if(start == end)
    {
        A[idx] += val;
        tree[node] += val;
    }
    else
    {
        int mid = (start + end) / 2;
        if(start <= idx and idx <= mid)
        {
            update(2*node, start, mid, idx, val);
        }
        else
        {
            update(2*node+1, mid+1, end, idx, val);
        }
        //
        if(tree[2*node] < tree[2*node+1])
        {
            tree[node] = tree[2*node] ;
            tree1[node] = tree1[2*node] ;
        }
        else if(tree[2*node] > tree[2*node+1])
        {
            tree[node] = tree[2*node+1] ;
            tree1[node] = tree1[2*node+1] ;
        }
        else{
                        tree[node] = tree[2*node+1] ;
                        tree1[node] = min(tree1[2*node+1],tree1[2*node]  );

        }
    }
}
pair<int,int> query(int node, int start, int end, int l, int r)
{
    if(r < start or end < l)
    {
        return mp(100,100000);
    }
    if(l <= start and end <= r)
    {
        return mp(tree[node],tree1[node]);
    }
    int mid = (start + end) / 2;
    pair<int,int> p1 = query(2*node, start, mid, l, r);
    pair<int,int> p2 = query(2*node+1, mid+1, end, l, r);
    pair<int,int> p3;
    if(p1.fi<p2.fi)
        return p1;
    else  if(p1.fi>p2.fi)
        return p2;
    else
        return mp(p1.fi,min(p1.se,p2.se));
}
pair<int,int> queryRange(int node, int start, int end, int l, int r)
{
    if(start > end or start > r or end < l)
        return  mp(100,100000);        // Out of range
    if(start >= l and end <= r)             // Current segment is totally within range [l, r]
        return mp(tree[node],tree1[node]);
    int mid = (start + end) / 2;
    pair<int,int> p1 = query(2*node, start, mid, l, r);
    pair<int,int> p2 = query(2*node+1, mid+1, end, l, r);
    pair<int,int> p3;
    if(p1.fi<p2.fi)
        return p1;
    else  if(p1.fi>p2.fi)
        return p2;
    else
        return mp(p1.fi,min(p1.se,p2.se));
}
int prog()
{
    lli i,j,k,x,y,z,n;
    string s,S;
    cin>>s;
    gi(k);
    fl(i,0,s.size())
        A[i]=s[i]-97;
    n = s.size();
    build(1,0,n-1);
    x = 0;
    S = "";
    pair<int,int> temp;
        temp = queryRange(1,0,n-1,n-2,n-1);
    while(k!=0)
    {
        y = x;
        z = n-(k-1);
        temp = queryRange(1,0,n-1,y,z-1);
        S+=s[temp.se];
        x = temp.se+1;
        k-=1;
    }
    cout<<S<<endl;
    r0;
}
int main()
{
    //f_in;
    lli t;
    tree = new lli [1000000];
    tree1 = new lli [1000000];
    A = new lli [1000000];
    gi(t);
    while(t--)
        prog();
    r0;
}
