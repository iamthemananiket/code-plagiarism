#include <bits/stdc++.h>

#define VI vector<int>
#define VII vector<pair<int,int>>
#define QI queue<int>

#define ms(a,v) memset( a, v, sizeof( a ) )
#define FOR(i,a,b) for(int i = a; i <= b; ++i)
#define ROF(i,a,b) for(int i = a; i >= b; i--)
#define foreach(v, c) for( typeof( (c).begin() ) v = (c).begin(); v != (c).end(); ++v)

#define pb push_back
#define pp pair<int,int>
#define mp make_pair
#define fi first
#define se second

#define popcount __builtin_popcount
#define gcd __gcd
#define bit(n,i) ( n & ( 1LL << i ) )
#define lsb(x) ( x & ( -x ) )

#define FIN(str) freopen(str,"r",stdin)
#define FOUT(str) freopen(str,"w",stdout)
#define Fin(str) ifstream(str)
#define Fout(str) ostream(str)
#define SYNC ios_base::sync_with_stdio(0);

#define ll long long
#define ull unsigned long long

const int BS = ( 1 << 16 );
char buffer[BS];
int position = BS;

inline char Getchar()
{
    if ( position == BS )
    {
        fread( buffer, BS, 1, stdin );
        position = 0;
    }

    return buffer[ position++ ];
}

inline void read( int &a )
{
    register char ch;
    a = 0;
    int sign = 1;

    do
    {
        ch = Getchar();

    } while ( !isdigit( ch ) && ch != '-' );

    if ( ch == '-' )
    {
        sign = -1;
        ch = Getchar();
    }

    do
    {
        a = a * 10 + ch - '0';
        ch = Getchar();

    } while( isdigit( ch ) );

    a *= sign;
}

inline void write( int a )
{
    char s[20];
    int i = 0;
    int sign = 1;

    if ( a < 0 )
        sign = -1,
        a = -a;

    do
    {
        s[ i++ ] = a % 10 + '0';
        a /= 10;

    } while ( a );

    i--;

    if ( sign == -1 )
        putchar( '-' );

    while ( i >= 0 ) putchar( s[ i-- ] );
}

const int dx[] = { -1, 0, 1, 0 };
const int dy[] = { 0, 1, 0, -1 };

const int dl[] = { -1, -1, -1, 0, 0, 1, 1, 1 };
const int dc[] = { -1, 0, 1, -1, 1, -1, 0, 1 };

const int INF = 2e9;
const double EPS = 1e-9;

const int Nmax = 1e5 + 2;

const int LgMax = log2(Nmax) + 1;

using namespace std;

class Treap
{
    typedef struct _Node
    {
        int key;
        int sum;
        int maxim;
        int contor;
        int priority;
        _Node *l, *r;

        _Node( const int _key, const int _priority, const int nr_nodes, _Node *st, _Node *dr )
        {
            key = _key;
            maxim = _key;
            priority = _priority;
            contor = nr_nodes;
            l = st;
            r = dr;
        }

        void update()
        {
            this->maxim = this->key;
            maxim = max( this->maxim, this->l->maxim );
            maxim = max( this->maxim, this->r->maxim );

            this->contor = 1;
            this->contor += this->l->contor;
            this->contor += this->r->contor;

            this->sum = key;
            this->sum += this->l->sum;
            this->sum += this->r->sum;
        }

    } *Node;

    void rotateRight( Node &T )
    {
        Node aux = T->l;
        T->l = aux->r;
        aux->r = T;

        T->update();
        aux->update();

        T = aux;
    }

    void rotateLeft( Node &T )
    {
        Node aux = T->r;
        T->r = aux->l;
        aux->l = T;

        T->update();
        aux->update();

        T = aux;
    }

    void balance( Node &T )
    {
        if ( T->l->priority > T->priority )
            rotateRight( T );

        if ( T->r->priority > T->priority )
            rotateLeft( T );
    }

    void insert( Node &T, const int pos, const int key, int p = rand() % INF )
    {
        if ( T == NIL )
        {
            T = new _Node( key, p, 1, NIL, NIL );
        }
        else
        {
            if ( pos <= T->l->contor + 1 )
                insert( T->l, pos, key, p );
            else
                insert( T->r, pos - T->l->contor - 1, key, p );

            balance( T );
        }

        if ( T != NIL )
            T->update();
    }

    void erase( Node &T, const int pos )
    {
        if ( T == NIL ) return;

        if ( pos <= T->l->contor )
            erase( T->l, pos );
        else
            if ( pos > T->l->contor + 1 )
                erase( T->r, pos - T->l->contor - 1 );
            else
            {
                if ( T->l == NIL && T->r == NIL )
                {
                    delete T;
                    T = NIL;
                }
                else
                {
                    if ( T->l->priority > T->r->priority )
                    {
                        rotateRight( T );
                        erase( T->r, pos - T->l->contor - 1 );
                    }
                    else
                    {
                        rotateLeft( T );
                        erase( T->l, pos );
                    }
                }
            }

        if ( T != NIL )
            T->update();
    }

    void split( Node &root, Node &L, Node &R, const int pos )
    {
        insert( root, pos, 1, INF );
        L = root->l;
        R = root->r;
        delete root;
        root = NIL;
    }

    void merge( Node &root, Node &L, Node &R )
    {
        root = new _Node( 0, INF, 1, L, R );
        root->update();
        erase( root, root->l->contor + 1 );
    }

    Node root, NIL;
    const static int INF = 1e9;

    void print(Node T)
    {
        if ( T == NIL ) return;

        print( T->l );
        cerr << T->key << " ";
        print( T->r );
    }

    void sterge(Node &T)
    {
        if ( T == NIL ) return;

        sterge( T->l );
        sterge( T->r );

        delete T;
        T = NIL;
    }

    int kth_element( Node root, int pos )
    {
        if ( root == NIL ) return -1;

        if ( root->l->contor + 1 == pos )
            return root->key;

        if ( pos <= root->l->contor )
            return kth_element( root->l, pos );
        else
            return kth_element( root->r, pos - root->l->contor - 1 );
    }

public:

    Treap()
    {
        NIL = new _Node( -INF, 0, 0, NULL, NULL );
        root = NIL;
    }

     void insert( const int pos, const int key )
    {
        insert( root, pos, key );
    }

     void erase( const int pos )
    {
        erase( root, pos );
    }

     void change( const int pos, const int key )
    {
        erase( root, pos );
        insert( root, pos, key );
    }

     void update( int x, int y )
    {
        Node tmp, T1, T2, T3;

        split( root, T1, T2, y + 1 );
        split( T1, T3, tmp, x );

        merge( T1, tmp, T3 );
        merge( root, T1, T2 );
    }

     int query( int x, int y )
    {
        int sol = 0;

        Node tmp, T1, T2, T3;

        split( root, T1, T2, y + 1 );
        split( T1, T3, tmp, x );

        sol = tmp->sum;

        merge( T1, T3, tmp );
        merge( root, T1, T2 );

        return sol;
    }

     int kth_element( const int pos )
    {
        return kth_element( root, pos );
    }

    void print()
    {
        print( root );
    }
};

int A[Nmax], C[Nmax];
int T, N, M;

int main()
{
    ///FIN("data.in");
    ///FOUT("data.out");

    srand( time(NULL) );

    read( T );

    while ( T-- )
    {
        read( N );

        for ( int i = 1; i <= N; ++i )
            read( A[i] );

        for ( int i = 1; i < N; ++i )
            C[i] = ( A[i + 1] != A[i] );

        C[N] = 0;

        Treap TrA, TrC;

        for ( int i = 1; i <= N; ++i )
            TrA.insert( i, A[i] ),
            TrC.insert( i, C[i] );

        read( M );

        while ( M-- )
        {
            int tip, l, r;

            read( tip ); read( l ); read( r );

            if ( tip == 2 )
            {
                if ( l == 1 )
                {
                    continue;
                }

                TrA.update( l, r );

                TrC.update( l, r );

                int a = TrA.kth_element( r - ( l - 1 ) );
                int b = TrA.kth_element( r - ( l - 1 ) + 1 );

                TrC.change( r - ( l - 1 ), ( b != a ) );

                if ( r == N )
                {
                    TrC.change( N, 0 );
                }
                else
                {
                    a = TrA.kth_element( r );
                    b = TrA.kth_element( r + 1 );

                    TrC.change( r, ( b != a ) );
                }
            }
            else
            {
                r--;

                printf("%d\n", TrC.query(l, r) + 1);
            }
        }
    }

    return 0;
}
