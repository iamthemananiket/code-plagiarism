#include <bits/stdc++.h>
using namespace std;

#define repu(i, a, b) for (int i = (a); i < (b); ++i)
#define repd(i, a, b) for (int i = (a); i > (b); --i)
#define mem(a, x) memset(a, x, sizeof(a))
#define all(a) a.begin(), a.end()
#define uni(a) a.erase(unique(all(a)), a.end())
#define count_bits(x) __builtin_popcount(x)
#define count_bitsll(x) __builtin_popcountll(x)
#define least_bits(x) __builtin_ffs(x)
#define least_bitsll(x) __builtin_ffsll(x)
#define most_bits(x) 32 - __builtin_clz(x)
#define most_bitsll(x) 64 - __builtin_clz(x)

vector<string> split(const string &s, char c) {
	vector<string> v;
	stringstream ss(s);
	string x;
	while (getline(ss, x, c)) v.push_back(x);
	return v;
}

#define error(args...) { vector<string> _v = split(#args, ','); err(_v.begin(), args); }

void err(vector<string>::iterator it) {}

template<typename T, typename... Args>
void err(vector<string>::iterator it, T a, Args... args) {
	cerr << it -> substr((*it)[0] == ' ', it -> length()) << " = " << a << '\n';
	err(++it, args...);
}

typedef long long ll;
const int MOD = 1000000007;

template<class T, class U> inline T tmin(T a, U b) {return (a < b) ? a : b;}
template<class T, class U> inline T tmax(T a, U b) {return (a > b) ? a : b;}
template<class T, class U> inline void amax(T &a, U b) {if (b > a) a = b;}
template<class T, class U> inline void amin(T &a, U b) {if (b < a) a = b;}
template<class T> inline T tabs(T a) {return (a > 0) ? a : -a;}
template<class T> T gcd(T a, T b) {while (b != 0) {T c = a; a = b; b = c % b;} return a;}

const int N = 50;
int cnt[N], dp[N];

int tpow(int x, int y) {
    int res = 1;
    int a = x;
    while (y > 0) {
        if (y & 1) {
            res *= a;
        }
        a *= a;
        y >>= 1;
    }
    return res;
}

int main(int argc, char *argv[]) {
    ios_base::sync_with_stdio(false);
    int ntest, n;

    cin >> ntest;
    while (ntest--) {
    	cin >> n;
    	int tot = tpow(n, n);
    	mem(dp, 0);
    	repu(i, 0, tot) {
    		int x = i;
    		int pre = -1;
    		bool check = 1;
    		mem(cnt, 0);
    		repu(j, 0, n) {
    			int cur = x % n;
    			if (cur == pre) {
    				check = 0; break;
    			}
    			cnt[cur]++;
    			pre = cur;
    			x /= n;
    		}
    		if (check) {
    			sort(cnt, cnt + n);
    			int z = 0;
    			repu(i, 0, n) if (cnt[i] == cnt[n - 1]) z++;
    			dp[z]++;
    		}
    	}
    	double ans = 0, res = 0;
    	repu(i, 1, n + 1) {
    		ans += dp[i] * i;
    		res += dp[i];
    	}
    	ans /= res;
    	printf("%.6f\n", ans);
    }
    return 0;
}
