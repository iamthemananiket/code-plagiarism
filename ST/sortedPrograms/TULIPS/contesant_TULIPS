#include <algorithm>
#include <cstdio>
#include <cstdlib>
#include <vector>
#include <set>
#include <cassert>

#define pb push_back
#define all(x) (x).begin(), (x).end()

#define eprintf(...) fprintf(stderr,__VA_ARGS__)

using namespace std;

template<class T> inline void umax(T &a,T b){if(a < b) a = b;}
template<class T> inline void umin(T &a,T b){if(a > b) a = b;}
template<class T> inline T abs(T a){return a > 0 ? a : -a;}

typedef long long ll;
typedef pair<int, int> ii;
typedef vector<int> vi;
typedef vector<ii> vii;

const int inf = 1e9 + 143;
const ll longinf = 1e18 + 143;

inline int read(){int x;scanf(" %d",&x);return x;}

const int N = 2e5 + 100;
const int LG = 20;

class Solver{
public:

  int n;
  int p[N];

  void initDsu() {
    for (int i = 0; i < N; i++) {
      p[i] = i;
    }
  }

  int getSet(int x) {
    if (x == p[x])
      return x;
    return p[x] = getSet(p[x]);
  }

  bool mergeSet(int u, int v) {
    u = getSet(u);
    v = getSet(v);
    if (u == v)
      return false;
    p[u] = v;
    return true;
  }

  int len[N];
  vi g[N];
  int tin[N], tout[N], tick;
  int anc[N][LG], d[N];
  int from[N], to[N];

  void dfs(int u, int p) {
    tin[u] = tick;
    if (u <= n) {
      ++tick;
    }
    anc[u][0] = p;
    for (int i = 1; i < LG; i++) {
      anc[u][i] = anc[anc[u][i - 1]][i - 1];
    }
    for (int v : g[u]) {
      if (v != p) {
        d[v] = d[u] + 1;
        dfs(v, u);
      }
    }
    tout[u] = tick - 1;
  }

  struct Node{
    Node *pl, *pr;
    int l, r;
    int cnt1;
    int setv;

    Node () {
      pl = pr = nullptr;
      l = r = cnt1 = 0;
      setv = -1;
    }

    Node (int _l, int _r) {
      l = _l;
      r = _r;
      setv = -1;
      if (l < r) {
        int m = (l + r) / 2;
        pl = new Node(l, m);
        pr = new Node(m + 1, r);
        cnt1 = pl->cnt1 + pr->cnt1;
      } else {
        pl = pr = nullptr;
        cnt1 = 1;
      }
    }

    void apply(int by) {
      setv = by;
      cnt1 = (by? r - l + 1 : 0); 
    }

    void push() {
      if (setv != -1) {
        pl->apply(setv);
        pr->apply(setv);
        setv = -1;
      }
    }

    void gather() {
      cnt1 = pl->cnt1 + pr->cnt1;
    }

    void setVal(int x1, int x2, int by) {
      if (l > x2 || r < x1)
        return;
      if (l >= x1 && r <= x2) {
        apply(by);
        return;
      }
      push();
      pl->setVal(x1, x2, by);
      pr->setVal(x1, x2, by);
      gather();
    }

    int getOnes(int x1, int x2) {
      if (l > x2 || r < x1)
        return 0;
      if (l >= x1 && r <= x2)
        return cnt1;
      push();
      return pl->getOnes(x1, x2) + pr->getOnes(x1, x2);
    }
  }; 

  void solve() {
    n = read();
    vector<pair<int, ii>> edges;
    for (int i = 0; i < n - 1; i++) {
      int u = read();
      int v = read();
      int c = read();
      edges.pb({c, {u, v}});
    }

    sort(all(edges));
    for (int i = 1; i <= n; i++) {
      len[i] = -1;
    }

    initDsu();
    int nn = n;
    for (auto e : edges) {
      int u = e.second.first;
      int v = e.second.second;
      int pu = getSet(u);
      int pv = getSet(v);
      if (pu != pv) {
        ++nn;
        len[nn] = e.first;
        p[pu] = nn;
        p[pv] = nn;

        g[nn].pb(pu);
        g[nn].pb(pv);
      }
    }

    int root = nn;
    d[root] = 0;
    tick = 1;
    dfs(root, 0);
    assert(tick == n + 1);
    Node *tree = new Node(1, n);

    int q = read();
    int X = read();

    multiset<pair<ii, int>> plus;
    multiset<pair<int, ii>> toOpen;

    for (int qid = 0; qid < q; qid++) {
      int d = read();
      int u = read();
      int k = read();

      while (toOpen.size() && toOpen.begin()->first <= d) {
        tree->setVal(toOpen.begin()->second.first, toOpen.begin()->second.second, 1);
        plus.erase(plus.find({toOpen.begin()->second, toOpen.begin()->first}));
        toOpen.erase(toOpen.begin());
      }

      for (int i = LG - 1; i >= 0; i--) {
        int p = anc[u][i];
        if (p > 0 && len[p] <= k) {
          u = p;
        }  
      }

      from[qid] = tin[u];
      to[qid] = tout[u];
      int ans = tree->getOnes(from[qid], to[qid]);
      tree->setVal(from[qid], to[qid], 0);

      {
        //remove intersecting ones
        vector<pair<int, ii>> toErase, toInsert;
        int l = from[qid], r = to[qid];
        auto it = plus.lower_bound({{l, 0}, 0});
        if (it != plus.begin())
          it--;
        for ( ; it != plus.end(); it++) {
          int ll = it->first.first, rr = it->first.second;
          auto day = it->second;
          if (ll > r)
            break;
          if (rr < l)
            continue;
          toErase.pb({day, {ll, rr}});
          if (ll < l) {
            toInsert.pb({day, {ll, l - 1}});
          }
          if (rr > r) {
            toInsert.pb({day, {r + 1, rr}});
          }
        }
        plus.insert({{l, r}, d + X});
        toOpen.insert({d + X, {l, r}});
        for (auto e : toErase) {
          toOpen.erase(toOpen.find(e));
          plus.erase(plus.find({e.second, e.first}));
        }
        for (auto e : toInsert) {
          toOpen.insert(e);
          plus.insert({e.second, e.first});
        }
      }
      
      printf("%d\n", ans);
    }
  }
};

Solver slv[10];

int main(){
  int t = read();
  for (int i = 0; i < t; i++) {
    slv[i].solve();
  }
  return 0;
}