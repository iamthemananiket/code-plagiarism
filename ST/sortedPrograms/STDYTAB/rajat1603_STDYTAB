#include "bits/stdc++.h"
using namespace std;
const int N = 2001;
const int M = 2001;
const int mod = 1000000000;
int t , n , m;
int dp[M][M];
int prefix[M][M];
int ans;
int rowdp[N][M];
int rowprefix[N][M];
int main(){
    cin >> t;
    while(t--){
        memset(dp , 0 , sizeof(int) * M * M);
        memset(prefix , 0 , sizeof(int) * M * M);
        memset(rowdp , 0 , sizeof(int) * N * M);
        memset(rowprefix , 0 , sizeof(int) * N * M);
        ans = 0;
        cin >> n >> m;
        for(int i = 0 ; i <= m ; ++i){
            dp[i][0] = 1;
            prefix[0][i] = 1;
        }
        for(int i = 1 ; i <= m ; ++i){
            for(int j = 1 ; j <= m ; ++j){
                dp[i][j] = prefix[i - 1][j];
            }
            prefix[i][0] = dp[i][0];
            for(int j = 1 ; j <= m ; ++j){
                prefix[i][j] = prefix[i][j - 1] + dp[i][j];
                if(prefix[i][j] >= mod){
                    prefix[i][j] -= mod;
                }
            }
        }
        for(int i = 0 ; i <= n ; ++i){
            rowdp[i][0] = 1;
        }
        for(int i = 0 ; i <= m ; ++i){
            rowprefix[0][i] = 1;
        }
        for(int i = 1 ; i <= n ; ++i){
            for(int j = 1 ; j <= m ; ++j){
                rowdp[i][j] = (1LL * rowprefix[i - 1][j] * dp[m][j]) % mod;
            }
            rowprefix[i][0] = rowdp[i][0];
            for(int j = 1 ; j <= m ; ++j){
                rowprefix[i][j] = rowprefix[i][j - 1] + rowdp[i][j];
                if(rowprefix[i][j] >= mod){
                    rowprefix[i][j] -= mod;
                }
            }
        }
        printf("%d\n" , rowprefix[n][m]);
    }
}