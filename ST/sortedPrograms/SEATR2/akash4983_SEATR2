#include <cstdio>
#include <cmath>
#include <iostream>
#include <set>
#include <algorithm>
#include <vector>
#include <map>
#include <cassert>
#include <string>
#include <cstring>
#include <queue>

using namespace std;

#define rep(i,a,b) for(int i = a; i < b; i++)
#define S(x) scanf("%d",&x)
#define S2(x,y) scanf("%d%d",&x,&y)
#define P(x) printf("%d\n",x)
#define all(v) v.begin(),v.end()
#define FF first
#define SS second

typedef long long int LL;
typedef pair<int, int > pii;
typedef vector<int > vi;

const int N = 501;

int n,m;
const int mod = 1000000007;
int dp[N][20001];
int in[N];
vector<int > g[N];
int P[N];
int mu[20001];

void dfs(int c, int p) {
  P[c] = p;
  rep(i,0,g[c].size()) {
    if(g[c][i] != p) {
      dfs(g[c][i], c);
    }
  }
}

queue<int > q;

int solve() {
  if(n == 1) return m;
  rep(i,2,n+1) if(in[i] == 1) {
    q.push(i);
  }
  while(q.size()) {
    int c = q.front();
    q.pop();
    for(int i = m; i >= 1; i--) {
      if(i == m) {
        dp[c][i] = 1;
        continue;
      }
      if(i != 1 && m/i == m/(i+1)) {
        dp[c][i] = dp[c][i+1];
        continue;
      }
      dp[c][i] = 0;
      LL tmp = 1;
      rep(j,0,g[c].size()) if(g[c][j] != P[c]) {
        tmp = tmp * dp[g[c][j]][i] % mod;
      }
      dp[c][i] += tmp;
      if(dp[c][i] >= mod) dp[c][i] -= mod;
      for(int k = 2; k*i <= m; k += 1) {
        dp[c][i] -= mu[k] * dp[c][i*k];
        if(dp[c][i] < 0) dp[c][i] += mod;
        if(dp[c][i] >= mod) dp[c][i] -= mod;
      }
      // printf("%d %d %d\n",c,i,dp[c][i]);

    }
    in[P[c]]--;
    if(in[P[c]] == 1) q.push(P[c]);
  }
  int ans = 0;
  // rep(i,1,m+1) {
  //   ans += dp[1][m/i];
  //   if(ans >= mod) ans -= mod;
  // }
  return dp[1][1];
}

int main() {

  rep(i,2,20001) mu[i] = 2;
  mu[1] = 1;
  for(int i = 2; i < 20001; i++) if(mu[i] == 2) {
    mu[i] = -1;
    for(int j = 2*i; j < 20001; j += i) {
      if(mu[j] == 2) mu[j] = 1;
      if((j/i)%i == 0) mu[j] = 0;
      else mu[j] *= -1;
    }
  }

  int t;
  S(t);
  while(t--) {
    S2(n,m);
    rep(i,1,n+1) {
      g[i].clear();
      in[i] = 0;
    }
    in[1]++;
    rep(i,0,n-1) {
      int u,v;
      S2(u,v);
      g[u].push_back(v);
      g[v].push_back(u);
      in[u]++;
      in[v]++;
    }
    dfs(1,0);
    printf("%d\n",solve());
  }
  return 0;
}