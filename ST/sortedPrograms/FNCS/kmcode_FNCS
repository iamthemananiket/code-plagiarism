#include<iostream>
#include<cstdio>
#include<cstring>
#include<string>
#include<cctype>
#include<cstdlib>
#include<algorithm>
#include<bitset>
#include<vector>
#include<list>
#include<deque>
#include<queue>
#include<map>
#include<set>
#include<stack>
#include<cmath>
#include<sstream>
#include<fstream>
#include<iomanip>
#include<ctime>
#include<complex>
#include<functional>
#include<climits>
#include<cassert>
#include<iterator>
//#include<unordered_map>
//#include<unordered_set>
//#include<quadmath.h>
using namespace std;
#define MAX 100002
int n;
long long  int a[MAX];
unsigned long long int bit[MAX];
void add(int i, unsigned long long int x){
	i++;
	while (i < MAX){
		bit[i] += x;
		i += i&-i;
	}
}
unsigned long long  sum(int i){
	unsigned long long int r = 0;
	i++;
	while (i){
		r += bit[i];
		i -= i&-i;
	}
	return r;
}
struct BLOCK{
	vector<pair<int, int> > v;
	unsigned long long int sum = 0;
	unsigned long long int countt[MAX];
	int siz;
	BLOCK(){
		for (int i = 0; i < MAX; i++){
			countt[i] = 0;
		}
	}
	void r(){
		for (int i = 1; i < MAX; i++){
			countt[i] += countt[i - 1];
		}
	}
};
BLOCK b[400];
int unit;
int belong[MAX];
int att[MAX];
long long int block_bit[MAX];
int max_belong;
void add_block(int i, long long int x){
	i++;
	while (i < max_belong){
		block_bit[i] += x;
		i += i&-i;
	}

}
long long int sum_block(int i){
	long long int r = 0;
	i++;
	while (i){
		r += block_bit[i];
		i -= i&-i;
	}
	return r;
}
void read(int *x){ int k, m = 0; *x = 0; for (;;){ k = getchar(); if (k == '-'){ m = 1; break; }if ('0' <= k&&k <= '9'){ *x = k - '0'; break; } }for (;;){ k = getchar(); if (k<'0' || k>'9')break; *x = (*x) * 10 + k - '0'; }if (m)(*x) = -(*x); }
void write(long long int x){ int s = 0, m = 0; char f[20]; if (x<0)m = 1, x = -x; while (x)f[s++] = x % 10, x /= 10; if (!s)f[s++] = 0; if (m)putchar('-'); while (s--)putchar(f[s] + '0'); }

int main(){
	scanf("%d", &n);
	for (int i = 0; i < n; i++){
		scanf("%lld", &a[i]);
		add(i, a[i]);
	}
	unit = sqrt(n);
	for (int i = 0; i < n; i++){
		int l, r;
		read(&l);
		read(&r);
		l--;
		r--;
		belong[i] = i / unit;
		att[i] = b[belong[i]].v.size();
		b[belong[i]].countt[l]++;
		b[belong[i]].countt[r + 1]--;
		b[belong[i]].v.push_back(make_pair(l, r));
		b[belong[i]].sum += sum(r) - sum(l - 1);
	}
	max_belong = belong[n - 1] + 3;
	for (int i = 0; i <= belong[n - 1]; i++){
		add_block(i, b[i].sum);
		b[i].r();
		b[i].siz = b[i].v.size();
	}
	int q;
	read(&q);
	while (q--){
		int ty;
		read(&ty);
		if (ty == 1){
			int x;
			int y;
			read(&x);
			read(&y);
			x--;
			unsigned long long int Add = y - a[x];
			if (Add){
				a[x] = y;
				add(x, Add);
				for (int i = 0; i <= belong[n - 1]; i++){
					if (b[i].countt[x]){
						b[i].sum += b[i].countt[x] * Add;
					}
				}
			}
			continue;
		}
		int m;
		int n;
		read(&m);
		read(&n);
		m--;
		n--;
		int st = belong[m];
		int en = belong[n];
		if (belong[m] == belong[n]){
			unsigned long long int ans = 0;
			for (int i = att[m]; i <= att[n]; i++){
				ans += sum(b[st].v[i].second) - sum(b[st].v[i].first - 1);
			}
			write(ans);
			putchar('\n');
			continue;
		}
		if (att[m]){
			st++;
		}
		if (att[n] + 1 != b[belong[n]].siz){
			en--;
		}
		unsigned long long int ans = 0;
		if (st <= en){
			for (register int i = st; i <= en; i++){
				ans += b[i].sum;
			}
		}
		if (att[m]){
			st--;
			if (b[st].siz - att[m] > att[m]){
				ans += b[st].sum;
				for (register int i = 0; i <att[m]; i++){
					ans -= sum(b[st].v[i].second) - sum(b[st].v[i].first - 1);
				}
			}
			else{
				for (register int i = att[m]; i < b[st].siz; i++){
					ans += sum(b[st].v[i].second) - sum(b[st].v[i].first - 1);
				}
			}
		}
		if (att[n] + 1 != b[belong[n]].siz){
			en++;
			if (b[belong[n]].siz - att[n] < att[n]){
				ans += b[belong[n]].sum;
				for (register int i = b[belong[n]].siz - 1; i > att[n]; i--){
					ans -= sum(b[belong[n]].v[i].second) - sum(b[belong[n]].v[i].first - 1);
				}
			}
			else{
				for (register int i = 0; i <= att[n]; i++){
					ans += sum(b[belong[n]].v[i].second) - sum(b[belong[n]].v[i].first - 1);
				}
			}
		}
		write(ans);
		putchar('\n');
	}
	return 0;
}