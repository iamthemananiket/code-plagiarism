//Program: fncs
//Author: gary
//Date: 07/11/2014
#include <cstdio>
#include <cassert>
#include <cstring>
#include <cmath>
#include <iostream>
#include <vector>
#include <set>
#include <map>
#include <queue>
#include <stack>
#include <string>
#include <algorithm>
using namespace std;
#define SZ(x) ( (int) (x).size() )
#define dbg(x) cerr << #x << " = " << x << endl;
#define mp make_pair
#define pb push_back
#define fi first
#define se second
typedef unsigned long long ll;
typedef pair<int, int> pii;
const int MAX_N = 1e5 + 50;
const int SQRTN = 350;

int N, Q;
int A[MAX_N];
int S;
ll ft[MAX_N];

void ft_update(int i, int x){
  for(; i < MAX_N; i += i & -i)
    ft[i] += x;
}
ll ft_query(int i){
  ll s = 0;
  for(; i > 0; i -= i & -i)
    s += ft[i];
  return s;
}

int b[2][SQRTN][SQRTN];
int o[2][SQRTN];
int f[2][MAX_N];
ll s[2][SQRTN];

void build(){
  S = ceil(sqrt(N));
  for(int k = 0; k < 2; k++){
    for(int i = 0; i < S; i++){
      o[k][i] = 0;
      for(int j = 0; j < S && i * S + j < N; j++){
	b[k][i][o[k][i]++] = f[k][i * S + j];
      }
    }
    for(int i = 0; i < S; i++){
      sort(&b[k][i][0], &b[k][i][o[k][i]]);
      s[k][i] = 0;
      for(int j = 0; j < o[k][i]; j++)
	s[k][i] += ft_query(b[k][i][j]);
    }
  }
}

ll query(int i, int j){
  int bi = i / S, bj = j / S;
  ll ret[2] = {};
  for(int h = 0; h < 2; h++){
    if(bi == bj){
      for(int k = i; k <= j; k++)
	ret[h] += ft_query(f[h][k]);
    } else {
      for(int k = i; k < (bi + 1) * S; k++) ret[h] += ft_query(f[h][k]);
      for(int k = bj * S; k <= j; k++) ret[h] += ft_query(f[h][k]);
      for(int k = bi + 1; k < bj; k++) ret[h] += s[h][k];
    }
  }
  return ret[1] - ret[0];
}

void update(int i, int x){
  int y = x - A[i];
  for(int k = 0; k < 2; k++){
    for(int j = 0, t; j < S; j++){
      t = o[k][j] - (lower_bound(b[k][j], b[k][j] + o[k][j], i) - b[k][j]);      
      s[k][j] += (ll) t * y;
    }
  }
  ft_update(i, x - A[i]);
  A[i] = x;
}


int main(){
  int a, b, c;
  scanf("%d", &N);
  for(int i = 1; i <= N; i++) {
    scanf("%d", A + i);
    ft_update(i, A[i]);
  }
  for(int i = 0; i < N; i++) {
    scanf("%d%d", &f[0][i], &f[1][i]);
    f[0][i] --;
  }
  build();
  scanf("%d", &Q);
  while(Q--){
    scanf("%d%d%d", &a, &b, &c);
    if(a == 1){
      update(b, c);
    } else {
      ll ans = query(b - 1, c - 1);
      printf("%llu\n", ans);
    }
  }
  return 0;
}
