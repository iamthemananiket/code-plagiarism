#define _CRT_SECURE_NO_WARNINGS
#include <string>
#include <vector>
#include <algorithm>
#include <numeric>
#include <set>
#include <map>
#include <queue>
#include <iostream>
#include <sstream>
#include <cstdio>
#include <cmath>
#include <ctime>
#include <cstring>
#include <cctype>
#include <cassert>
#include <limits>
#include <functional>
#include <unordered_map>
#define rep(i,n) for(int (i)=0;(i)<(int)(n);++(i))
#define rer(i,l,u) for(int (i)=(int)(l);(i)<=(int)(u);++(i))
#define reu(i,l,u) for(int (i)=(int)(l);(i)<(int)(u);++(i))
#if defined(_MSC_VER) || __cplusplus > 199711L
#define aut(r,v) auto r = (v)
#else
#define aut(r,v) typeof(v) r = (v)
#endif
#define each(it,o) for(aut(it, (o).begin()); it != (o).end(); ++ it)
#define all(o) (o).begin(), (o).end()
#define pb(x) push_back(x)
#define mp(x,y) make_pair((x),(y))
#define mset(m,v) memset(m,v,sizeof(m))
#define INF 0x3f3f3f3f
#define INFL 0x3f3f3f3f3f3f3f3fLL
using namespace std;
typedef vector<int> vi; typedef pair<int,int> pii; typedef vector<pair<int,int> > vpii;
typedef long long ll; typedef vector<long long> vl; typedef pair<long long,long long> pll; typedef vector<pair<long long,long long> > vpll;
typedef vector<string> vs; typedef long double ld;
template<typename T, typename U> inline void amin(T &x, U y) { if(y < x) x = y; }
template<typename T, typename U> inline void amax(T &x, U y) { if(x < y) x = y; }

typedef vector<vector<bool> > Mat;

bool permTest(int i, const Mat &g, const Mat &h, const vpii &gs, vpii &hs) {
	if(i == g.size()) return true;
	int u = gs[i].second, deg = gs[i].first;
	for(int j = i; j < (int)h.size() && hs[j].first == deg; ++ j) {
		swap(hs[i], hs[j]);
		int v = hs[i].second;
		rep(k, i+1) {
			if(g[u][gs[k].second] != h[v][hs[k].second]) goto ng;
			if(g[gs[k].second][u] != h[hs[k].second][v]) goto ng;
		}
		if(permTest(i+1, g, h, gs, hs)) return true;
	ng:
		swap(hs[i], hs[j]);
	}
	return false;
}

bool isomorphism(const Mat &g, const Mat &h) {
	int n = g.size();
	if(h.size() != n) return false;

	vpii gs(n), hs(n);
	rep(i, n) gs[i] = mp(count(all(g[i]), true), i);
	rep(i, n) hs[i] = mp(count(all(h[i]), true), i);
	sort(all(gs)); sort(all(hs));

	rep(i, n)
		if(gs[i].first != hs[i].first)
			return false;

	return permTest(0, g, h, gs, hs);
}

int main() {
	vector<int> popcnt(1 << 11);
	rep(i, 1 << 11) {
		int p = 0;
		rep(j, 11) p += i >> j & 1;
		popcnt[i] = p;
	}
	int T;
	scanf("%d", &T);
	rep(ii, T) {
		int N, M;
		scanf("%d%d", &N, &M);
		Mat g(N, vector<bool>(N, false));
		rep(i, M) {
			int u, v;
			scanf("%d%d", &u, &v), -- u, -- v;
			g[u][v] = g[v][u] = true;
		}
		int log2N = 0;
		while((1 << (log2N+1)) <= N) ++ log2N;
		if((1 << log2N) != N) {
			puts("NO");
			continue;
		}
		Mat h(N, vector<bool>(N, false));
		vector<int> vertices;
		rep(i, 1 << (log2N+1))
			if(popcnt[i] % 2 == 0)
				vertices.push_back(i);
		rep(i, vertices.size()) rep(j, vertices.size())
			h[i][j] = popcnt[vertices[i] ^ vertices[j]] == 2;
		bool ans = isomorphism(g, h);
		puts(ans ? "YES" : "NO");
	}
	return 0;
}
