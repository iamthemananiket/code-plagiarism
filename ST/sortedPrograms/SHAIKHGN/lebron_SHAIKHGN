/*
*/

//#pragma comment(linker, "/STACK:16777216")
#define _CRT_SECURE_NO_WARNINGS

#include <fstream>
#include <iostream>
#include <string>
#include <complex>
#include <math.h>
#include <set>
#include <vector>
#include <map>
#include <queue>
#include <stdio.h>
#include <stack>
#include <algorithm>
#include <list>
#include <ctime>
#include <memory.h>
#include <assert.h>

#define y0 sdkfaslhagaklsldk
#define y1 aasdfasdfasdf
#define yn askfhwqriuperikldjk
#define j1 assdgsdgasghsf
#define tm sdfjahlfasfh
#define lr asgasgash
#define norm asdfasdgasdgsd

#define eps 1e-9
#define M_PI 3.141592653589793
#define bs 1000000007
#define bsize 350

using namespace std;

const int INF = 1e9;
const int N = 1000;

int n;
int ar[N][N];
int tests;
int k;
vector<vector<int> > v[1000];

unsigned int ONE = 1;

vector<vector<int> > bitwise_mult(vector<vector<unsigned int> > v1, vector<vector<unsigned int > > v2)
{
	vector<vector<int> > res;
	res.resize(v1.size());
	for (int i = 0; i < res.size(); i++)
	{
		res[i].resize(v1.size());
		for (int j = 0; j < res[i].size(); j++)
		{
			res[i][j] = 0;
		}
	}

	for (int i = 0; i < res.size(); i++)
	{
		for (int j = 0; j < res.size(); j++)
		{
			for (int k = 0; k < v1[i].size(); k++)
			{
				if (v1[i][k] & v2[j][k])
				{
					res[i][j] = 1;
					break;
				}
			}
		}
	}
	return res;
}

vector<vector<unsigned int> > get_compression(vector<vector<int> > v)
{
//	cout << "!" << endl;
	vector<vector<unsigned int> > res;
	res.resize(v.size());
	for (int i = 0; i < res.size(); i++)
	{
		res[i].resize(v[0].size() / 32 + 1);
		for (int j = 0; j < res[i].size(); j++)
		{
			res[i][j] = 0;
		}
	}
	for (int i = 0; i < v.size(); i++)
	{
		for (int j = 0; j < v[i].size(); j++)
		{
			if (v[i][j])
				res[i][j / 32] |= (ONE << (j % 32));
		}
	}
//	cout << "@" << endl;
	return res;
}

vector<vector<int> > transp(vector<vector<int> > v)
{
	for (int i = 0; i < v.size(); i++)
	{
		for (int j = 0; j <= i; j++)
		{
			swap(v[i][j], v[j][i]);
		}
	}
	return v;
}

vector<vector<int> > mult(vector<vector<int> > a, vector<vector<int> > b)
{
	vector<vector<int> >res;

	vector<vector<unsigned int > > va = get_compression(a);
	//b = transp(b);
	vector<vector<unsigned int> > vb = get_compression(transp(b));

	//cout << va.size() << " " << vb.size() << endl;

	vector<vector<int> > vres=bitwise_mult(va, vb);
	return vres;
}
vector<vector<unsigned int> > mv[100];

vector<unsigned int> vres;

vector<int> res;

vector<unsigned int> va;

void multT(vector<int>& a, vector<vector<unsigned int> > &vb)
{
	res.resize(a.size());
	for (int i = 0; i < res.size(); i++)
	{
		res[i] = 0;
	}

	va.resize(a.size());

	for (int i = 0; i < va.size(); i++)
	{
		va[i] = 0;
	}

	for (int i = 0; i < a.size(); i++)
	{
		if (a[i])
			va[i / 32] |= (ONE << (i % 32));
	}

	for (int i = 0; i < a.size(); i++)
	{
		for (int k = 0; k < va.size(); k++)
		{
			if (va[k] & vb[i][k])
			{
				res[i] = 1;
				break;
			}
		}
	}

	a = res;
}

int main(){
	//freopen("fabro.in","r",stdin);
	//freopen("fabro.out","w",stdout);
	//freopen("F:/in.txt", "r", stdin);
	//freopen("F:/output.txt", "w", stdout);
	//ios_base::sync_with_stdio(0);
	//cin.tie(0);

	cin >> n;

	for (int i = 0; i < n; i++)
	{
		for (int j = 0; j < n; j++)
		{
//			ar[i][j] = rand() % 2;
			scanf("%d", &ar[i][j]);
		}
	}

	v[0].resize(n);

	for (int i = 0; i < n; i++)
	{
		v[0][i].resize(n);
		for (int j = 0; j < n; j++)
		{
			v[0][i][j] = ar[i][j];
		}
	}

	for (int i = 1; i <= 30; i++)
	{
		v[i] = mult(v[i - 1], v[i - 1]);
	}

	for (int i = 0; i <= 30; i++)
	{
		mv[i] = get_compression(transp(v[i]));
	}

//	return 0;

	cin >> tests;
	for (; tests; --tests)
	{
		int k, x;
		cin >> k >> x;
		//k = (1<<30)-1;
		//x = 1;
		//rand() % n + 1;
		--x;
		vector<int> V;
		V.resize(n);
		for (int i = 0; i < n; i++)
		{
			V[i] = 0;
		}
		V[x] = 1;
		for (int i = 30; i >= 0; --i)
		{
			if (k&(1 << i))
				multT(V, mv[i]);
		}
		vector<int> ans;
		for (int i = 0; i < n; i++)
		{
			if (V[i])
				ans.push_back(i + 1);
		}
		cout << ans.size() << endl;
		if (ans.size() == 0)
			ans.push_back(-1);
		for (int i = 0; i < ans.size(); i++)
		{
			if (i)
				printf(" ");
			printf("%d", ans[i]);
//			cout << ans[i];
		}
		puts("");
	}

	cin.get(); cin.get();
	return 0;
}