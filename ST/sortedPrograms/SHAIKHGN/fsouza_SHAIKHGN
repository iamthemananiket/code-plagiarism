#include <algorithm>
#include <bitset>
#include <cassert>
#include <climits>
#include <cmath>
#include <complex>
#include <cstdio>
#include <cstdlib>
#include <cstring>
#include <functional>
#include <iostream>
#include <map>
#include <memory>
#include <numeric>
#include <queue>
#include <set>
#include <stack>
#include <unordered_map>
#include <vector>

using namespace std;

typedef long long lint;

const int maxn = 500, maxk = 1e9;

struct matrix {
  vector<bitset<maxn>> lines;
  matrix(int n): lines(n) {}
};

matrix operator * (const matrix &a, const matrix &b) {
  int n = a.lines.size();
  matrix ret(n);
  for (int i = 0; i < n; ++i) {
    bitset<maxn> line;
    for (int j = 0; j < n; ++j)
      if (a.lines[i].test(j))
	line = line | b.lines[j];
    ret.lines[i] = line;
  }
  return ret;
}

int main() {
  int n;
  scanf("%d", &n);
  matrix mat(n);
  for (int y = 0; y < n; ++y)
    for (int x = 0; x < n; ++x) {
      int v;
      scanf("%d", &v);
      if (v) mat.lines[y].set(x);
    }

  vector<matrix> mat2i;
  mat2i.push_back(mat);
  for (int i = 1; i <= __lg(maxk); ++i)
    mat2i.push_back(mat2i.back() * mat2i.back());

  int nq;
  scanf("%d", &nq);
  for (int q = 0; q < nq; ++q) {
    int k, start;
    scanf("%d %d", &k, &start), --start;

    bitset<maxn> now;
    now.set(start);

    for (int i = 0; k > 0; ++i)
      if (k & (1<<i)) {
	bitset<maxn> next;
	for (int j = 0; j < n; ++j)
	  if (now.test(j))
	    next = next | mat2i[i].lines[j];
	now = next;
	k -= 1<<i;
      }

    vector<int> result;
    for (int i = 0; i < n; ++i)
      if (now.test(i))
	result.push_back(i);

    printf("%d\n", (int)result.size());
    if (result.empty()) printf("-1\n");
    else {
      for (int i = 0; i < (int)result.size(); ++i) {
	if (i > 0) printf(" ");
	printf("%d", result[i]+1);
      }
      printf("\n");
    }
  }

  return 0;
}
