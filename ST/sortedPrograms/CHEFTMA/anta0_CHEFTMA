#include <string>
#include <vector>
#include <algorithm>
#include <numeric>
#include <set>
#include <map>
#include <queue>
#include <iostream>
#include <sstream>
#include <cstdio>
#include <cmath>
#include <ctime>
#include <cstring>
#include <cctype>
#include <cassert>
#include <limits>
#include <functional>
#define rep(i,n) for(int (i)=0;(i)<(int)(n);++(i))
#define rer(i,l,u) for(int (i)=(int)(l);(i)<=(int)(u);++(i))
#define reu(i,l,u) for(int (i)=(int)(l);(i)<(int)(u);++(i))
#if defined(_MSC_VER) || __cplusplus > 199711L
#define aut(r,v) auto r = (v)
#else
#define aut(r,v) __typeof(v) r = (v)
#endif
#define each(it,o) for(aut(it, (o).begin()); it != (o).end(); ++ it)
#define all(o) (o).begin(), (o).end()
#define pb(x) push_back(x)
#define mp(x,y) make_pair((x),(y))
#define mset(m,v) memset(m,v,sizeof(m))
#define INF 0x3f3f3f3f
#define INFL 0x3f3f3f3f3f3f3f3fLL
using namespace std;
typedef vector<int> vi; typedef pair<int, int> pii; typedef vector<pair<int, int> > vpii; typedef long long ll;
template<typename T, typename U> inline void amin(T &x, U y) { if(y < x) x = y; }
template<typename T, typename U> inline void amax(T &x, U y) { if(x < y) x = y; }

int main() {
	int T;
	scanf("%d", &T);
	for(int ii = 0; ii < T; ++ ii) {
		int N; int K; int M;
		scanf("%d%d%d", &N, &K, &M);
		vector<int> A(N);
		for(int i = 0; i < N; ++ i)
			scanf("%d", &A[i]);
		vector<int> B(N);
		for(int i = 0; i < N; ++ i)
			scanf("%d", &B[i]);
		vector<int> C(K);
		for(int i = 0; i < K; ++ i)
			scanf("%d", &C[i]);
		vector<int> D(M);
		for(int i = 0; i < M; ++ i)
			scanf("%d", &D[i]);
		vi diffs(N);
		rep(i, N)
			diffs[i] = A[i] - B[i];
		vi buttons;
		buttons.insert(buttons.end(), all(C));
		buttons.insert(buttons.end(), all(D));
		sort(all(diffs), greater<int>());
		sort(all(buttons), greater<int>());
		int bi = 0;
		ll ans = accumulate(all(diffs), 0LL);
		rep(i, N) {
			for(; bi != buttons.size() && diffs[i] < buttons[bi]; ++ bi)
				;
			if(bi != buttons.size())
				ans -= buttons[bi ++];
		}
		printf("%lld\n", ans);
	}
	return 0;
}
