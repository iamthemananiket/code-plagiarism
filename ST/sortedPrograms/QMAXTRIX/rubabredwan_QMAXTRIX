#include <bits/stdc++.h>

#define READ(x)		freopen(x,"r",stdin)
#define WRITE(x)	freopen(z,"w",stdout)

#define REP(i,n)	for(int i=0;i<n;i++)
#define REPN(i,n)	for(int i=1;i<=n;i++)
#define FOR(i,a,b)	for(int i=a;i<b;i++)
#define SET(i,n)	memset(i,n,sizeof(i))

#define MAX			100020
#define INF			1e9
#define in			insert
#define pb			push_back
#define cl			clear
#define sz			size
#define xx 			first
#define yy	 		second

using namespace std;

typedef long long int 	ll;
typedef vector<int>		vi;
typedef pair<ll,ll>		pii;
typedef double			db;

//template ends here

int n, q, sum[MAX * 3], prop[MAX * 3];

void propagate(int b, int e,int node){
	int mid = (b + e) / 2;
	int b1 = b, e1 = mid, l = 2 * node;
	int b2 = mid+1, e2 = e, h = l + 1;
	sum[l] += (e1 - b1 + 1) * prop[node];
	sum[h] += (e2 - b2 + 1) * prop[node];
	prop[l] += prop[node];
	prop[h] += prop[node];
	prop[node] = 0;
}

void update(int b, int e, int node, int x, int y){
	if(e < x || b > y) return;
	if(b >= x && e <= y){
        sum[node] += (e - b + 1);
		prop[node]++;
		return;
	}
	if(prop[node]) propagate(b, e, node);
	int mid = (b + e) / 2, l = 2 * node, h = l + 1;
	update(b, mid, l, x, y);
	update(mid+1,e,h, x, y);
	sum[node] = sum[l] + sum[h];
}

int query(int b, int e, int node, int x){
	if(e < x || b > x) return 0;
	if(b >= x && e <= x) return sum[node];
	if(prop[node]) propagate(b, e, node);
	int mid = (b + e) / 2, l = 2 * node, h = l + 1;
	int r1 = query(b, mid, l, x);
	int r2 = query(mid+1,e,h, x);
	return r1 + r2;
}

int row[MAX];

int main()
{
    vector<pii>vec;
	int q, x, y, sum = 0;
	scanf("%d", &n);
	REPN(i, n){
        scanf("%d %d", &x, &y);
        vec.pb(make_pair(x, y));
        row[i] = (y - x + 1);
        sum += row[i];
        update(1, n, 1, x, y);
	}
	scanf("%d", &q);
	//REPN(i, n) cout << "%$^ " << query(1, n, 1, i) << endl;
	while(q--){
		scanf("%d %d", &x, &y);
		int r1 = row[x];
		int r2 = query(1, n, 1, y);
		int ret = (r1 + r2);
		pii rr = vec[x-1];
		//cout << "# " << r1 + r2 << endl;
		if(rr.xx <= y && rr.yy >= y){
            //cout << "HELLO\n";
            ret--;
		}// ret--;
		ret = sum - ret;
		if(ret % 2 == 0) printf("E\n");
		else printf("O\n");
	}
	return 0;
}
