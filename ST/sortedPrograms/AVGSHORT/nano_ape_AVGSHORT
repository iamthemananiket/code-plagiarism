#include <cstdio>
#include <algorithm>
#include <cstring>
#include <queue>
#include <bitset>

#define rep(i, l, r) for(int i=l; i<=r; i++)
#define dow(i, l, r) for(int i=l; i>=r; i--)
#define clr(x, c) memset(x, c, sizeof(x))
#define travel(x) for(edge *p=fir[x]; p; p=p->n)
#define all(x) (x).begin,(x).end
#define pb push_back
#define fi first
#define se second
#define l(x) Left[x]
#define r(x) Right[x]
#define lowbit(x) (x&-x)

using namespace std;

typedef long long ll;
typedef pair<int,int> Pii;
typedef long double ld;
typedef unsigned long long ull;

inline int read()
{
    int x=0; bool f=0; char ch=getchar();
    while (ch<'0' || '9'<ch) f|=ch=='-', ch=getchar();
    while ('0'<=ch && ch<='9') x=x*10+ch-'0', ch=getchar();
    return f?-x:x;
}

#define maxm 1009
#define maxn 509

int n, m, S, T;
bool b[maxn]; int c[maxn]; double d[maxn];

struct edge{int y,d; edge *n;} e[maxm], *fir[maxn], *pt=e;
void AddE(int x, int y, int d){pt->y=y, pt->d=d, pt->n=fir[x], fir[x]=pt++;}

inline void Init(){clr(fir,0); pt=e;}

inline bool jub(double now)
{
	queue<int>q;
	rep(i, 1, n) b[i]=0, d[i]=1e9, c[i]=0; b[S]=1, d[S]=0, q.push(S);
	while (!q.empty())
	{
		int x=q.front(); q.pop(); c[x]++; b[x]=0;
		if (c[x]>n) d[x]=-1e9;
		travel(x) if (d[p->y]>d[x]+p->d-now)
		{
			d[p->y]=d[x]+p->d-now;
			if (!b[p->y] && c[p->y]<=n) b[p->y]=1, q.push(p->y);
		}
	}
	return d[T]<0;
}

int main()
{
	int t=read(); while (t--)
	{
		n=read(), m=read(); Init();
		rep(i, 1, m) {int x=read(), y=read(); AddE(x,y,read());}
		S=read(), T=read();
		if (!jub(1000)) {puts("-1"); continue;}
		double l=0, r=100, mid; while (r-l>1e-8)
		{
			mid=(l+r)/2;
			if (jub(mid)) r=mid; else l=mid;
		}
		printf("%.7lf\n", (l+r)/2);
	}
	
    return 0;
}