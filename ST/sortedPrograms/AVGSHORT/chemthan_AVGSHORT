#include <bits/stdc++.h>
using namespace std;

#define ms(s, n) memset(s, n, sizeof(s))
#define FOR(i, a, b) for (int i = (a); i < (b); i++)
#define FORd(i, a, b) for (int i = (a) - 1; i >= (b); i--)
#define FORall(it, a) for (__typeof((a).begin()) it = (a).begin(); it != (a).end(); it++)
#define sz(a) int((a).size())
#define present(t, x) (t.find(x) != t.end())
#define all(a) (a).begin(), (a).end()
#define uni(a) (a).erase(unique(all(a)), (a).end())
#define pb push_back
#define pf push_front
#define mp make_pair
#define fi first
#define se second
#define prec(n) fixed<<setprecision(n)
#define bit(n, i) (((n) >> (i)) & 1)
#define bitcount(n) __builtin_popcountll(n)
typedef long long ll;
typedef unsigned long long ull;
typedef long double ld;
typedef pair<int, int> pi;
typedef vector<int> vi;
typedef vector<pi> vii;
const int MOD = (int) 1e9 + 7;
const int INF = (int) 1e9;
const ll LINF = (ll) 1e18;
const ld PI = acos((ld) -1);
const ld EPS = 1e-9;
inline ll gcd(ll a, ll b) {ll r; while (b) {r = a % b; a = b; b = r;} return a;}
inline ll lcm(ll a, ll b) {return a / gcd(a, b) * b;}
inline ll fpow(ll n, ll k, int p = MOD) {ll r = 1; for (; k; k >>= 1) {if (k & 1) r = r * n % p; n = n * n % p;} return r;}
template<class T> inline int chkmin(T& a, const T& val) {return a > val ? a = val, 1 : 0;}
template<class T> inline int chkmax(T& a, const T& val) {return a < val ? a = val, 1 : 0;}
inline ll isqrt(ll k) {ll r = sqrt(k) + 1; while (r * r > k) r--; return r;}
inline ll icbrt(ll k) {ll r = cbrt(k) + 1; while (r * r * r > k) r--; return r;}
inline void addmod(int& a, int val, int p = MOD) {if ((a = (a + val)) >= p) a -= p;}
inline void submod(int& a, int val, int p = MOD) {if ((a = (a - val)) < 0) a += p;}
inline int mult(int a, int b, int p = MOD) {return (ll) a * b % p;}
inline int inv(int a, int p = MOD) {return fpow(a, p - 2, p);}

const int maxn = 500 + 10;
int n, m;
int s, t;
int g[maxn][maxn];
vector<pair<pi, int> > edge;
double d[maxn];

int check(double mi) {
	FOR(i, 0, n) d[i] = INF;
	d[s] = 0;
	FOR(it, 0, n) {
		FOR(i, 0, sz(edge)) {
			int u = edge[i].fi.fi;
			int v = edge[i].fi.se;
			double w = edge[i].se - mi;
			if (d[u] != INF) {
				d[v] = min(d[v], d[u] + w);
			}
		}
	}
	FOR(i, 0, sz(edge)) {
		int u = edge[i].fi.fi;
		int v = edge[i].fi.se;
		double w = edge[i].se - mi;
		if (d[u] != INF && d[v] > d[u] + w) {
			if (g[v][t]) {
				return 0;
			}
		}
	}
	return d[t] >= 0;
}

void solve() {
	int test; cin >> test;
	while (test--) {
		cin >> n >> m;
		edge.clear();
		FOR(i, 0, n) FOR(j, 0, n) g[i][j] = i == j;
		FOR(i, 0, m) {
			int u, v, w; cin >> u >> v >> w; u--, v--;
			edge.pb(mp(mp(u, v), w));
			g[u][v] = 1;
		}
		cin >> s >> t; s--, t--;
		FOR(k, 0, n) FOR(i, 0, n) FOR(j, 0, n) {
			if (g[i][k] && g[k][j]) {
				g[i][j] = 1;
			}
		}
		if (!g[s][t]) {
			cout << prec(0) << -1 << "\n";
			continue;
		}
		double lo = 1, hi = 100;
		FOR(it, 0, 50) {
			double mi = (lo + hi) / 2;
			if (check(mi)) lo = mi; else hi = mi;
		}
		cout << prec(9) << lo << "\n";
	}
}

int main() {
	ios_base::sync_with_stdio(0); cin.tie(0);
#ifdef _LOCAL_
	freopen("in.txt", "r", stdin); //freopen("out.txt", "w", stdout);
#endif
	solve();
#ifdef _LOCAL_
	//printf("\nTime elapsed: %dms", 1000 * clock() / CLOCKS_PER_SEC);
#endif
	return 0;
}
