#include<bits/stdc++.h>
 
using namespace std;
 
#define ff first
#define ss second
#define pb push_back
#define mp make_pair
#define SET(a,b) fill(a.begin(),a.end(),b)
#define ll long long int
#define DEBUG(x) cout<<">> : "<<#x<<" : "<<x<<"   "
#define unordered_map map
 
inline bool EQ(double a, double b) { return fabs(a - b) < 1e-9; }
 
const int MAXN = 1e6+3;
const int MOD = 1e9+7;
long long C[MAXN][9];
long long value[7][MAXN];
long long dp[7][MAXN];
long long Value[7][MAXN];
long long CValue[MAXN][9];

void check(long long &x) {
	if(x>=MOD)
		x%=MOD;
}
int main() {
	int t,i,j,k;
	scanf("%d",&t);
	for(i=0;i<=6;i++)
		dp[i][0]=value[i][0]=Value[i][0]=CValue[i][0]=0;
	C[0][0]=CValue[0][0]=1;
	for(i=1;i<MAXN;i++) {
		if(i>=3)
			dp[2][i]=(i-1)/2;
		else
			dp[2][i]=0;
		if(i>=6)
			dp[3][i]=(1+(dp[3][i-2]+dp[3][i-3])%MOD-(dp[3][i-5])+MOD)%MOD;
		else
			dp[3][i]=0;
		if(i>=10)
			dp[4][i]=(1+((dp[4][i-2]+dp[4][i-3])%MOD+dp[4][i-4])%MOD-((dp[4][i-5]+dp[4][i-6])%MOD+dp[4][i-7])%MOD +dp[4][i-9]+MOD)%MOD;
		else
			dp[4][i]=0;
		if(i>=15)
			dp[5][i]=(1+((dp[5][i-2]+dp[5][i-3])%MOD+dp[5][i-4])%MOD-((dp[5][i-6]+(2*dp[5][i-7])%MOD)%MOD+dp[5][i-8])%MOD + MOD +((dp[5][i-10]+dp[5][i-11])%MOD+dp[5][i-12])%MOD-dp[5][i-14]+MOD)%MOD;
		else
			dp[5][i]=0;
		if(i>=21)
			dp[6][i] = (1+((dp[6][i-2]+dp[6][i-3])%MOD+dp[6][i-4])%MOD - (((2*dp[6][i-7])%MOD+(2*dp[6][i-8])%MOD)%MOD+dp[6][i-9])%MOD + MOD+ (dp[6][i-11]+((2*dp[6][i-12])%MOD+(2*dp[6][i-13])%MOD)%MOD)%MOD - ((dp[6][i-16]+dp[6][i-17])%MOD+dp[6][i-18])%MOD+(dp[6][i-20])+MOD)%MOD;
		else
			dp[6][i]=0;
		value[2][i]=dp[2][i]+value[2][i-1];
		value[3][i]=dp[3][i]+value[3][i-1];
		value[4][i]=dp[4][i]+value[4][i-1];
		value[5][i]=dp[5][i]+value[5][i-1];
		value[6][i]=dp[6][i]+value[6][i-1];
		check(value[2][i]);
		check(value[3][i]);
		check(value[4][i]);
		check(value[5][i]);
		check(value[6][i]);

		Value[2][i]=value[2][i];
		Value[2][i]+=Value[2][i-1];
		check(Value[2][i]);

		Value[3][i]=value[3][i];
		Value[3][i]+=Value[3][i-1];
		check(Value[3][i]);

		Value[4][i]=value[4][i];
		Value[4][i]+=Value[4][i-1];
		check(Value[4][i]);

		Value[5][i]=value[5][i];
		Value[5][i]+=Value[5][i-1];
		check(Value[5][i]);

		Value[6][i]=value[6][i];
		Value[6][i]+=Value[6][i-1];
		check(Value[6][i]);

		for(j=0;j<=min(i,6);j++) {
			if (j == 0 || j == i)
				C[i][j] = 1;
			else
				C[i][j] = (C[i-1][j-1] + C[i-1][j]);
			check(C[i][j]);
			if(j>=2) {
				CValue[i][j]=C[i][j];
				CValue[i][j]+=CValue[i-1][j];
				check(CValue[i][j]);
			}
		}
	}
	while(t--) {
		int n,K;
		scanf("%d%d",&n,&K);
		long long answer=0;
		answer=CValue[n-1][K-1];
		answer=(answer-(Value[K-1][n]-Value[K-1][K-1]+MOD)%MOD + MOD)%MOD;
		printf("%lld\n",answer);
	}
	return 0;
} 