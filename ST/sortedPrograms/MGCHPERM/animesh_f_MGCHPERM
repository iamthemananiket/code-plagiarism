#include <bits/stdc++.h>
#define rf freopen("inp.in","r",stdin)
#define ll long long
using namespace std;
 
const int MAX = 1e6 + 10;
const int MOD = (int)(1e9 + 7);

inline int scan(){
    int x = 0;
    char c = getchar_unlocked();
    while(c < '0' || c > '9'){
        c = getchar_unlocked();
    }
    while(c >= '0' && c <= '9'){
        x = (x << 3) + (x << 1) + c - '0';
        c = getchar_unlocked();
    }
    return x;
}

inline void show(int N){
    if(N < 10) putchar_unlocked('0' + N);
    else{
        show(N / 10);
        putchar_unlocked('0' + (N % 10));
    }
}

int C[MAX][8]  , ANS[MAX][8];
int DP[MAX][7] , SUM[MAX][7];
 
inline void preprocess(){
    
    DP[0][0] = 1;

    for(int i = 0; i < MAX; i++){
        for(int j = 0; j <= i and j < 7 ; j++){

           if(i == j)  DP[i][j] = 1;
           else if(j == 0) DP[i][j]=0;
           else{
                DP[i][j] = DP[i - 1][j - 1] + DP[i - j][j];
                if( DP[i][j] >= MOD ) DP[i][j] -= MOD;
           } 
        }
    }

    SUM[0][0] = 1;

    for(int i = 0 ; i < 7 ; i++){
        for(int j = 1; j < MAX; j++){
           SUM[j][i] = SUM[j-1][i] + DP[j][i];
           if( SUM[j][i] >= MOD ) 
                SUM[j][i] -= MOD;
        }
    }

    C[0][0] = 1;
    for(int i = 1 ; i < MAX ; i++){
        for(int j = 0 ; j <= 7 ; j++){
            
            if( j > i ) break;
            else if( j == 0 or j == i ) C[i][j] = 1;
            else C[i][j] = C[i - 1][j] + C[i - 1][j - 1];
            
            if(C[i][j] >= MOD) C[i][j] -= MOD;
        }
    }


}
 
inline int solve(){
     
     for(int K = 3; K <= 7 ; K++){
        
        ll pref = (K <= 3) ? 0 : 1;
        int kc2 = ( (K - 1) * (K - 2) ) >> 1;
        ANS[K][K] = pref;
        
        for(int N = K + 1; N < MAX ; N++){
            
            if( N >= kc2){
                pref = (pref - SUM[N - kc2][K - 1]);
                if( pref < 0 ) pref += MOD;
                if( pref >= MOD ) pref -= MOD;
            }
            
            ANS[N][K] = pref + C[N][K] - 1;
            
            if( ANS[N][K] < 0 ) ANS[N][K] += MOD;
            if( ANS[N][K] >= MOD ) ANS[N][K] -= MOD;
        }

     }
     
}
  
int main() {
    
    preprocess();
    solve();

    int T, N ,K;
    T = scan();

    while(T--){
        N = scan();
        K = scan();
        show( ANS[N][K] );
        putchar_unlocked('\n');
    }

    return 0;
}