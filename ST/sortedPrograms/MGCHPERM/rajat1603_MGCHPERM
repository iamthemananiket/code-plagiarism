#include "bits/stdc++.h"
using namespace std;
const int N = 1e3 + 3;
const int K = 8;
const int mod = 1e9 + 7;
int fact[N];
int ifact[N];
int t;
int n , k;
int ans;
int inv24;
int add(int a , int b){
    int res = a + b;
    if(res >= mod){
        return res - mod;
    }
    return res;
}
int mult(int a , int b){
    long long res = a;
    res *= b;
    if(res >= mod){
        return res % mod;
    }
    return res;
}
int power(int a , int b){
    int res = 1;
    while(b){
        if(b & 1){
            res = mult(res , a);
        }
        a = mult(a , a);
        b >>= 1;
    }
    return res;
}
void pre(){
    fact[0] = 1;
    for(int i = 1 ; i < N ; ++i){
        fact[i] = mult(fact[i - 1] , i);
    }
    ifact[N - 1] = power(fact[N - 1] , mod - 2);
    for(int i = N - 2 ; i >= 0 ; --i){
        ifact[i] = mult(ifact[i + 1] , i + 1);
    }
    inv24 = power(24 , mod - 2);
}
int solve3(int n){
    if(n & 1){
        return mult(inv24 , mult(n - 1 , mult(n - 3 , add(n , n - 1))));
    }
    else{
        return mult(inv24 , mult(n , mult(n - 2 , add(n , add(n , mod - 5)))));
    }
}
int C(int n , int r){
    if(r > n){
        return 0;
    }
    return mult(fact[n] , mult(ifact[n - r] , ifact[r]));
}
int dp[N][K][N];
int solve(int pos , int kleft , int sum){
    if(kleft > pos){
        return 0;
    }
    if(sum < 0){
        return C(pos , kleft);
    }
    if(!kleft){
        return 0;
    }
    if(!pos){
        return 0;
    }
    if(dp[pos][kleft][sum] != -1){
        return dp[pos][kleft][sum];
    }
    return dp[pos][kleft][sum] = add(solve(pos - 1 , kleft , sum) , solve(pos - 1 , kleft - 1 , sum - pos));
}
int main(){
    pre();
    memset(dp , -1 , sizeof(dp));
    scanf("%d" , &t);
    while(t--){
        scanf("%d %d" , &n , &k);
        if(k == 3){
            printf("%d\n" , solve3(n));
            continue;
        }
        ans = 0;
        for(int i = 1 ; i <= n ; ++i){
            //cout << solve(i - 1 , k - 1 , i) << " ";
            ans = add(ans , solve(i - 1 , k - 1 , i));
        }
        printf("%d\n" , ans);
    }
}