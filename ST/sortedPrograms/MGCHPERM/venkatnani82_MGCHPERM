#include <bits/stdc++.h>
using namespace std;
int dp[1010][1010][8], newdp[1010];
int mod = 1e9 + 7;
long long fact[1010];
long long power(long long a, int x) {
	if(x == 0) return 1;
	long long tmp = power(a, x / 2);
	if(x % 2 == 0) return (tmp * tmp) % mod;
	else return ((tmp * tmp) % mod * a) % mod;
} 
long long ncr(int n, int r) {
	long long den = (fact[r] * fact[n - r]) % mod;
	return (fact[n] * power(den, mod - 2)) % mod;
}
int main(){
	fact[0] = 1;
	for (int i = 1; i < 1010; i++) fact[i] = fact[i - 1] * i, fact[i] %= mod;
	int test;
	scanf("%d", &test);
	while (test--){
		int n, k;
		scanf("%d %d", &n, &k);
		for (int i = 0; i <= n; i++) for (int j = 0; j <= n; j++) for (int w = 0; w <= k; w++) dp[i][j][k] = 0;   
		dp[0][0][0] = 1;
		for (int i = 1; i <= n; i++) {
			for (int j = 0; j <= n; j++) {
				for (int w = 0; w <= min(k, i); w++) {
					dp[i][j][w] = dp[i - 1][j][w];
					if(j >= i && w > 0) dp[i][j][w] += dp[i - 1][j - i][w - 1];
					if(dp[i][j][w] >= mod) dp[i][j][w] -= mod;
				}
			}
		}
		for (int i = 0; i <= n; i++) newdp[i] = 0; 
		for (int i = 1; i <= n; i++) {
			newdp[i] = newdp[i - 1];
			for (int j = 0; j <= i; j++) {
				newdp[i] += dp[i - 1][j][k - 1];
				if(newdp[i] >= mod) newdp[i] -= mod;
			}
		} 
		printf("%d\n", (int(ncr(n, k)) - newdp[n] + mod) % mod);
	}
}