/*********************************************************************\
   |--\        ---       /\        |-----------| -----   /-------|    |
   |   \        |       /  \       |               |    /             |
   |    \       |      /    \      |               |   |              |
   |     \      |     /      \     |               |   |----|         |
   |      \     |    / ------ \    |-------|       |        |-----|   |
   |       \    |   /          \   |               |              |   |
   |        \   |  /            \  |               |              /   |
  ---        -------            ------           ----- |---------/    |
                                                                      |
    codeforces = nfssdq  ||  topcoder = nafis007                      |
    mail = nafis_sadique@yahoo.com || nfssdq@gmail.com                |
    IIT,Jahangirnagar University(41)                                  |
                                                                      |
**********************************************************************/

#include <bits/stdc++.h>

using namespace std;

#define xx         first
#define yy         second
#define pb         push_back
#define mp         make_pair
#define LL         long long
#define inf        1500000000
#define mod        1000000007ll
#define PI         2.0*acos(0.0)
#define linf       (1ll<<60)-1
#define FOR(I,A,B) for(int I = (A); I < (B); ++I)
#define REP(I,N)   FOR(I,0,N)
#define ALL(A)     ((A).begin(), (A).end())
#define set0(ar)   memset(ar,0,sizeof ar)
#define vsort(v)   sort(v.begin(),v.end())
#define setinf(ar) memset(ar,126,sizeof ar)

//cout << fixed << setprecision(20) << p << endl;

template <class T> inline T bigmod(T p,T e,T M){
    LL ret = 1;
    for(; e > 0; e >>= 1){
        if(e & 1) ret = (ret * p) % M;
        p = (p * p) % M;
    } return (T)ret;
}
template <class T> inline T gcd(T a,T b){if(b==0)return a;return gcd(b,a%b);}
template <class T> inline T modinverse(T a,T M){return bigmod(a,M-2,M);}

int pre[100001],lvl[100001];
int P[100001][22];
void pre_process(int N){
    memset(P,-1,sizeof P);
    for(int i = 1; i <= N; i++)P[i][0] = pre[i];
    for(int j = 1; (1<<j) <= N; j++){
        for(int i = 1; i <= N; i++){
            if(P[i][j - 1] != -1) P[i][j] = P[ P[i][j - 1] ][j - 1];
        }
    }
}
int LCA(int p, int q){
    if(lvl[p] < lvl[q])swap(p,q);
    int log;
    for(log = 1; (1<<log) <= lvl[p]; log++);
    log--;
    for(int i = log; i >= 0; i--){
        if(lvl[p] - (1<<i) >= lvl[q])p = P[p][i];
    }
    if(p == q)return p;
    for(int i = log; i >= 0; i--){
        if(P[p][i] != -1 && P[p][i] != P[q][i]){
            p = P[p][i];
            q = P[q][i];
        }
    }
    return pre[p];
}

struct dinic_maxflow {

    struct edge {
        int a, b, cap, flow ;
        edge(int _a,int _b,int _c,int _d) {
            a=_a,b=_b,cap=_c,flow=_d;
        }
    } ;

    int INF = 1500000001 ;

    int n, s, t, d [ 3001 ] , ptr [ 3001 ] , q [ 3001 * 10 ] ;
    vector < edge > e ;
    vector < int > g [ 3001 ] ;

    void add_edge ( int a, int b, int cap ) {
        edge e1 =edge( a, b, cap, 0 ) ;
        edge e2 =edge( b, a, 0 , 0 ) ;
        g [ a ] . push_back ( ( int ) e. size ( ) ) ;
        e. push_back ( e1 ) ;
        g [ b ] . push_back ( ( int ) e. size ( ) ) ;
        e. push_back ( e2 ) ;
    }

    bool bfs ( ) {
        int qh = 0 , qt = 0 ;
        q [ qt ++ ] = s ;
        memset ( d, -1 , sizeof d ) ;
        d [ s ] = 0 ;
        while ( qh < qt && d [ t ] == - 1 ) {
            int v = q [ qh ++ ] ;
            for ( size_t i = 0 ; i < g [ v ] . size ( ) ; ++ i ) {
                int id = g [ v ] [ i ] ,
                    to = e [ id ] . b ;
                if ( d [ to ] == - 1 && e [ id ] . flow < e [ id ] . cap ) {
                    q [ qt ++ ] = to ;
                    d [ to ] = d [ v ] + 1 ;
                }
            }
        }
        return d [ t ] != - 1 ;
    }

    int dfs ( int v, int flow ) {
        if ( ! flow )  return 0 ;
        if ( v == t )  return flow ;
        for ( ; ptr [ v ] < ( int ) g [ v ] . size ( ) ; ++ ptr [ v ] ) {
            int id = g [ v ] [ ptr [ v ] ] ,
                to = e [ id ] . b ;
            if ( d [ to ] != d [ v ] + 1 )  continue ;
            int pushed = dfs ( to, min ( flow, e [ id ] . cap - e [ id ] . flow ) ) ;
            if ( pushed ) {
                e [ id ] . flow += pushed ;
                e [ id ^ 1 ] . flow -= pushed ;
                return pushed ;
            }
        }
        return 0 ;
    }

    int dinic ( ) {
        int flow = 0 ;
        for ( ;; ) {
            if ( !bfs () )  break ;
            memset ( ptr, 0 , sizeof ptr ) ;
            while ( int pushed = dfs ( s, INF ) ) {
                flow += pushed ;
                if(pushed == 0)break;
            }
        }
        return flow ;
    }

    dinic_maxflow( int _n, int _s, int _t ){
        n = _n; s = _s; t = _t;
    }
};

vector < int > vc[100001];
int st[100001], ed[100001], t = 0;
void dfs(int c, int l, int p){
    lvl[c] = l;
    t++; st[c] = t;
    pre[c] = p;
    REP(i, vc[c].size()){
        if(vc[c][i] != p) dfs(vc[c][i], l + 1, c);
    }
    ed[c] = t;
}

int ar[1001][1001], in[2][1001][4];
bool scan_d(int &ret) {
        char c; int sgn;
        if(c=getchar(),c==EOF) return 0;
        while(c!='-'&&(c<'0'||c>'9')) c=getchar();
        sgn=(c=='-')?-1:1;
        ret=(c=='-')?0:(c-'0');
        while(c=getchar(),c>='0'&&c<='9') ret=ret*10+(c-'0');
        ret*=sgn;
        return 1;
}
main() {
//    ios_base::sync_with_stdio(0); cin.tie(0);
    int a,b,c,d = 0,e,f = 0,g = 0,h = 0,x,y,z;
    int n, m;
    scan_d(a); scan_d(n); scan_d(m);
    REP(i, a - 1){
        scan_d(b); scan_d(c);
        vc[b].pb(c);
        vc[c].pb(b);
    }
    dfs(1, 1, 0);
    pre_process(a);
    FOR(i, 1, n + 1){
        scanf("%d %d %d", &in[0][i][0], &in[0][i][1], &in[0][i][2]);
        in[0][i][3] = LCA(in[0][i][0], in[0][i][1]);
    }
    FOR(i, 1, m + 1){
        scanf("%d %d %d", &in[1][i][0], &in[1][i][1], &in[1][i][2]);
        in[1][i][3] = LCA(in[1][i][0], in[1][i][1]);
    }
    FOR(i, 1, n + 1){
        FOR(j, 1, m + 1){
            d = e = 0;
            if(st[in[1][j][0]] >= st[in[0][i][3]] && st[in[1][j][0]] <= ed[in[0][i][3]]) d = 1;
            if(st[in[1][j][1]] >= st[in[0][i][3]] && st[in[1][j][1]] <= ed[in[0][i][3]]) e = 1;
            if(d + e == 1){
                ar[i][j] = 1;
            } else if(d + e == 2){
                d = e = 0;
                if(st[in[0][i][0]] >= st[in[1][j][3]] && st[in[0][i][0]] <= ed[in[1][j][3]]) d = 1;
                if(st[in[0][i][1]] >= st[in[1][j][3]] && st[in[0][i][1]] <= ed[in[1][j][3]]) e = 1;
                if(d + e > 0) ar[i][j] = 1;
            }
        }
    }
    dinic_maxflow dm = dinic_maxflow(n + m + 3, 0, n + m + 1);
    FOR(i, 1, n + 1){
        FOR(j, 1, m + 1){
            if(ar[i][j]) dm.add_edge(i, n + j, inf);
        }
    }
    FOR(i, 1, n + 1) dm.add_edge(0, i, in[0][i][2]);
    FOR(i, 1, m + 1) dm.add_edge(n + i, n + m + 1, in[1][i][2]);
    f = 0;
    FOR(i, 1, n + 1) f += in[0][i][2];
    FOR(i, 1, m + 1) f += in[1][i][2];
    g = dm.dinic();
    cout << f - g << endl;
}
