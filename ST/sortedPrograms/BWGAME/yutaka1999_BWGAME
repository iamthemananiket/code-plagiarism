#include <cstdio>
#include <cstdlib>
#include <algorithm>
#include <vector>
#include <cstring>
#include <queue>
#define SIZE 100005

using namespace std;
typedef pair <int,int> P;
typedef pair <P,int> PP;

struct UF
{
	int par[SIZE];
	
	void init(int n)
	{
		for(int i=0;i<n;i++)
		{
			par[i]=i;
		}
	}
	int find(int x)
	{
		if(x==par[x]) return x;
		return par[x]=find(par[x]);
	}
	void unite(int x,int y)//x->y
	{
		x=find(x);
		y=find(y);
		if(x==y) return;
		par[x]=y;
	}
};
struct BIT
{
	int bit[SIZE];
	
	void init()
	{
		memset(bit,0,sizeof(bit));
	}
	void add(int k,int x)
	{
		while(k<SIZE)
		{
			bit[k]+=x;
			k+=k&-k;
		}
	}
	int get(int k)
	{
		int ret=0;
		while(k>0)
		{
			ret+=bit[k];
			k-=k&-k;
		}
		return ret;
	}
};
BIT bit;
UF uf;
vector <PP> vec;
int pos[SIZE];

int main()
{
	int T;
	scanf("%d",&T);
	while(T--)
	{
		int n;
		scanf("%d",&n);
		vec.clear();
		for(int i=0;i<n;i++)
		{
			int l,r;
			scanf("%d %d",&l,&r);
			vec.push_back(PP(P(l,r),i));
		}
		sort(vec.begin(),vec.end());
		uf.init(n+2);
		bool up=true;
		for(int i=n-1;i>=0;i--)
		{
			P p=vec[i].first;
			p.second=uf.find(p.second);
			if(p.second<p.first)
			{
				up=false;
				puts("Draw");
				break;
			}
			pos[vec[i].second]=p.second;
			uf.unite(p.second,p.first-1);
		}
		if(up)
		{
			bit.init();
			int cnt=0;
			for(int i=0;i<n;i++)
			{
				int gt=i-bit.get(pos[i]);
				cnt^=gt;
				bit.add(pos[i]+1,1);
			}
			if(cnt%2==0)
			{
				puts("Alex");
			}
			else
			{
				puts("Fedor");
			}
		}
	}
	return 0;
}
