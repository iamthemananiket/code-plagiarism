#include<bits/stdc++.h>
using namespace std;
#define pc putchar_unlocked
#define gc getchar_unlocked
typedef long long ll;
typedef unsigned long long llu;
#define mp make_pair
#define pb push_back
#define sc(x) scanf("%d",&x)
#define sc2(x,y) scanf("%d%d",&x,&y)
#define sc3(x,y,z) scanf("%d%d%d",&x,&y,&z)
#define scl(x) scanf("%lld",&x)
#define scl2(x,y) scanf("%lld%lld",&x,&y)
#define scl3(x,y,z) scanf("%lld%lld%lld",&x,&y,&z)
#define scstr(x) scanf("%s",x)
#define pd(x) printf("%d",x)
#define pstr(x) printf("%s",x)
#define newl() printf("\n")
#define fl(i,n) for (i=0;i<n;i++)
#define fle(i,n) for (i=1;i<=n;i++)
#define fla(i,a,n) for (i=a;i<n;i++)
#define mem(a,i) memset(a,i,sizeof(a))
#define fi first
#define se second
typedef pair<int,int> pii;
typedef pair<int,pair<int,int> > piii ;
typedef pair<ll,ll> pll;
typedef pair<ll,int> pli;
#define gcd __gcd
#define wl(n) while (n--)
#define debug(x) cout<<"debug->"<<#x<<"::"<<x<<endl
#define debug2(x,y) cout<<#x<<" :: "<<x<<"\t"<<#y<<" :: "<<y<<"\n"
#define debug3(x,y,z) cout<<#x<<" :: "<<x<<"\t"<<#y<<" :: "<<y<<"\t"<<#z<<" :: "<<z<<"\n"
#define tr(container, it)  for(typeof(container.begin()) it = container.begin(); it != container.end(); it++) 
#define all(v) v.begin(),v.end()
const double eps=0.000000000000001 ;
#define MOD 1000000007
typedef long double LF;
typedef double lF;
//-------------
 
char s[100000+10];
int sttp;
struct node
{
	int r[2],p;
}L[100000+10];
int P[32][100000+10];
bool cmp(node,node);
void maksort(node *,int);
int rnk[100000+10]; // Note always needed
int lcp(int x,int y,int stp,int l)
{
	int k,ret=0;
	if (x==y)
		return l-x;
	for (k=stp-1;k>=0&&x<l&&y<l;k--)
	{
		if (P[k][x]==P[k][y])
		{
			x+=1<<k;y+=1<<k;ret+=1<<k;
		}
	}
	return ret;
	
}
void buildit(char *s,int l)
{
	int i,j;
	for (i=0;i<l;i++)
	{
		P[0][i]=s[i];
	}
	int stp=1,cnt=1;
	for (;(cnt>>1)<l;cnt<<=1,stp++)
	{
		for (i=0;i<l;i++)
		{
			L[i].r[0]=P[stp-1][i];
			L[i].r[1]=(i+cnt<l?P[stp-1][(i+cnt)]:-1);
			L[i].p=i;
		}
		maksort(L,l); // O(n) sorting
		//sort(L,L+l,cmp); // n logn sorting 
		for (i=0;i<l;i++)
		{
			P[stp][L[i].p]=((i>0&&L[i-1].r[0]==L[i].r[0]&&L[i-1].r[1]==L[i].r[1])?P[stp][L[i-1].p]:i);
		}
		
	}
	sttp=stp;
	for (i=0;i<l;i++)
	{
		rnk[P[stp-1][i]]=i;
	}
}
int ca[50010],cb[50010],cx[100010];
char a[50010],b[50010],x[100010];
void disc(int *cc,int l)
{
	cc[1]++;
	cc[l-rnk[0]+1]-=1;int i;
	for (i=1;i<l;i++)
	{
		int st,en,lc;
		lc=lcp(rnk[i],rnk[i-1],sttp,l);
		st=lc+1;
		en=l-rnk[i];
		if (st<=en)
		{
			cc[st]+=1;
			cc[en+1]-=1;
		}
	}
	for (i=1;i<=l;i++)
	{
		cc[i]+=cc[i-1];
	}
}
int main()
{
	scstr(a);
	int la=strlen(a);
	scstr(b);
	int lb=strlen(b);
	buildit(a,la);
	disc(ca,la);
	buildit(b,lb);
	disc(cb,lb);
	int i;
	strcpy(x,a);
	char lol[10]="#";
	strcat(x,lol);
	/*x[la]='?';
	x[la+1]='\0';*/
	strcat(x,b);
	int lx=strlen(x);
	buildit(x,lx);
	if (rnk[0]!=la)
	{
		cx[1]+=1;
		if (rnk[0]<la)
		{
			//cx[1]+=1;
			cx[la-rnk[0]+1]-=1;
		}
		else if (rnk[0]>la)
		{
			//cx[lc+1]+=1;
			cx[lx-rnk[0]+1]-=1;
		}
	}
	for (i=1;i<lx;i++)
	{
		int lc=lcp(rnk[i],rnk[i-1],sttp,lx);
		if (rnk[i]<la)
		{
			cx[lc+1]+=1;
			cx[la-rnk[i]+1]-=1;
		}
		else if (rnk[i]>la)
		{
			cx[lc+1]+=1;
			cx[lx-rnk[i]+1]-=1;
		}
	}
	
	for (i=1;i<=lx;i++)
	{
		cx[i]+=cx[i-1];
	}
	/*for(i=1;i<=lx;i++)
	{
		if (cx[i])cx[i]--;
	}*/
	/*for (i=1;i<=lx;i++)
	{
		printf("%d:%d  ",i,cx[i]);
	}
	printf("\n");
	*/
	int q;
	sc(q);
	wl(q)
	{
		int x,k,ans;
		sc2(x,k);
		//printf("%d %d %d %d %d\n",x,k,ca[k],cb[k],cx[k]);
		if (x==4)
		{
			ans=-(ll)ca[k]-(ll)cb[k]+((ll)cx[k]<<1);
			//printf("%d %d %d ",ca[k],cb[k],cx[k]);
		}
		else if (x==2)
		{
			ans=cx[k]-cb[k];
		}
		else if (x==3)
		{
			ans=cx[k]-ca[k];
		}
		else if (x==1)
		{
			ans=ca[k]+cb[k]-cx[k];
		}
		else assert(false);
		assert(ans>=0);
		if (ans<0)	printf("for query %d,%d, %d,%d,%d ",x,k,ca[k],cb[k],cx[k]);
		
		
		printf("%d\n",ans);
	}
	return 0;
}
bool cmp(node a,node b)
{
	if (a.r[0]==b.r[0])
		return a.r[1]<b.r[1];
	return a.r[0]<b.r[0];
}
int rad_[100000+10]={0};
node L_[100000+10];
 
void maksort(node *L,int l)
{
	int i,j;
	int *rad=((int *)rad_)+1;
	
	for (j=1;j>=0;j--)
	{
		memset(rad_,0,sizeof(int)*(l+1));
		int maxi=0;
		for (i=0;i<l;i++)
		{
			rad[L[i].r[j]]++;
			if (L[i].r[j]>maxi)
				maxi=L[i].r[j];
		}
		for (i=0;i<=maxi;i++)
			rad[i]=rad[i-1]+rad[i];
		for (i=l-1;i>=0;i--)
		{
			L_[--rad[L[i].r[j]]]=L[i];
		}
		for (i=0;i<l;i++)
			L[i]=L_[i];
	}
}