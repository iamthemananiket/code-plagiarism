#include <string>
#include <vector>
#include<iostream>
#include<cstdio>
#include<cstdlib>
#include<stack>
#include<queue>
#include<cmath>
#include<algorithm>
#include<functional>
#include<list>
#include<deque>
#include<bitset>
#include<set>
#include<map>
#include<unordered_map>
#include<cstring>
#include<sstream>
#include<complex>
#include<iomanip>
#include<numeric>
#define X first
#define Y second
#define pb push_back
#define rep(X,Y) for (int (X) = 0;(X) < (Y);++(X))
#define rrep(X,Y) for (int (X) = (Y)-1;(X) >=0;--(X))
#define repe(X,Y) for ((X) = 0;(X) < (Y);++(X))
#define peat(X,Y) for (;(X) < (Y);++(X))
#define all(X) (X).begin(),(X).end()
#define rall(X) (X).rbegin(),(X).rend()
#define eb emplace_back
#define UNIQUE(X) (X).erase(unique(all(X)),(X).end())

using namespace std;
typedef long long ll;
typedef pair<int,int> pii;
typedef pair<ll,ll> pll;
template<class T> using vv=vector<vector<T>>;
template<class T> ostream& operator<<(ostream &os, const vector<T> &t) {
os<<"{"; rep(i,t.size()) {os<<t[i]<<",";} os<<"}"<<endl; return os;}
template<class S, class T> ostream& operator<<(ostream &os, const pair<S,T> &t) { return os<<"("<<t.first<<","<<t.second<<")";}
template<class T> inline bool MX(T &l,const T &r){return l<r?l=r,1:0;}
template<class T> inline bool MN(T &l,const T &r){return l>r?l=r,1:0;}
const ll MOD=1e9+7;
unordered_map<int,int> dst[112345];
int main(){
  ios_base::sync_with_stdio(false);
  cout<<fixed<<setprecision(0);
  int n,m,t;
  cin>>n>>m>>t;
  vector<int> spe(t),iss(n);
  vv<pii> g(n);
  rep(i,t){
    cin>>spe[i];
    iss[--spe[i]]=1;
  }
  int x,y,z;
  rep(i,m){
    cin>>x>>y>>z; --x; --y;
    g[x].eb(y,z);
    g[y].eb(x,z);
  }
  //cout<<spe<<iss<<g;
  typedef pair<int,pii> piii;
  priority_queue<piii,vector<piii>,greater<piii>> que;
  for(int v:spe){
    dst[v][v]=0;
    que.emplace(0,pii(v,v));
  }
  while(que.size()){
    piii p=que.top(); que.pop();
    //cout<<p<<endl;
    if(p.X&&iss[p.Y.Y]){
      cout<<p.X<<endl;
      return 0;
    }
    auto &d=dst[p.Y.X];
    if(d[p.Y.Y]<p.X) continue;
    for(pii e:g[p.Y.Y]) if(d.count(e.X)==0 || MN(d[e.X],d[p.Y.Y]+e.Y)){
	d[e.X]=d[p.Y.Y]+e.Y;
	que.emplace(d[e.X],pii(p.Y.X,e.X));
      }
  }
  return 0;
}
