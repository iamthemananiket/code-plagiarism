#include<cassert>
#include<cstdio>
#include<iostream>
#include<vector>
#include<algorithm>
#include<string>
#include<cstring>
using namespace std;

typedef long long LL;
typedef vector<int> VI;

#define REP(i,n) for(int i=0, i##_len=(n); i<i##_len; ++i)
#define EACH(i,c) for(__typeof((c).begin()) i=(c).begin(),i##_end=(c).end();i!=i##_end;++i)
#define eprintf(s...) fprintf(stderr, s)

template<class T> inline void amin(T &a, const T &b) { if (b<a) a=b; }
template<class T> inline void amax(T &a, const T &b) { if (a<b) a=b; }
// <O(nlogn), O(1)>
template<class T>
struct IRMQ {
    vector<T> A;
    vector<vector<int> > M;
    IRMQ() {}
    IRMQ(const vector<T> &A_): A(A_) {
	int N = A.size(), LOGN = __lg(N)+1;
	M.resize(LOGN);
	for (int i=0; i<LOGN; i++) M[i].resize(N);
	for (int j=0; j<N; j++) M[0][j] = j;
	for (int i=0; i<LOGN-1; i++)
	    for (int j=0; j+(1<<i)<N; j++)
		if (A[M[i][j+(1<<i)]] < A[M[i][j]]) M[i+1][j] = M[i][j+(1<<i)];
		else M[i+1][j] = M[i][j];
    }
    T min_v(int l, int r) { // assert(0 <= l < r <= N)
	return A[min_i(l, r)];
    }
    int min_i(int l, int r) {
	int d = __lg(r-l);
	if (A[M[d][r-(1<<d)]] < A[M[d][l]]) return M[d][r-(1<<d)];
	else return M[d][l];
    }
};


class SAIS {
public:
    vector<int> sa, lcp, rank;
    SAIS(const string &str_) : str(str_) {
	N = str.size()+1;
	S = vector<int>(N, 0);
	for (int i=0; i<N; i++) S[i] = str[i];
	*this = SAIS(S, 256);
    }
    SAIS(const vector<int> &S_, int A_SIZE_) : S(S_), A_SIZE(A_SIZE_) {
	buildSA();
	buildLCP();
	buildRMQ();
    }
private:
    string str;
    vector<int> S;
    int A_SIZE;
    int N;
    vector<int> t, B;
    enum { STYPE, LTYPE };

    inline bool is_lms(int i) {
	return i>0 && t[i] == STYPE && t[i-1] == LTYPE;
    }
    void bucket() {
	B = vector<int>(A_SIZE);
	for (int i=0; i<N; i++) B[S[i]]++;
	for (int i=0; i<A_SIZE-1; i++) B[i+1] += B[i];
    }
    void induced_sort() {
	bucket();
	for (int i=0; i<N; i++) {
	    int j = sa[i]-1;
	    if (j >= 0 && S[j] >= S[j+1]) sa[B[S[j]-1]++] = j;
	}
	bucket();
	for (int i=N; i--; ) {
	    int j = sa[i]-1;
	    if (j >= 0 && S[j] <= S[j+1]) sa[--B[S[j]]] = j;
	}
    }
    void buildSA() {
	N = S.size();
	sa.assign(N, -1);
	if (N == 1) {
	    sa[0] = 0;
	    return;
	}
	t.assign(N, STYPE);
	for (int i=N-1; i--;)
	    if (S[i] > S[i+1] || (S[i] == S[i+1] && t[i+1] == LTYPE))
		t[i] = LTYPE;
	bucket();
	for (int i=N; i--;)
	    if (is_lms(i)) sa[--B[S[i]]] = i;
	induced_sort();

	int N1 = 0;
	for (int i=0; i<N; i++) if (is_lms(sa[i])) sa[N1++] = sa[i];

	fill(sa.begin()+N1, sa.end(), -1);
	int name = 0, prev = -1;
	for (int i=0; i<N1; i++) {
	    int cur = sa[i];
	    bool diff = (prev == -1);
	    for (int j=0; !diff; j++) {
		if (j>0 && is_lms(cur+j)) break;
		if (S[cur+j] != S[prev+j]) diff = true;
	    }
	    if (diff) name++;
	    sa[N1+cur/2] = name-1;
	    prev = cur;
	}
	vector<int> S1, sa1(N1);
	for (int i=N1; i<N; i++) if (sa[i]>=0) S1.push_back(sa[i]);
	if (name == N1) for (int i=0; i<N1; i++) sa1[S1[i]] = i;
	else sa1 = SAIS(S1, name).sa;

	N1 = 0;
	for (int i=0; i<N; i++) if (is_lms(i)) S1[N1++] = i;
	for (int i=0; i<N1; i++) sa1[i] = S1[sa1[i]];

	fill(sa.begin(), sa.end(), -1);
	bucket();
	for (int i=N1; i--;) {
	    int j = sa1[i];
	    sa[--B[S[j]]] = j;
	}
	induced_sort();
    }
    void buildLCP() {
	rank.resize(N);
	lcp.resize(N-1);
	for (int i=0; i<N; i++) rank[sa[i]] = i;
	int h = 0;
	for (int i=0; i<N-1; i++) {
	    int j = sa[rank[i]-1];
	    if (h>0) h--;
	    for (; j+h<N && i+h<N && S[j+h] == S[i+h]; h++) ;
	    lcp[rank[i]-1] = h;
	}
    }

public:
    IRMQ<int> rmq;
    int common_prefix(int x, int y) {
	if (x == y) return N-1-x;
	if (y >= N-1) return 0;
	if (rank[x] > rank[y]) swap(x, y);
	return rmq.min_v(rank[x], rank[y]);
    }
private:
    void buildRMQ() {
	rmq = IRMQ<int>(lcp);
    }
};

char buf[100011];
int Q;
string S;
int N;
SAIS SA("");

int I_, J_;
int ID(int i) {
    if (i < I_ || J_ <= i) return i;
    return J_-1-(i-I_);
}
int revIdx(int i) {
    return 2*N-i;
}

bool check(int a, int b, int c, int d) {
    if (a > b) {
	a = revIdx(a);
	b = revIdx(b);
    }
    if (c > d) {
	c = revIdx(c);
	d = revIdx(d);
    }
    assert(b-a == d-c);
    if (a == c) return true;

    return b-a < SA.common_prefix(a, c);
}


 string T ;
// void slow(int I, int J, int K, int L) {
//     string z = T.substr(I, J-I);
//     reverse(z.begin(), z.end());
//     string X = T.substr(0, I) + z + T.substr(J);
//     bool yes = true;
//     REP (i, L-K) {
// 	if (X[K+i] != X[L-1-i]) {
// 	    yes = false;
// 	    break;
// 	}
//     }
//     eprintf(yes ? "YES\n" : "NO\n");
//     eprintf("\n");
// }
    
int main() {

    scanf("%s%d", buf, &Q);

    S = buf;
    T = S;
    N = S.size();
    {
	string r = S;
	reverse(r.begin(), r.end());
	S = S + "}" + r;
    }
    SA = SAIS(S);

//////
//    Q = 10;
    ////
    REP ($, Q) {
	int I, J, K, L;
	scanf("%d%d%d%d", &I, &J, &K, &L);
	I--; K--;
	I_ = I;
	J_ = J;
	bool yes = true;

	int g = 0;
	if ((L-K) % 2) g = 1;
	int C = (L+K)/2;
	VI v, w;
	v.push_back(I);
	v.push_back(J);
	v.push_back(K);
	v.push_back(L);
	
	v.push_back(2*C - I + g);
	v.push_back(2*C - J + g);
	
	for (int p : v) if (K <= p && p <= L) w.push_back(p);
	
	sort(w.begin(), w.end());
	w.erase(unique(w.begin(), w.end()), w.end());
	REP (i, w.size()-1) {
	    int l = w[i], r = w[i+1]-1;
	    int xl = L-1-(l-K), xr = L-1-(r-K);
//	    eprintf("%d %d %d %d\n", l, r, xl, xr);
	    yes &= check(ID(l), ID(r), ID(xl), ID(xr));
	}

	puts(yes ? "Yes" : "No");
//	slow(I, J, K, L);
    }
    return 0;
}
