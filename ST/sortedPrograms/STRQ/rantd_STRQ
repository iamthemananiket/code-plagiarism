#include <bits/stdc++.h>
using namespace std;

#define rep1(i, begin, end) for (__typeof(begin) i = (begin) - ((begin) > (end)); i != (end) - ((begin) > (end)); i += 1 - 2 * ((begin) > (end)))
#define rep2(i, begin, end) for (__typeof(begin) i = (begin); i != (end) + 1 - 2 * ((begin) > (end)); i += 1 - 2 * ((begin) > (end)))
#define mem(a, x) memset(a, x, sizeof(a))
#define all(a) a.begin(), a.end()
#define count_bits(x) __builtin_popcount(x)
#define count_bitsll(x) __builtin_popcountll(x)
#define least_bits(x) __builtin_ffs(x)
#define least_bitsll(x) __builtin_ffsll(x)
#define most_bits(x) 32 - __builtin_clz(x)
#define most_bitsll(x) 64 - __builtin_clz(x)

vector<string> split(const string &s, char c) {
	vector<string> v;
	stringstream ss(s);
	string x;
	while (getline(ss, x, c)) v.push_back(x);
	return v;
}

#define error(args...) { vector<string> _v = split(#args, ','); err(_v.begin(), args); }

void err(vector<string>::iterator it) {}

template<typename T, typename... Args>
void err(vector<string>::iterator it, T a, Args... args) {
	cerr << it -> substr((*it)[0] == ' ', it -> length()) << " = " << a << '\n';
	err(++it, args...);
}

typedef long long ll;
const int MOD = 1000000007;

template<class T> inline T tmin(T a, T b) {return (a < b) ? a : b;}
template<class T> inline T tmax(T a, T b) {return (a > b) ? a : b;}
template<class T> inline void amax(T &a, T b) {if (b > a) a = b;}
template<class T> inline void amin(T &a, T b) {if (b < a) a = b;}
template<class T> inline T tabs(T a) {return (a > 0) ? a : -a;}
template<class T> T gcd(T a, T b) {while (b != 0) {T c = a; a = b; b = c % b;} return a;}

const int N = 1000005;
string word;
ll dp[N][4][4], prf[N][4];

inline int hash(char x) {
	if (x == 'c') return 0;
	if (x == 'h') return 1;
	if (x == 'e') return 2;
	if (x == 'f') return 3;
}


int main(int argc, char *argv[]) {
    ios_base::sync_with_stdio(false);
    int n, q, l, r;
    char a, b;

    cin >> word >> q;
    n = word.size();
    mem(prf[0], 0);
    rep2(i, 1, n) {
    	rep1(j, 0, 4) prf[i][j] = prf[i - 1][j];
    	prf[i][hash(word[i - 1])] += 1;
    }
    rep2(i, 1, n) {
    	rep1(j, 0, 4) rep1(k, 0, 4) {
    		dp[i][j][k] = dp[i - 1][j][k];
    	}
    	int k = hash(word[i - 1]);
    	rep1(j, 0, 4) {
    		if (j == k) continue;
    		dp[i][j][k] += prf[i - 1][j];
    	}
    }

    rep1(i, 0, q) {
    	cin >> a >> b >> l >> r;
    	--l;
    	int ka = hash(a), kb = hash(b);
    	ll ans = dp[r][ka][kb] - dp[l][ka][kb] - prf[l][ka] * (prf[r][kb] - prf[l][kb]);
    	printf("%lld\n", ans);
    }
    return 0;
}
