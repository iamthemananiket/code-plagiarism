# include <cstdio>
# include <cmath>
# include <cstring>
# include <string>
# include <vector>
# include <queue>
# include <map>
# include <algorithm>
# include <iostream>

using namespace std;

const int MAX_S = 512;
const int MAX_N = 128;

int n, s;
int a, b, c;

///int dps[MAX_N][MAX_S];
///int dpw[MAX_N][MAX_S];

long long dp[MAX_S][6100];

int ans[MAX_N], pos;

void add (long long t)
{
	int i, l = 0;
	if (!t)
		return ;
	///printf ("%lld\n", t); 
	for (i = 0; i < pos; i ++)
	{
		ans[i] = ans[i] + t % 10 + l;
		l = ans[i] / 10;
		ans[i] %= 10;
		t /= 10;
	}
	if (l)
		ans[pos ++] = 1;
}

void solve ()
{
	int i, j, k, off;
	pos = 1;
	ans[0] = 0;
	memset (dp, 0, sizeof (dp));
	
	scanf ("%d%d", &n, &s);
	
	
	///dps[0][0] = 0;
	///dpw[0][0] = 1;
	
	long long tmp;
	dp[0][3000] = 1;
	for (k = 1; k <= n; k ++)	
	{
		scanf ("%d%d%d", &a, &b, &c);
		
		for (i = 0; i <= s; i ++)
		{
			if (c - b > 0)
			{
				for (off = 0; off <= 6000; off ++)
				{
					tmp = dp[i][off];
					if (a <= i && 0 <= off - (c - b) && off - (c - b) <= 6000)
						dp[i][off] += dp[i - a][off - (c - b)];
					while (tmp > dp[i][off]);
					while (dp[i][off] > 1000000000000000LL);
				}
			}
			else
			{
				for (off = 6000; off >= 0; off --)
				{
					tmp = dp[i][off];
					if (a <= i && 0 <= off - (c - b) && off - (c - b) <= 6000)
						dp[i][off] += dp[i - a][off - (c - b)];
					while (tmp > dp[i][off]);
					while (dp[i][off] > 1000000000000000LL);
					///while (dp[i][off] > 1000000000000000LL);
				}
			}
		}
		
		
		
		
		/**
		for (i = 0; i < a; i ++)
		{
			dps[k][i] = dps[k - 1][i];
			dpw[k][i] = dpw[k - 1][i];
		}
		
		for (i = a; i <= s; i ++)
		{
			dps[k][i] = -1;
			dpw[k][i] = 1;
			if (
			dps[k][i] = 
		}**/
	}
	///long long ans = 0;
	for (i = 0; i <= s; i ++)
		for (k = 3000 + 1; k <= 6000; k ++)
		{
			add (dp[i][k]);
			///ans += dp[i][k];
		}
	
	for (i = pos - 1; i >= 0; i --)
		printf ("%d", ans[i]);
	printf ("\n");	
		
	///printf ("%llu\n", ans); 
	///return 0;
}

int main ()
{
	int t;
	scanf ("%d", &t);
	while (t --)
		solve ();
	return 0;
}
