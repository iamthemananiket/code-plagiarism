/*
._._._._._._._._._._._._._._._._._._._._._._._._._._._._._._._._._._._._._._._._
	ABHINANDAN AGARWAL
	MNNIT ALLAHABAD
	CSE
._._._._._._._._._._._._._._._._._._._._._._._._._._._._._._._._._._._._._._._._
*/
#include<bits/stdc++.h>
using namespace std;
#define pc putchar_unlocked
#define gc getchar_unlocked
typedef long long ll;
typedef unsigned long long llu;
#define mp make_pair
#define pb push_back
int fs()
{
	int x=0;
	char c;
	c=getchar_unlocked();
	while (c<'0'||c>'9')
		c=getchar_unlocked();
	while ('0'<=c&&c<='9')
	{
		x=(x<<3)+(x<<1)+c-'0';
		c=getchar_unlocked();
	}
	return x; 
}
void pps(const char *s)
{
	int i;
	for (i=0;s[i]!='\0';i++)
	{
		putchar_unlocked(s[i]);
	}
}
void _ppd(int a)
{
	if (a==0)
		return ;
	_ppd(a/10);
	putchar_unlocked(a%10+'0');
}
void ppd(int a) // Printing integer using utchar unlocked!
{
	if (a==0)
		pc('0');
	else
	_ppd(a);
}
void _pplld(ll a)
{
	if (a==0)
		return ;
	_pplld(a/10);
	pc(a%10+'0');
}
void pplld(ll a)
{
	if (a==0)
	{
		pc('0');
		return ;
	}
	if (a<0)
	{
		pc('-');
		a=-a;
	}
	_pplld(a);
}
void ggs(char *s) // String inputting
{
	int x=0;
	char c=gc();
	while (!('a'<=c&&c<='z')) // change conditions to whatever strings can input !
		c=gc();
	while ('a'<=c&&c<='z')
	{
		s[x++]=c;
		c=gc();
	}
	s[x]='\0';
}

int fsn()
{
	int x=0;
	char c;
	c=getchar_unlocked();
	while (!('0'<=c&&c<='9'||c=='-'))
		c=getchar_unlocked();
	int neg=0;
	if (c=='-'){
		neg=1;
		c=getchar_unlocked();
	}
	while ('0'<=c&&c<='9')
	{
		x=(x<<3)+(x<<1)+c-'0';
		c=getchar_unlocked();
	}
	return (neg==0?x:-x); 
}

int n,m,all;
int A[20];
static int off[40000];
static int dp[32770][20];
inline int bcnt(int x)
{
	register int c=0;
	while (x)
	{
		x=(x&(x-1));
		c++;
	}
	return c;
}
int cnt(int till)
{
	int c=bcnt(till);
	return A[n-c];
}
int doit(int ind,int till)
{
	//printf("do in with till :%d ind:%d\n",till,ind);
	if (ind>=m-1)
	{
		return 0;
	}
	if (till==all)
	{
		return 0;
	}
	int c=bcnt(till);
	if (dp[ind+1][c]!=-1)
		return dp[ind+1][c];
	int i,j,ret=0,shnaid;
	//printf("loop starts for ind:%d\n",ind);
	for (i=ind+1;i<m;i++)
	{
		if ((till&off[i])==0)
		{
			// printf("sending for i :%d\n",i);
			shnaid=doit(i,till|off[i])-cnt(till|off[i]);
			if (shnaid<ret)
				ret=shnaid;
		}
	}
	//printf("return value for ind:%d and till:%d is %d\n",ind,till,ret);
	return dp[ind+1][c]=ret;
}
int main()
{
	int t,i;
	t=fs();
	while (t--)
	{

		n=fs();
		int i,d,j,s=0;
		for (i=0;i<n;i++)
		{
			A[i]=fs();
			s+=A[i];
		}
		m=fs();
		for (i=0;i<m;i++)
		{
			off[i]=0;
			d=fs();
			for (j=0;j<d;j++)
			{
				int tem;
				tem=fs();
				off[i]=(off[i]|(1<<(tem-1)));
			}
		}
		all=(1<<n)-1;
		//printf("all is :%d\n",all);
		for (i=0;i<=m;i++)
			for (j=0;j<=n;j++)
				dp[i][j]=-1;
		sort(A,A+n);
		int ans=doit(-1,0);
		ppd(s+ans);pc('\n');
	}
	return 0;
} 