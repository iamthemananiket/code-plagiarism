#include <bits/stdc++.h>
#define rf freopen("inp.in","r",stdin)

using namespace std;

inline int scan(){
    int x = 0;
    char c = getchar_unlocked();
    while(c < '0' || c > '9'){
        c = getchar_unlocked();
    }
    while(c >= '0' && c <= '9'){
        x = (x << 3) + (x << 1) + c - '0';
        c = getchar_unlocked();
    }
    return x;
}

const int MAX = 17;

int T , N , M , A[MAX] ;
pair < int , int > B[ 1 << MAX];
int DP[ 1 << MAX ];

inline bool cmp( pair < int , int > x , pair < int , int > y ){
	return x.second < y.second;
}

int main(){
	
	
	T = scan();
	while( T-- ){
		
		memset( DP , 0 , sizeof DP );

		N = scan();
		int res = 0;

		for(int i = 1 ; i <= N ; i++){
			A[i] = scan();
			res += A[i];
		}
		
		sort( A + 1, A + 1 + N);		
		reverse( A + 1, A + 1 + N);

		M = scan();
		
		for(int i = 1 ; i <= M ; i++){
			int nos = scan();
			int msk = 0;
			for(int j = 1 ; j <= nos ; j++){
				int x = scan();
				msk |= ( 1 << ( x - 1 ) );
			}
			B[i].first  = msk;
			B[i].second = __builtin_popcount(msk);
		}

		sort( B + 1 , B + 1 + M , cmp);
		int lim = ( 1 << N ) - 1;

		for(int i = lim ; i >= 0 ; i--){
			for(int j = 1 ; j <= M ; j++){
				if( B[j].second > ( N - __builtin_popcount(i) ) ) break;
				int state = B[j].first | i;
				if( !(B[j].first & i) )
					DP[i] = max( DP[i] , DP[ state ] + A[ __builtin_popcount( state ) ] );
			}
		}
		
		res -= DP[0];
		printf("%d\n",res);

	}
}