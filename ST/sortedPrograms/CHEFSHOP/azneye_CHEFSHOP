#include <algorithm>
#include <cstdlib>
#include <cstring>
#include <iostream>
#include <map>
#include <set>
#include <vector>

using namespace std;

typedef long long ll;

int main() {
  ios::sync_with_stdio(false);
  cin.tie(NULL);
  int T;
  cin >> T;
  while (T-- > 0) {
    const int INF = 1 << 30;
    int N;
    cin >> N;
    vector<int> cost(N);
    for (int i = 0; i < N; ++i) {
      cin >> cost[i];
    }
    vector<bool> deal(1 << N, false);
    int M;
    cin >> M;
    for (int i = 0; i < M; ++i) {
      int cnt, now = 0;
      cin >> cnt;
      while (cnt-- > 0) {
        int idx;
        cin >> idx;
        now |= 1 << (idx - 1);
      }
      deal[now] = true;
    }
    vector<int> bit_cnt(1 << N, 0);
    for (int i = 1; i < (int) bit_cnt.size(); ++i) {
      bit_cnt[i] = bit_cnt[i - (i & -i)] + 1;
    }
    sort(cost.begin(), cost.end());
    reverse(cost.begin(), cost.end());
    vector<int> sum(N + 1, 0);
    for (int i = 1; i <= N; ++i) {
      sum[i] = sum[i - 1] + cost[i - 1];
    }
    vector<int> dp(1 << N, INF);
    dp[0] = 0;
    for (int mask = 1; mask < (1 << N); ++mask) {
      for (int sub = mask; sub != 0; sub = (sub - 1) & mask) {
        if (deal[sub]) {
          dp[mask] = min(dp[mask],
              dp[mask ^ sub] + sum[bit_cnt[mask] - 1] - sum[bit_cnt[mask ^ sub]]);
        }
      }
    }
    int res = INF;
    for (int mask = 0; mask < (1 << N); ++mask) {
      res = min(res, dp[mask] + sum[N] - sum[bit_cnt[mask]]);
    }
    cout << res << endl;
  }
  return 0;
}
