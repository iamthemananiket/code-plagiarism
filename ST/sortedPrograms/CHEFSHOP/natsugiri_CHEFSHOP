#include<cstdio>
#include<iostream>
#include<vector>
#include<algorithm>
#include<string>
#include<cstring>
using namespace std;

typedef long long LL;
typedef vector<int> VI;

#define REP(i,n) for(int i=0, i##_len=(n); i<i##_len; ++i)
#define EACH(i,c) for(__typeof((c).begin()) i=(c).begin(),i##_end=(c).end();i!=i##_end;++i)
#define eprintf(s...) fprintf(stderr, s)

template<class T> inline void amin(T &a, const T &b) { if (b<a) a=b; }
template<class T> inline void amax(T &a, const T &b) { if (a<b) a=b; }

int T, N, A[15];
int sums[20];
int dp[1<<15];

int M;

int main() {
    scanf("%d", &T);
    REP ($, T) {
	scanf("%d", &N);
	REP (i, N) scanf("%d", A+i);
	sort(A, A+N);
	REP (i, N) sums[i+1] = sums[i] + A[i];

	memset(dp, 0x3f, sizeof dp);
	dp[0] = 0;

	scanf("%d", &M);
	vector<pair<int, int> > B;
	REP (_, M) {
	    int C;
	    scanf("%d", &C);
	    int mask = 0, x;
	    REP (i, C) {
		scanf("%d", &x);
		x--;
		mask |= 1<<x;
	    }
	    B.push_back(make_pair(C, mask));
	}
	
	sort(B.begin(), B.end());

	REP (k, M) {
	    int sz = B[k].first;
	    int mask = B[k].second;
	    int sup = ~mask & ((1<<N)-1);
	    for (int S=sup; ; S = (S-1)&sup) {
		int t = __builtin_popcount(S);
		amin(dp[S | mask], dp[S] + sums[N-t] - sums[N-t-sz+1]);
		if (S == 0) break;
	    }
	}
	int ans = dp[(1<<N)-1];
	REP (S, 1<<N) {
	    int t = __builtin_popcount(S);
	    amin(ans, dp[S] + sums[N-t]);
	}
	printf("%d\n", ans);
    }
    
    return 0;
}
