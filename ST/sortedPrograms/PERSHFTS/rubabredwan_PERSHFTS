/*
__________           .___                       
\______   \ ____   __| _/_  _  _______    ____  
 |       _// __ \ / __ |\ \/ \/ /\__  \  /    \ 
 |    |   \  ___// /_/ | \     /  / __ \|   |  \
 |____|_  /\___  >____ |  \/\_/  (____  /___|  /
        \/     \/     \/              \/     \/ 
        
handle	: rubabredwan (Codeforces/CodeChef/HackerRank)
task 	: ...............

*/

#include <bits/stdc++.h>

#define READ(x)		freopen(x,"r",stdin)
#define WRITE(x)	freopen(z,"w",stdout)

#define REP(i,n)	for(int i=0;i<n;i++)
#define REPN(i,n)	for(int i=1;i<=n;i++)
#define FOR(i,a,b)	for(int i=a;i<b;i++)
#define SET(i,n)	memset(i,n,sizeof(i))

#define MAX			100050
#define INF			1e9
#define in			insert
#define pb			push_back
#define cl			clear
#define sz			size
#define xx 			first
#define yy	 		second

using namespace std;

typedef long long int 	ll;
typedef vector<int>		vi;
typedef pair<ll,ll>		pii;
typedef double			db;

//template ends here

int k, n;
vector<int> a, b, non;
vector<vi >vec;
map<vi, int>mp;
bool vis[MAX];

vi change(vi xyz, int b, int e){
	vi abc = xyz;
	for(int i=b+1;i<e;i++){
		abc[i] = xyz[i-1];
	}
	abc[b] = xyz[e-1];
	return abc;
}

void recur(vi ret){
	if(mp[ret]) return;
	vec.pb(ret);
	mp[ret]++;
	for(int i=0;i+k<=n;i++){
		vi abc = change(ret, i, i+k);	
		recur(abc);
	}
}

void init(){
	mp.clear();
	a.clear();
	b.clear();
	vec.clear();
	non.clear();
}

int bs(){
	int low = 1, high = vec.size(), mid;
	while(low <= high){
		mid = (low + high) / 2;
		if(vec[mid-1] == b) return mid;
		if(vec[mid-1] < b){
			low = mid + 1;
		}
		else high = mid - 1;
	}
	return -1;
}

void print(vi vocet){
	REP(i, vocet.size()) cout << vocet[i] << " ";
	cout << endl;
}

int bst(){
    int low = 1, high = non.size(), mid;
    sort(non.begin(), non.end());
    while(low <= high){
        mid = (low + high) / 2;
        if(non[mid-1] == b[0]) return mid;
        else if(non[mid-1] < b[0]) low = mid + 1;
        else high = mid - 1;
    }
    return INT_MAX;
}

void dfs(int at){
    if(vis[at]) return;
    non.pb(b[at]);
    vis[at] = true;
    int next = at + 1;
    if(next == n) next = 0;
    dfs(next);
}

int main()
{
	int tc, x;
	scanf("%d", &tc);
	while(tc--){
		init();
		scanf("%d %d", &n, &k);
		REPN(i, n){ 
			scanf("%d", &x);
			a.pb(x);
		}
		REPN(i, n){ 
			scanf("%d", &x);
			b.pb(x);
		}
		if(n != k){
		    recur(a);
		    sort(vec.begin(), vec.end());
		    printf("%d\n", bs());
		}
		else{
		    int pos = -1;
		 	non.clear();
		 	SET(vis, 0);
		    REP(i, n){
		        if(a[0] == b[i]){
		            pos = i;
		            break;
		        }
		    }
		    dfs(pos);
	//        print(non);
		    if(non != a) printf("-1\n");
		    else printf("%d\n", b[0]);
		}
	/*
	1-2-3 --> 3 1 2 -- > 2 3 1 > 1 2 3
	*/
	}
	return 0;
}


/*

1 - 2 - 3 -- > 3 - 1 - 2 -- > 2 - 3 - 1  -- > 1 - 2 - 3

int rec(int at){
    
    bolod insert at;
    
}


*/