#include <iostream>
#include <vector>
#include <algorithm>
using namespace std;

typedef  long long  ll ;
typedef  vector<ll>  vll ;
typedef  vector<int>  vi ;

int  n, k ;
vi  p, q ;
vll  fact[2];

const ll  MOD[] = { 1000000007, 2000000014 } ;

struct FenwickTree
{
        vi  a ;

        inline void init()
        {
                a.clear();
                a.resize(n+1,0);
                for( int i=1; i<=n; i++ )
                        update(i);
        }

        inline void update( int x )
        {
                for( ; x<=n; x+=(x&-x) )
                        a[x]++;
        }

        inline void downdate( int x )
        {
                for( ; x<=n; x+=(x&-x) )
                        a[x]--;
        }

        inline int query( int x )
        {
                int  sum = 0 ;
                for( ; x>0; x-=(x&-x) )
                        sum += a[x] ;
                return  sum-1 ;
        }
};

inline  ll  sol( )
{
        ll  ans = 1 ;
        FenwickTree  ft;
        ft.init();

        for( int i=0; i<n-1; i++ )
        {
                ans += ft.query(q[i]) * fact[k&1][n-i-1] ;
                ans %= MOD[k&1] ;
                ft.downdate( q[i] );
        }

        return  ans ;
}

inline  bool  swaps( vi arr )
{
        bool ans=0 ;

        vi  ai(n+1);

        for( int i=0; i<n; i++ )
                ai[ arr[i] ] = i ;

        for( int i=0; i<n; i++ )
        if( arr[i] != i+1 )
        {
                int  j = ai[i+1] ;
                arr[j] = arr[i] ;
                ai[ arr[j] ] = j ;
                ans^=1;
        }

        return ans ;
}

inline  ll  Kodd( )
{
        if( swaps(p) != swaps(q) )
                return  -1 ;

        return  ( ( sol() + 1 ) % MOD[1] ) / 2 ;
}

inline  int  KequN( )
{
        vi  tmp(n+1) ;
        for( int i=0; i<n-1; i++ )
                tmp[ p[i] ] = p[i+1] ;
        tmp[ p[n-1] ] = p[0] ;

        for( int i=0; i<n-1; i++ )
                if( tmp[ q[i] ] != q[i+1] )
                        return  -1 ;

        return  q[0] ;
}

int main()
{
        ios_base::sync_with_stdio(0);
        cin.tie(0);

        fact[0].resize(100001);
        fact[0][0] = 1 ;
        for( int i=1; i<100001; i++ )
                fact[0][i] = ( fact[0][i-1] * i ) % MOD[0] ;

        fact[1].resize(100001);
        fact[1][0] = 1 ;
        for( int i=1; i<100001; i++ )
                fact[1][i] = ( fact[1][i-1] * i ) % MOD[1] ;

        int  t ;
        for( cin >> t ;  t-- ;  )
        {
                cin >> n >> k ;

                p.clear();  p.resize(n);
                q.clear();  q.resize(n);

                for( int i=0; i<n; i++ )
                        cin >> p[i] ;

                for( int i=0; i<n; i++ )
                        cin >> q[i] ;

                if( k == n )    cout << KequN() << endl ;
                else if( k%2 )   cout << Kodd() << endl ;
                else    cout << sol() << endl ;
        }

        return 0;
} 