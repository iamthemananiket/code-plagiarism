#include <bits/stdc++.h>
using namespace std;

#define repu(i, a, b) for (int i = (a); i < (b); ++i)
#define repd(i, a, b) for (int i = (a); i > (b); --i)
#define mem(a, x) memset(a, x, sizeof(a))
#define all(a) a.begin(), a.end()
#define uni(a) a.erase(unique(all(a)), a.end())

typedef long long ll;
const int MOD = 1000000007;

template<class T, class U> inline T tmin(T a, U b) {return (a < b) ? a : b;}
template<class T, class U> inline T tmax(T a, U b) {return (a > b) ? a : b;}
template<class T, class U> inline void amax(T &a, U b) {if (b > a) a = b;}
template<class T, class U> inline void amin(T &a, U b) {if (b < a) a = b;}
template<class T> inline T tabs(T a) {return (a > 0) ? a : -a;}
template<class T> T gcd(T a, T b) {while (b != 0) {T c = a; a = b; b = c % b;} return a;}

const int N = 100005;
int n, k, p[N], q[N];
ll pw[N];

template<class T> struct Fenwick {
    vector<T> bit;
    int fw_size;
    
    Fenwick(int _n) {
        fw_size = _n;
        bit.assign(_n + 1, 0);
    }
    
    void add(int ind, T val) {
        for (int i = ind; i <= fw_size; i += i & -i) {
            bit[i] += val;
        }
    }
    
    T get(int ind) {
        T ans = 0;
        for (int i = ind; i > 0; i -= i & -i) {
            ans += bit[i];
        }
        return ans;
    }
};

ll mod_pow(ll x, ll y) {
	ll ret = 1;
	while (y) {
		if (y & 1) ret = ret * x % MOD;
		x = x * x % MOD;
		y >>= 1;
	}
	return ret;
}

/*
inline void shift(int l, int r, vector<int> &x) {
	int old = x[r];
	repd(i, r, l) x[i] = x[i - 1];
	x[l] = old;
}

map<vector<int>, int> mp;

void dfs(vector<int> &x) {
	if (mp.count(x) == 0) mp[x] = 1;
	else return;
	repu(i, 0, n - k + 1) {
		vector<int> tmp(x);
		shift(i, i + k - 1, tmp);
		dfs(tmp);
	}
}
*/

int main(int argc, char *argv[]) {
	ios_base::sync_with_stdio(false);
	
	int ntest;
	
	pw[0] = 1;
	repu(i, 1, N) pw[i] = i * pw[i - 1] % MOD;
	
	/*
	vector<int> st;
	repu(i, 1, n + 1) st.push_back(i);
	vector<vector<int>> G;
	dfs(st);
	
	for (map<vector<int>, int>::iterator it = mp.begin(); it != mp.end(); ++it) {
		repu(i, 0, n) printf("%d%c", it->first[i], i == n - 1 ? '\n' : ' ');
		G.push_back(it->first);
	}
	printf("%d\n", mp.size());
	*/
	
	cin >> ntest;
	
	for (; ntest; --ntest) {
		cin >> n >> k;
		repu(i, 0, n) cin >> p[i];
		repu(i, 0, n) cin >> q[i];
		
		if (k == n) {
			int pos = -1;
			repu(i, 0, n) if (p[i] == q[0]) {
				pos = i; break;
			}
			bool bad = false;
			repu(i, 0, n) if (p[(pos + i) % n] != q[i]) {
				bad = true; break;
			}
			if (bad) {
				printf("-1\n"); continue;
			}
		}
		else if (k % 2 == 1) {
			Fenwick<int> fwp(n), fwq(n);
			ll totp = 0, totq = 0;
			repu(i, 0, n) {
				totp += i - fwp.get(p[i]);
				fwp.add(p[i], 1);
				totq += i - fwq.get(q[i]);
				fwq.add(q[i], 1);
			}
			if ((totp + totq) & 1) {
				printf("-1\n"); continue;
			}
		}
		
		Fenwick<int> fw(n);
		ll ret = 0;
		if (k == n) ret = q[0];
		else if (k & 1) {
			repu(i, 0, n - 2) {
				int lb = q[i] - 1 - fw.get(q[i]);
				ret = (ret + lb * pw[n - i - 1]) % MOD;
				fw.add(q[i], 1);
			}
			ret = (1 + ret * mod_pow(2, MOD - 2)) % MOD;
		}
		else {
			repu(i, 0, n) {
				int lb = q[i] - 1 - fw.get(q[i]);
				ret = (ret + lb * pw[n - i - 1]) % MOD;
				fw.add(q[i], 1);
			}
			ret = (1 + ret) % MOD;
		}
		printf("%lld\n", ret);
	}
	
	return 0;
}
