#include <iostream>
#include <cstdio>
#include <cstdlib>
#include <string>
#include <cstring>
#include <fstream>
#include <algorithm>
#include <set>
#include <map>
#include <vector>
#include <stack>
#include <queue>
#include <deque>
#include <ctime>
#include <cassert>
#include <iomanip>
#include <cmath>

using namespace std;
#define fname ""
#define ll long long
#define pb push_back
#define mp make_pair
#define inf 1000000000
#define INF 1000000000000000000ll
#define ull unsigned long long
#define F first
#define S second
const int N = 100500;
const int mod = inf + 7;
ll binpow(ll a, ll b) {
	ll res = 1;
	while(b) {
		if (b & 1) res = (res * a) % mod;
		a = (a * a) % mod;
		b >>= 1;
	}
	return res;
}
ll f[N];
int n, k, s[N], p[N];
int was[N];
int t[4 * N], nn = 1;

void upd(int v, int x) {
	v += nn - 1;
	t[v] = x;
	v >>= 1;
	while(v) {
		t[v] = t[v + v] + t[v + v + 1];
		v >>= 1;
	}	
}

int get(int l, int r) {
	l += nn - 1;
	r += nn - 1;
	if (l > r) return 0;
	int res = 0;
	while (l <= r) {
		if (l & 1) res += t[l++];
		if (!(r & 1)) res += t[r--];
		l >>= 1, r >>= 1;
	}
	return res;
}

ll GetPermNumberOdd() {
	ll res = 1;
	for (int i = 1; i < nn + nn; ++ i) t[i] = 0;
	for (int i = 1; i <= n; ++ i) t[i + nn - 1] = 1;
	for (int i = nn - 1; i > 0; -- i) t[i] = t[i + i] + t[i + i + 1];
	for (int i = 1; i <= n; ++ i) {
		int cnt = get(1, s[i] - 1);
		res = (res + f[n - i] * cnt) % mod;
		upd(s[i], 0);
	}
	return res;
}

ll GetPermNumberEven() {
	ll res = 1;
	for (int i = 1; i < nn + nn; ++ i) t[i] = 0;
	for (int i = 1; i <= n; ++ i) t[i + nn - 1] = 1;
	for (int i = nn - 1; i > 0; -- i) t[i] = t[i + i] + t[i + i + 1];
	ll cur = binpow(2, mod - 2);
	for (int i = 1; i <= n; ++ i) {
		int cnt = get(1, s[i] - 1);
		res = (res + (f[n - i] * cnt) % mod * cur) % mod;
		upd(s[i], 0);
	}
	return res;
}


ll Inversion() {
	ll res = 0;
	for (int i = 1; i < nn + nn; ++ i) t[i] = 0;
	for (int i = 1; i <= n; ++ i) {
		res += get(p[i] + 1, n);
		upd(p[i], 1);
	}
	return res;
}

void solve() {
	
	scanf("%d%d", &n, &k);
	
	nn = 1;
	while(nn < n) nn <<= 1;

	for (int i = 1; i <= n; ++ i) {
		scanf("%d", &p[i]);
	}
	for (int i = 1; i <= n; ++ i) {
		scanf("%d", &s[i]);
	}

	if (n == k) {
		int pos = -1;
		for (int i = 1; i <= n; ++ i) {
			if (p[i] == s[1]) {
				pos = i;
			}
		}
		assert(pos != -1);
		bool ok = 1;
		for (int i = 1; i <= n; ++ i) {
			int id = i + pos - 1;
			if (id > n) id -= n;
			if (s[i] != p[id]) {
				ok = 0;
				break;
			}
		}
		if (!ok) puts("-1");
		else printf("%d\n", s[1]);
		return;
	}
	if (k & 1) {
		ll now = GetPermNumberEven();
		ll s1 = Inversion();
		for (int i = 1; i <= n; ++ i) p[i] = s[i];
		ll s2 = Inversion();
		if (s1 % 2 != s2 % 2) puts("-1");
		else printf("%lld\n", now);
	}
	else {
		printf("%lld\n", GetPermNumberOdd());
	}
}

int main() {
    
    #ifndef ONLINE_JUDGE
    freopen(fname"in", "r", stdin);
    freopen(fname"out", "w", stdout);
    #endif

	f[0] = 1;

	for (int i = 1; i <= 100000; ++ i) {
		f[i] = (f[i - 1] * i) % mod;
	}

    
    int test = 1;
    scanf("%d\n", &test);
    
    while(test--) solve();
    
    return 0;
}

