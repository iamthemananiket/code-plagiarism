#include <string>
#include <vector>
#include <algorithm>
#include <numeric>
#include <set>
#include <map>
#include <queue>
#include <iostream>
#include <sstream>
#include <cstdio>
#include <cmath>
#include <ctime>
#include <cstring>
#include <cctype>
#include <cassert>
#include <limits>
#include <functional>
#define rep(i,n) for(int (i)=0;(i)<(int)(n);++(i))
#define rer(i,l,u) for(int (i)=(int)(l);(i)<=(int)(u);++(i))
#define reu(i,l,u) for(int (i)=(int)(l);(i)<(int)(u);++(i))
#if defined(_MSC_VER) || __cplusplus > 199711L
#define aut(r,v) auto r = (v)
#else
#define aut(r,v) __typeof(v) r = (v)
#endif
#define each(it,o) for(aut(it, (o).begin()); it != (o).end(); ++ it)
#define all(o) (o).begin(), (o).end()
#define pb(x) push_back(x)
#define mp(x,y) make_pair((x),(y))
#define mset(m,v) memset(m,v,sizeof(m))
#define INF 0x3f3f3f3f
#define INFL 0x3f3f3f3f3f3f3f3fLL
using namespace std;
typedef vector<int> vi; typedef pair<int,int> pii; typedef vector<pair<int,int> > vpii; typedef long long ll;
template<typename T, typename U> inline void amin(T &x, U y) { if(y < x) x = y; }
template<typename T, typename U> inline void amax(T &x, U y) { if(x < y) x = y; }


template<int MOD>
struct ModInt {
	static const int Mod = MOD;
	unsigned x;
	ModInt() : x(0) {}
	ModInt(signed sig) { int sigt = sig % MOD; if(sigt < 0) sigt += MOD; x = sigt; }
	ModInt(signed long long sig) { int sigt = sig % MOD; if(sigt < 0) sigt += MOD; x = sigt; }
	int get() const { return (int)x; }

	ModInt &operator+=(ModInt that) { if((x += that.x) >= MOD) x -= MOD; return *this; }
	ModInt &operator-=(ModInt that) { if((x += MOD - that.x) >= MOD) x -= MOD; return *this; }
	ModInt &operator*=(ModInt that) { x = (unsigned long long)x * that.x % MOD; return *this; }

	ModInt operator+(ModInt that) const { return ModInt(*this) += that; }
	ModInt operator-(ModInt that) const { return ModInt(*this) -= that; }
	ModInt operator*(ModInt that) const { return ModInt(*this) *= that; }
};
typedef ModInt<1000000007> mint;

struct FenwickTree {
	typedef int T;
	vector<T> v;
	void init(int n) { v.assign(n, 0); }
	void add(int i, T x) {
		for(; i < (int)v.size(); i |= i+1) v[i] += x;
	}
	T sum(int i) const {	//[0, i)
		T r = 0;
		for(-- i; i >= 0; i = (i & (i+1)) - 1) r += v[i];
		return r;
	}
	T sum(int left, int right) const {	//[left, right)
		return sum(right) - sum(left);
	}
};

//0 <= res[i] < n - i
void permutationToFactorialNumberSystem(const vector<int> &p, vector<int> &res) {
	int n = p.size();
	FenwickTree ft;
	ft.init(n);
	res.resize(n);
	for(int i = n - 1; i >= 0; -- i) {
		res[i] = ft.sum(p[i]);
		ft.add(p[i], 1);
	}
}

mint getOrd(const vector<int> &fns) {
	int n = fns.size();
	mint res, fact = 1;
	for(int i = n - 1; i >= 0; -- i) {
		res += fact * fns[i];
		fact *= n - i;
	}
	return res;
}

bool getParity(const vector<int> &fns) {
	int n = fns.size();
	int res = 0;
	for(int i = n - 1; i >= 0; -- i)
		res ^= fns[i];
	return (res & 1) != 0;
}

int getOrdMod4(const vector<int> &fns) {
	int n = fns.size();
	int res = 0, fact = 1;
	for(int i = n - 1; i >= 0; -- i) {
		(res += fact * fns[i]) %= 4;
		fact *= n - i;
		if(fact % 4 == 0) break;
	}
	return res;
}


int main() {
	int T;
	scanf("%d", &T);
	for(int ii = 0; ii < T; ++ ii) {
		int N, K;
		scanf("%d%d", &N, &K);
		vector<int> P(N);
		for(int i = 0; i < N; ++ i)
			scanf("%d", &P[i]), -- P[i];
		vector<int> Q(N);
		for(int i = 0; i < N; ++ i)
			scanf("%d", &Q[i]), -- Q[i];
		vi fnsP, fnsQ;
		permutationToFactorialNumberSystem(P, fnsP);
		permutationToFactorialNumberSystem(Q, fnsQ);
		if(N == K) {
			rotate(P.begin(), find(all(P), 0), P.end());
			int q = Q[0];
			rotate(Q.begin(), find(all(Q), 0), Q.end());
			if(P != Q) {
				puts("-1");
			} else {
				printf("%d\n", q + 1);
			}
		}else if(K % 2 == 0) {
			mint ord = getOrd(fnsQ);
			mint ans = ord + 1;
			printf("%d\n", ans.get());
		} else {
			if(getParity(fnsP) != getParity(fnsQ)) {
				puts("-1");
			} else {
				mint ord = getOrd(fnsQ);
				int t = getOrdMod4(fnsQ);
				if(t == 1 || t == 3)
					ord -= 1;
				ord *= mint(500000004);
				mint ans = ord + 1;
				printf("%d\n", ans.get());
			}
		}
	}
	return 0;
}
