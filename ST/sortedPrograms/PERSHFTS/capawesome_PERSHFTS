# include <cstdio>
# include <cstring>
 
using namespace std;
 
const long long MAX_N = 1e5 + 10;
const long long MOD = 1e9 + 7;
 
long long n, k;
long long p[2][MAX_N];
long long b[2][MAX_N];
long long f[2][MAX_N];
long long tt[MAX_N];
long long curr[2];
long long type[2];
long long ans[2];
long long mod[3];
long long tree[MAX_N];

void update (long long idx, long long u)
{
	for (; idx < MAX_N; idx += (idx & (-idx)))
		tree[idx] += u;
}
 
long long find (long long idx)
{
	long long ans = 0;
	for (; idx; idx -= (idx & (-idx)))
		ans += tree[idx];
	return ans;
}
 
long long rank (long long cm, long long cp, long long ci)
{
	long long rans = 0;
	for (ci = 0; ci < n; ci ++)
	{
		long long ans = ((p[cp][ci] - b[cp][ci] - 1) * f[cm][n - ci - 1]) % mod[cm];
		rans += ans; continue;
	}
	return rans % mod[cm];
}


int want;

long long h_rank (long long cp, long long ci, long long rem)
{
	long long rans = 0;
	for (ci = 0; ci < n; ci ++)
	{
		long long ans = 0, pp = (p[cp][ci] - b[cp][ci] - 1), qq = n - ci - 1;
		///printf ("** %lld %lld -> %lld\n", cp, ci, rem);
		if (qq == 1)
		{
			if (!(pp & 1))
			{
				ans += pp >> 1;
				ans %= MOD;
				rans += ans;
				return rans % MOD;
			}
			if (rem == 0)
			{
				if (pp == 1)
				{
					if (want == 0)
						ans ++;
					ans %= MOD;
					rans += ans; 
					return rans % MOD;
				}
			
				if (want == 0)
					ans ++;
				else
					ans += 2;
				
				pp -= 3;
				
				ans += pp >> 1;
				ans %= MOD;
				rans += ans;
				return rans % MOD;
			}
		
			if (pp == 1)
			{
				if (want == 1)
					ans ++;
				ans %= MOD;
				rans += ans;
				return rans % MOD;
			}
		
		
			if (want == 1)
				ans ++;
			else
				ans += 2;
			
			pp -= 3;
		
			ans += pp >> 1;
			ans %= MOD;
			rans += ans;
			return rans % MOD;
		}
	
		if (qq == 2)
		{
			if (!(pp & 1))
			{
				ans += pp;
			
				ans %= MOD;
				rans += ans; continue;
			}
	
			ans += pp;
		
			rem = (rem + 2) % 4;
			ans %= MOD;
			rans += ans; continue;
		}
	
		if (qq == 3)
		{
			ans += pp * 3;
			rem += (pp & 1) * 2;
			ans %= MOD;
			rans += ans; continue;
		}
	
		ans += pp * tt[qq];
		ans %= MOD;
		rans += ans; continue;
	}
	return rans % MOD;
}

int main ()
{
	long long t, i, j;
	
	mod[0] = 4;
	mod[1] = (int) (1e9 + 7);
	
	f[0][0] = 1;
	f[1][0] = 1;
	for (i = 1; i < MAX_N; i ++)
	{
		f[0][i] = (i * f[0][i - 1]) % mod[0];
		f[1][i] = (i * f[1][i - 1]) % mod[1];
	}
	
	tt[3] = 3;
	for (i = 4; i < MAX_N; i ++)
		tt[i] = (i * tt[i - 1]) % MOD;
	
	
	scanf ("%lld", &t);
	while (t --)
	{
		scanf ("%lld%lld", &n, &k);
		for (j = 0; j < 2; j ++)
		{
			memset (tree, 0, sizeof (tree));
			for (i = 0; i < n; i ++)
			{
				scanf ("%lld", &p[j][i]);
				b[j][i] = find (p[j][i]);
				update (p[j][i], 1);
				if (p[j][i] - b[j][i] - 1 < 0)
					while (1);
			}
			type[j] = rank (0, j, 0);
			curr[j] = rank (1, j, 0);
		}
		
		if (k == n)
		{
			long long st;	
			for (i = 0; i < n; i ++)
				if (p[0][i] == p[1][0])
					break;
			st = i;
			for (i = 0; i < n; i ++, st = (st + 1) % n)
				if (p[0][st] != p[1][i])
					break;
			if (i < n)
				printf ("-1\n");
			else
				printf ("%lld\n", p[1][0]);
			continue;
		}
		
		if (!(k & 1))
		{
			printf ("%lld\n", (curr[1] + 1) % MOD);
			continue;
		}
		
		///printf ("%lld -> %lld\n", type[0], curr[0]);
		///printf ("%lld -> %lld\n", type[1], curr[1]);
		
		if (type[0] == 0 || type[0] == 3)
			type[0] = 0;
		else
			type[0] = 1;
		
		if (type[1] == 0 || type[1] == 3)
			type[1] = 0;
		else
			type[1] = 1;
		
		if (type[0] != type[1])
		{
			printf ("-1\n");
			continue;
		}
		
		want = type[1];
		ans[1] = h_rank (1, 0, 0);
		printf ("%lld\n", (ans[1] + 1) % MOD);
	}
	
	return 0;
}
/**
1234 0 0 0
1243 1 1 *0
1324 2 2 *1
1342 3 3 1
1423 0 4 2
1432 1 5 *2
2134 2 6 *3
2143 3 7 3
2314 0 8 4
2341 1 9 *4
2413 2 10 *5
2431 3 11 5
3124 0 12 6
3142 1 13 *6
3214 2 14 *7
3241 3 15 7
3412 0 16 8
3421 1 17 
4123 2 18 
4132 3 19 9
4213 0 20 10
4231 1 21
4312 2 22
4321 3 23 11
**/
