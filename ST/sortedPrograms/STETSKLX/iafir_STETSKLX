#include <bits/stdc++.h>

using namespace std;
#define X first
#define Y second
typedef pair< int, int > ii;

const int inf = 1e9 + 1e5;
int t, n, l, r, mid, imid, ans, sz;
map< int, int > mp;
vector< vector< ii > > al;

void add(int v) {
	mp[v]++;
	sz++;
	if(v >= mid) {
		if((sz & 1) == 0) {
			if(mp[mid] < imid+1) {
				mid = mp.upper_bound(mid)->X;
				imid = 1;
			}
			else
				imid++;
		}
	}
	else {
		if((sz & 1)) {
			if(imid > 1)
				imid--;
			else {
				auto it = --mp.lower_bound(mid);
				mid = it->X;
				imid = it->Y;
			}
		}
	}
}

void del(int v) {
	int tmp = --mp[v];
	sz--;
	if(tmp < 1)
		mp.erase(v);
	if(v == mid) {
		if(mp.count(mid)) {
			if(sz & 1) {
				if(imid > 1)
					imid--;
				else {
					auto it = (--mp.lower_bound(mid));
					mid = it->X;
					imid = it->Y;
				}
			}
			else {
				if(imid < mp[mid])
					imid++;
				else
					mid = mp.upper_bound(mid)->X, imid = 1;
			}
		}
		else {
			if(sz & 1){
				auto it = (--mp.lower_bound(v));
				mid = it->X;
				imid = it->Y;
			}
			else {
				mid = mp.upper_bound(v)->X;
				imid = 1;
			}
		}
	}
	else if(v < mid) {
		if((sz & 1) == 0) {
			if(imid < mp[mid])
				imid++;
			else
				mid = mp.upper_bound(mid)->X, imid = 1;
		}
	}
	else {
		if(sz & 1) {
			if(imid > 1)
				imid--;
			else {
				auto it = (--mp.lower_bound(mid));
				mid = it->X;
				imid = it->Y;
			}
		}
	}
}
void dfs(int v, int par = -1, int lvl = 0) {
	if(lvl>=l)
		ans = min(ans, mid);
	if(lvl == r)
		return;
	for(int i = 0; i<al[v].size(); i++) if(al[v][i].X != par) {
		add(al[v][i].Y);
		if(par == -1)
			mid = al[v][i].Y, imid = 1;
		dfs(al[v][i].X, v, lvl+1);
		del(al[v][i].Y);
	}
}

int main() {
	scanf("%d", &t);
	while(t--) {
		scanf("%d%d%d", &n, &l, &r);
		al.assign(n, vector< ii > ());
		for(int i = 1; i<n; i++) {
			int a, b, c;
			scanf("%d%d%d", &a, &b, &c);
			a--; b--;
			al[a].push_back(ii(b, c));
			al[b].push_back(ii(a, c));
		}
		imid = mid = 0;
		sz = 0;
		ans = inf;
		for(int i = 0; i<n; i++) {
			dfs(i);
		}
		printf("%d\n", (ans<inf) ? ans : -1);
	}
	return 0;
}