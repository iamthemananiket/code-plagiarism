#include <bits/stdc++.h>
using namespace std;

#define repu(i, a, b) for (int i = (a); i < (b); ++i)
#define repd(i, a, b) for (int i = (a); i > (b); --i)
#define mem(a, x) memset(a, x, sizeof(a))
#define all(a) a.begin(), a.end()
#define uni(a) a.erase(unique(all(a)), a.end())

typedef long long ll;
const int MOD = 1000000007;

template<class T, class U> inline T tmin(T a, U b) {return (a < b) ? a : b;}
template<class T, class U> inline T tmax(T a, U b) {return (a > b) ? a : b;}
template<class T, class U> inline void amax(T &a, U b) {if (b > a) a = b;}
template<class T, class U> inline void amin(T &a, U b) {if (b < a) a = b;}
template<class T> inline T tabs(T a) {return (a > 0) ? a : -a;}
template<class T> T gcd(T a, T b) {while (b != 0) {T c = a; a = b; b = c % b;} return a;}

const int N = 100005;
int n, ans, mid, lim, L, R, qh, qt, vt, tot, inf = 1000000;
int v[N + N], w[N + N], nxt[N + N], head[N], f[N], ff[N], who[N], nnum[N], ssum[N];
int who2[N], s[N], fr[N], ma[N], q[N], cut[N], id[N], to[N], wei[N];

bool comp(int a, int b) {
	return s[a] < s[b];
}

void add(int a, int b, int c) {
	v[++vt] = b;
	w[vt] = c;
	nxt[vt] = head[a];
	head[a] = vt;
}

int root(int now, int size){
    qh = qt = 0;
    q[++qt] = now;
	fr[now] = 0;
    while (qh < qt) {
		int x = q[++qh]; s[x] = 1; ma[x] = 0;
		for (int i = head[x]; i; i = nxt[i]) {
			if(!cut[v[i]] && v[i] != fr[x]) fr[q[++qt] = v[i]] = x;
		}
    }
	
    for (int i = qt; i > 1; --i) {
		s[fr[q[i]]] += s[q[i]];
		ma[q[i]] = max(ma[q[i]], size - s[q[i]]);
		ma[fr[q[i]]] = max(ma[fr[q[i]]], s[q[i]]);
	}
	
    ma[now] = max(ma[now], size - s[now]);
    int res = -1;
    for (int i = 1; i <= qt; ++i) {
		if (res == -1 || ma[res] > ma[q[i]]) res = q[i];
	}
    return res;
}

void dfs(int x, int fa, int num, int sum) {
	fr[x] = fa;
    nnum[x] = num;
	ssum[x] = sum;
    qh = qt = 0;
    q[++qt] = x;
    while (qh < qt) {
        int now = q[++qh];
        for (int i = head[now]; i; i = nxt[i]) {
			if (!cut[v[i]] && v[i] != fr[now]) {
				fr[q[++qt] = v[i]] = now;
                nnum[v[i]] = nnum[now] + 1; 
                if (w[i] <= mid) ssum[v[i]] = ssum[now] + 1;
                else ssum[v[i]] = ssum[now] - 1;
            }
		}
    }
	
    for (int i = 1;i <= qt; ++i) {
		if (ssum[q[i]] > ff[nnum[q[i]]]) {
            ff[nnum[q[i]]] = ssum[q[i]];
            who2[nnum[q[i]]] = q[i];
        }
	}
}

bool check(int x) {
    who[0] = x;
    for (int i = 1; i <= s[to[tot]]; ++i) f[i] = -inf;
    for (int i = 1, j, k = 0; i <= tot; ++i) {
		for (j = 1; j <= s[to[i]]; ++j) ff[j] = -inf;
        if (wei[to[i]] <= mid) dfs(to[i], x, 1, 1);
        else dfs(to[i], x, 1, -1);
        qh = 1; qt = 0;
        for (j = 1; j <= s[to[i]]; ++j) {
            if (ff[j] == -inf) break;
            while (k >= 0 && j + k >= L) {
                while (qh <= qt && f[q[qt]] < f[k]) --qt;
                q[++qt] = k--;
            }
            while (qh <= qt && j + q[qh] > R) ++qh;
            if (qh <= qt && ff[j] + f[q[qh]] >= 1) {
                amin(ans, mid);
                return 1;
            }
        }
        for (k = 1; k < j; ++k) {
			if (ff[k] > f[k]) {
                f[k] = ff[k];
				who[k] = who2[k];
            }
		}
        --k;
    }
    return 0;
}

void calc(int x, int size) {
    tot = 0;
    for (int i = head[x]; i; i = nxt[i]) {
		if (!cut[v[i]]) {
            if (s[v[i]] > s[x]) s[v[i]] = size - s[x];
            to[++tot] = v[i];
			wei[v[i]] = w[i];
        }
	}
    if (!tot) return;
    sort(to + 1, to + tot + 1, comp);
    int l = 1, r = ans - 1;
	mid = r;
	if (!check(x)) return;
    while (l <= r) {
        mid = (l + r) >> 1;
        if (check(x)) r = mid - 1;
        else l = mid + 1;
    }
}

void solve(int x, int size){
    x = root(x, size);
	cut[x] = 1;
	calc(x, size);
    for (int i = head[x]; i; i = nxt[i]) {
		if (!cut[v[i]]) solve(v[i], s[v[i]]);
	}
}

int main(int argc, char *argv[]) {
	ios_base::sync_with_stdio(false);
	
	int ntest, a, b, c;
	
	cin >> ntest;
	while (ntest--) {
		cin >> n >> L >> R;
		vt = lim = 0;
		repu(i, 1, n) {
			cin >> a >> b >> c;
			add(a, b, c); add(b, a, c);
			amax(lim, c);
		}
		ans = lim + 1;
		solve(1, n);
		printf("%d\n", ans > lim ? -1 : ans);
		for (int i = 0; i <= n; ++i) {
			head[i] = cut[i] = s[i] = ma[i] = 0;
			f[i] = ff[i] = who[i] = nnum[i] = ssum[i] = who2[i] = 0;
			fr[i] = q[i] = id[i] = to[i] = wei[i] = 0;
			nxt[i] = nxt[i + n] = v[i] = v[i + n] = w[i] = w[i + n] = 0;
		}
	}
	
	return 0;
}
