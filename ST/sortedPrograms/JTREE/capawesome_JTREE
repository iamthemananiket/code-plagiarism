# include <cstdio>
# include <vector>

using namespace std;

const int MAX_N = 1e5 + 10;
const int MAX_M = 1e5 + 10;
const long long INF = (1LL << 60);

int n, m;
int k[MAX_M], w[MAX_M];

long long dp[MAX_N];

long long tree[4 * MAX_N];

vector <int> v[MAX_N];
vector <int> t[MAX_N];

void update (int idx, int l, int r, int p, long long u)
{
    int mid = (l + r) >> 1;
    if (l > p || p > r)
        return;
    if (l == r)
    {
        tree[idx] = u;
        return;
    }
    update (idx * 2, l, mid, p, u);
    update (idx * 2 + 1, mid + 1, r, p, u);
    tree[idx] = min (tree[idx * 2], tree[idx * 2 + 1]);
}

long long find (int idx, int l, int r, int p, int q)
{
    int mid = (l + r) >> 1;
    long long ansl, ansr;
    if (p > r || l > q)
        return INF;
    if (p <= l && r <= q)
        return tree[idx];
    ansl = find (idx * 2, l, mid, p, q);
    ansr = find (idx * 2 + 1, mid + 1, r, p, q);

    return min (ansl, ansr);
}

void dfs (int x, int lvl)
{
    int i, ck, cw;
    long long best = INF, crr;
    for (i = 0; i < (int) t[x].size (); i ++)
    {
        ck = k[t[x][i]];
        cw = w[t[x][i]];
        crr = find (1, 1, n, max (1, lvl - ck), max (lvl - 1, max (1, lvl - ck)));
        best = min (best, crr + cw);
    }
    if (x == 1)
        best = 0;
    dp[x] = best;
    ///printf ("%d = %d\n", x, best);
    update (1, 1, n, lvl, dp[x]);
    for (i = 0; i < (int) v[x].size (); i ++)
        dfs (v[x][i], lvl + 1);
}

int main ()
{
    int i, a, b, p, q, x;
    scanf ("%d%d", &n, &m);

    for (i = 0; i < 4 * n; i ++)
        tree[i] = INF;

    for (i = 0; i < n - 1; i ++)
    {
        scanf ("%d%d", &a, &b);
        v[b].push_back (a);
    }
    for (i = 0; i < m; i ++)
    {
        scanf ("%d%d%d", &x, &k[i], &w[i]);
        t[x].push_back (i);
    }

    dfs (1, 1);

    scanf ("%d", &q);

    while (q --)
    {
        scanf ("%d", &p);
        printf ("%lld\n", dp[p]);
    }
    return 0;
}
