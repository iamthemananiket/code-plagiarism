#include <cstdio>
#include <iostream>
#include <cstdlib>
#include <string>
#include <cstring>
#include <set>
#include <map>
#include <queue>
#include <deque>
#include <stack>
#include <vector>
#include <ctime>
#include <cassert>
#include <cmath>
#include <iomanip>
#include <algorithm>
#include <iomanip>
#include <fstream>
using namespace std;
#define fname ""
#define F first
#define S second
#define pb push_back
#define mp make_pair
#define ll long long
#define ull unsigned long long
#define inf 1000000000
#define INF 1000000000000000000ll
const int N = 100500;
int n, m;

vector <int> a[N], edges[N];

int all[N], sz = 0, dist[N];
ll d[N];

struct edge {
    int v, cost, k;
    void in() {
        scanf("%d%d%d", &v, &k, &cost);
    }
}e[N];

ll t[4 * N];
int nn = 1;

inline ll get(int l, int r) {
	if (l > r) return INF;
	l += nn - 1;
	r += nn - 1;
	ll res = INF;
	while (l <= r) {
		if (l & 1) res = min(res, t[l++]);
		if (!(r & 1)) res = min(res, t[r--]);
		l >>= 1;
		r >>= 1;
	}
	return res;
}

inline void upd(int v, ll x) {
	v += nn - 1;
	t[v] = x;
	v >>= 1;
	while (v) {
		t[v] = min(t[v + v], t[v + v + 1]);
		v >>= 1;
	}
}

void dfs(int v, int p = 0) {
	all[++sz] = v;
	upd(sz, d[v]);

    for (int i = 0; i < (int)a[v].size(); ++ i) {
        int to = a[v][i];
        if (to != p) {
			dist[to] = dist[v] + 1;
			
			for (int ee = 0; ee < (int)edges[to].size(); ++ ee) {
				int id = edges[to][ee];
				int len = dist[to] - e[id].k;
				int L = 1, R = sz, pos = sz + 1;
				while (L <= R) {
					int mid = (L + R) >> 1;
					if (len <= dist[all[mid]]) {
						pos = mid;
						R = mid - 1;
					}
					else L = mid + 1;
				}
				d[to] = min(d[to], get(pos, sz) + e[id].cost);
			}

            dfs(to, v);
        }
    }
	upd(sz, INF);
	--sz;
}

int main() {
	#ifndef ONLINE_JUDGE
    freopen(fname"in", "r", stdin);
    freopen(fname"out", "w", stdout);
	#endif
    
    scanf("%d%d", &n, &m);

	while (nn < n) nn <<= 1;

	for (int i = 1; i < nn + nn; ++ i) t[i] = INF;

    for (int i = 1; i < n; ++ i) {
        int x, y;
        scanf("%d%d", &x, &y);
        a[x].pb(y);
        a[y].pb(x);
    }
    
    for (int i = 1; i <= m; ++ i) {
		e[i].in();
		edges[e[i].v].pb(i);
	}
    
	for (int i = 1; i <= n; ++ i) d[i] = INF;
	d[1] = 0;

    dfs(1);

    int q;
    scanf("%d", &q);
    
    while (q--) {
        int x;
        scanf("%d", &x);
        printf("%lld\n", d[x]);
    }
    
    return 0;
}
