#include<bits/stdc++.h>

using namespace std;

#define ff first
#define ss second
#define pb push_back
#define mp make_pair
#define all(x) x.begin(),x.end()
#define sz(x) ((int)x.size())
#define eps 1e-9

const int MOD = 1e9+7;

typedef long long ll;
typedef pair<int,int> pii;

ll POWER[65];
ll power(ll a, ll b) {ll ret=1;while(b) {if(b&1) ret*=a;a*=a;if(ret>=MOD) ret%=MOD;if(a>=MOD) a%=MOD;b>>=1;}return ret;}
ll inv(ll x) {return power(x,MOD-2);}

void precompute() {
	POWER[0]=1;
	for(int i=1;i<63;i++) POWER[i]=POWER[i-1]<<1LL;
}
const int MAXN = 1e5+5;
ll dp[MAXN];
const ll INF = 1e18;
ll st[4*MAXN];
int lev[MAXN];
vector<int> adj[MAXN];
vector< pii > ar[MAXN];
int n;
void build(int node, int start, int end) {
	if(start==end) {
		st[node]=INF;
		return;
	}
	int mid=(start+end)>>1;
	build(2*node,start,mid);
	build(2*node+1,mid+1,end);
	st[node]=INF;
}
void update(int node, int start, int end, int qs, int qe, ll val) {
	if(start>end or qe<start or qs>end) return;
	if(start>=qs and end<=qe) {
		st[node]=val;
		return;
	}
	int mid=(start+end)>>1;
	update(2*node,start,mid,qs,qe,val);
	update(2*node+1,mid+1,end,qs,qe,val);
	st[node]=min(st[2*node],st[2*node+1]);
}

ll query(int node, int start, int end, int qs, int qe) {
	if(start>end or qe<start or qs>end) return INF;
	if(start>=qs and end<=qe) return st[node];
	int mid=(start+end)>>1;
	return min(query(2*node,start,mid,qs,qe),query(2*node+1,mid+1,end,qs,qe));
}
void DFS(int s, int par=-1) {
	if(s==1) dp[1]=0;
	else {
		dp[s]=INF;
		for(auto it:ar[s]) {
			int l = max(lev[s]-it.ff,1);
			int r = lev[s]-1;
			ll q = query(1,1,n,l,r);
			q+=1LL*it.ss;
			dp[s]=min(dp[s],q);
		}
		update(1,1,n,lev[s],lev[s],dp[s]);
	}
	for(auto it:adj[s]) {
		if(it==par) continue;
		lev[it]=lev[s]+1;
		DFS(it,s);
	}
	update(1,1,n,lev[s],lev[s],INF);
}
int main() {
	//freopen("TASK.in","r",stdin);freopen("TASK.out","w",stdout);
	//precompute();
	int m;
	cin>>n>>m;
	for(int i=1;i<n;i++) {
		int x,y;
		scanf("%d%d",&x,&y);
		adj[y].pb(x);
	}
	for(int i=1;i<=m;i++) {
		int v,k,w;
		scanf("%d%d%d",&v,&k,&w);
		ar[v].pb(mp(k,w));
	}
	build(1,1,n);
	update(1,1,n,1,1,0);
	lev[1]=1;
	DFS(1);
	int q;
	cin>>q;
	while(q--) {
		int x;
		scanf("%d",&x);
		printf("%lld\n",dp[x]);
	}
	return 0;
}
