#include <bits/stdc++.h>
 
using namespace std;

typedef long long ll;
const int MAX = 111000;
const int PW = 1<<17;

struct Tree {
  ll tree[2*PW];
  int len;
  
  void init() {
    memset(tree,0x3F,sizeof(tree));
    len=0;
  }
  
  void push(ll x) {
    tree[len+PW]=x;
    for(int i=(len+PW)>>1;i>0;i>>=1)
      tree[i]=min(tree[i+i],tree[i+i+1]);
    ++len;
  }
  
  void pop() {
    --len;
  }
  
  ll get_min(int cnt) {
    ll res=1LL<<60;
    for(int l=len-cnt+PW,r=len+PW;l<r;l>>=1,r>>=1){
      if(l&1)res=min(res,tree[l++]);
      if(r&1)res=min(res,tree[--r]);
    }
    return res;
  }
};

vector<int> adj[MAX];
vector<pair<int,int>> ticks[MAX];//(cnt, cost)
ll dp[MAX];
Tree tree;

void dfs(int at, int par) {
  tree.push(dp[at]);
  for(int to:adj[at]){
    if(to==par){
      continue;
    }
    for(const auto& t : ticks[to]){
      dp[to] = min(dp[to], (ll)t.second + tree.get_min(t.first));
    }
    dfs(to, at);
  }
  tree.pop();  
}

int main() {
  ios::sync_with_stdio(false);
  cin.tie(nullptr);
  int N,M;
  cin>>N>>M;
  for(int e=0,a,b;e<N-1;++e){
    cin>>a>>b;
    adj[a].push_back(b);
    adj[b].push_back(a);
  }
  for(int i=0,v,k,w;i<M;++i){
    cin>>v>>k>>w;
    ticks[v].push_back({k,w});
  }
  tree.init();
  memset(dp,0x3F,sizeof(dp));
  dp[1]=0;
  dfs(1, 1);
  int Q;
  cin>>Q;
  while(Q-->0){
    int v;
    cin>>v;
    cout<<dp[v]<<'\n';
  }
  return 0;
}
