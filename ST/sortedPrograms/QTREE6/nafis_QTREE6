//nfssdq
#include <bits/stdc++.h>
using namespace std;

#define xx         first
#define yy         second
#define pb         push_back
#define mp         make_pair
#define LL         long long
#define inf        INT_MAX/3
#define mod        1000000007
#define PI         2.0*acos(0.0)
#define linf       (1ll<<60)-1
#define FOR(I,A,B) for(int I = (A); I < (B); ++I)
#define REP(I,N)   FOR(I,0,N)
#define ALL(A)     ((A).begin(), (A).end())
#define set0(ar)   memset(ar,0,sizeof ar)
#define vsort(v)   sort(v.begin(),v.end())
#define setinf(ar) memset(ar,126,sizeof ar)



template <class T> inline T bigmod(T p,T e,T M)
{
    if(e==0)return 1;
    if(e%2==0){LL t=bigmod(p,e/2,M);return (T)((t*t)%M);}
    return (T)((LL)bigmod(p,e-1,M)*(LL)p)%M;
}
template <class T> inline T gcd(T a,T b){if(b==0)return a;return gcd(b,a%b);}
template <class T> inline T modinverse(T a,T M){return bigmod(a,M-2,M);}

vector < int > adj[100001];
int t = 0, numChild[100001];
int lvl[100001], start[100001], endt[100001];
int dfs(int node, int pnt, int dis){
    int child = 1;
    lvl[node] = dis;
    start[node] = ++t;
    REP(i, adj[node].size()){
        if(adj[node][i] == pnt)continue;
        child += dfs(adj[node][i], node, dis + 1);
    }
    endt[node] = ++t;
    return numChild[node] = child;
}

vector < int > group[100001];
int cnt = 0, position[100001];
int grp[100001], parent[100001];
void hld(int node, int pnt, int pos){
    position[node] = pos;
    parent[node] = pnt;
    grp[node] = cnt;
    group[cnt].push_back(node);
    int maxVal = 0, child = 0;
    REP(i, adj[node].size()){
        if(adj[node][i] == pnt)continue;
        if(numChild[ adj[node][i] ] > maxVal){
            maxVal = numChild[ adj[node][i] ];
            child = adj[node][i];
        }
    }
    if(child != 0) hld(child, node, pos + 1);
    REP(i, adj[node].size()){
        if(adj[node][i] == pnt || adj[node][i] == child)continue;
        cnt++; hld(adj[node][i], node, 0);
    }
}


vector< int > seg[100001][2], lzy[100001][2], val[100001][2];
void update(int ii, int idx, int s, int e, int f){
    if(s == e){
        lzy[ii][f][idx] = 0;
        return;
    }
    int mid = (s + e) / 2;
    if(s == mid)seg[ii][f][idx * 2 + 1] += lzy[ii][f][idx];
    if(mid + 1 == e)seg[ii][f][idx * 2 + 2] += lzy[ii][f][idx];
    lzy[ii][f][idx * 2 + 1] += lzy[ii][f][idx];
    lzy[ii][f][idx * 2 + 2] += lzy[ii][f][idx];
    lzy[ii][f][idx] = 0;
}
void insert(int ii, int idx, int s, int e, int st, int ed, int v, int f){
    if(lzy[ii][f][idx] != 0)update(ii, idx, s, e, f);
    if(s == st && e == ed){
        if(st == ed)seg[ii][f][idx] += v;
        lzy[ii][f][idx] += v;
        return;
    }
    int mid=(s+e)/2;
    if(ed<=mid)insert(ii,idx*2+1,s,mid,st,ed,v,f);
    else if(st>mid)insert(ii,idx*2+2,mid+1,e,st,ed,v,f);
    else {
        insert(ii,idx*2+1,s,mid,st,mid,v,f);
        insert(ii,idx*2+2,mid+1,e,mid+1,ed,v,f);
    }
}
int query(int ii,int idx,int s,int e,int v,int f){
    if(lzy[ii][f][idx] != 0)update(ii, idx, s, e, f);
    if(s==e)return seg[ii][f][idx];
    int mid=(s+e)/2;
    if(v<=mid)return query(ii,idx*2+1,s,mid,v,f);
    else return query(ii,idx*2+2,mid+1,e,v,f);
}
void insert1(int ii, int idx, int s, int e, int v, int p){
    if(s == e){
        val[ii][p][idx]=v;
        val[ii][p^1][idx]=-1;
        return;
    }
    int mid=(s+e)/2;
    if(v<=mid)insert1(ii,idx*2+1,s,mid,v,p);
    else insert1(ii,idx*2+2,mid+1,e,v,p);
    val[ii][p][idx]=max(val[ii][p][idx*2+1],val[ii][p][idx*2+2]);
    val[ii][p^1][idx]=max(val[ii][p^1][idx*2+1],val[ii][p^1][idx*2+2]);
}
int query1(int ii,int idx,int s,int e,int st,int ed,int f){
    if(st > ed) return 0;
    if(s==st && e==ed)return val[ii][f][idx];
    int mid=(s+e)/2;
    if(ed<=mid)return query1(ii,idx*2+1,s,mid,st,ed,f);
    else if(st>mid)return query1(ii,idx*2+2,mid+1,e,st,ed,f);
    else return max(query1(ii,idx*2+1,s,mid,st,mid,f),query1(ii,idx*2+2,mid+1,e,mid+1,ed,f));
}
void dfsin(int node,int pnt,int v,int f){
    if(node == parent[pnt])return;
    int a = grp[node];
    if(grp[pnt] == a)insert(a,0,0,group[a].size()-1,position[pnt],position[node],v,f);
    else {
        insert(a,0,0,group[a].size()-1,0,position[node],v,f);
        dfsin(parent[group[a][0]],pnt,v,f);
    }
}
int dfsqu(int node,int pnt,int f){
    if(node == parent[pnt])return -1;
    int a=grp[node];
    if(grp[pnt] == a){
        int b = query1(a,0,0,group[a].size()-1,position[pnt],position[node],f^1);
        if(b == -1)return -1;
        if(b == position[node])return -2;
        return group[a][b + 1];
    }
    else {
        int b = query1(a,0,0,group[ grp[node] ].size()-1,0,position[node],f^1);
        if(b == -1){
            int c = dfsqu(parent[ group[a][0] ], pnt,f);
            if(c == -2)return group[a][0];
            return c;
        }
        if(b == position[node])return -2;
        return group[a][b + 1];
    }
}

int ar[100001];


main()
{
    int a,b,c,d,e,f,g,h,x,y,z;
    scanf("%d",&a);
    REP(i, a-1){
        scanf("%d %d",&c,&d); //varies problem by problem
        adj[c].push_back(d);
        adj[d].push_back(c);
    }
    dfs(1,0,1);
    hld(1,0,0);
    REP(i, cnt + 1)REP(j, 4*group[i].size()+4){
        seg[i][0].push_back(0);
        seg[i][1].push_back(0);
        lzy[i][0].push_back(0);
        lzy[i][1].push_back(0);
        val[i][0].push_back(-1);
        val[i][1].push_back(-1);
    }
    REP(i, cnt + 1)
        REP(j, group[i].size()){
            insert1(i,0,0,group[i].size()-1,j,ar[group[i][j]]);
            dfsin(group[i][j],1,1,ar[group[i][j]]);
        }
        // query part starts here
    scanf("%d",&b);
    REP(i,b){
        scanf("%d %d",&c,&d);
        if(c == 0){
            e = dfsqu(d,1,ar[d]);
            if(e == -1)e = 1;
            printf("%d\n",query(grp[e],0,0,group[grp[e]].size()-1,position[e],ar[e]));
        }
        else {
            e = dfsqu(d,1,ar[d]);
            if(e == -1)e = 1;
            if(e == -2)e = d;
            if(e != 1)e = parent[e];
            ar[d]^=1;

            insert1(grp[d],0,0,group[grp[d]].size()-1,position[d],ar[d]);
            g = query(grp[d],0,0,group[grp[d]].size()-1,position[d],ar[d]);
            f = query(grp[d],0,0,group[grp[d]].size()-1,position[d],ar[d]^1);

            h = dfsqu(d,1,ar[d]);
            if(h == -1)h = 1;
            if(h == -2)h = d;
            if(h != 1)h = parent[h];

            dfsin(d,h,1,ar[d]);
            if(h != d)dfsin(parent[d],h,g,ar[d]);
            dfsin(d,e,-1,ar[d]^1);
            if(e != d && f != 0)dfsin(parent[d],e,-f + 1,ar[d]^1);
            /*if(e == parent[d] && ar[e] != ar[d])insert(grp[e],0,0,group[grp[e]].size()-1,position[e],position[e],-g,ar[e]);
            insert(grp[d],0,0,group[grp[d]].size()-1,position[d],position[d],-1,ar[d]^1);
            insert(grp[d],0,0,group[grp[d]].size()-1,position[d],position[d],1,ar[d]);

            f = query(grp[d],0,0,group[grp[d]].size()-1,position[d],ar[d]);
            if(d != 1)dfsin(parent[d],e,f,ar[d]);*/
        }
    }
}
/*
7
1 2
1 3
2 4
2 5
3 6
3 7
4
1 7
1 2
1 1
0 1
*/


/*
      A
     / \
   3/   \4
   /     \
  B       C
  vc contains the edge
  vs contains the groups
  vt contains the edge costs
  dfsqu returns the desired resul from a node to its predecessor
  insert (groupnum, idx, s, e, val, pos)
  for every edge the child contains the cost

  */
