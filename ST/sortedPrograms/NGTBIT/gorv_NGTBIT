#include<bits/stdc++.h>
using namespace std;
#ifdef ONLINE_JUDGE
	#define GETCHAR getchar_unlocked	
	#define PUTCHAR putchar_unlocked
#endif
#ifndef ONLINE_JUDGE
	#define GETCHAR getchar
	#define PUTCHAR putchar
#endif

inline int readlong() 
{
	int flag=1;
    int n = 0;
    char c;
    int sign=1;
    while (1)
    { 		
		c=GETCHAR();
    	if(c=='-')	sign=-1;
        else if(c>='0'&&c<='9') {n = n * 10 + c - '0';flag=0;}
        else if(flag!=1) break; 
   }
    return sign*n;
}

inline void writeInt(int x) 
{
     int i = 10;
     char buf[11];
     // buf[10] = 0;
     buf[10] = '\n';

     do 
     {
        buf[--i] = x % 10 + '0';
        x/= 10;
     }while(x);
     do 
     {
        PUTCHAR(buf[i]);
     } while (buf[i++] != '\n');
}

#define MAXN 1000000
#define MAXSIZE 100000000
int M[MAXSIZE];
void BuildTree(int node,int start,int end,int A[],int N){
    if(start==end)
        M[node]=start;
    else{
        BuildTree(2*node+1,start,(start+end)/2,A,N);
        BuildTree(2*node+2,(start+end)/2+1,end,A,N);
        if(A[M[2*node+1]]<A[M[2*node+2]])
            M[node]=M[2*node+1];
        else
            M[node]=M[2*node+2];
    }
}
int RMQ(int node,int start,int end,int s,int e,int A[]){
    if(s<=start && e>=end)
        return M[node];
    else if(s>end || e<start)
        return -1;
    int q1 = RMQ(2*node+1,start,(start+end)/2,s,e,A);
    int q2 = RMQ(2*node+2,(start+end)/2+1,end,s,e,A);
    if(q1==-1)
        return q2;
    else if(q2==-1)
        return q1;
    if(A[q1]<A[q2])
        return q1;
    return q2;
}

int main(){
		int n;
		n=readlong();
		int arr[n];
		for(int i=0;i<n;i++){
			arr[i]=readlong();
		}
		BuildTree(0,0,n-1,arr,n);
		int q;
		q=readlong();
		while(q--){
			int l,r;
			l=readlong();
			r=readlong();
			l--;
			r--;
			writeInt(RMQ(0,0,n-1,l,r,arr)+1);
		}
	
}