#include <algorithm>
#include <iostream>
#include <utility>
#include <cstdlib>
#include <cstring>
#include <fstream>
#include <cassert>
#include <vector>                              
#include <string>
#include <cstdio>
#include <cmath>
#include <queue>
#include <ctime>
#include <stack>
#include <set>
#include <map>
 
using namespace std;
 
#define INF 1000000000000000000ll
#define inf 1000000000
#define ll long long
#define ull unsigned ll
#define mp make_pair
#define pb push_back
#define F first
#define S second
 
const int N = 55;
const int M = 1505;
 
int t;
int n, m;
char c[N][N];
int id[N][N];
int n1 = 0, n2 = 0;
int dx[] = {-2, -2, -1, -1, 1, 1, 2, 2};
int dy[] = {-1, 1, -2, 2, -2, 2, -1, 1};
 
vector < int > g[M];
bool used[M];
int mt[M];
 
bool is_white(int x, int y){
	return (x + y) % 2 == 0;
}
 
bool in(int x, int y){
	return (1 <= x && x <= n && 1 <= y && y <= m);
}
 
int add_edge(int a, int b){
	g[a].pb(b);
}
 
bool try_kuhn(int v){
	if(used[v])
		return false;
	used[v] = true;
	for(int i = 0;i < g[v].size();++ i){
		int to = g[v][i];
		if(mt[to] == -1 || try_kuhn(mt[to])){
			mt[to] = v;
			return true;
		}
	}
	return false;
}
 
int main(){	
	#ifndef ONLINE_JUDGE
	freopen ("in","r",stdin);
	freopen ("out","w",stdout);
	#endif
	ios_base::sync_with_stdio(0);
	cin.tie(0);
	cin >> t;
	while(t --){
		cin >> n >> m;
		n1 = n2 = 0;
		for(int i = 1;i <= n;++ i)
			for(int j = 1;j <= m;++ j){
				cin >> c[i][j];
				if(c[i][j] == '.'){
					if(is_white(i, j))
						id[i][j] = ++ n1;
					else
						id[i][j] = ++ n2;	 
				}			
			}
		for(int x = 1;x <= n;++ x){
			for(int y = 1;y <= m;++ y){
		    	if(c[x][y] == '.' && is_white(x, y)){
		    		for(int it = 0;it < 8;++ it){
		    			int to_x = x + dx[it], to_y = y + dy[it];
		    			if(in(to_x, to_y) && c[to_x][to_y] == '.')
		    				add_edge(id[x][y], id[to_x][to_y]); 
		    		}
		    	}
			}
		}
		int res = 0;
		memset(mt, -1, sizeof mt);
		for(int i = 1;i <= n1;++ i){
			memset(used, false, sizeof used);
			if(try_kuhn(i))
				++ res;
		}
		cout << n1 + n2 - res << endl;
		for(int i = 1;i <= n1;++ i)
			g[i].clear();
	}
	return 0;
}