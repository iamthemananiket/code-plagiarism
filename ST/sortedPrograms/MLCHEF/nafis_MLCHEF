/*********************************************************************\
   |--\        ---       /\        |-----------| -----   /-------|    |
   |   \        |       /  \       |               |    /             |
   |    \       |      /    \      |               |   |              |
   |     \      |     /      \     |               |   |----|         |
   |      \     |    / ------ \    |-------|       |        |-----|   |
   |       \    |   /          \   |               |              |   |
   |        \   |  /            \  |               |              /   |
  ---        -------            ------           ----- |---------/    |
                                                                      |
    codeforces = nfssdq  ||  topcoder = nafis007                      |
    mail = nafis_sadique@yahoo.com || nfssdq@gmail.com                |
    IIT,Jahangirnagar University(41)                                  |
                                                                      |
**********************************************************************/

#include <bits/stdc++.h>
using namespace std;

#define xx         first
#define yy         second
#define pb         push_back
#define mp         make_pair
#define LL         long long
#define inf        INT_MAX/3
#define mod        1000000007ll
#define PI         2.0*acos(0.0)
#define linf       (1ll<<60)-1
#define FOR(I,A,B) for(int I = (A); I < (B); ++I)
#define REP(I,N)   FOR(I,0,N)
#define ALL(A)     ((A).begin(), (A).end())
#define set0(ar)   memset(ar,0,sizeof ar)
#define vsort(v)   sort(v.begin(),v.end())
#define setinf(ar) memset(ar,126,sizeof ar)



template <class T> inline T bigmod(T p,T e,T M){
    if(e==0)return 1;
    if(e%2==0){LL t=bigmod(p,e/2,M);return (T)((t*t)%M);}
    return (T)(((LL)bigmod(p,e-1,M)*(LL)(p))%M);
}
template <class T> inline T gcd(T a,T b){if(b==0)return a;return gcd(b,a%b);}
template <class T> inline T modinverse(T a,T M){return bigmod(a,M-2,M);}

int sv[100001], ev[100001];
int t = -1, vis[100001];
vector < int > vc[100001];
int ar[100001], val[100001];
void dfs(int p){
    t++;
    val[t] = p;
    sv[p] = t;
    vis[p] = 1;
    REP(i, vc[p].size()){
        if(vis[ vc[p][i] ] != 0)continue;
        dfs(vc[p][i]);
    }
    ev[p] = t;
}
int seg[400001], on[400001], lzy[400001];
void insert1(int idx, int s, int e, int p, int v){
    if(s == e){
        seg[idx] = v;
        on[idx] = 1;
        return;
    }
    int mid = (s + e) / 2;
    if(p <= mid)insert1(idx * 2 + 1, s, mid, p, v);
    else insert1(idx * 2 + 2, mid + 1, e, p, v);
    seg[idx] = min(seg[idx * 2 + 1], seg[idx * 2 + 2]);
    on[idx] = on[idx * 2 + 1] + on[idx * 2 + 2];
}
void update(int idx, int s, int e){
    if(s == e){
        lzy[idx] = 0;
        return;
    }
    seg[idx * 2 + 1] -= lzy[idx];
    seg[idx * 2 + 2] -= lzy[idx];
    lzy[idx * 2 + 1] += lzy[idx];
    lzy[idx * 2 + 2] += lzy[idx];
    lzy[idx] = 0;
}
void insert(int idx, int s, int e, int st, int ed, int v){
    if(st > ed)return;
    if(on[idx] == 0)return;
    if(s == st && e == ed){
        seg[idx] -= v;
        if(seg[idx] > 0){
            lzy[idx] += v;
            return;
        }
        if(s == e){
            if(seg[idx] <= 0){
                on[idx] = 0;
                seg[idx] = INT_MAX - 5;
            }
            return;
        }
    }
    if(lzy[idx])update(idx, s, e);
    int mid = (s + e) / 2;
    if(ed <= mid)insert(idx * 2 + 1, s, mid, st, ed, v);
    else if(st > mid)insert(idx * 2 + 2, mid + 1, e, st, ed, v);
    else {
        insert(idx * 2 + 1, s, mid, st, mid, v);
        insert(idx * 2 + 2, mid + 1, e, mid + 1, ed, v);
    }
    seg[idx] = min(seg[idx * 2 + 1], seg[idx * 2 + 2]);
    on[idx] = on[idx * 2 + 1] + on[idx * 2 + 2];
    //cout << st << " "<< ed << " " << s << " " << e << " "<< on[idx] << endl;
}
int query(int idx, int s, int e, int st, int ed){
    if(st > ed)return 0;
    if(s == st && e == ed)return on[idx];
    if(on[idx] == 0)return 0;
    if(on[idx] == e - s + 1)return ed - st + 1;
    if(lzy[idx])update(idx, s, e);
    int mid = (s + e) / 2;
    if(ed <= mid)return query(idx * 2 + 1, s, mid, st, ed);
    else if(st > mid)return query(idx * 2 + 2, mid + 1, e, st, ed);
    else {
        return query(idx * 2 + 1, s, mid, st, mid) +
        query(idx * 2 + 2, mid + 1, e, mid + 1, ed);
    }
}
main(){
    ios_base::sync_with_stdio(0); cin.tie(0);
    int a,b,c,d,e,g,f,x,y,z;
    cin >> a;
    FOR(i, 1, a + 1){
        cin >> ar[i] >> b;
        vc[b].pb(i);
    }
    dfs(0);
    FOR(i, 1, a + 1){
        insert1(0, 1, a, i, ar[ val[i] ]);
    }
    cin >> b;
    REP(i, b){
        cin >> c >> d;
        if(c == 1){
            cin >> e;
            insert(0, 1, a, sv[d] + 1, ev[d], e);
        }
        else cout << query(0, 1, a, sv[d] + 1, ev[d])  << endl;
    }
}

/*
5
3 0
3 1
3 2
3 3
3 4
3
1 0 1
1 2 3
2 0
*/
