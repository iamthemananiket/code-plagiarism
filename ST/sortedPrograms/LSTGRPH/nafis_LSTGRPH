/*********************************************************************\
   |--\        ---       /\        |-----------| -----   /-------|    |
   |   \        |       /  \       |               |    /             |
   |    \       |      /    \      |               |   |              |
   |     \      |     /      \     |               |   |----|         |
   |      \     |    / ------ \    |-------|       |        |-----|   |
   |       \    |   /          \   |               |              |   |
   |        \   |  /            \  |               |              /   |
  ---        -------            ------           ----- |---------/    |
                                                                      |
    codeforces = nfssdq  ||  topcoder = nafis007                      |
    mail = nafis_sadique@yahoo.com || nfssdq@gmail.com                |
    IIT,Jahangirnagar University(41)                                  |
                                                                      |
**********************************************************************/

#include <bits/stdc++.h>
using namespace std;

#define xx         first
#define yy         second
#define pb         push_back
#define mp         make_pair
#define LL         long long
#define inf        INT_MAX/3
#define mod        1000000007ll
#define PI         acos(-1.0)
#define linf       (1ll<<60)-1
#define FOR(I,A,B) for(int I = (A); I < (B); ++I)
#define REP(I,N)   FOR(I,0,N)
#define ALL(A)     A.begin(), A.end()
#define set0(ar)   memset(ar,0,sizeof ar)
#define vsort(v)   sort(v.begin(),v.end())
#define setinf(ar) memset(ar,126,sizeof ar)

//cout << fixed << setprecision(20) << p << endl;

template <class T> inline T bigmod(T p,T e,T M){
    LL ret = 1;
    for(; e > 0; e >>= 1){
        if(e & 1) ret = (ret * p) % M;
        p = (p * p) % M;
    } return (T)ret;
}
template <class T> inline T gcd(T a,T b){if(b==0)return a;return gcd(b,a%b);}
template <class T> inline T modinverse(T a,T M){return bigmod(a,M-2,M);}

vector < int > vc[200001], vp[200001];
int vis[200001], val[200001], ar[200001];
int bfs(int c, int v){
    queue < int > Q;
    Q.push(c);
    vis[c] = 1;
    val[c] = v;
    while(!Q.empty()){
        int a = Q.front();
        Q.pop();
        REP(i, vc[a].size()){
            if(vis[ vc[a][i] ]){
                if(val[ vc[a][i] ] != (val[a]^vp[a][i])) return 0;
                continue;
            }
            val[ vc[a][i] ] = val[a] ^ vp[a][i];
            vis[ vc[a][i] ] = 1;
            Q.push( vc[a][i] );
        }
    }
    return 1;
}
void bfs1(int c, int v){
    queue < int > Q;
    Q.push(c);
    vis[c] = 1;
    val[c] = v;
    while(!Q.empty()){
        int a = Q.front();
        Q.pop();
        REP(i, vc[a].size()){
            if(vis[ vc[a][i] ]) continue;
            val[ vc[a][i] ] = val[a] ^ vp[a][i];
            vis[ vc[a][i] ] = 1;
            Q.push( vc[a][i] );
        }
    }
}
int main() {
    ios_base::sync_with_stdio(0); cin.tie(0);
    LL a = 0,b,c,d = 0,e,f = 0,g,h = 0,x,y,z = 0;
    cin >> a >> b >> c;
    REP(i, b){
        cin >> x >> y >> z;
        vc[x].pb(y);
        vc[y].pb(x);
        vp[x].pb(z);
        vp[y].pb(z);
    }
    FOR(i, 1, a + 1){
        if(vis[i] == 0){
            d = bfs(i, 0);
            if(d == 0){
                cout << -1 << endl;
                return 0;
            }
            ar[h++] = i;
        }
    }
    set0(vis); set0(val);
    REP(i, h - 1){
        bfs1(ar[i], 0);
    }
    bfs1(ar[h - 1], c - 1);
    REP(i, a){
        if(i) cout << " ";
        cout << val[i + 1];
    }
    cout << endl;
}
