#include <bits/stdc++.h>
using namespace std;

#define ms(s, n) memset(s, n, sizeof(s))
#define FOR(i, a, b) for (int i = (a); i < (b); i++)
#define FORd(i, a, b) for (int i = (a) - 1; i >= (b); i--)
#define FORall(it, a) for (__typeof((a).begin()) it = (a).begin(); it != (a).end(); it++)
#define sz(a) int((a).size())
#define all(a) (a).begin(), (a).end()
#define uni(a) (a).erase(unique(all(a)), (a).end())
#define pb push_back
#define pf push_front
#define mp make_pair
#define fi first
#define se second
#define prec(n) fixed<<setprecision(n)
#define bit(n, i) ((n) & (1LL << (i)))
#define bitcount(n) __builtin_popcount(n)
typedef long long ll;
typedef unsigned long long ull;
typedef long double ld;
typedef pair<ll, ll> pi;
typedef vector<ll> vi;
typedef vector<pi> vii;
ll gcd(ll a, ll b) {ll r; while (b != 0) {r = a % b; a = b; b = r;} return a;}
ll lcm(ll a, ll b) {return a / gcd(a, b) * b;}
ll fpow(ll n, ll k, int p = (int) 1e9 + 7) {ll r = 1; for (; k; k >>= 1) {if (k & 1) r = r * n % p; n = n * n % p;} return r;}
#define EPS 1e-9
const int MOD = (int) 1e9 + 7;
const int INF = (int) 1e9;
const ll LINF = (ll) 1e18;
const ld PI = 2 * acos((ld) 0);

const int maxn = 1000010;
int n, m, q;
ll pop[maxn];
vii edges;
int un[maxn];
vector<pair<int, pi> > query;
vi ans;

int dj[maxn];
ll tot[maxn];
void init() {
	FOR(i, 0, maxn) {
		dj[i] = i;
		tot[i] = pop[i];
	}
}
int find(int u) {
	return dj[u] == u ? u : dj[u] = find(dj[u]);
}
int join(int u, int v) {
	int p = find(u);
	int q = find(v);
	if (p != q) {
		dj[p] = q;
		tot[q] += tot[p];
	}
}

void solve() {
	scanf("%d%d%d", &n, &m, &q);
	FOR(i, 0, n) scanf("%lld", pop + i);
	FOR(i, 0, m) {
		int u, v; scanf("%d%d", &u, &v); u--; v--;
		edges.pb(mp(u, v));
	}
	FOR(i, 0, q) {
		char c[10]; scanf("%s", c);
		if (c[0] == 'D') {
			int k; scanf("%d", &k);
			k--; un[k] = 1;
			query.pb(mp(0, mp(k, 0)));
		}
		else {
			int a, x; scanf("%d%d", &a, &x); a--;
			query.pb(mp(1, mp(a, pop[a])));
			pop[a] = x;
		}
	}
	init(); set<pi> st;
	FOR(i, 0, sz(edges)) if (!un[i]) {
		int u = edges[i].fi;
		int v = edges[i].se;
		join(u, v);
	}
	FOR(i, 0, n) {
		int u = find(i);
		st.insert(mp(tot[u], u));
	}
	FORd(i, q, 0) {
		ans.pb(st.rbegin()->fi);
		int op = query[i].fi;
		if (op == 0) {
			int k = query[i].se.fi;
			int u = find(edges[k].fi);
			int v = find(edges[k].se);
			if (u != v) {
				st.erase(mp(tot[u], u));
				st.erase(mp(tot[v], v));
				join(u, v);
				st.insert(mp(tot[v], v));
			}
		}
		else {
			int a = query[i].se.fi;
			ll x = query[i].se.se;
			int u = find(a);
			st.erase(mp(tot[u], u));
			tot[u] += x - pop[a];
			pop[a] = x;
			st.insert(mp(tot[u], u));
		}
	}
	FORd(i, sz(ans), 0) printf("%lld\n", ans[i]);
}

int main() {
	//ios_base::sync_with_stdio(0); cin.tie(NULL);
#ifdef _LOCAL_
	freopen("in.txt", "r", stdin); //freopen("out.txt", "w", stdout);
#endif
	solve();
#ifdef _LOCAL_
	//printf("\nTime elapsed: %dms", 1000 * clock() / CLOCKS_PER_SEC);
#endif
	return 0;
}
