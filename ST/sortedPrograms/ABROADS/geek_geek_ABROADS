#include<iostream>
#include<algorithm>
#include<cstdio>
#include<cmath>
#include<string>
#include<cstring>
#include<vector>
#include<set>
#include<iomanip>
#include<queue>
#include<map>
#include<list>
#include<stack>
#define fl(i,s,n) for(i=s;i<n;i++)
#define flr(i,s,n) for(i=s;i>n;i--)
#define ls(i,s) for(i=0;s[i]!='\0';i++)
#define gi(x) scanf("%lld",&x)
#define pi(x) printf("%lld",x)
#define checkline(x) while(x!='\0' && x!='\n')
#define pt(s) printf(s)
#define PI acos(-1)
#define f_in freopen("input.txt","r",stdin)
#define f_out freopen("output_large.txt","w",stdout)
#define in(i,j,k) ((j<=i) && (i<k))
#define ull unsigned long long int
#define lli long long int
#define ld long double
#define sd(x) scanf("%d",&x)
#define sd2(x,y) scanf("%d%d",&x,&y)
#define sd3(x,y,z) scanf("%d%d%d",&x,&y,&z)
#define fi first
#define se second
#define pb(x) push_back(x)
#define mp(x,y) make_pair(x,y)
#define r0 return 0
#define mod 1000000007
using namespace std;
lli *parent;
lli *sizes;
lli *tot;
lli *in_pop;
lli *mark;
vector<pair<int,int> > road;
lli find_root(lli x)
{
    while(parent[x]!=x)
        {
            parent[x]=parent[parent[x]];
            x=parent[x];
        }
    return x;
}
bool find_joint(lli a,lli b)
{
    lli x,y;
    x = find_root(a);
    y = find_root(b);
    return (x==y);
}
void union_data(lli a,lli b)
{
    lli x,y;
    x = find_root(a);
    y = find_root(b);
    parent[x]=y;
}
void weighted_union(lli a,lli b)
{
    lli x,y;
    x = find_root(a);
    y = find_root(b);
    if(x==y)
        return;
    if(sizes[x]<sizes[y])
    {
        parent[x]=y;
        tot[y]+=tot[x];
        sizes[y]+=sizes[x];
    }
    else
    {
        parent[y]=x;
        tot[x]+=tot[y];
        sizes[x]+=sizes[y];
    }
}
void initialize(lli n)
{
    parent = new lli[n];
    tot = new lli[n];
    sizes = new lli[n];
    lli i;
    fl(i,0,n)
    {
        sizes[i]=1;
        tot[i]=in_pop[i];
        parent[i]=i;
    }
}
int main()
{
   // f_in;
    int i,j,k,n,m,x,y,z,q;
    char ch;
    cin>>n>>m>>q;
    mark = new lli[m];
    in_pop = new lli[n];
    fl(i,0,n)
        cin>>in_pop[i];
    fl(i,0,m)
    {
        mark[i]=0;
        cin>>x>>y;
        road.pb(mp(x-1,y-1));
    }
    initialize(n);
            fl(i,0,m)
                if(mark[i]==0)
                    weighted_union(road[i].first,road[i].se);
    while(q--)
    {
        cin>>ch;
        z=0;
        if(ch=='D')
        {
            cin>>x;
            mark[x-1]=1;
            initialize(n);
            fl(i,0,m)
                if(mark[i]==0)
                    weighted_union(road[i].first,road[i].se);
        }
        else if(ch=='P')
        {
            cin>>x>>y;
            x-=1;
            k = find_root(x);
            tot[k]-=in_pop[x];
            in_pop[x]=y;
            tot[k]+=in_pop[x];
        }
        fl(i,0,n)
            z=max((lli)z,tot[find_root(i)]);
    cout<<z<<endl;
    }
    return 0;
}
