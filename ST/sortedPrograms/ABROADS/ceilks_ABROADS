#include <string>
#include <vector>
#include <algorithm>
#include <numeric>
#include <set>
#include <map>
#include <queue>
#include <iostream>
#include <sstream>

#include <cassert>
#include <limits>
#define rep(i,n) for(int (i)=0;(i)<(int)(n);++(i))
#define reu(i,l,u) for(int (i)=(int)(l);(i)<(int)(u);++(i))
#define each(it,o) for(auto it= (o).begin(); it != (o).end(); ++ it)
#define all(o) (o).begin(), (o).end()
#define mp(x,y) make_pair((x),(y))
#define mset(m,v) memset(m,v,sizeof(m))
#define INF 0x3f3f3f3f
#define INFL 0x3f3f3f3f3f3f3f3fLL
#define inrep int t;cin>>t; while(t--)
using namespace std;

typedef vector<int> vi;
typedef pair<int,int> pii;
typedef vector<pii > vpii;
typedef long long ll;
typedef vector<ll> vll;
typedef pair<ll,ll> pll;
typedef vector<pll > vpll;
typedef vector<string> vs;
typedef long double ld;

template<typename T> ostream& operator<< ( ostream &o,vector<T> v ) {
    if ( v.size() >0 )
        o<<v[0];
    for ( unsigned   i=1; i<v.size(); i++ )
        o<<" "<<v[i];
    return o<<endl;
}
template<typename U,typename V> ostream& operator<< ( ostream &o,pair<U,V> p ) {
    return o<<"("<<p.first<<", "<<p.second<<") ";
}
template<typename T> istream& operator>> ( istream &in,vector<T> &v ) {

    for ( unsigned   i=0; i<v.size(); i++ )
        in>>v[i];
    return in;
}
struct UnionFind {

    vi comp;
    vll vals;
    multiset<ll> allVals;
    int nComps;
    UnionFind ( int n ) :comp ( n ),vals ( n ), nComps ( n ) {
        rep ( i,n ) comp[i]=i;
    }
    bool merge ( int a,int b ) {
        a=find ( a );
        b=find ( b );
        if ( a==b ) return false;
        nComps--;
        comp[a]=b;
        auto it=allVals.find ( vals[a] );
        assert ( it!=allVals.end() );
        allVals.erase ( it );
        it=allVals.find ( vals[b] );
        assert ( it!=allVals.end() );
        allVals.erase ( it );
        ll nv=vals[a]+vals[b];
        vals[b]=nv;
        allVals.insert ( nv );
        assert ( allVals.size() ==nComps );
        return true;

    }
    ll getMax() {
        return *allVals.rbegin();
    }
    void update ( int a, ll ov, ll nv ) {
        a=find ( a );
        ll del=nv-ov;
        auto it=allVals.find ( vals[a] );
        assert ( it!=allVals.end() );
        allVals.erase ( it );
        vals[a]+=del;
        allVals.insert ( vals[a] );
    }
    int find ( int a ) {
//         while ( comp[a]!=a ) a=comp[a]=comp[comp[a]];
//         return a;
      return  comp[a]==a ? a : comp[a]=find(comp[a]); 
    }

};
int main() {
    ios_base::sync_with_stdio ( false );
    int n,m,q;
    cin>>n>>m>>q;
    vi pops ( n );
    cin>>pops;
    vector<pii> roads;
    rep ( i,m ) {
        int x,y;
        cin>>x>>y;
        x--;
        y--;
        roads.push_back ( mp ( x,y ) );
    }
    vector< pair<char,pii>> querys;
    rep ( i,q ) {
        char op;
        int a,b;
        cin>>op;
        if ( op=='D' ) {
            cin>>a;
            a--;
            assert(roads[a].first>=0);
            querys.push_back ( mp ( op,roads[a] ) );
            roads[a]=mp ( -1,-1 );

        } else {
            cin>>a>>b;
            a--;
            querys.push_back ( mp ( op,mp ( a,pops[a] ) ) );
            pops[a]=b;
        }
    }
    UnionFind uf ( n );
    rep ( i,n ) {
        uf.vals[i]=pops[i];
        uf.allVals.insert ( pops[i] );
    }
    for ( pii r: roads ) {
        if ( r.first>=0 ) {
            uf.merge ( r.first,r.second );
        }
    }
    reverse ( all ( querys ) );
    vll results;
    for ( const pair<char,pii> &q: querys ) {
        results.push_back ( uf.getMax() );
        if ( q.first=='D' ) {
            uf.merge ( q.second.first, q.second.second );

        } else {
            int a=q.second.first;
            ll v=q.second.second;
            uf.update ( a,pops[a],v );
            pops[a]=v;
        }
    }
    reverse ( all ( results ) );
    for ( ll r: results ) cout<<r<<'\n';

}
