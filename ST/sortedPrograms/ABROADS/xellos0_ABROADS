#include <bits/stdc++.h>
// iostream is too mainstream
#include <cstdio>
// bitch please
#include <iostream>
#include <algorithm>
#include <cstdlib>
#include <vector>
#include <set>
#include <map>
#include <queue>
#include <stack>
#include <list>
#include <cmath>
#include <iomanip>
#include <time.h>
#define dibs reserve
#define OVER9000 1234567890
#define ALL_THE(CAKE,LIE) for(auto LIE =CAKE.begin(); LIE != CAKE.end(); LIE++)
#define tisic 47
#define soclose 1e-8
#define chocolate win
// so much chocolate
#define patkan 9
#define ff first
#define ss second
#define abs(x) ((x < 0)?-(x):x)
#define uint unsigned int
#define dbl long double
#define pi 3.14159265358979323846
using namespace std;
// mylittledoge

#ifdef DONLINE_JUDGE
	// palindromic tree is better than splay tree!
	#define lld I64d
#endif

struct query {
	string tp;
	int x,y;
	};

int main() {
	cin.sync_with_stdio(0);
	cin.tie(0);
	cout << fixed << setprecision(10);
	int N,M,Q;
	cin >> N >> M >> Q;
	vector<int> pop(N);
	for(int i =0; i < N; i++) cin >> pop[i];
	vector< pair<int,int> > E(M);
	for(int i =0; i < M; i++) {
		cin >> E[i].ff >> E[i].ss;
		E[i].ff--, E[i].ss--;}
	vector<bool> rm(M,false);
	vector<query> qs(Q);
	for(int i =0; i < Q; i++) {
		cin >> qs[i].tp >> qs[i].x;
		qs[i].x--;
		if(qs[i].tp == "P") {
			cin >> qs[i].y;
			swap(qs[i].y,pop[qs[i].x]);}
		else rm[qs[i].x] =true;}
	vector< vector<int> > G(N);
	for(int i =0; i < M; i++) if(!rm[i]) {
		G[E[i].ff].push_back(E[i].ss);
		G[E[i].ss].push_back(E[i].ff);}

	queue<int> q;
	vector<int> inC(N,-1);
	vector<long long> sz(N,0);
	vector< vector<int> > comp(N);
	multiset<long long> szS;
	int C =0;
	for(int i =0; i < N; i++) if(inC[i] == -1) {
		q.push(i);
		inC[i] =C;
		while(!q.empty()) {
			comp[C].push_back(q.front());
			sz[C] +=pop[q.front()];
			ALL_THE(G[q.front()],it) if(inC[*it] == -1) {
				inC[*it] =C;
				q.push(*it);}
			q.pop();}
		szS.insert(sz[C]);
		C++;}

	vector<long long> ans(Q);
	ans[0] =*szS.rbegin();
	for(int q =Q-1; q > 0; q--) {
		if(qs[q].tp == "P") {
			long long s =sz[inC[qs[q].x]];
			szS.erase(szS.find(s));
			s -=pop[qs[q].x];
			pop[qs[q].x] =qs[q].y;
			s +=pop[qs[q].x];
			szS.insert(s);
			sz[inC[qs[q].x]] =s;
			ans[Q-q] =*szS.rbegin();
			continue;}
		int x =inC[E[qs[q].x].ff], y =inC[E[qs[q].x].ss];
		if(x == y) {ans[Q-q] =ans[Q-q-1]; continue;}
		if(comp[x].size() < comp[y].size()) swap(x,y);
		szS.erase(szS.find(sz[y]));
		szS.erase(szS.find(sz[x]));
		sz[x] +=sz[y];
		szS.insert(sz[x]);
		ALL_THE(comp[y],it) {
			inC[*it] =x;
			comp[x].push_back(*it);}
		ans[Q-q] =*szS.rbegin();}

	for(int i =0; i < Q; i++) cout << ans[Q-1-i] << "\n";
	return 0;}

// look at my code
// my code is amazing
