#include <stdio.h>
#include <bits/stdc++.h>
using namespace std;
typedef long long ll;
#define pii pair<int,int>
#define pll pair<ll,ll>
#define pdd pair<double,double>
#define FILL(a,x) memset(a,x,sizeof(a))
#define	foreach( gg,ii ) for( typeof(gg.begin()) ii=gg.begin();ii!=gg.end();ii++)
#define	mp make_pair
#define	pb push_back
#define	X first
#define	Y second
#define sz(a) int((a).size())
#define N 500010
#define MAX 30
#define mod 1000000007
#define REP(i,a) for(int i=0;i<a;++i)
#define REPP(i,a,b) for(int i=a;i<b;++i)
#define all(a) a.begin(),a.end()
const ll INF = 1e18+1;

inline ll input(void)
{
	char t;
	ll x=0;
	int neg=0;
	t=getchar();
	while((t<48 || t>57) && t!='-')
		t=getchar();
	if(t=='-')
		{neg=1; t=getchar();}
	while(t>=48 && t<=57)
	{
		x=(x<<3)+(x<<1)+t-48;
		t=getchar();
	}
	if (neg) x=-x;
	return x;
}

inline void output(ll x)
{
	char a[20];
	int i=0,j;
	a[0]='0';
	if (x<0) {putchar('-'); x=-x;}
	if (x==0) putchar('0');
	while(x)
	{
		a[i++]=x%10+48;
		x/=10;
	}
	for(j=i-1;j>=0;j--)
	{
		putchar(a[j]);
	}
	putchar('\n');
}

vector <pii> query;
vector <int> G[N];
map <pii, int> mapper;
int u[N],v[N],unusable[N],vis[N],p[N],ranker[N];
stack <int> curr[N];
int pop[N];
stack <int> ans;
multiset <int> s;
multiset <int> :: iterator ii;

inline void create(int x)
{
	p[x]=x;
	ranker[x]=1;
	s.insert(pop[x]);
}

inline int findset(int x)
{
	if (x != p[x]) p[x] = findset(p[x]);
	return p[x];
}

inline void merge(int x,int y)
{
	int px=findset(x),py=findset(y),a,b;
	if(px==py) return;
	if (ranker[px]>ranker[py])
	{
		a=px;
		b=py;
	}
	else
	{
		a=py;
		b=px;
	}
	p[b]=a;
	ranker[a]=ranker[a]+ranker[b];
	ii=s.find(pop[a]);
	pop[a]+=pop[b];
	s.erase(ii);
	ii=s.find(pop[b]);
	s.erase(ii);
	s.insert(pop[a]);
}

inline void dfs(int v)
{
	int w,len=G[v].size();
	vis[v]=1;
	REP(i,len)
	{
		w=G[v][i];
		if (!vis[w]&&!unusable[mapper[mp(min(v,w),max(v,w))]])
		{
			dfs(w);
			merge(v,w);
		}
	}
}

int main()
{
	int n,m,q,a,b,c;
	char str[3];
	n=input();
	m=input();
	q=input();
	REP(i,n)
	{
		pop[i]=input();
		curr[i].push(pop[i]);
	}
	FILL(unusable,0);
	REP(i,m)
	{
		u[i]=input();
		v[i]=input();
		u[i]--;
		v[i]--;
		mapper[mp(min(u[i],v[i]),max(u[i],v[i]))]=i;
		G[u[i]].pb(v[i]);
		G[v[i]].pb(u[i]);
	}
	REP(i,q)
	{
		scanf("%s",str);
		if (str[0]=='P')
		{
			a=input();
			b=input();
			a--;
			curr[a].push(b);
			pop[a]=b;
			query.pb(mp(a,b));
		}
		else
		{
			a=input();
			a--;
			query.pb(mp(a,-1));
			unusable[a]=1;
		}
	}
	FILL(vis,0);
	REP(i,n) create(i);
	REP(i,n)
		if (!vis[i])
			dfs(i);
	for(int i=q-1;i>=0;i--)
	{
		ans.push(*s.rbegin());
		//REP(j,n) output(pop[j]);
		if (query[i].Y==-1)
		{
			a=query[i].X;
			//printf("%d %d\n",u[a],v[a]);
			merge(u[a],v[a]);
		}
		else
		{
			a=query[i].X;
			b=query[i].Y;
			c=findset(a);
			ii=s.find(pop[c]);
			s.erase(ii);
			curr[a].pop();
			pop[c]+=(curr[a].top()-b);
			s.insert(pop[c]);
		}
		//getchar();
	}
	REP(i,q)
	{
		output(ans.top());
		ans.pop();
	}
return 0;
}
