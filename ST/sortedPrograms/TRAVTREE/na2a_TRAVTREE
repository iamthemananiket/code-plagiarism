/* Let's go */

#include <cstring>
#include <vector>
#include <list>
#include <map>
#include <set>
#include <deque>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cassert>
#include <cstdlib>
#include <queue>
#include <ctime>

#define pii pair<int, int>
  
#define pb push_back
#define mp make_pair
  
#define f first
#define s second

using namespace std;

typedef long long ll;
typedef double ld;

typedef vector<int> vi;

const double EPS = 1e-9;
const double PI = acos(-1);
  
const int MOD = (int) 1e9 + 7;
const int MAXN = (int) 3e5 + 7;

int n, m;
vector<int> g[MAXN];

int tin[MAXN];
int tout[MAXN];
int tata;

int up[MAXN][20];
int depth[MAXN];

void dfs(int v, int parent = 0) {
  depth[v] = depth[parent] + 1;
  up[v][0] = parent ? parent : v;
  for (int i = 1; i < 20; i++) 
    up[v][i] = up[up[v][i - 1]][i - 1];
  tin[v] = ++tata;
  for (auto to : g[v]) {
    if (to == parent) {
      continue;
    }
    dfs(to, v);
  }
  tout[v] = tata;
}

bool isAncestor(int a, int b) {
  return tin[a] <= tin[b] && tout[b] <= tout[a];
}

int getLca(int a, int b) {
  if (isAncestor(a, b)) {
    return a;
  }
  if (isAncestor(b, a)) {
    return b;
  }
  for (int i = 19; i >= 0; i--) {
    if (!isAncestor(up[a][i], b)) {
      a = up[a][i];
    }
  }
  return up[a][0];
}

int t[2][MAXN];
int lazy[MAXN];

void add(int id, int pos, int delta) {
  while (pos <= n) {
    t[id][pos] += delta;
    pos |= (pos + 1);
  }
}

int get(int id, int pos) {
  int res = 0;
  while (pos > 0) {
    res += t[id][pos];
    pos &= (pos + 1);
    pos--;
  }
  return res;
}

void addOnPath(int a, int b) {
  if (isAncestor(b, a)) {
    swap(a, b);
  }
  if (isAncestor(a, b)) {
    add(0, tin[b], 1);
    if (a != 1) {
      a = up[a][0];
      add(0, tin[a], -1);
    }
  } else {
    int lca = getLca(a, b);
    lazy[lca]++;
    add(0, tin[a], 1);
    add(0, tin[b], 1);
    add(0, tin[lca], -2);
  }
}

void addOne(int a) {
  add(1, tin[a], 1);
  add(1, tout[a] + 1, -1);
}

int getOnPath(int a, int b) {
  int lca = getLca(a, b);
  return get(1, tin[a]) + get(1, tin[b]) - 2 * get(1, tin[lca]);
}

int getOne(int a) {
  return lazy[a] + get(0, tout[a]) - get(0, tin[a] - 1);
}

int main() {
  #ifdef LOCAL
  freopen("in", "r", stdin);
  //freopen("out", "w", stdout);
  #endif

  scanf("%d", &n);
  for (int i = 1; i < n; i++) {
    int a, b;
    scanf("%d%d", &a, &b);
    g[a].pb(b);
    g[b].pb(a);
  }
  dfs(1);
  scanf("%d", &m);
  while (m--) {
    int a, b;
    scanf("%d%d", &a, &b);
    int lca = getLca(a, b);
    //cout<<a<<' '<<b<<" => "<<lca<<endl;
    //cout<<getOne(lca)<<' '<<getOnPath(a,b)<<endl;
    int res = getOne(lca) + getOnPath(a, b);
    addOnPath(a, b);
    addOne(lca);
    printf("%d\n", res);
  }
  return 0;
}