#define _USE_MATH_DEFINES
#include <algorithm>
#include <cstdio>
#include <functional>
#include <iostream>
#include <cfloat>
#include <climits>
#include <cstdlib>
#include <cstring>
#include <cmath>
#include <map>
#include <queue>
#include <set>
#include <sstream>
#include <stack>
#include <string>
#include <time.h>
#include <vector>
#include <sys/resource.h>
using namespace std;
 
typedef long long ll;
typedef unsigned long long ull;
typedef pair<int, int> i_i;
typedef pair<ll, int> ll_i;
typedef pair<double, int> d_i;
typedef pair<ll, ll> ll_ll;
typedef pair<double, double> d_d;
struct edge { int u, v; ll w; };
 
ll MOD = 1000000007;
ll _MOD = 1000000009;
double EPS = 1e-10;
 
struct bit {
	vector<int> v;
	bit(int n) : v(n + 1) {}
	int sum(int i) {
		int res = 0;
		for (; i > 0; i -= i & -i) res += v[i];
		return res;
	}
	int f(int i, int j) {
		return sum(j) - sum(i);
	}
	void add(int i, int x) {
		for (i++; i < v.size(); i += i & -i) v[i] += x;
	}
};
 
int N, elcnt = 0;
vector<int> G[200010];
int sz[200010], dep[200010], el1[200010], el2[200010], pr[200010];
int M = 1;
int id[200010], par[200010];
 
void dfs_sz(int u, int p) {
	sz[u] = 1;
	for (int v: G[u]) {
		if (v == p) continue;
		dfs_sz(v, u);
		sz[u] += sz[v];
	}
}
 
void dfs_dep(int u, int p) {
	for (int v: G[u]) {
		if (v == p) continue;
		dep[v] = dep[u] + 1;
		dfs_dep(v, u);
	}
}
 
void dfs_hl(int u, int p) {
	int x, ma = 0;
	for (int v: G[u]) {
		if (v == p) continue;
		if (sz[v] > ma) {
			x = v;
			ma = sz[v];
		}
	}
	for (int v: G[u]) {
		if (v == p) continue;
		if (v == x) id[v] = id[u];
		else {
			id[v] = M;
			par[M] = u;
			M++;
		}
		dfs_hl(v, u);
	}
}
 
void dfs_el(int u, int p) {
	int test[1000];
	el1[u] = elcnt++;
	for (int v: G[u]) {
		if (v == p) continue;
		pr[v] = u;
		dfs_el(v, u);
	}
	el2[u] = elcnt++;
}
 
int main() {
	/*const rlim_t kStackSize = 256 * 1024 * 1024;
    struct rlimit rl;
    int result;
    getrlimit(RLIMIT_STACK, &rl);
    rl.rlim_cur = kStackSize;
    result = setrlimit(RLIMIT_STACK, &rl);*/
	cin >> N;
	for (int i = 0; i < N - 1; i++) {
		int u, v; scanf("%d%d", &u, &v);
		u--; v--;
		G[u].push_back(v);
		G[v].push_back(u);
	}
	dfs_sz(0, N);
	dep[N] = -1;
	dfs_dep(0, N);
	par[0] = N;
	dfs_hl(0, N);
	dfs_el(0, N);
	bit bt1(N * 2), bt2(N * 2);
	int Q; cin >> Q;
	while (Q--) {
		int u, v; scanf("%d%d", &u, &v);
		u--; v--;
		int _u = u, _v = v;
		while (id[u] != id[v]) {
			int U = par[id[u]], V = par[id[v]];
			if (dep[U] > dep[V]) u = U;
			else v = V;
		}
		int x = (dep[u] < dep[v] ? u : v);
		u = _u; v = _v;
		int ans = 0;
		ans += bt1.f(el1[x], el1[u] + 1);
		ans += bt1.f(el1[x], el1[v] + 1);
		ans -= bt1.f(el1[x], el1[x] + 1) * 2;
		ans += bt2.f(el1[x], el2[x] + 1);
		printf("%d\n", ans);
		bt1.add(el1[x], 1); bt1.add(el2[x], -1);
		bt2.add(el1[u], 1);
		bt2.add(el1[v], 1);
		bt2.add(el1[x], -1);
		if (x) {
			int p = pr[x];
			bt2.add(el1[p], -1);
		}
	}
}
 