#include <bits/stdc++.h>
#include<ext/pb_ds/assoc_container.hpp>
#include<ext/pb_ds/tree_policy.hpp>
// #include <boost/multiprecision/cpp_int.hpp> 

#define gc getchar//_unlocked
#define pc putchar//_unlocked
#define ll long long
#define ld long double
#define pb push_back
#define mp make_pair
#define pp pair<int,int>
#define bigint boost::multiprecision::cpp_int
#define finp ios_base::sync_with_stdio(0);cin.tie(0);
#define bc __builtin_popcount
#define afor(i,a,b) for(int i=a;i<=b;++i)
#define bfor(i,a,b) for(int i=a;i>=b;--i)
#define vi vector<int>
#define vpp vector<pp>
#define vll vector<ll>

using namespace std;
using namespace __gnu_pbds;

char putnb[20];
void putn(ll n) {if(!n)pc('0');if(n<0)pc('-'),n=0-n;int pi=0;while(n)putnb[pi++]=(n%10)+'0',n/=10;while(pi)pc(putnb[--pi]);}
void sci(int *x) {register char c = gc();*x = 0;for(; (c<48)||(c>57);c = gc());for(; (c>47)&&(c<58);c = gc())*x = (int)((((*x)<<1) + ((*x)<<3)) + c - 48);}
void scll(ll *x)  {register char c = gc();*x = 0;for(; (c<48)||(c>57);c = gc());for(; (c>47)&&(c<58);c = gc())*x =  (ll)((((*x)<<1) + ((*x)<<3)) + c - 48);}
ll fp(ll a,ll b,ll c) {if(b==0)return 1%c; if(b==1)return a%c; ll ret=fp(a,b/2,c); ret=(ret*ret)%c; if(b&1)ret=(ret*a)%c; return ret;}

const ll mod=1e9 +7;
const ll mod2=1999999973;
const ll inf=1e18;
const int infs=1e9 + 1000;
const int N=200000;
const long double PI = acos(-1);

template <typename T>
using ordered_set = tree<T, null_type, less<T>, rb_tree_tag, tree_order_statistics_node_update>;

vi adj[N+5];
int P[N+5][40];
int par[N+5],L[N+5];
int n,q;

void dfs(int pos,int lev,int prr)
{
  par[pos] = prr;
  L[pos] = lev;

  for(auto i:adj[pos])
  {
    if(i == prr)continue;
    dfs(i,lev+1,pos);
  }
}
void pro()
  {
      int i, j;
      for (i = 1; i <= n; i++)
          for (j = 0; 1 << j < n; j++)
              P[i][j] = -1;

      for (i = 1; i <=n; i++)
          P[i][0] = par[i];
   
      for (j = 1; 1 << j < n; j++)
         for (i = 1; i <=n; i++)
             if (P[i][j - 1] != -1)
                 P[i][j] = P[P[i][j - 1]][j - 1];
  }
  
  int lcquery(int p, int q)
  {
      int tmp, log, i;
      if (L[p] < L[q])
          tmp = p, p = q, q = tmp;
  
      for (log = 1; 1 << log <= L[p]; log++);
      log--;
 
      for (i = log; i >= 0; i--)
          if (L[p] - (1 << i) >= L[q])
              p = P[p][i];
   
      if (p == q)
          return p;

      for (i = log; i >= 0; i--)
          if (P[p][i] != -1 && P[p][i] != P[q][i])
              p = P[p][i], q = P[q][i];
   
      return par[p];
  }


int lq[N+5];
int rq[N+5];
int main()
{
  finp;
  cin>>n;
  afor(i,1,n-1)
  {
    int u,v;
    cin>>u>>v;
    adj[u].pb(v);
    adj[v].pb(u);
  }

  dfs(1,1,-1);
  pro();
  cin>>q;

  assert(n<=1000 && q<=1000);

  afor(i,1,q)
  {
    int u,v;
    cin>>u>>v;
    if(L[u]<L[v])swap(u,v);
    lq[i] = u;
    rq[i] = v;

    int ans = 0;

    int lc1 = lcquery(u,v);
    afor(j,1,i-1)
    {
      int lcc = lcquery(lq[j],rq[j]);

      if(lcquery(lcc,u)==lcc && lcquery(lcc,v)==lcc)
      {
        if(lcquery(lc1,lq[j])==lc1 || lcquery(lc1,rq[j])==lc1)ans++;
      }
      else if(lcquery(lcc,u)==lcc || lcquery(lcc,v)==lcc)ans++;
    }

    cout<<ans<<"\n";
  }

return 0;
}