#include <iostream>
#include <iosfwd>
#include <iomanip>
#include <cstdio>
#include <cstring>
#include <cstdlib>
#include <ctime>
#include <cmath>
#include <cassert>
#include <cctype>
#include <climits>
#include <vector>
#include <bitset>
#include <set>
#include <queue>
#include <stack>
#include <map>
#include <deque>
#include <string>
#include <list>
#include <iterator>
#include <sstream>
#include <complex>
#include <fstream>
#include <functional>
#include <numeric>
#include <utility>
#include <algorithm>
#include <assert.h>
#include <unordered_map>
using namespace std;

typedef long long ll;
typedef unsigned long long ull;
typedef double ld;
typedef vector < long long > vll;
typedef pair <long long, long long> pll;
typedef pair <int, int> pii;
typedef vector < int > vii;
typedef complex < double > Point;

#define csl ios_base::sync_with_stdio(false); cin.tie(NULL)
#define mp make_pair
#define fst first
#define snd second
#define prev PREV
ll t, n, m, u, v, q, r, ql, qr, k, l, s, w, z, x, y;
const int N = 2e5 + 500;
const int LN = 20;
const long long mod = 1e9 + 7;
const long long INF = 1LL << 52LL;
int t1[N << 1], t2[N << 1], tin[N], tout[N], H = 0, L[N][LN], D[N];
vii adj[N];
int query(int tree[], int x) {
    int ret = 0;
    while (x > 0) {
        ret += (tree[x]);
        x -= (x & -x);
    }
    return ret;
}
void modify(int tree[], int x, int v) {
    if (!x) return;
    while (x < (N << 1)) {
        tree[x] += v;
        x += (x & -x);
    }
}
void dfs(int v, int p, int d) {
    tin[v] = ++H;
    L[v][0] = p;
    D[v] = d;
    for (int i = 1; i < LN; ++i) {
        L[v][i] = L[L[v][i - 1]][i - 1];
    }
    for (int u : adj[v]) {
        if (u == p) continue;
        dfs(u, v, d + 1);
    }
    tout[v] = ++H;
}
int lca(int u, int v) {
    if (D[v] > D[u]) swap(u, v);
    int diff = D[u] - D[v];
    for (int i = 0; i < LN; ++i) {
        if (diff & (1 << i))
            u = L[u][i];
    }
    if (u == v) return u;
    for (int i = LN - 1; i >= 0; --i) {
        if (L[u][i] != L[v][i]) {
            u = L[u][i];
            v = L[v][i];
        }
    }
    return L[u][0];
}

int main() {
    csl;
    cin >> n;
    for (int i = 0; i < n - 1; ++i) {
        cin >> u >> v;
        adj[u].push_back(v);
        adj[v].push_back(u);
    }
    dfs(1, 0, 0);
    cin >> q;
    while (q--) {
        cin >> u >> v;
        int lc = lca(u, v);
        ll sol = query(t1, tout[lc]) - query(t1, tin[lc] - 1);
        sol += query(t2, tin[u]) + query(t2, tin[v]) - query(t2, tin[lc]) - (L[lc][0] ? query(t2, tin[L[lc][0]]) : 0);
        cout << sol << '\n';
        modify(t1, tin[u], 1);
        modify(t1, tin[v], 1);
        modify(t1, tin[lc], -2);
        modify(t2, tin[lc], 1);
        modify(t2, tout[lc], -1);
    }
    return 0;
}






