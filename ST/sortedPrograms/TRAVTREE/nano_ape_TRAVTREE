#include <cstdio>
#include <algorithm>
#include <cmath>
#include <map>
#include <cstring>

#define rep(i, l, r) for(int i=l; i<=r; i++)
#define dow(i, l, r) for(int i=l; i>=r; i--)
#define clr(x, c) memset(x, c, sizeof(x))
#define travel(x) for(edge *p=fir[x]; p; p=p->n)
#define l(x) Left[x]
#define r(x) Right[x]
#define lowbit(x) (x&-x)

using namespace std;

typedef long long ll;
typedef pair<int,int> Pii;

inline int read()
{
	int x=0; bool f=0; char ch=getchar();
	while (ch<'0' || '9'<ch) f|=ch=='-', ch=getchar();
	while ('0'<=ch && ch<='9') x=x*10+ch-'0', ch=getchar();
	return f?-x:x;
}

#define maxn 200009
#define maxc 400009
#define maxm 400009

struct edge{int y; edge *n;} e[maxm], *fir[maxn], *pt=e;
inline void AddE(int x, int y){pt->y=y, pt->n=fir[x], fir[x]=pt++;}

int n, m, sz[maxn], h[maxn], d[maxn], B[maxn], pos[maxn], tot;
int rt, cn, Left[maxc], Right[maxc], sum[maxc], ad[maxc];

void dfs(int x)
{
	sz[x]=1;
	travel(x) if (p->y!=h[x]) h[p->y]=x, d[p->y]=d[x]+1, dfs(p->y), sz[x]+=sz[p->y];
}

void dfs(int x, int L)
{
	pos[x]=++tot; B[x]=L;
	int k=0; travel(x) if (p->y!=h[x] && sz[p->y]>sz[k]) k=p->y;
	if (k) dfs(k,L);
	travel(x) if (p->y!=h[x] && p->y!=k) dfs(p->y,p->y);
}

void Build(int l, int r, int &t)
{
	t=++cn; if (l==r) return;
	int mid=(l+r)>>1;
	Build(l,mid,l(t)), Build(mid+1,r,r(t));
}

int Que1(int l, int r, int x, int y, int t)
{
	if (x<=l && r<=y) return ad[t]++, sum[t];
	int mid=(l+r)>>1;
	return (x<=mid?Que1(l,mid,x,y,l(t)):0)+(mid<y?Que1(mid+1,r,x,y,r(t)):0);
}

inline int Que2(int x)
{
	int l=1, r=n, t=rt, v=0, mid; while (l<r)
	{
		sum[t]++, v+=ad[t];
		if (x<=(mid=(l+r)>>1)) t=l(t),r=mid; else t=r(t),l=mid+1;
	}
	v+=ad[t], ad[t]++, sum[t]++; return v;
}

int main()
{
	n=read();
	rep(i, 2, n) {int x=read(), y=read(); AddE(x,y); AddE(y,x);}
	dfs(1); dfs(1,1); Build(1,n,rt);
	m=read(); while (m--)
	{
		int x=read(), y=read(), A=0;
		while (B[x]!=B[y])
		{
			if (d[B[x]]<d[B[y]]) swap(x,y);
			A+=Que1(1,n,pos[B[x]],pos[x],rt), x=h[B[x]];
		}
		if (d[x]<d[y]) swap(x,y);
		if (x!=y) A+=Que1(1,n,pos[y]+1,pos[x],rt);
		A+=Que2(pos[y]);
		printf("%d\n", A);
	}
	return 0;
}
