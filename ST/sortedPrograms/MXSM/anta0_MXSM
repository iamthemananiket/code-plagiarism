#include <string>
#include <vector>
#include <algorithm>
#include <numeric>
#include <set>
#include <map>
#include <queue>
#include <iostream>
#include <sstream>
#include <cstdio>
#include <cmath>
#include <ctime>
#include <cstring>
#include <cctype>
#include <cassert>
#include <limits>
#include <functional>
#define rep(i,n) for(int (i)=0;(i)<(int)(n);++(i))
#define rer(i,l,u) for(int (i)=(int)(l);(i)<=(int)(u);++(i))
#define reu(i,l,u) for(int (i)=(int)(l);(i)<(int)(u);++(i))
#if defined(_MSC_VER) || __cplusplus > 199711L
#define aut(r,v) auto r = (v)
#else
#define aut(r,v) __typeof(v) r = (v)
#endif
#define each(it,o) for(aut(it, (o).begin()); it != (o).end(); ++ it)
#define all(o) (o).begin(), (o).end()
#define pb(x) push_back(x)
#define mp(x,y) make_pair((x),(y))
#define mset(m,v) memset(m,v,sizeof(m))
#define INF 0x3f3f3f3f
#define INFL 0x3f3f3f3f3f3f3f3fLL
using namespace std;
typedef vector<int> vi; typedef pair<int, int> pii; typedef vector<pair<int, int> > vpii; typedef long long ll;
template<typename T, typename U> inline void amin(T &x, U y) { if(y < x) x = y; }
template<typename T, typename U> inline void amax(T &x, U y) { if(x < y) x = y; }


template<int MOD>
struct ModInt {
	static const int Mod = MOD;
	unsigned x;
	ModInt() : x(0) {}
	ModInt(signed sig) { int sigt = sig % MOD; if(sigt < 0) sigt += MOD; x = sigt; }
	ModInt(signed long long sig) { int sigt = sig % MOD; if(sigt < 0) sigt += MOD; x = sigt; }
	int get() const { return (int)x; }

	ModInt &operator+=(ModInt that) { if((x += that.x) >= MOD) x -= MOD; return *this; }
	ModInt &operator-=(ModInt that) { if((x += MOD - that.x) >= MOD) x -= MOD; return *this; }
	ModInt &operator*=(ModInt that) { x = (unsigned long long)x * that.x % MOD; return *this; }

	ModInt operator+(ModInt that) const { return ModInt(*this) += that; }
	ModInt operator-(ModInt that) const { return ModInt(*this) -= that; }
	ModInt operator*(ModInt that) const { return ModInt(*this) *= that; }
};
typedef ModInt<1000000007> mint;

int main() {
	int T;
	scanf("%d", &T);
	for(int ii = 0; ii < T; ++ ii) {
		int N;
		scanf("%d", &N);
		ll maxi = 1, mini = 1;
		mint maxicnt = 1, minicnt = 1;
		mint nonzerocnt = 1, totalcnt = 1;
		vector<vi> As(N);
		rep(i, N) {
			int S;
			scanf("%d", &S);
			vi A(S);
			rep(j, S) {
				int x;
				scanf("%d", &x);
				A[j] = x;
			}
			As[i] = A;
			const int Base = 81;
			int cnt[81 * 2 + 1] = {};
			rep(j, S) {
				int sum = 0;
				rer(k, j + 1, S) {
					sum += A[k - 1];
					++ cnt[sum + Base];
				}
			}
			ll nmaxi = -INFL;
			ll nmini = INFL;
			rer(s, -Base, Base) if(cnt[Base + s] > 0) {
				amax(nmaxi, maxi * s);
				amax(nmaxi, mini * s);
				amin(nmini, maxi * s);
				amin(nmini, mini * s);
			}
			mint nmaxicnt, nminicnt, nonzeros;
			rer(s, -Base, Base) if(cnt[Base + s] > 0) {
				if(s != 0)
					nonzeros += cnt[Base + s];
				if(nmaxi == maxi * s)
					nmaxicnt += maxicnt * cnt[Base + s];
				if(nmaxi == mini * s && maxi != mini)
					nmaxicnt += minicnt * cnt[Base + s];
				if(nmini == maxi * s)
					nminicnt += maxicnt * cnt[Base + s];
				if(nmini == mini * s && maxi != mini)
					nminicnt += minicnt * cnt[Base + s];
			}
			maxi = nmaxi, mini = nmini;
			maxicnt = nmaxicnt, minicnt = nminicnt;
			nonzerocnt *= nonzeros;
			totalcnt *= S * (S + 1) / 2;
		}
		if(maxi == 0)
			maxicnt = totalcnt - nonzerocnt;
		printf("%lld %d\n", maxi, maxicnt.get());
	}
	return 0;
}
