#include<iostream>
#include<algorithm>
#include<cstdio>
#include<cmath>
#include<string>
#include<cstring>
#include<vector>
#include<set>
#include<iomanip>
#include<queue>
#include<map>
#include<bitset>
#include<list>
#include<stack>
#define fl(i,s,n) for(i=s;i<n;i++)
#define flr(i,s,n) for(i=s;i>n;i--)
#define ls(i,s) for(i=0;s[i]!='\0';i++)
#define gi(x) scanf("%lld",&x)
#define pi(x) printf("%d",x)
#define checkline(x) while(x!='\0' && x!='\n')
#define pt(s) printf(s)
#define PI acos(-1)
#define f_in freopen("input.txt","r",stdin)
#define f_out freopen("output.txt","w",stdout)
#define in(i,j,k) ((j<=i) && (i<k))
#define ld long double
#define sd(x) scanf("%d",&x)
#define sd2(x,y) scanf("%d%d",&x,&y)
#define sd3(x,y,z) scanf("%d%d%d",&x,&y,&z)
#define fi first
#define se second
#define pb(x) push_back(x)
#define mp(x,y) make_pair(x,y)
#define r0 return 0
#define mod 1000000007
#define FS ios_base::sync_with_stdio(false); cin.tie(NULL); cout.tie(NULL);
#define lli long long int
using namespace std;
bool Bipartiate;
void dfs(int vertex,int color,int *mark,int ** graph,int n)
{
    mark[vertex] = color;
    int i;
    fl(i,0,n)
        if((i!=vertex) && (graph[vertex][i]==1))
        {
            if(mark[i] == color)
                Bipartiate = false;
            else if (mark[i] == 0)
                dfs(i,(color==1)?2:1,mark,graph,n);
        }
}
int prog()
{
    lli i,j,k,n,m,x,y;
    gi(n);gi(m);
    int ** graph;
    graph = new int *[n];
    fl(i,0,n)
        graph[i] = new int [n];
    fl(i,0,n)
        fl(j,0,n)
            graph[i][j] = 1;
    fl(i,0,m)
    {
        gi(x);gi(y);
        x--;y--;
        graph[x][y]=0;
        graph[y][x]=0;
    }
    Bipartiate =  true;
    int * mark = new int [n];
    fl(i,0,n)
        mark[i] = 0;
    fl(i,0,n)
        if(mark[i]==0)
            dfs(i,1,mark,graph,n);
    if(Bipartiate)
        cout<<"YES\n";
    else
        cout<<"NO\n";
    r0;
}
int main()
{
    //f_in;
    int t;
    sd(t);
    while(t--)
        {
            prog();
        }
    r0;
}
