#include <bits/stdc++.h>
using namespace std;

#define REPU(i, a, b) for (int i = (a); i < (b); ++i)
#define REPD(i, a, b) for (int i = (a); i > (b); --i)
#define MEM(a, x) memset(a, x, sizeof(a))
#define ALL(a) a.begin(), a.end()
#define UNIQUE(a) a.erase(unique(ALL(a)), a.end())

typedef long long ll;
const int MOD = 1000000007;

template<class T> inline T tmin(T a, T b) { return (a < b) ? a : b; }
template<class T> inline T tmax(T a, T b) { return (a > b) ? a : b; }
template<class T> inline void amax(T &a, T b) { if (b > a) a = b; }
template<class T> inline void amin(T &a, T b) { if (b < a) a = b; }
template<class T> inline T tabs(T a) { return (a > 0) ? a : -a; }
template<class T> T gcd(T a, T b) { while (b != 0) { T c = a; a = b; b = c % b; } return a; }

const int N = 1001;
int gr[N], d[N], f[N][N];
vector<int> G[3];

int main(int argc, char *argv[]) {
	ios_base::sync_with_stdio(false);

	int T, n, m, a, b;

	cin >> T;
	while (T--) {
		cin >> n >> m;
		fill(d, d + n, 0);
		REPU(i, 0, n) fill(f[i], f[i] + n, 0);
		REPU(_, 0, m) {
			cin >> a >> b; --a, --b;
			f[a][b] = f[b][a] = 1;
			d[a]++, d[b]++;
		}
		if (n <= 2) {
			puts("YES"); continue;
		}
		G[1].clear(); G[2].clear();
		fill(gr, gr + n, 0);
		queue<int> que;
		while (G[1].size() + G[2].size() < n) {
			int ra = -1, rb = -1, rem = n - G[1].size() - G[2].size();
			REPU(i, 0, n) {
				if (!gr[i] && d[i] != rem - 1) {
					ra = i; break;
				}
			}
			if (ra == -1) break;
			REPU(i, 0, n) if (i != ra && !gr[i] && !f[ra][i]) {
				rb = i; break;
			}
			G[1].push_back(ra); G[2].push_back(rb);
			gr[ra] = 1, gr[rb] = 2;
			que.push(ra); que.push(rb);
			while (!que.empty()) {
				int v = que.front(); que.pop();
				REPU(i, 0, n) {
					if (!gr[i] && !f[v][i]) {
						gr[i] = 3 - gr[v];
						G[gr[i]].push_back(i);
						que.push(i);
					}
					else if (f[v][i]) {
						d[i]--;
					}
				}
			}
		}
		bool bad(false);
		REPU(i, 1, 3) {
			for (int u : G[i]) for (int v : G[i]) {
				if (u != v && !f[u][v]) {
					bad = true;
				}
			}
		}
		puts(bad ? "NO" : "YES");
	}

	return 0;
}
