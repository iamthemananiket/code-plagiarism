#include <bits/stdc++.h>
using namespace std;

int find(string& s, string& sub) {
	int on = 0;
	for (int i=0;i<s.size();i++) {
		if (s[i]==sub[on]) on+=1;
		if (on==sub.size()) return i;
	}
	return -1;
}

int n,k;
string A,B;
int dp[1013][1013];
long long D[1013][1013];

int main() {
	cin >> n >> k >> A >> B;
	for (int i=n-1;i>=0;i--) for (int j=n-1;j>=0;j--) {
		if (A[i]==B[j]) dp[i][j] = 1+dp[i+1][j+1];
		else dp[i][j] = max(dp[i+1][j],dp[i][j+1]);
	}
	for (int i=n;i>=0;i--) for (int j=n;j>=0;j--) {
		if (i==n || j==n) D[i][j] = 1;
		else {
			if (A[i]==B[j]) D[i][j] = D[i+1][j+1];
			else {
				if (dp[i+1][j]==dp[i][j]) D[i][j]+=D[i+1][j];
				if (dp[i][j+1]==dp[i][j]) D[i][j]+=D[i][j+1];
				if (dp[i+1][j+1]==dp[i][j]) D[i][j]-=D[i+1][j+1];
				if (D[i][j]>1e17) D[i][j] = 1e17;
			}
		}
	}
	if (D[0][0]<k) return printf("-1\n"), 0;
	string cur = "";
	for (int i=0;i<dp[0][0];i++) {
		for (char f='a';f<='z';f++) {
			int ca = find(A,cur);
			int cb = find(B,cur);
			cur.push_back(f);
			int a = find(A,cur);
			int b = find(B,cur);
			int lim = (i==0) ? 0 : 1;
			if (a==-1 || b==-1 || dp[a][b]<dp[ca][cb]-lim) {
				cur.pop_back();
				continue;
			}
			long long has = D[a+1][b+1];
			if (has>=k) break;
			k-=has;
			cur.pop_back();
		}
	}
	cout << cur;

	return 0;
}
