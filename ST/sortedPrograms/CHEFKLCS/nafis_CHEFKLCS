/*********************************************************************\
   |--\        ---       /\        |-----------| -----   /-------|    |
   |   \        |       /  \       |               |    /             |
   |    \       |      /    \      |               |   |              |
   |     \      |     /      \     |               |   |----|         |
   |      \     |    / ------ \    |-------|       |        |-----|   |
   |       \    |   /          \   |               |              |   |
   |        \   |  /            \  |               |              /   |
  ---        -------            ------           ----- |---------/    |
                                                                      |
    codeforces = nfssdq  ||  topcoder = nafis007                      |
    mail = nafis_sadique@yahoo.com || nfssdq@gmail.com                |
    IIT,Jahangirnagar University(41)                                  |
                                                                      |
**********************************************************************/

#include <bits/stdc++.h>

using namespace std;

#define xx         first
#define yy         second
#define pb         push_back
#define mp         make_pair
#define LL         long long
#define inf        INT_MAX/3
#define mod        1000000007ll
#define PI         acos(-1.0)
#define linf       (1ll<<60)-1
#define FOR(I,A,B) for(int I = (A); I < (B); ++I)
#define REP(I,N)   FOR(I,0,N)
#define ALL(A)     ((A).begin(), (A).end())
#define set0(ar)   memset(ar,0,sizeof ar)
#define vsort(v)   sort(v.begin(),v.end())
#define setinf(ar) memset(ar,126,sizeof ar)

//cout << fixed << setprecision(20) << p << endl;

template <class T> inline T bigmod(T p,T e,T M){
    LL ret = 1;
    for(; e > 0; e >>= 1){
        if(e & 1) ret = (ret * p) % M;
        p = (p * p) % M;
    } return (T)ret;
}
template <class T> inline T gcd(T a,T b){if(b==0)return a;return gcd(b,a%b);}
template <class T> inline T modinverse(T a,T M){return bigmod(a,M-2,M);}


int nxt[2][1011][30], n, m;
string s1, s2;
int dp[1011][1011], dp1[1011][1011];
//int go(int l, int r){
//    if(l >= n || r >= n) return 0;
//    int &ret = dp[l][r];
//    if(ret != -1) return ret;
//    ret = 0;
//    if(s1[l] == s2[r]) ret = max(ret, 1 + go(l + 1, r + 1));
//    ret = max(ret, go(l+1, r));
//    ret = max(ret, go(l, r+1));
//
//    return ret;
//}
//int go1(int l, int r){
//    if(l >= n || r >= n) return 1;
//    if(go(l, r) == 0) return 1;
//    int &ret = dp1[l][r];
//    if(ret != -1) return ret;
//    ret = 0;
//
//    REP(i, 26){
//        if(nxt[0][l][i] >= n || nxt[1][r][i] >= n) continue;
//        if(1 + go(nxt[0][l][i]+1, nxt[1][r][i]+1) == dp[l][r]) {
//            ret += go1(nxt[0][l][i]+1, nxt[1][r][i]+1);
//            if(ret >= m) ret = m;
//        }
//    }
//
//    return ret;
//}
//void print(int l, int r, int lft){
//    if(l >= n || r >= n) return;
//    if(dp[l][r] == 0) return;
//    int ret = 0;
//    REP(i, 26){
//        if(nxt[0][l][i] >= n || nxt[1][r][i] >= n) continue;
//        if(1 + dp[nxt[0][l][i]+1][nxt[1][r][i]+1] == dp[l][r]) {
//            ret = dp1[nxt[0][l][i]+1][nxt[1][r][i]+1];
//            if(ret >= lft) {
//                cout << (char)('a'+i);
//                print(nxt[0][l][i]+1, nxt[1][r][i]+1, lft);
//                return;
//            }
//            lft -= ret;
//        }
//    }
//}

int main() {
    ios_base::sync_with_stdio(0); cin.tie(0);
    cin >> n >> m;
    cin >> s1 >> s2;
    REP(i, 26){
        int last = n;
        nxt[0][n][i] = n;
        for(int j = n-1; j >= 0; j--){
            if(s1[j]-'a' == i) last = j;
            nxt[0][j][i] = last;
        }
        last = n;
        nxt[1][n][i] = n;
        for(int j = n - 1; j >= 0; j--){
            if(s2[j]-'a' == i) last = j;
            nxt[1][j][i] = last;
        }
    }

    for(int i = n-1; i >= 0; i--){
        for(int j = n-1; j >= 0; j--){
            if(s1[i] == s2[j]) dp[i][j] = 1 + dp[i+1][j+1];
            else dp[i][j] = max(dp[i+1][j], dp[i][j+1]);
        }
    }
    REP(i, n+1) dp1[n][i] = dp1[i][n] = 1;
    for(int i = n-1; i >= 0; i--){
        for(int j = n-1; j >= 0; j--){
            if(dp[i][j] == 0){
                dp1[i][j] = 1;
                continue;
            }
            REP(k, 26){
                if(nxt[0][i][k] >= n || nxt[1][j][k] >= n) continue;
                if(1 + dp[nxt[0][i][k]+1][nxt[1][j][k]+1] == dp[i][j]) {
                    dp1[i][j] += dp1[nxt[0][i][k]+1][nxt[1][j][k]+1];
                    if(dp1[i][j] >= m) dp1[i][j] = m;
                }
            }
        }
    }


    if(dp1[0][0] < m){
        cout << -1 << endl;
        return 0;
    }
    int l = 0, r = 0;
    while(l < n && r < n){
        if(dp[l][r] == 0) break;
        int ret = 0;
        REP(i, 26){
            if(nxt[0][l][i] >= n || nxt[1][r][i] >= n) continue;
            if(1 + dp[nxt[0][l][i]+1][nxt[1][r][i]+1] == dp[l][r]) {
                ret = dp1[nxt[0][l][i]+1][nxt[1][r][i]+1];
                if(ret >= m) {
                    cout << (char)('a'+i);
                    l = nxt[0][l][i]+1; r = nxt[1][r][i]+1;
                    break;
                }
                m -= ret;
            }
        }
    }

    cout << endl;
}
