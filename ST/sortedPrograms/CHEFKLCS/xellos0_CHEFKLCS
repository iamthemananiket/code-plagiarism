#include <bits/stdc++.h>
// iostream is too mainstream
#include <cstdio>
// bitch please
#include <iostream>
#include <algorithm>
#include <cstdlib>
#include <vector>
#include <set>
#include <map>
#include <queue>
#include <stack>
#include <list>
#include <cmath>
#include <iomanip>
#include <time.h>
#define dibs reserve
#define OVER9000 1234567890
#define ALL_THE(CAKE,LIE) for(auto LIE =CAKE.begin(); LIE != CAKE.end(); LIE++)
#define tisic 47
#define soclose 1e-8
#define chocolate win
// so much chocolate
#define patkan 9
#define ff first
#define ss second
#define abs(x) ((x < 0)?-(x):x)
#define uint unsigned int
#define dbl long double
#define pi 3.14159265358979323846
using namespace std;
// mylittledoge

#ifdef DONLINE_JUDGE
	// palindromic tree is better than splay tree!
	#define lld I64d
#endif

int main() {
	cin.sync_with_stdio(0);
	cin.tie(0);
	cout << fixed << setprecision(10);
	int N,K;
	string S[2];
	cin >> N >> K >> S[0] >> S[1];

	vector<int> nxt[2][26];
	for(int i =0; i < 2; i++) {
		for(int j =0; j < 26; j++) nxt[i][j].resize(N+1,N);
		for(int j =0; j < N; j++) nxt[i][S[i][j]-'a'][j] =j;
		for(int j =0; j < 26; j++) 
			for(int k =N-1; k >= 0; k--) 
				if(nxt[i][j][k] == N) nxt[i][j][k] =nxt[i][j][k+1];
		}

	vector< vector<int> > poc(N,vector<int>(N,0)), len(N,vector<int>(N,0));
	int L =0;
	for(int i =N-1; i >= 0; i--) for(int j =N-1; j >= 0; j--) {
		if(S[0][i] != S[1][j]) continue;
		len[i][j]++;
		for(int k =0; k < 26; k++) if(nxt[0][k][i+1] != N && nxt[1][k][j+1] != N)
			len[i][j] =max(len[i][j],1+len[nxt[0][k][i+1]][nxt[1][k][j+1]]);
		L =max(L,len[i][j]);
		if(len[i][j] == 1) poc[i][j] =1;
		for(int k =0; k < 26; k++) if(nxt[0][k][i+1] != N && nxt[1][k][j+1] != N)
			if(len[i][j] == 1+len[nxt[0][k][i+1]][nxt[1][k][j+1]]) 
				poc[i][j] =min(K+1,poc[i][j]+poc[nxt[0][k][i+1]][nxt[1][k][j+1]]);
		}

	string ans;
	int cur[2] ={0,0};
	for(int i =0; i < L; i++) for(int k =0; k < 26; k++) {
		if(nxt[0][k][cur[0]] == N || nxt[1][k][cur[1]] == N) {
			if(k == 25) {cout << "-1\n"; return 0;}
			continue;}
		if(len[nxt[0][k][cur[0]]][nxt[1][k][cur[1]]] != L-i) {
			if(k == 25) {cout << "-1\n"; return 0;}
			continue;}
		if(poc[nxt[0][k][cur[0]]][nxt[1][k][cur[1]]] < K) {
			K -=poc[nxt[0][k][cur[0]]][nxt[1][k][cur[1]]];
			if(k == 25) {cout << "-1\n"; return 0;}
			continue;}
		ans +=('a'+k);
		cur[0] =nxt[0][k][cur[0]]+1;
		cur[1] =nxt[1][k][cur[1]]+1;
		break;}

	if(K > 1 || L == 0 || (int)ans.length() != L) cout << "-1\n";
	else cout << ans << "\n";
	return 0;}

// look at my code
// my code is amazing
