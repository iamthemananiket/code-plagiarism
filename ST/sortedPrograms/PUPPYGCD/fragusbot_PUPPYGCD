#include <bits/stdc++.h>

using namespace std;
 
const int N = 1e5 + 100;

int sieve[N];
int cnt[N];
int d[N];
int w[N];
 
long long calc(int n) {
  return 1LL * n * (n - 1) / 2;
}

int get(int x) {
  if (x == 1) {
    return -1;
  }
  int ret = 0;
  while (x > 1) {
    int p = sieve[x], k = 0;
    while (x % p == 0) {
      x /= p;
      k += 1;
    }
    if (k > 1) {
      return -1;
    }
    ++ret;
  }
  return ret;
}

int main() {
  // freopen("in", "r", stdin); freopen("out", "w", stdout);
  for (int i = 0; i < N; ++i) {
    sieve[i] = i;
  }
  for (int i = 2; i * i < N; ++i) {
    if (sieve[i] == i) {
      for (int j = i * i; j < N; j += i) {
        sieve[j] = i;
      }
    }
  }
  for (int i = 1; i < N; ++i) {
    w[i] = get(i);
  }
  int tt;
  scanf("%d", &tt);
  while (tt--) {
    int n, m;
    scanf("%d %d", &n, &m);
    for (int i = 1; i <= n; ++i) {
      cnt[i] = 0;
    }
    int nn = 0;
    for (int i = 1; i <= n; ++i) {
      if (i % m == 0) {
        ++cnt[i / m];
        ++nn;
      }
    }
    for (int i = 1; i <= n; ++i) {
      d[i] = 0;
      for (int j = i; j <= n; j += i) {
        d[i] += cnt[j];
      }
    }
    long long ans = 0;
    for (int i = 1; i <= n; ++i) {
      if (w[i] != -1) {
        long long delta = calc(d[i]);
        if (w[i] % 2 == 1) {
          ans += delta;
        } else {
          ans -= delta;
        }
      }
    }
    ans = 1LL * nn * (nn - 1) / 2 - ans;
    ans += (m <= n);
    printf("%lld\n", ans);
  }
  return 0;
}